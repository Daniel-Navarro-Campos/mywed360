import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Card, Input, Button } from '../components/ui';
import {
  ChevronDownIcon,
  ChevronUpIcon,
  CheckCircleIcon,
  ClockIcon,
  PlusCircleIcon, 
  TagIcon,
  BellIcon,
  ExclamationCircleIcon,
  PaperclipIcon,
  XIcon
} from '../components/ui/icons';

import { 
  initEmailService, 
  getMails, 
  sendMail, 
  deleteMail, 
  createEmailAlias,
  markAsRead
} from '../services/EmailService';

import { 
  loadData, 
  saveData 
} from '../services/StorageService';

import {
  createTrackingRecord,
  updateTrackingStatus,
  loadTrackingRecords,
  updateTrackingWithResponse,
  updateTrackingTags,
  deleteTrackingRecord,
  TRACKING_STATUS,
  EMAIL_TAGS
} from '../services/EmailTrackingService';

import { getTemplateOptions, applyTemplate } from '../services/emailTemplates';

export default function Buzon() {
  const [folder, setFolder] = useState('inbox');
  const [search, setSearch] = useState('');
  const [mails, setMails] = useState([]);
  const [selected, setSelected] = useState(null);
  const [composeOpen, setComposeOpen] = useState(false);
  const [form, setForm] = useState({ to: '', subject: '', body: '', attachments: [] });
  const [userEmail, setUserEmail] = useState(null);
  const [showEmailConfig, setShowEmailConfig] = useState(false);
  const [emailAlias, setEmailAlias] = useState('');
  const [aliasStatus, setAliasStatus] = useState({ loading: false, error: null, success: false });
  const [serviceStatus, setServiceStatus] = useState({ initialized: false, error: null });

  const [profile, setProfile] = useState(null);

  const [templates, setTemplates] = useState([]);
  const [selectedTemplate, setSelectedTemplate] = useState('');

  const fileInputRef = useRef(null);

  const [trackingRecords, setTrackingRecords] = useState([]);
  const [trackingSelected, setTrackingSelected] = useState(null);
  const [statusFilter, setStatusFilter] = useState('');
  const [sortOrder, setSortOrder] = useState('priority');
  const [showTrackingEditModal, setShowTrackingEditModal] = useState(false);
  const [trackingForm, setTrackingForm] = useState({
    status: '',
    dueDate: '',
    notes: '',
    tags: []
  });

  const [providers, setProviders] = useState([]);

  useEffect(() => {
    async function loadProfile() {
      try {
        const userProfile = await loadData('lovendaProfile', {});
        setProfile(userProfile);
        
        const storedProviders = await loadData('providers', { defaultValue: [] });
        setProviders(storedProviders);
        
        const email = initEmailService(userProfile);
        setUserEmail(email);
        setServiceStatus({ initialized: true, error: null });
        
        if (userProfile.emailAlias) {
          setEmailAlias(userProfile.emailAlias);
        }
        
        const tracking = loadTrackingRecords();
        setTrackingRecords(tracking);
        
        console.log('Servicio de correo inicializado:', email);
      } catch (error) {
        console.error('Error al inicializar el servicio de correo:', error);
        setServiceStatus({ initialized: false, error: error.message });
      }
    }
    
    loadProfile();
  }, []);

  const refresh = useCallback(async () => {
    if (!serviceStatus.initialized) {
      console.log('El servicio de correo aún no está inicializado');
      return;
    }
    
    try {
      const data = await getMails(folder);
      setMails(data);
      
      if (folder === 'inbox') {
        const unreadMails = data.filter(mail => !mail.read);
        
        if (unreadMails.length > 0 && providers.length > 0) {
          const updatedProviders = [...providers]; 
          let providersNeedUpdate = false;
          
          for (const mail of unreadMails) {
            const fromEmail = mail.from?.toLowerCase() || '';
            const mailSubject = mail.subject?.toLowerCase() || '';
            
            const matchingProviderIndex = updatedProviders.findIndex(p => 
              (p.email && fromEmail.includes(p.email.toLowerCase())) || 
              (p.name && fromEmail.includes(p.name.toLowerCase())) || 
              (p.name && mailSubject.includes(p.name.toLowerCase()))
            );
            
            if (matchingProviderIndex !== -1) {
              const matchingProvider = updatedProviders[matchingProviderIndex];
              const updated = updateTrackingWithResponse(mail);
              
              if (!matchingProvider.lastContactDate || 
                  new Date(mail.date) > new Date(matchingProvider.lastContactDate)) {
                
                const newStatus = matchingProvider.status === 'Contactado' ? 
                  'En seguimiento' : matchingProvider.status;
                
                const newCommunication = {
                  date: mail.date || new Date().toISOString(),
                  type: 'Email recibido',
                  subject: mail.subject || '(Sin asunto)',
                  content: mail.body?.substring(0, 100) + (mail.body?.length > 100 ? '...' : '') || '',
                  emailId: mail.id
                };
                
                updatedProviders[matchingProviderIndex] = {
                  ...matchingProvider,
                  status: newStatus,
                  lastContactDate: mail.date || new Date().toISOString(),
                  communications: matchingProvider.communications ? 
                    [...matchingProvider.communications, newCommunication] : 
                    [newCommunication]
                };
                
                providersNeedUpdate = true;
                console.log(`Proveedor ${matchingProvider.name} actualizado con respuesta recibida`);
                
                try {
                  import('../services/NotificationService').then(NotificationService => {
                    NotificationService.addNotification({
                      type: 'info',
                      message: `Respuesta recibida de ${matchingProvider.name}`,
                      providerId: matchingProvider.id,
                      action: 'viewProvider'
                    });
                  }).catch(err => console.error('Error al crear notificación:', err));
                } catch (error) {
                  console.error('Error al importar servicio de notificaciones:', error);
                }
              }
              
              if (updated) {
                console.log('Registro de seguimiento actualizado para:', matchingProvider.name);
                const updatedRecords = loadTrackingRecords();
                setTrackingRecords(updatedRecords);
              }
            }
          }
          
          if (providersNeedUpdate) {
            setProviders(updatedProviders);
            saveData('providers', updatedProviders);
          }
        }
      }
    } catch (e) {
      console.error('Error al obtener correos', e);
    }
  }, [folder, serviceStatus.initialized, providers]);

  useEffect(() => {
    try {
      const templateOptions = getTemplateOptions();
      setTemplates(templateOptions);
    } catch (error) {
      console.error('Error al cargar plantillas de correo:', error);
    }
  }, []);

  useEffect(()=>{
    const handler = (e)=>{
      const { to='', subject='', body='', templateKey='' } = e.detail||{};
      setForm({ to, subject, body, attachments: [] });
      if (templateKey) {
        setSelectedTemplate(templateKey);
      }
      setComposeOpen(true);
    };
    window.addEventListener('lovenda-compose', handler);
    return ()=> window.removeEventListener('lovenda-compose', handler);
  },[]);

  useEffect(()=>{
    const id = setInterval(()=> refresh(), 30000);
    return ()=> clearInterval(id);
  },[refresh]);

  useEffect(() => {
    refresh();
  }, [folder, refresh]);

  const openMail = (mail) => {
    setSelected(mail);
    if (!mail.read) {
      (async () => {
        try {
          await markAsRead(mail.id);
          refresh();
        } catch (e) {
          console.error(e);
        }
      })();
    }
  };

  const handleCreateAlias = async () => {
    if (!emailAlias || emailAlias.length < 3) {
      setAliasStatus({ loading: false, error: "El alias debe tener al menos 3 caracteres", success: false });
      return;
    }
    
    setAliasStatus({ loading: true, error: null, success: false });
    
    try {
      const result = await createEmailAlias(profile, emailAlias);
      
      const updatedProfile = {...profile, emailAlias: result.alias};
      await saveData('lovendaProfile', updatedProfile);
      setProfile(updatedProfile);
      setUserEmail(result.email);
      
      setAliasStatus({ loading: false, error: null, success: true });
      
      setTimeout(() => {
        setShowEmailConfig(false);
        setAliasStatus({ loading: false, error: null, success: false });
      }, 2000);
      
    } catch (error) {
      console.error('Error al crear alias de correo:', error);
      setAliasStatus({ loading: false, error: error.message, success: false });
    }
  };
  
  const handleAddAttachment = (event) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;
    
    const newAttachments = [...form.attachments];
    
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      if (file.size > 10 * 1024 * 1024) {
        alert(`El archivo ${file.name} excede el tamaño máximo permitido de 10MB`);
        continue;
      }
      
      newAttachments.push({
        id: crypto.randomUUID ? crypto.randomUUID() : Math.random().toString(36).substring(2),
        file: file,
        filename: file.name,
        size: file.size
      });
    }
    
    setForm({...form, attachments: newAttachments});
    if (fileInputRef.current) fileInputRef.current.value = "";
  };
  
  const removeAttachment = (attachmentId) => {
    setForm({
      ...form, 
      attachments: form.attachments.filter(att => att.id !== attachmentId)
    });
  };

  const handleSend = async () => {
    if (!form.to || !form.subject) {
      alert("Por favor completa los campos de destinatario y asunto");
      return;
    }
    
    if (!userEmail) {
      alert("Tu cuenta de correo aún no está configurada. Por favor configura un alias de correo primero.");
      setShowEmailConfig(true);
      return;
    }
    
    try {
      const sentEmail = await sendMail(form);
      
      const toEmail = form.to.toLowerCase();
      const matchingProvider = providers.find(p => 
        p.email && toEmail.includes(p.email.toLowerCase())
      );
      
      if (matchingProvider) {
        const trackingRecord = createTrackingRecord(sentEmail, matchingProvider);
        
        const updatedRecords = loadTrackingRecords();
        setTrackingRecords(updatedRecords);
        
        console.log('Seguimiento creado para correo a proveedor:', matchingProvider.name);
      }
      
      setComposeOpen(false);
      setForm({ to: '', subject: '', body: '', attachments: [] });
      if (folder === 'sent') refresh();
    } catch (e) {
      console.error('Error al enviar correo:', e);
      alert(`Error al enviar correo: ${e.message || 'Intenta nuevamente más tarde'}`);
    }
};

return (
  <div className="container mx-auto p-4">
    {!serviceStatus.initialized ? (
      <Card className="p-4 mb-4">
        <div className="text-center py-4">
          {serviceStatus.error ? (
            <div>
              <ExclamationCircleIcon className="h-12 w-12 text-red-500 mx-auto mb-2" />
              <h3 className="font-medium">Error al inicializar el servicio de correo</h3>
              <p className="text-sm text-gray-600">{serviceStatus.error}</p>
            </div>
          ) : (
            <div>
              <ClockIcon className="h-12 w-12 text-blue-500 mx-auto mb-2 animate-pulse" />
              <p>Inicializando servicio de correo...</p>
            </div>
          )}
        </div>
      </Card>
    ) : (
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-semibold">Buzón de correo</h1>
          <div className="flex items-center">
            {userEmail ? (
              <div className="text-right mr-2">
                <p className="text-sm font-medium">Tu correo:</p>
                <p className="text-xs text-blue-600">{userEmail}</p>
              </div>
            ) : serviceStatus.error ? (
              <div className="text-right mr-2">
                <p className="text-xs text-red-600">Error al inicializar servicio de correo</p>
              </div>
            ) : null}
          </div>
          
          <div className="text-center py-4">
            {serviceStatus.error ? (
              <div>
                <ExclamationCircleIcon className="h-12 w-12 text-red-500 mx-auto mb-2" />
                <h3 className="font-medium">Error al inicializar el servicio de correo</h3>
                <p className="text-sm text-gray-600">{serviceStatus.error}</p>
              </div>
            ) : (
              <div>
                <ClockIcon className="h-12 w-12 text-blue-500 mx-auto mb-2 animate-pulse" />
                <p>Inicializando servicio de correo...</p>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-semibold">Buzón de correo</h1>
            <div className="flex items-center">
              {userEmail ? (
                <div className="text-right mr-2">
                  <p className="text-sm font-medium">Tu correo:</p>
                  <p className="text-xs text-blue-600">{userEmail}</p>
                </div>
              ) : serviceStatus.error ? (
                <div className="text-right mr-2">
                  <p className="text-xs text-red-600">Error al inicializar servicio de correo</p>
                </div>
              ) : (
                <div className="text-right mr-2">
                  <p className="text-xs text-gray-500">Inicializando...</p>
                </div>
              )}
              <Button 
                variant="outline" 
                className="text-xs py-1 px-2" 
                onClick={() => setShowEmailConfig(!showEmailConfig)}
              >
                {showEmailConfig ? 'Cerrar' : 'Configurar correo'}
              </Button>
        </div>
      </div>
      
      {showEmailConfig && (
        <Card>
          <h2 className="text-lg font-medium mb-2">Configura tu cuenta de correo personalizada</h2>
          <p className="text-sm text-gray-600 mb-4">
            Personaliza tu dirección de correo electrónico para contactar con proveedores y recibir mensajes.
          </p>
          
          <div className="flex items-end gap-2">
            <div className="flex-grow">
              <label className="block text-sm font-medium text-gray-700 mb-1">Alias de correo</label>
              <div className="flex rounded-md shadow-sm">
                <Input
                  type="text"
                  value={emailAlias}
                  onChange={(e) => setEmailAlias(e.target.value.toLowerCase().replace(/[^a-z0-9.]/g, '.'))}
                  placeholder="tu.nombre"
                  className="rounded-r-none"
                  disabled={aliasStatus.loading}
                />
                <span className="inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                  @lovenda.com
                </span>
              </div>
              {aliasStatus.error && (
                <p className="text-xs text-red-600 mt-1">{aliasStatus.error}</p>
              )}
            </div>
            <Button 
              onClick={handleCreateAlias} 
              disabled={aliasStatus.loading || !emailAlias}
              className="ml-2"
            >
              {aliasStatus.loading ? 'Guardando...' : 'Guardar'}
            </Button>
          </div>
          
          {aliasStatus.success && (
            <div className="flex items-center text-green-600 mt-2">
              <CheckCircleIcon className="h-4 w-4 mr-1" />
              <span className="text-sm">¡Alias configurado correctamente!</span>
            </div>
          )}
        </Card>
      )}

      <div className="flex flex-wrap gap-2 mt-2 items-center">
        {['inbox', 'sent', 'tracking'].map((f) => {
            const unread = f==='inbox' ? mails.filter(m=>!m.read).length : 0;
            const needAttention = f==='tracking' ? trackingRecords.filter(r => 
              r.status === TRACKING_STATUS.WAITING || r.status === TRACKING_STATUS.FOLLOWUP
            ).length : 0;
            
            return (
          <button
            key={f}
            onClick={() => {
              setSelected(null);
              setTrackingSelected(null);
              setFolder(f);
            }}
            className={`relative px-3 py-1 rounded capitalize ${folder === f ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
          >
            {f === 'inbox' ? 'Entrada' : f === 'sent' ? 'Enviados' : 'Seguimiento'}
              {unread>0 && <span className="absolute -top-1 -right-1 bg-red-600 text-white text-xs rounded-full px-1">{unread}</span>}
              {needAttention>0 && f==='tracking' && <span className="absolute -top-1 -right-1 bg-amber-500 text-white text-xs rounded-full px-1">{needAttention}</span>}
          </button>
          );
        })}
        <Input placeholder="Buscar..." className="ml-auto w-48" value={search} onChange={e=>setSearch(e.target.value)} />
        <Button variant="outline" onClick={refresh}>Refrescar</Button>
        <Button 
          onClick={() => {
            if (!userEmail) {
              alert("Configura tu cuenta de correo primero");
              setShowEmailConfig(true);
              return;
            }
            setComposeOpen(true);
          }}
        >
          Redactar
        </Button>
      </div>

      <div className="flex flex-col md:flex-row gap-4 mt-4">
        {folder !== 'tracking' ? (
        <>
          {/* Mail list */}
          <div className="md:w-1/3 border rounded overflow-y-auto h-[70vh] bg-white">
            {mails.length === 0 && <p className="p-4 text-gray-500">No hay mensajes</p>}
            {mails.filter(m=> (m.subject || '').toLowerCase().includes(search.toLowerCase()) || (m.from||'').toLowerCase().includes(search.toLowerCase()) ).map((m) => (
              <div
                key={m.id}
                onClick={() => openMail(m)}
                className={`p-3 border-b cursor-pointer hover:bg-gray-50 ${!m.read ? 'bg-blue-50' : ''}`}
              >
                <div className="flex justify-between text-sm">
                  <span className="font-medium truncate" title={m.subject}>
                    {m.subject || '(Sin asunto)'}
                  </span>
                  <span className="text-gray-500">{new Date(m.date).toLocaleDateString()}</span>
                </div>
                <div className="text-xs text-gray-600 truncate">
                  {folder === 'inbox' ? m.from : m.to}
                </div>
              </div>
            ))}
          </div>

          {/* Mail viewer */}
          <div className="flex-1 border rounded p-4 bg-white h-[70vh] overflow-y-auto">
            {!selected && <p className="text-gray-500">Selecciona un mensaje para leerlo.</p>}
            {selected && (
              <div className="space-y-4">
                <div className="flex justify-between items-start">
                  <div>
                    <h2 className="text-xl font-semibold break-all">{selected.subject || '(Sin asunto)'}</h2>
                    <div className="text-sm text-gray-500 mt-1">
                      De: {selected.from} <br /> 
                      A: {selected.to} <br />
                      <span className="text-xs">{new Date(selected.date).toLocaleString()}</span>
                    </div>
                  </div>
                  <div className="space-x-2">
                    <Button 
                      variant="outline" 
                      onClick={()=>{ 
                        setComposeOpen(true); 
                        setForm({ 
                          to: selected.from, 
                          subject: `Re: ${selected.subject}`, 
                          body: `\n\n--- Mensaje original ---\n${selected.body}`,
                          attachments: [] 
                        }); 
                      }}
                    >
                      Responder
                    </Button>
                    <Button 
                      variant="outline" 
                      className="text-red-600" 
                      onClick={() => { 
                        deleteMail(selected.id); 
                        setSelected(null); 
                        refresh(); 
                      }}
                    >
                      Eliminar
                    </Button>
                  </div>
                </div>
                <hr />
                <div className="whitespace-pre-wrap overflow-auto">
                  {selected.body}
                </div>
                
                {selected.attachments && selected.attachments.length > 0 && (
                  <div className="mt-4">
                    <h3 className="text-sm font-semibold mb-2">Archivos adjuntos:</h3>
                    <div className="space-y-1">
                      {selected.attachments.map((attachment, idx) => (
                        <div key={idx} className="flex items-center bg-gray-50 p-2 rounded">
                          <PaperclipIcon className="h-4 w-4 mr-1 text-gray-500" />
                          <span className="text-sm truncate max-w-xs">
                            {attachment.filename}
                          </span>
                          <span className="text-xs text-gray-500 ml-1">
                            ({Math.round(attachment.size/1024)}KB)
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </>
        ) : (
        <>
          {/* Tracking list */}
          <div className="md:w-1/3 border rounded overflow-y-auto h-[70vh] bg-white">
            <div className="p-3 border-b bg-gray-100 sticky top-0">
              <h3 className="font-medium">Seguimiento de proveedores</h3>
              <p className="text-xs text-gray-600">Gestiona las respuestas y comunicaciones con proveedores</p>
              
              <div className="flex mt-2">
                <input 
                  type="text" 
                  placeholder="Buscar..." 
                  className="flex-1 text-sm border border-gray-300 rounded-md p-1"
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                />
              </div>
              
              <div className="flex items-center mt-2 flex-wrap">
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === '' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter('')}
                >
                  Todos
                </button>
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === TRACKING_STATUS.WAITING ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter(TRACKING_STATUS.WAITING)}
                >
                  Esperando
                </button>
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === TRACKING_STATUS.RESPONDED ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter(TRACKING_STATUS.RESPONDED)}
                >
                  Respondidos
                </button>
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === TRACKING_STATUS.FOLLOWUP ? 'bg-amber-600 text-white' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter(TRACKING_STATUS.FOLLOWUP)}
                >
                  Seguimiento
                </button>
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === TRACKING_STATUS.URGENT ? 'bg-red-600 text-white' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter(TRACKING_STATUS.URGENT)}
                >
                  Urgentes
                </button>
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === TRACKING_STATUS.COMPLETED ? 'bg-gray-600 text-white' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter(TRACKING_STATUS.COMPLETED)}
                >
                  Completados
                </button>
              </div>
            </div>
            
            <div className="divide-y">
              {trackingRecords
                .filter(record => 
                  (record.providerName.toLowerCase().includes(search.toLowerCase()) ||
                   record.subject.toLowerCase().includes(search.toLowerCase())) &&
                  (statusFilter === '' || record.status === statusFilter)
                )
                .sort((a, b) => {
                  if (sortOrder === 'priority') {
                    const priorityOrder = {
                      [TRACKING_STATUS.URGENT]: 1,
                      [TRACKING_STATUS.FOLLOWUP]: 2,
                      [TRACKING_STATUS.WAITING]: 3,
                      [TRACKING_STATUS.RESPONDED]: 4,
                      [TRACKING_STATUS.COMPLETED]: 5
                    };
                    
                    return priorityOrder[a.status] - priorityOrder[b.status];
                  } 
                  else {
                    return new Date(b.lastEmailDate) - new Date(a.lastEmailDate);
                  }
                })
                .map(record => (
                  <div 
                    key={record.id} 
                    onClick={() => setTrackingSelected(record)}
                    className={`p-3 border-b cursor-pointer hover:bg-gray-50 ${trackingSelected?.id === record.id ? 'bg-blue-50' : ''} ${record.status === TRACKING_STATUS.URGENT ? 'border-l-4 border-l-red-500' : ''}`}
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <span className="font-medium text-sm block truncate" title={record.providerName}>
                            {record.providerName}
                          </span>
                          <div className="flex space-x-1">
                            {record.dueDate && new Date(record.dueDate) < new Date(Date.now() + 24*60*60*1000) && (
                              <span className="text-amber-500" title="Fecha límite próxima">
                                <ClockIcon className="h-4 w-4" />
                              </span>
                            )}
                            {record.status === TRACKING_STATUS.URGENT && (
                              <span className="text-red-500" title="Seguimiento urgente">
                                <ExclamationIcon className="h-4 w-4" />
                              </span>
                            )}
                          </div>
                        </div>
                        <span className="text-xs text-gray-500 truncate block" title={record.subject}>
                          {record.subject}
                        </span>
                        <div className="flex items-center mt-1">
                          <span className="text-xs text-gray-400">{new Date(record.lastEmailDate).toLocaleDateString()}</span>
                          {record.status && (
                            <span 
                              className={`ml-2 px-2 py-0.5 text-xs rounded-full ${
                                record.status === TRACKING_STATUS.WAITING
                                  ? 'bg-blue-100 text-blue-700'
                                  : record.status === TRACKING_STATUS.RESPONDED
                                  ? 'bg-green-100 text-green-700'
                                  : record.status === TRACKING_STATUS.URGENT
                                  ? 'bg-red-100 text-red-700'
                                  : record.status === TRACKING_STATUS.COMPLETED
                                  ? 'bg-gray-100 text-gray-700'
                                  : 'bg-orange-100 text-orange-700'
                              }`}
                            >
                              {record.status === TRACKING_STATUS.WAITING 
                                ? 'Esperando respuesta'
                                : record.status === TRACKING_STATUS.RESPONDED
                                ? 'Respondido'
                                : record.status === TRACKING_STATUS.FOLLOWUP
                                ? 'Seguimiento'
                                : record.status === TRACKING_STATUS.URGENT
                                ? 'Urgente'
                                : 'Completado'
                              }
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
            </div>
          </div>
          
          {/* Panel de detalle del seguimiento */}
          <div className="flex-1 border rounded p-4 bg-white h-[70vh] overflow-y-auto">
            {!trackingSelected && <p className="text-gray-500">Selecciona un registro para ver detalles.</p>}
            {trackingSelected && (
              <div>
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h2 className="text-xl font-semibold break-all">{trackingSelected.providerName}</h2>
                    <div className="text-sm text-gray-500">
                      <span className="block mt-1">{trackingSelected.subject}</span>
                      <span className="block mt-1">Último contacto: {new Date(trackingSelected.lastEmailDate).toLocaleDateString()}</span>
                      {trackingSelected.dueDate && (
                        <span className="block mt-1">Fecha límite: {new Date(trackingSelected.dueDate).toLocaleDateString()}</span>
                      )}
                    </div>
                  </div>
                  
                  <div>
                    <span 
                      className={`px-2 py-1 text-xs rounded-full ${
                        trackingSelected.status === TRACKING_STATUS.WAITING
                          ? 'bg-blue-100 text-blue-700'
                          : trackingSelected.status === TRACKING_STATUS.RESPONDED
                          ? 'bg-green-100 text-green-700'
                          : trackingSelected.status === TRACKING_STATUS.URGENT
                          ? 'bg-red-100 text-red-700'
                          : trackingSelected.status === TRACKING_STATUS.COMPLETED
                          ? 'bg-gray-100 text-gray-700'
                          : 'bg-orange-100 text-orange-700'
                      }`}
                    >
                      {trackingSelected.status === TRACKING_STATUS.WAITING 
                        ? 'Esperando respuesta'
                        : trackingSelected.status === TRACKING_STATUS.RESPONDED
                        ? 'Respondido'
                        : trackingSelected.status === TRACKING_STATUS.FOLLOWUP
                        ? 'Requiere seguimiento'
                        : trackingSelected.status === TRACKING_STATUS.URGENT
                        ? 'Urgente'
                        : 'Completado'
                      }
                    </span>
                  </div>
                </div>
                
                {trackingSelected.notes && (
                  <div className="mb-4 p-4 bg-gray-50 rounded border text-sm">
                    <h3 className="font-medium mb-1">Notas:</h3>
                    <div className="whitespace-pre-line">{trackingSelected.notes}</div>
                  </div>
                )}
                
                {trackingSelected.tags && trackingSelected.tags.length > 0 && (
                  <div className="mb-4">
                    <h3 className="text-sm font-medium mb-1">Etiquetas:</h3>
                    <div className="flex flex-wrap gap-1">
                      {trackingSelected.tags.map((tag, index) => (
                        <span 
                          key={index}
                          className="px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded-full"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
                
                <div className="my-4">
                  <h3 className="font-medium mb-2">Acciones:</h3>
                  <div className="flex flex-wrap gap-2">
                  <Button
                    variant="primary"
                    className="text-sm"
                    onClick={() => {
                      setComposeOpen(true); 
                      setForm({ 
                        to: trackingSelected.email, 
                        subject: `Re: ${trackingSelected.subject}`,
                        body: '',
                        attachments: [] 
                      });
                      
                      updateTrackingStatus(trackingSelected.id, TRACKING_STATUS.FOLLOWUP);
                      const updatedRecords = loadTrackingRecords();
                      setTrackingRecords(updatedRecords);
                      setTrackingSelected({
                        ...trackingSelected,
                        status: TRACKING_STATUS.FOLLOWUP
                      });
                    }}
                  >
                    Responder
                  </Button>
                  
                  <Button
                    variant="outline"
                    className="text-sm"
                    onClick={() => {
                      setTrackingForm({
                        status: trackingSelected.status,
                        dueDate: trackingSelected.dueDate ? new Date(trackingSelected.dueDate).toISOString().split('T')[0] : '',
                        notes: trackingSelected.notes || '',
                        tags: trackingSelected.tags || []
                      });
                      setShowTrackingEditModal(true);
                    }}
                  >
                    <TagIcon className="h-4 w-4 mr-1" />
                    Editar seguimiento
                  </Button>
                  
                  <Button
                    variant="outline"
                    className={trackingSelected.status === TRACKING_STATUS.COMPLETED ? 'text-sm bg-green-50' : 'text-sm'}
                    onClick={() => {
                      const newStatus = trackingSelected.status === TRACKING_STATUS.COMPLETED 
                        ? TRACKING_STATUS.WAITING 
                        : TRACKING_STATUS.COMPLETED;
                        
                      updateTrackingStatus(trackingSelected.id, newStatus);
                      const updatedRecords = loadTrackingRecords();
                      setTrackingRecords(updatedRecords);
                      setTrackingSelected({
                        ...trackingSelected,
                        status: newStatus
                      });
                    }}
                  >
                    {trackingSelected.status === TRACKING_STATUS.COMPLETED ? 'Reabrir' : 'Marcar completado'}
                  </Button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
    
    {/* Folder Tabs */}
    <div className="flex flex-wrap gap-2 mt-2 items-center">
      {['inbox', 'sent', 'tracking'].map((f) => {
          const unread = f==='inbox' ? mails.filter(m=>!m.read).length : 0;
          const needAttention = f==='tracking' ? trackingRecords.filter(r => 
              r.status === TRACKING_STATUS.WAITING || r.status === TRACKING_STATUS.FOLLOWUP
            ).length : 0;
            
            return (
          <button
            key={f}
            onClick={() => {
              setSelected(null);
              setTrackingSelected(null);
              setFolder(f);
            }}
            className={`relative px-3 py-1 rounded capitalize ${folder === f ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
          >
            {f === 'inbox' ? 'Entrada' : f === 'sent' ? 'Enviados' : 'Seguimiento'}
              {unread>0 && <span className="absolute -top-1 -right-1 bg-red-600 text-white text-xs rounded-full px-1">{unread}</span>}
              {needAttention>0 && f==='tracking' && <span className="absolute -top-1 -right-1 bg-amber-500 text-white text-xs rounded-full px-1">{needAttention}</span>}
          </button>
          );
        })}
        <Input placeholder="Buscar..." className="ml-auto w-48" value={search} onChange={e=>setSearch(e.target.value)} />
        <Button variant="outline" onClick={refresh}>Refrescar</Button>
        <Button 
          onClick={() => {
            if (!userEmail) {
              alert("Configura tu cuenta de correo primero");
              setShowEmailConfig(true);
              return;
            }
            setComposeOpen(true);
          }}
        >
          Redactar
        </Button>
      </div>

      <div className="flex flex-col md:flex-row gap-4 mt-4">
        {folder !== 'tracking' ? (
        <>
          {/* Mail list */}
          <div className="md:w-1/3 border rounded overflow-y-auto h-[70vh] bg-white">
            {mails.length === 0 && <p className="p-4 text-gray-500">No hay mensajes</p>}
            {mails.filter(m=> (m.subject || '').toLowerCase().includes(search.toLowerCase()) || (m.from||'').toLowerCase().includes(search.toLowerCase()) ).map((m) => (
              <div
                key={m.id}
                onClick={() => openMail(m)}
                className={`p-3 border-b cursor-pointer hover:bg-gray-50 ${!m.read ? 'bg-blue-50' : ''}`}
              >
                <div className="flex justify-between text-sm">
                  <span className="font-medium truncate" title={m.subject}>
                    {m.subject || '(Sin asunto)'}
                  </span>
                  <span className="text-gray-500">{new Date(m.date).toLocaleDateString()}</span>
                </div>
                <div className="text-xs text-gray-600 truncate">
                  {folder === 'inbox' ? m.from : m.to}
                </div>
              </div>
            ))}
          </div>

          {/* Mail viewer */}
          <div className="flex-1 border rounded p-4 bg-white h-[70vh] overflow-y-auto">
            {!selected && <p className="text-gray-500">Selecciona un mensaje para leerlo.</p>}
            {selected && (
              <div className="space-y-4">
                <div className="flex justify-between items-start">
                  <div>
                    <h2 className="text-xl font-semibold break-all">{selected.subject || '(Sin asunto)'}</h2>
                    <div className="text-sm text-gray-500 mt-1">
                      De: {selected.from} <br /> 
                      A: {selected.to} <br />
                      <span className="text-xs">{new Date(selected.date).toLocaleString()}</span>
                    </div>
                  </div>
                  <div className="space-x-2">
                    <Button 
                      variant="outline" 
                      onClick={()=>{ 
                        setComposeOpen(true); 
                        setForm({ 
                          to: selected.from, 
                          subject: `Re: ${selected.subject}`, 
                          body: `\n\n--- Mensaje original ---\n${selected.body}`,
                          attachments: [] 
                        }); 
                      }}
                    >
                      Responder
                    </Button>
                    <Button 
                      variant="outline" 
                      className="text-red-600" 
                      onClick={() => { 
                        deleteMail(selected.id); 
                        setSelected(null); 
                        refresh(); 
                      }}
                    >
                      Eliminar
                    </Button>
                  </div>
                </div>
                <hr />
                <div className="whitespace-pre-wrap overflow-auto">
                  {selected.body}
                </div>
                
                {selected.attachments && selected.attachments.length > 0 && (
                  <div className="mt-4">
                    <h3 className="text-sm font-semibold mb-2">Archivos adjuntos:</h3>
                    <div className="space-y-1">
                      {selected.attachments.map((attachment, idx) => (
                        <div key={idx} className="flex items-center bg-gray-50 p-2 rounded">
                          <PaperclipIcon className="h-4 w-4 mr-1 text-gray-500" />
                          <span className="text-sm truncate max-w-xs">
                            {attachment.filename}
                          </span>
                          <span className="text-xs text-gray-500 ml-1">
                            ({Math.round(attachment.size/1024)}KB)
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </>
        ) : (
        <>
          {/* Tracking list */}
          <div className="md:w-1/3 border rounded overflow-y-auto h-[70vh] bg-white">
            <div className="p-3 border-b bg-gray-100 sticky top-0">
              <h3 className="font-medium">Seguimiento de proveedores</h3>
              <p className="text-xs text-gray-600">Gestiona las respuestas y comunicaciones con proveedores</p>
              
              {/* Filtro de búsqueda */}
              <div className="flex mt-2">
                <input 
                  type="text" 
                  placeholder="Buscar..." 
                  className="flex-1 text-sm border border-gray-300 rounded-md p-1"
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                />
              </div>
              
              {/* Filtro por estado */}
              <div className="flex items-center mt-2 flex-wrap">
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === '' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter('')}
                >
                  Todos
                </button>
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === TRACKING_STATUS.URGENT ? 'bg-red-100 text-red-700' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter(TRACKING_STATUS.URGENT)}
                >
                  Urgente
                </button>
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === TRACKING_STATUS.WAITING ? 'bg-blue-100 text-blue-700' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter(TRACKING_STATUS.WAITING)}
                >
                  Esperando
                </button>
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === TRACKING_STATUS.FOLLOWUP ? 'bg-orange-100 text-orange-700' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter(TRACKING_STATUS.FOLLOWUP)}
                >
                  Seguimiento
                </button>
                <button 
                  className={`text-xs px-2 py-1 rounded-full mr-1 mb-1 ${statusFilter === TRACKING_STATUS.COMPLETED ? 'bg-gray-100 text-gray-700' : 'bg-gray-200 text-gray-600'}`}
                  onClick={() => setStatusFilter(TRACKING_STATUS.COMPLETED)}
                >
                  Completados
                </button>
              </div>
              
              {/* Opciones de ordenación */}
              <div className="flex justify-between items-center mt-2">
                <span className="text-xs text-gray-600">Ordenar por:</span>
                <div className="space-x-1">
                  <button 
                    className={`text-xs px-2 py-0.5 border rounded ${sortOrder === 'date' ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}`}
                    onClick={() => setSortOrder('date')}
                    title="Ordenar por fecha"
                  >
                    Fecha
                  </button>
                  <button 
                    className={`text-xs px-2 py-0.5 border rounded ${sortOrder === 'priority' ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}`}
                    onClick={() => setSortOrder('priority')}
                    title="Ordenar por prioridad"
                  >
                    Prioridad
                  </button>
                  <button 
                    className={`text-xs px-2 py-0.5 border rounded ${sortOrder === 'alpha' ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}`}
                    onClick={() => setSortOrder('alpha')}
                    title="Ordenar alfabéticamente"
                  >
                    Nombre
                  </button>
                </div>
              </div>
            </div>
            
            {trackingRecords.length === 0 ? (
              <div className="p-4 text-center">
                <p className="text-gray-500">No hay seguimientos activos</p>
                <p className="text-xs text-gray-400 mt-2">Los seguimientos se crean automáticamente al enviar correos a proveedores</p>
              </div>
            ) : (
              trackingRecords
                .filter(record => 
                  (record.providerName.toLowerCase().includes(search.toLowerCase()) ||
                  record.subject.toLowerCase().includes(search.toLowerCase())) &&
                  (statusFilter === '' || record.status === statusFilter)
                )
                .sort((a, b) => {
                  // Ordenar por fecha (más reciente primero)
                  if (sortOrder === 'date') {
                    return new Date(b.lastEmailDate) - new Date(a.lastEmailDate);
                  } 
                  // Ordenar por prioridad (urgente > seguimiento > esperando > respondido > completado)
                  else if (sortOrder === 'priority') {
                    // Definir el orden de prioridad para los estados
                    const priorityOrder = {
                      [TRACKING_STATUS.URGENT]: 0,
                      [TRACKING_STATUS.FOLLOWUP]: 1,
                      [TRACKING_STATUS.WAITING]: 2,
                      [TRACKING_STATUS.RESPONDED]: 3,
                      [TRACKING_STATUS.COMPLETED]: 4
                    };
                    
                    // Comparar por prioridad y en caso de empate, por fecha
                    const priorityA = priorityOrder[a.status] !== undefined ? priorityOrder[a.status] : 999;
                    const priorityB = priorityOrder[b.status] !== undefined ? priorityOrder[b.status] : 999;
                    
                    if (priorityA !== priorityB) {
                      return priorityA - priorityB;
                    } else {
                      // Si tienen la misma prioridad, ordenar por fecha (más reciente primero)
                      return new Date(b.lastEmailDate) - new Date(a.lastEmailDate);
                    }
                  } 
                  // Ordenar alfabéticamente por nombre del proveedor
                  else if (sortOrder === 'alpha') {
                    return a.providerName.localeCompare(b.providerName);
                  } 
                  // Por defecto, ordenar por fecha
                  else {
                    return new Date(b.lastEmailDate) - new Date(a.lastEmailDate);
                  }
                })
                .map(record => (
                  <div 
                    key={record.id} 
                    onClick={() => setTrackingSelected(record)}
                    className={`p-3 border-b cursor-pointer hover:bg-gray-50 ${trackingSelected?.id === record.id ? 'bg-blue-50' : ''} ${record.status === TRACKING_STATUS.URGENT ? 'border-l-4 border-l-red-500' : ''}`}
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <span className="font-medium text-sm block truncate" title={record.providerName}>
                            {record.providerName}
                          </span>
                          {/* Indicadores de recordatorio */}
                          <div className="flex space-x-1">
                            {record.dueDate && new Date(record.dueDate) < new Date(Date.now() + 24*60*60*1000) && (
                              <span className="text-amber-500" title="Fecha límite próxima">
                                <ClockIcon className="h-4 w-4" />
                              </span>
                            )}
                            {record.status === TRACKING_STATUS.URGENT && (
                              <span className="text-red-500" title="Seguimiento urgente">
                                <ExclamationIcon className="h-4 w-4" />
                              </span>
                            )}
                          </div>
                        </div>
                        <span className="text-xs text-gray-500 truncate block" title={record.subject}>
                          {record.subject}
                        </span>
                        <div className="flex items-center mt-1">
                          <span className="text-xs text-gray-400">{new Date(record.lastEmailDate).toLocaleDateString()}</span>
                          {record.status && (
                            <span 
                              className={`ml-2 px-2 py-0.5 text-xs rounded-full ${
                                record.status === TRACKING_STATUS.WAITING
                                  ? 'bg-blue-100 text-blue-700'
                                  : record.status === TRACKING_STATUS.RESPONDED
                                  ? 'bg-green-100 text-green-700'
                                  : record.status === TRACKING_STATUS.URGENT
                                  ? 'bg-red-100 text-red-700'
                                  : record.status === TRACKING_STATUS.COMPLETED
                                  ? 'bg-gray-100 text-gray-700'
                                  : 'bg-orange-100 text-orange-700'
                              }`}
                            >
                              {record.status === TRACKING_STATUS.WAITING
                                ? 'Esperando'
                                : record.status === TRACKING_STATUS.RESPONDED
                                ? 'Respondido'
                                : record.status === TRACKING_STATUS.URGENT
                                ? 'Urgente'
                                : record.status === TRACKING_STATUS.COMPLETED
                                ? 'Completado'
                                : 'Seguimiento'}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))
            )}
          </div>
          
          {/* Tracking viewer - Empty state */}
          <div className="flex-1 border rounded p-4 bg-white h-[70vh] overflow-y-auto">
            {!trackingSelected && (
              <div className="text-center py-10">
                <MailIcon className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                <p className="text-gray-500">Selecciona un seguimiento para ver los detalles</p>
              </div>
            )}
            {trackingSelected && (
              <div className="space-y-4">
                {/* Encabezado con información del proveedor */}
                <div className="flex justify-between items-start">
                  <div>
                    <h2 className="text-xl font-semibold">{trackingSelected.providerName}</h2>
                    <p className="text-sm text-gray-600">{trackingSelected.providerEmail}</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    {/* Etiqueta de estado */}
                    <span className={`px-2 py-1 text-xs rounded-full font-medium
                      ${trackingSelected.status === TRACKING_STATUS.WAITING ? 'bg-yellow-100 text-yellow-800' : ''}
                      ${trackingSelected.status === TRACKING_STATUS.RESPONDED ? 'bg-green-100 text-green-800' : ''}
                      ${trackingSelected.status === TRACKING_STATUS.FOLLOWUP ? 'bg-red-100 text-red-800' : ''}
                      ${trackingSelected.status === TRACKING_STATUS.COMPLETED ? 'bg-blue-100 text-blue-800' : ''}
                      ${trackingSelected.status === TRACKING_STATUS.URGENT ? 'bg-red-100 text-red-800' : ''}
                    `}>
                      {trackingSelected.status === TRACKING_STATUS.WAITING && 'Esperando respuesta'}
                      {trackingSelected.status === TRACKING_STATUS.RESPONDED && 'Respondido'}
                      {trackingSelected.status === TRACKING_STATUS.FOLLOWUP && 'Requiere seguimiento'}
                      {trackingSelected.status === TRACKING_STATUS.COMPLETED && 'Completado'}
                      {trackingSelected.status === TRACKING_STATUS.URGENT && 'Urgente'}
                    </span>
                    
                    {/* Botón de editar estado */}
                    <Button
                      variant="outline"
                      className="text-sm py-1"
                      onClick={() => {
                        setTrackingForm({
                          status: trackingSelected.status,
                          dueDate: trackingSelected.dueDate ? new Date(trackingSelected.dueDate).toISOString().split('T')[0] : '',
                          notes: trackingSelected.notes || '',
                          tags: trackingSelected.tags || []
                        });
                        setShowTrackingEditModal(true);
                      }}
                    >
                      Editar
                    </Button>
                  </div>
                </div>
                
                {/* Información adicional */}
                <div className="bg-gray-50 p-3 rounded">
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <p className="text-xs font-medium text-gray-500">Último contacto</p>
                      <p className="text-sm">{new Date(trackingSelected.lastEmailDate).toLocaleString()}</p>
                    </div>
                    {trackingSelected.dueDate && (
                      <div>
                        <p className="text-xs font-medium text-gray-500">Fecha límite seguimiento</p>
                        <p className="text-sm">{new Date(trackingSelected.dueDate).toLocaleDateString()}</p>
                      </div>
                    )}
                  </div>
                  
                  {/* Etiquetas */}
                  {trackingSelected.tags && trackingSelected.tags.length > 0 && (
                    <div className="mt-2">
                      <p className="text-xs font-medium text-gray-500 mb-1">Etiquetas</p>
                      <div className="flex flex-wrap gap-1">
                        {trackingSelected.tags.map(tag => (
                          <span key={tag} className="inline-block bg-gray-200 rounded-full px-2 py-1 text-xs">
                            {tag}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Notas */}
                  {trackingSelected.notes && (
                    <div className="mt-2">
                      <p className="text-xs font-medium text-gray-500 mb-1">Notas</p>
                      <p className="text-sm bg-white p-2 rounded border whitespace-pre-line">{trackingSelected.notes}</p>
                    </div>
                  )}
                </div>
                
                {/* Historial de comunicaciones */}
                <div>
                  <h3 className="text-sm font-medium mb-2">Historial de comunicaciones</h3>
                  <div className="space-y-2">
                    {trackingSelected.thread && trackingSelected.thread.length > 0 ? (
                      trackingSelected.thread.map((item, index) => (
                        <div 
                          key={index}
                          className={`p-3 rounded border text-sm ${item.direction === 'outgoing' ? 'bg-blue-50 border-blue-100' : 'bg-green-50 border-green-100'}`}
                        >
                          <div className="flex justify-between items-start">
                            <span className="font-medium">{item.subject}</span>
                            <span className="text-xs text-gray-500">{new Date(item.date).toLocaleString()}</span>
                          </div>
                          <p className="text-gray-600 mt-1">{item.snippet}</p>
                          <div className="mt-1 text-xs text-gray-500">
                            {item.direction === 'outgoing' ? 'Enviado' : 'Recibido'}
                          </div>
                        </div>
                      ))
                    ) : (
                      <p className="text-sm text-gray-500 italic">No hay comunicaciones registradas</p>
                    )}
                  </div>
                </div>
                
                {/* Acciones rápidas */}
                <div className="flex justify-end space-x-2 mt-4">
                  <Button
                    variant="outline"
                    className="text-sm"
                    onClick={() => {
                      // Preparar un nuevo correo al proveedor
                      setComposeOpen(true);
                      setForm({
                        to: trackingSelected.providerEmail,
                        subject: `Re: ${trackingSelected.subject}`,
                        body: '',
                        attachments: []
                      });
                      // Cambiar estado a seguimiento en curso
                      updateTrackingStatus(trackingSelected.id, TRACKING_STATUS.FOLLOWUP);
                      // Actualizar lista de registros
                      const updatedRecords = loadTrackingRecords();
                      setTrackingRecords(updatedRecords);
                      // Actualizar registro seleccionado
                      setTrackingSelected({
                        ...trackingSelected,
                        status: TRACKING_STATUS.FOLLOWUP
                      });
                    }}
                  >
                    Responder
                  </Button>
                  
                  <Button
                    variant="outline"
                    className="text-sm"
                    onClick={() => {
                      // Abrir modal de edición con datos actuales
                      setTrackingForm({
                        status: trackingSelected.status,
                        dueDate: trackingSelected.dueDate ? new Date(trackingSelected.dueDate).toISOString().split('T')[0] : '',
                        notes: trackingSelected.notes || '',
                        tags: trackingSelected.tags || []
                      });
                      setShowTrackingEditModal(true);
                    }}
                  >
                    <TagIcon className="h-4 w-4 mr-1" />
                    Editar seguimiento
                  </Button>
                  
                  <Button
                    variant="outline"
                    className={trackingSelected.status === TRACKING_STATUS.COMPLETED ? 'text-sm bg-green-50' : 'text-sm'}
                    onClick={() => {
                      // Marcar como completado/resuelto
                      const newStatus = trackingSelected.status === TRACKING_STATUS.COMPLETED 
                        ? TRACKING_STATUS.WAITING 
                        : TRACKING_STATUS.COMPLETED;
                        
                      updateTrackingStatus(trackingSelected.id, newStatus);
                      // Actualizar lista de registros
                      const updatedRecords = loadTrackingRecords();
                      setTrackingRecords(updatedRecords);
                      // Actualizar registro seleccionado
                      setTrackingSelected({
                        ...trackingSelected,
                        status: newStatus
                      });
                    }}
                  >
                    {trackingSelected.status === TRACKING_STATUS.COMPLETED ? 'Reabrir' : 'Marcar completado'}
                  </Button>
                </div>
              </div>
            )}
          </div>
        </>
        )}
        
        {folder !== 'tracking' && selected && (
            <div className="space-y-4">
              <div className="flex justify-between items-start">
                <div>
                  <h2 className="text-xl font-semibold break-all">{selected.subject || '(Sin asunto)'}</h2>
                  <div className="text-sm text-gray-500 mt-1">
                    De: {selected.from} <br /> 
                    A: {selected.to} <br />
                    <span className="text-xs">{new Date(selected.date).toLocaleString()}</span>
                  </div>
                </div>
                <div className="space-x-2">
                  <Button 
                    variant="outline" 
                    onClick={()=>{ 
                      setComposeOpen(true); 
                      setForm({ 
                        to: selected.from, 
                        subject: `Re: ${selected.subject}`, 
                        body: `\n\n--- Mensaje original ---\n${selected.body}`,
                        attachments: [] 
                      }); 
                    }}
                  >
                    Responder
                  </Button>
                  <Button 
                    variant="outline" 
                    className="text-red-600" 
                    onClick={() => { 
                      deleteMail(selected.id); 
                      setSelected(null); 
                      refresh(); 
                    }}
                  >
                    Eliminar
                  </Button>
                </div>
              </div>
              <hr />
              <div className="whitespace-pre-line text-sm">
                {/* Contenido del correo con soporte para HTML básico */}
                <div dangerouslySetInnerHTML={{ __html: selected.body }} />
              </div>
              
              {/* Mostrar adjuntos si existen */}
              {selected.attachments && selected.attachments.length > 0 && (
                <div className="mt-4">
                  <h3 className="text-sm font-medium mb-2">Archivos adjuntos:</h3>
                  <div className="space-y-2">
                    {selected.attachments.map((attachment, index) => (
                      <div key={index} className="flex items-center p-2 border rounded bg-gray-50">
                        <PaperclipIcon className="h-4 w-4 mr-2 text-gray-500" />
                        <span className="text-sm mr-auto">
                          {attachment.filename || `Adjunto ${index+1}`}
                          {attachment.size && (
                            <span className="text-xs text-gray-500 ml-1">
                              ({Math.round(attachment.size/1024)}KB)
                            </span>
                          )}
                        </span>
                        {attachment.url && (
                          <Button 
                            variant="outline" 
                            className="text-xs py-1 px-2" 
                            onClick={() => window.open(attachment.url, '_blank')}
                          >
                            Descargar
                          </Button>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
      
      {composeOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-2xl">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">Redactar correo</h2>
              <button
                onClick={() => setComposeOpen(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                &times;
              </button>
            </div>
            <div className="space-y-4">
              {/* Información del remitente */}
              <div className="bg-blue-50 p-2 rounded flex items-center justify-between">
                <div>
                  <span className="text-sm font-medium">De: </span>
                  <span className="text-sm text-blue-700">{userEmail || 'Tu correo personalizado'}</span>
                </div>
                {!userEmail && (
                  <Button 
                    variant="outline" 
                    className="text-xs py-1 px-2" 
                    onClick={() => {
                      setComposeOpen(false);
                      setShowEmailConfig(true);
                    }}
                  >
                    Configurar
                  </Button>
                )}
              </div>
              
              {/* Selector de plantillas */}
              {templates.length > 0 && (
                <div className="mb-3">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Usar plantilla
                  </label>
                  <select 
                    className="w-full border border-gray-300 rounded-md shadow-sm p-2"
                    value={selectedTemplate}
                    onChange={(e) => {
                      const templateKey = e.target.value;
                      setSelectedTemplate(templateKey);
                      
                      if (templateKey) {
                        try {
                          // Datos para la plantilla
                          const templateData = {
                            providerName: form.to.split('@')[0] || 'Proveedor',
                            weddingDate: profile?.weddingDate || '[Fecha de la boda]',
                            weddingPlace: profile?.celebrationPlace || profile?.weddingPlace || '[Lugar de la boda]',
                            coupleName: `${profile?.brideFirstName || ''} y ${profile?.groomFirstName || ''}`.trim() || 'Nosotros',
                            userName: profile?.brideFirstName || profile?.userName || 'Usuario Lovenda',
                            userPhone: profile?.phone || '',
                            userEmail: userEmail || ''
                          };
                          
                          // Aplicar plantilla
                          const { subject, body } = applyTemplate(templateKey, templateData);
                          setForm(prev => ({
                            ...prev,
                            subject,
                            body
                          }));
                        } catch (error) {
                          console.error('Error al aplicar plantilla:', error);
                        }
                      }
                    }}
                  >
                    <option value="">Selecciona una plantilla...</option>
                    {templates.map(template => (
                      <option key={template.key} value={template.key}>
                        {template.name}
                      </option>
                    ))}
                  </select>
                </div>
              )}
              
              <Input
                label="Para"
                placeholder="correo@ejemplo.com"
                value={form.to}
                onChange={(e) => setForm({ ...form, to: e.target.value })}
                required
              />
              <Input
                label="Asunto"
                placeholder="Asunto del correo"
                value={form.subject}
                onChange={(e) => setForm({ ...form, subject: e.target.value })}
                required
              />
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Mensaje
                </label>
                <textarea
                  className="w-full border rounded p-2 min-h-[200px]"
                  value={form.body}
                  onChange={(e) => setForm({ ...form, body: e.target.value })}
                />
              </div>
              
              {/* Adjuntos */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Archivos adjuntos
                </label>
                
                {/* Lista de archivos adjuntos */}
                {form.attachments && form.attachments.length > 0 && (
                  <div className="mb-2 space-y-1">
                    {form.attachments.map(attachment => (
                      <div key={attachment.id} className="flex items-center justify-between bg-gray-50 p-2 rounded border">
                        <div className="flex items-center">
                          <PaperclipIcon className="h-4 w-4 text-gray-400 mr-2" />
                          <span className="text-sm truncate" style={{maxWidth: '200px'}} title={attachment.filename}>
                            {attachment.filename}
                          </span>
                          <span className="text-xs text-gray-500 ml-1">
                            ({Math.round(attachment.size/1024)}KB)
                          </span>
                        </div>
                        <button
                          onClick={() => removeAttachment(attachment.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <XIcon className="h-4 w-4" />
                        </button>
                      </div>
                    ))}
                  </div>
                )}
                
                <div className="flex items-center">
                  <Button
                    variant="outline"
                    className="text-sm"
                    onClick={() => fileInputRef.current?.click()}
                  >
                    <PaperclipIcon className="h-4 w-4 mr-1" />
                    Adjuntar archivo
                  </Button>
                  <input
                    ref={fileInputRef}
                    type="file"
                    multiple
                    onChange={handleAddAttachment}
                    className="hidden"
                  />
                  <span className="ml-2 text-xs text-gray-500">
                    Máx. 10MB por archivo
                  </span>
                </div>
              </div>
              
              <div className="flex justify-end pt-2">
                <Button variant="outline" onClick={() => setComposeOpen(false)} className="mr-2">
                  Cancelar
                </Button>
                <Button onClick={handleSend}>Enviar</Button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Modal de edición de seguimiento */}
      {showTrackingEditModal && (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-5 rounded-lg w-full max-w-md max-h-[90vh] overflow-y-auto">
        <h2 className="text-xl font-semibold mb-4">Editar seguimiento</h2>
        <p className="text-sm text-gray-600 mb-4">
          Actualiza el estado y detalles del seguimiento del proveedor
        </p>
        
        <div className="space-y-4 mb-4">
          {/* Estado */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Estado</label>
            <select 
              className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={trackingForm.status}
              onChange={(e) => setTrackingForm({...trackingForm, status: e.target.value})}
            >
              <option value={TRACKING_STATUS.WAITING}>Esperando respuesta</option>
              <option value={TRACKING_STATUS.RESPONDED}>Respondido</option>
              <option value={TRACKING_STATUS.FOLLOWUP}>Requiere seguimiento</option>
              <option value={TRACKING_STATUS.COMPLETED}>Completado</option>
              <option value={TRACKING_STATUS.URGENT}>Urgente</option>
            </select>
          </div>
          
          {/* Fecha límite */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Fecha límite de seguimiento</label>
            <input 
              type="date" 
              className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={trackingForm.dueDate}
              onChange={(e) => setTrackingForm({...trackingForm, dueDate: e.target.value})}
            />
          </div>
          
          {/* Etiquetas */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Etiquetas</label>
            <div className="flex flex-wrap gap-2 mb-2">
              {trackingForm.tags.map(tag => (
                <span 
                  key={tag}
                  className="bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs flex items-center"
                >
                  {tag}
                  <button 
                    className="ml-1 text-gray-500 hover:text-red-500"
                    onClick={() => {
                      setTrackingForm({
                        ...trackingForm, 
                        tags: trackingForm.tags.filter(t => t !== tag)
                      });
                    }}
                  >
                    <XIcon className="h-3 w-3" />
                  </button>
                </span>
              ))}
            </div>
            
            <div className="flex gap-2">
              <select 
                className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                onChange={(e) => {
                  if (e.target.value && !trackingForm.tags.includes(e.target.value)) {
                    setTrackingForm({
                      ...trackingForm,
                      tags: [...trackingForm.tags, e.target.value]
                    });
                  }
                  e.target.value = "";
                }}
                defaultValue=""
              >
                <option value="" disabled>Selecciona o añade etiqueta</option>
                {EMAIL_TAGS.map(tag => (
                  <option key={tag} value={tag} disabled={trackingForm.tags.includes(tag)}>{tag}</option>
                ))}
              </select>
            </div>
          </div>
          
          {/* Notas */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Notas</label>
            <textarea 
              className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 h-24"
              value={trackingForm.notes}
              onChange={(e) => setTrackingForm({...trackingForm, notes: e.target.value})}
              placeholder="Añade notas sobre este proveedor o seguimiento..."
            />
          </div>
        </div>
        
        <div className="flex justify-end space-x-2">
          <Button 
            variant="outline"
            onClick={() => setShowTrackingEditModal(false)}
          >
            Cancelar
          </Button>
          
          <Button 
            variant="primary"
            onClick={() => {
              // Guardar los cambios en el seguimiento
              if (trackingSelected) {
                // Actualizar el registro
                const updatedRecord = {
                  ...trackingSelected,
                  status: trackingForm.status,
                  dueDate: trackingForm.dueDate ? new Date(trackingForm.dueDate).toISOString() : null,
                  notes: trackingForm.notes,
                  tags: trackingForm.tags
                };
                
                // Guardar en el servicio
                updateTrackingStatus(trackingSelected.id, trackingForm.status, {
                  dueDate: updatedRecord.dueDate,
                  notes: updatedRecord.notes,
                  tags: updatedRecord.tags
                });
                
                // Actualizar los registros en el estado
                const updatedRecords = loadTrackingRecords();
                setTrackingRecords(updatedRecords);
                
                // Actualizar el registro seleccionado
                setTrackingSelected(updatedRecord);
                
                // Cerrar el modal
                setShowTrackingEditModal(false);
              }
            }}
          >
            Guardar cambios
          </Button>
        </div>
      </div>
    </div>
  </div>
  </>);
}
