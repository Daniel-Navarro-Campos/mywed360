import React, { useState, useEffect, useMemo } from 'react';
import Spinner from '../components/Spinner';
import Pagination from '../components/Pagination';
import Toast from '../components/Toast';
import { saveAs } from 'file-saver';
import { getTransactions } from '../services/bankService';
import { Plus, AlertCircle, Clock, CheckCircle, AlertTriangle, Download, Upload } from 'lucide-react';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import Card from '../components/Card';
import Button from '../components/Button';
import { CategoryBreakdown } from '../components/finance/CategoryBreakdown';
import { BudgetAlerts } from '../components/finance/BudgetAlerts';
import { VendorPayments } from '../components/finance/VendorPayments';

export default function Finance() {
  const [transactions, setTransactions] = useState([]);
  const [totals, setTotals] = useState({ income: 0, expense: 0 });
  const [categoryFilter, setCategoryFilter] = useState('');
  const [providerFilter, setProviderFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [fromDate, setFromDate] = useState('');
  const [toDate, setToDate] = useState('');
  const [modalOpen, setModalOpen] = useState(false);
  const initialTransaction = { item: '', category: '', provider: '', estimatedCost: '', realCost: '', paymentDate: '', status: '', type: '' };
  const [newTransaction, setNewTransaction] = useState(initialTransaction);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [modalError, setModalError] = useState(null);
  const pageSize = 5;
  const currencyFormatter = new Intl.NumberFormat(undefined, { style: 'currency', currency: 'EUR' });
  const [toast, setToast] = useState(null);
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });

  const handleSort = key => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') direction = 'desc';
    setSortConfig({ key, direction });
  };

  const handleInputChange = e => {
    const { name, value } = e.target;
    setNewTransaction(prev => ({ ...prev, [name]: value }));
  };

  const handleCloseModal = () => {
    setModalOpen(false);
    setNewTransaction(initialTransaction);
  };

  const handleAddTransaction = e => {
    e.preventDefault();
    if (!newTransaction.item || !newTransaction.category || !newTransaction.provider || !newTransaction.realCost || !newTransaction.paymentDate || !newTransaction.status || !newTransaction.type) {
      setModalError('Por favor completa todos los campos');
      return;
    }
    setModalError(null);
    const newTx = {
      id: Date.now().toString(),
      item: newTransaction.item,
      category: newTransaction.category,
      provider: newTransaction.provider,
      estimatedCost: parseFloat(newTransaction.estimatedCost) || 0,
      realCost: parseFloat(newTransaction.realCost) || 0,
      paymentDate: newTransaction.paymentDate,
      status: newTransaction.status,
      type: newTransaction.type,
      amount: parseFloat(newTransaction.realCost) || 0,
    };
    const updated = [...transactions, newTx];
    setTransactions(updated);
    const inc = updated.filter(t => t.type === 'income').reduce((s, t) => s + t.amount, 0);
    const exp = updated.filter(t => t.type === 'expense').reduce((s, t) => s + t.amount, 0);
    setTotals({ income: inc, expense: exp });
    setModalOpen(false);
    setNewTransaction(initialTransaction);
  };

  const exportCsv = () => {
    const headers = ['Ítem', 'Categoría', 'Proveedor', 'Coste Previsto', 'Coste Real', 'Fecha de Pago', 'Estado', 'Tipo'];
    const rows = transactions.map(t => [
      t.item, t.category, t.provider,
      currencyFormatter.format(t.estimatedCost),
      currencyFormatter.format(t.realCost),
      t.paymentDate, t.status, t.type
    ]);
    const csvContent = [headers, ...rows].map(r => r.join(';')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, 'transacciones.csv');
    setToast({ message: 'CSV exportado correctamente', type: 'success' });
  };

  const [monthlyContrib, setMonthlyContrib] = useState(0);
  const [expectedIncome, setExpectedIncome] = useState(0);
  const paidTotal = transactions.filter(t => t.status === 'paid').reduce((s, t) => s + t.realCost, 0);
  const outstandingTotal = transactions.filter(t => t.status !== 'paid').reduce((s, t) => s + t.estimatedCost, 0);

  useEffect(() => {
    setLoading(true);
    getTransactions()
      .then(data => {
        setTransactions(data);
        const inc = data.filter(t => t.type === 'income').reduce((s, t) => s + t.amount, 0);
        const exp = data.filter(t => t.type === 'expense').reduce((s, t) => s + t.amount, 0);
        setTotals({ income: inc, expense: exp });
        setError(null);
      })
      .catch(err => { setError(err.message); setToast({ message: err.message, type: 'error' }); })
      .finally(() => setLoading(false));
  }, []);

  const handleConnectBank = () => {
    setLoading(true);
    getTransactions()
      .then(data => {
        setTransactions(data);
        const inc = data.filter(t => t.type === 'income').reduce((s, t) => s + t.amount, 0);
        const exp = data.filter(t => t.type === 'expense').reduce((s, t) => s + t.amount, 0);
        setTotals({ income: inc, expense: exp });
        setError(null);
      })
      .catch(err => { setError(err.message); setToast({ message: err.message, type: 'error' }); })
      .finally(() => setLoading(false));
  };

  const filteredTransactions = transactions.filter(t => {
    if (categoryFilter && t.category !== categoryFilter) return false;
    if (providerFilter && t.provider !== providerFilter) return false;
    if (statusFilter && t.status !== statusFilter) return false;
    if (fromDate && t.paymentDate < fromDate) return false;
    if (toDate && t.paymentDate > toDate) return false;
    return true;
  });

  const sortedTransactions = useMemo(() => {
    if (!sortConfig.key) return filteredTransactions;
    return [...filteredTransactions].sort((a, b) => {
      const aValue = a[sortConfig.key];
      const bValue = b[sortConfig.key];
      if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;
      if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;
      return 0;
    });
  }, [filteredTransactions, sortConfig]);

  const totalPages = Math.ceil(sortedTransactions.length / pageSize);
  const paginatedTransactions = sortedTransactions.slice((currentPage - 1) * pageSize, currentPage * pageSize);

  const data = [
    { name: 'Enero', income: 1000, expense: 500 },
    { name: 'Febrero', income: 1200, expense: 600 },
    { name: 'Marzo', income: 1500, expense: 700 },
    { name: 'Abril', income: 1800, expense: 800 },
    { name: 'Mayo', income: 2000, expense: 900 },
  ];

  const pieData = [
    { name: 'Gastos', value: totals.expense },
    { name: 'Ingresos', value: totals.income },
  ];

  const projectedData = React.useMemo(() => {
    let balance = totals.income - totals.expense;
    return data.map(item => {
      balance += monthlyContrib + expectedIncome / data.length - item.expense + item.income;
      return { name: item.name, projected: parseFloat(balance.toFixed(2)) };
    });
  }, [data, totals, monthlyContrib, expectedIncome]);

  const categoriesList = React.useMemo(
    () => Array.from(new Set(transactions.map(t => t.category))).sort(),
    [transactions]
  );

  const providersList = React.useMemo(
    () => Array.from(new Set(transactions.map(t => t.provider))).sort(),
    [transactions]
  );

  const budgetLimits = useMemo(() => ({
    'Catering': 5000,
    'Localización': 3000,
    'Vestuario': 2000,
    'Decoración': 1500,
    'Fotografía': 2500,
    'Música': 1000,
    'Otros': 1000
  }), []);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Spinner />
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}
      
      {/* Encabezado */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-semibold">Finanzas</h1>
          <p className="text-sm text-gray-500">Gestiona tu presupuesto y pagos</p>
        </div>
        <div className="flex flex-wrap gap-2">
          <Button variant="outline" size="sm" onClick={handleConnectBank}>
            <Upload className="w-4 h-4 mr-2" />
            Importar
          </Button>
          <Button variant="outline" size="sm" onClick={exportCsv}>
            <Download className="w-4 h-4 mr-2" />
            Exportar
          </Button>
          <Button variant="primary" onClick={() => setModalOpen(true)}>
            <Plus className="w-4 h-4 mr-2" />
            Nuevo Movimiento
          </Button>
        </div>
      </div>
      {/* Resumen financiero */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="p-4 bg-green-50 border-green-200">
          <p className="text-sm text-green-600">Ingresos</p>
          <p className="text-2xl font-bold text-green-700">€{totals.income.toFixed(2)}</p>
        </Card>
        <Card className="p-4 bg-red-50 border-red-200">
          <p className="text-sm text-red-600">Gastos</p>
          <p className="text-2xl font-bold text-red-700">€{totals.expense.toFixed(2)}</p>
        </Card>
        <Card className="p-4 bg-blue-50 border-blue-200">
          <p className="text-sm text-blue-600">Saldo</p>
          <p className={`text-2xl font-bold ${(totals.income - totals.expense) >= 0 ? 'text-green-700' : 'text-red-700'}`}>
            €{(totals.income - totals.expense).toFixed(2)}
          </p>
        </Card>
        <Card className="p-4 bg-yellow-50 border-yellow-200">
          <p className="text-sm text-yellow-600">Presupuesto Restante</p>
          <p className="text-2xl font-bold text-yellow-700">
            €{(expectedIncome - totals.expense).toFixed(2)}
          </p>
        </Card>
      </div>
      {/* Sección de métricas adicionales */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className="p-4 text-center">
          <p className="text-sm text-gray-500">Aportación Mensual</p>
          <p className="text-xl font-bold">€{monthlyContrib.toFixed(2)}</p>
        </Card>
        <Card className="p-4 text-center">
          <p className="text-sm text-gray-500">Próximos Gastos</p>
          <p className="text-xl font-bold">€{outstandingTotal.toFixed(2)}</p>
        </Card>
        <Card className="p-4 text-center">
          <p className="text-sm text-gray-500">Saldo Total</p>
          <p className={`text-2xl font-bold ${(totals.income - totals.expense) >= 0 ? 'text-green-700' : 'text-red-700'}`}>
            €{(totals.income - totals.expense).toFixed(2)}
          </p>
        </Card>
      </div>

      {/* Componentes de análisis */}
      <BudgetAlerts transactions={transactions} budgetLimits={budgetLimits} />
      <VendorPayments transactions={transactions} />
      
      {/* Gráficos de desglose */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <CategoryBreakdown transactions={transactions} type="expense" />
        <CategoryBreakdown transactions={transactions} type="income" />
      </div>

      {/* Tabla de transacciones */}
      <Card className="p-4">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-4">
          <h3 className="text-lg font-semibold">Últimas Transacciones</h3>
          <div className="flex flex-wrap gap-2 w-full sm:w-auto">
            <select 
              className="text-sm border rounded px-2 py-1 w-full sm:w-auto" 
              value={statusFilter} 
              onChange={(e) => setStatusFilter(e.target.value)}
              aria-label="Filtrar por estado"
            >
              <option value="">Todos los estados</option>
              <option value="pending">Pendiente</option>
              <option value="paid">Pagado</option>
              <option value="overdue">Vencido</option>
            </select>
            <input 
              type="date" 
              className="text-sm border rounded px-2 py-1 w-full sm:w-auto" 
              value={fromDate} 
              onChange={(e) => setFromDate(e.target.value)} 
              placeholder="Desde"
              aria-label="Fecha desde"
            />
            <input 
              type="date" 
              className="text-sm border rounded px-2 py-1 w-full sm:w-auto" 
              value={toDate} 
              onChange={(e) => setToDate(e.target.value)} 
              placeholder="Hasta"
              aria-label="Fecha hasta"
            />
          </div>
        </div>
        </div>
        
        {/* Tabla de transacciones */}
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr className="text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                <th className="px-6 py-3">Concepto</th>
                <th className="px-6 py-3">Categoría</th>
                <th className="px-6 py-3">Proveedor</th>
                <th className="px-6 py-3 text-right">Presupuestado</th>
                <th className="px-6 py-3 text-right">Real</th>
                <th className="px-6 py-3">Fecha</th>
                <th className="px-6 py-3">Estado</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {paginatedTransactions.length > 0 ? (
                paginatedTransactions.map(t => (
                  <tr key={t.id} className="hover:bg-gray-50 transition-colors">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="font-medium text-gray-900">{t.item}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                        {t.category}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {t.provider}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">
                      {t.estimatedCost ? currencyFormatter.format(t.estimatedCost) : '-'}
                    </td>
                    <td className={`px-6 py-4 whitespace-nowrap text-sm font-medium text-right ${
                      t.type === 'income' ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {t.realCost ? currencyFormatter.format(t.realCost) : '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(t.paymentDate).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        t.status === 'paid' ? 'bg-green-100 text-green-800' :
                        t.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {t.status === 'paid' ? 'Pagado' :
                         t.status === 'pending' ? 'Pendiente' : 'Vencido'}
                      </span>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="7" className="px-6 py-4 text-center text-sm text-gray-500">
                    No hay transacciones que coincidan con los filtros seleccionados
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
        
        {/* Paginación */}
        {totalPages > 1 && (
          <div className="mt-4 flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
            <div className="flex flex-1 justify-between sm:hidden">
              <button
                onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                disabled={currentPage === 1}
                className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50"
              >
                Anterior
              </button>
              <button
                onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                disabled={currentPage === totalPages}
                className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50"
              >
                Siguiente
              </button>
            </div>
            <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
              <div>
                <p className="text-sm text-gray-700">
                  Mostrando <span className="font-medium">{(currentPage - 1) * pageSize + 1}</span> a{' '}
                  <span className="font-medium">
                    {Math.min(currentPage * pageSize, filteredTransactions.length)}
                  </span>{' '}
                  de <span className="font-medium">{filteredTransactions.length}</span> resultados
                </p>
              </div>
              <div>
                <nav className="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                  <button
                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50"
                  >
                    <span className="sr-only">Anterior</span>
                    <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clipRule="evenodd" />
                    </svg>
                  </button>
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    let pageNum;
                    if (totalPages <= 5) {
                      pageNum = i + 1;
                    } else if (currentPage <= 3) {
                      pageNum = i + 1;
                    } else if (currentPage >= totalPages - 2) {
                      pageNum = totalPages - 4 + i;
                    } else {
                      pageNum = currentPage - 2 + i;
                    }
                    return (
                      <button
                        key={pageNum}
                        onClick={() => setCurrentPage(pageNum)}
                        className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                          currentPage === pageNum
                            ? 'z-10 bg-blue-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600'
                            : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-offset-0'
                        }`}
                      >
                        {pageNum}
                      </button>
                    );
                  })}
                  <button
                    onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                    disabled={currentPage === totalPages}
                    className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50"
                  >
                    <span className="sr-only">Siguiente</span>
                    <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clipRule="evenodd" />
                    </svg>
                  </button>
                </nav>

{/* Tabla de transacciones */}
<Card className="p-4">
  <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-4">
    <h3 className="text-lg font-semibold">Últimas Transacciones</h3>
    <div className="flex flex-wrap gap-2 w-full sm:w-auto">
      <select 
        className="text-sm border rounded px-2 py-1 w-full sm:w-auto" 
        value={statusFilter} 
        onChange={(e) => setStatusFilter(e.target.value)}
        aria-label="Filtrar por estado"
        aria-label="Agregar transacción"
      >
        <Plus className="w-6 h-6" />
      </Button>
      {modalOpen && (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center" role="dialog" aria-modal="true" aria-labelledby="modal-title">
          <Card className="w-full max-w-lg mx-4 p-6">
            <h2 id="modal-title" className="text-xl font-bold mb-4">Agregar transacción</h2>
            {modalError && <div role="alert" className="text-red-600 mb-2">{modalError}</div>}
            <form onSubmit={handleAddTransaction} aria-labelledby="modal-title">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <input name="item" value={newTransaction.item} onChange={handleInputChange} placeholder="Ítem" className="border rounded px-2 py-1 w-full" />
                <input name="category" value={newTransaction.category} onChange={handleInputChange} placeholder="Categoría" className="border rounded px-2 py-1 w-full" />
                <input name="provider" value={newTransaction.provider} onChange={handleInputChange} placeholder="Proveedor" className="border rounded px-2 py-1 w-full" />
                <input name="estimatedCost" value={newTransaction.estimatedCost} onChange={handleInputChange} type="number" placeholder="Coste previsto" className="border rounded px-2 py-1 w-full" />
                <input name="realCost" value={newTransaction.realCost} onChange={handleInputChange} type="number" placeholder="Coste real" className="border rounded px-2 py-1 w-full" />
                <input name="paymentDate" value={newTransaction.paymentDate} onChange={handleInputChange} type="date" placeholder="Fecha de pago" className="border rounded px-2 py-1 w-full" />
                <select name="type" value={newTransaction.type} onChange={handleInputChange} className="border rounded px-2 py-1 w-full" aria-label="Tipo de transacción">
                  <option value="">Tipo</option>
                  <option value="income">Ingreso</option>
                  <option value="expense">Gasto</option>
                </select>
                <select name="status" value={newTransaction.status} onChange={handleInputChange} className="border rounded px-2 py-1 w-full" aria-label="Estado">
                  <option value="">Estado</option>
                  <option value="pending">Pendiente</option>
                  <option value="paid">Pagado</option>
                </select>
              </div>
              <div className="flex justify-end gap-2">
                <Button variant="secondary" onClick={handleCloseModal}>Cancelar</Button>
                <Button type="submit">Agregar</Button>
              </div>
            </form>
          </Card>
        </div>
      )}
    </div>
  );
}
