rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Colección de bodas
    match /weddings/{weddingId} {
      // Lectura: propietarios, planners y asistentes
      allow read: if request.auth != null && (
        (resource.data.ownerIds != null && request.auth.uid in resource.data.ownerIds) ||
        (resource.data.plannerIds != null && request.auth.uid in resource.data.plannerIds) ||
        (resource.data.assistantIds != null && request.auth.uid in resource.data.assistantIds)
      );
      // Escritura: propietarios y planners. Además permitimos que el invitado se añada a sí mismo como planner una única vez.
      allow update: if isOwnerOrPlanner(weddingId) || isAddingSelfAsPlanner();
      allow create, delete: if isOwnerOrPlanner(weddingId);

            function isAddingSelfAsPlanner() {
        return request.auth != null &&
          // Permitimos si la operación SOLO modifica plannerIds (ideal para FieldValue.arrayUnion)
          request.writeFields.hasOnly(['plannerIds']);
      }
    }

    // Subcolecciones dentro de una boda (invitados, tareas, proveedores, etc.)
    match /weddings/{weddingId}/{document=**} {
      allow read: if request.auth != null && (
        (get(/databases/$(database)/documents/weddings/$(weddingId)).data.ownerIds != null && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.ownerIds) ||
        (get(/databases/$(database)/documents/weddings/$(weddingId)).data.plannerIds != null && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.plannerIds) ||
        (get(/databases/$(database)/documents/weddings/$(weddingId)).data.assistantIds != null && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.assistantIds)
      );
      allow write: if request.auth != null && (
        (get(/databases/$(database)/documents/weddings/$(weddingId)).data.ownerIds != null && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.ownerIds) ||
        (get(/databases/$(database)/documents/weddings/$(weddingId)).data.plannerIds != null && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.plannerIds)
      );
    }
    // Invitaciones
    match /weddingInvitations/{code} {
      // Crear invitación
      allow create: if request.auth != null;
      // Leer invitación para comprobar código
      allow get: if request.auth != null;
      // Actualizar (marcar aceptada)
      allow update: if request.auth != null;
      // No permitir eliminación directa desde cliente
      allow delete: if false;
    }

    // Colección diagnosis para test de conexión
    match /diagnosis/{docId} {
      allow read, write: if request.auth != null;
    }

    // Colección _conexion_prueba para ping healthcheck
    match /_conexion_prueba/{docId} {
      // Permitir sin autenticación para prueba de conexión inicial
      allow read, write: if true;
    }

    // Colección _test_connection para prueba de escritura
    match /_test_connection/{docId} {
      allow read, write: if true;
    }

    // Perfil de usuario
    match /users/{uid} {
      // Cualquier usuario autenticado puede leer datos de perfil básicos
      allow read: if request.auth != null;
      // Solo el propietario puede crear o actualizar su perfil
      allow update, create: if request.auth != null && request.auth.uid == uid;
    }

    // Subcolecciones dentro de un perfil de usuario (p.ej. tasks, mails, etc.)
    match /users/{uid}/{subCollection=**} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // Perfil de usuario (colección alternativa singular)
    match /userProfile/{uid} {
      allow read: if request.auth != null; // cualquier autenticado puede leer perfiles
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    // Perfil de usuario (colección plural)
    match /userProfiles/{uid} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    // Colección de invitados por usuario (almacenamiento híbrido)
    match /userGuests/{uid} {
      // Cada usuario puede leer y escribir su propio documento de invitados
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // Colecciones de datos privados por usuario (sincronización local)
    match /userData/{uid} {
      // Cada usuario sólo puede leer/escribir su propio documento
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    match /userTasksCompleted/{uid} {
      // Cada usuario sólo puede leer/escribir su propio documento
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    function isOwner(wid) {
      return request.auth != null &&
        request.auth.uid in get(/databases/$(database)/documents/weddings/$(wid)).data.ownerIds;
    }

    function isPlanner(wid) {
      return request.auth != null &&
        request.auth.uid in get(/databases/$(database)/documents/weddings/$(wid)).data.plannerIds;
    }

    function isAssistant(wid) {
      return request.auth != null &&
        request.auth.uid in get(/databases/$(database)/documents/weddings/$(wid)).data.assistantIds;
    }

    function isOwnerOrPlanner(wid) {
      return isOwner(wid) || isPlanner(wid);
    }

    function isCollaborator(wid) {
      return isOwner(wid) || isPlanner(wid) || isAssistant(wid);
    }
  }
}
