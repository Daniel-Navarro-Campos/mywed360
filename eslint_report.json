[{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\App.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\__tests__\\GuestItem.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\__tests__\\SeatingPlan.history.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\Alert.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\BanquetConfigModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\Button.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\Card.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\CeremonyConfigModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ChairItem.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ChatWidget.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\DarkModeToggle.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\DefaultAvatar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\EmailInsights.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\EmailNotification.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":14,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":17},{"ruleId":"react/no-unknown-property","severity":2,"message":"Unknown property 'jsx' found","line":108,"column":14,"nodeType":"JSXAttribute","messageId":"unknownProp","endLine":108,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getMails, initEmailService } from '../services/EmailService';\nimport { loadData } from '../services/SyncService';\n\n/**\n * Componente que muestra una notificación de nuevos correos recibidos\n * y permite navegar directamente al buzón\n */\nexport default function EmailNotification() {\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [showNotification, setShowNotification] = useState(false);\n  const [serviceInitialized, setServiceInitialized] = useState(false);\n  const navigate = useNavigate();\n  \n  // Comprobar correos no leídos\n  useEffect(() => {\n    async function checkUnreadMails() {\n      try {\n        // Inicializar servicio de email una sola vez cuando tengamos perfil\n        if (!serviceInitialized) {\n          const profile = await loadData('lovendaProfile', {});\n          if (profile && Object.keys(profile).length) {\n            initEmailService(profile);\n            setServiceInitialized(true);\n          } else {\n            // Si no hay perfil aún, salir y reintentar en el próximo ciclo\n            return;\n          }\n        }\n\n        // Una vez inicializado, obtener correos de la bandeja de entrada\n        const inboxMails = await getMails('inbox');\n\n        // Contar los no leídos\n        const unread = inboxMails.filter(mail => !mail.read).length;\n\n        // Actualizar estado\n        setUnreadCount(unread);\n        setShowNotification(unread > 0);\n      } catch (error) {\n        console.error('Error al comprobar correos nuevos:', error);\n      }\n    }\n\n    // Comprobar al inicio\n    checkUnreadMails();\n\n    // Comprobar cada minuto\n    const intervalId = setInterval(checkUnreadMails, 60000);\n\n    return () => clearInterval(intervalId);\n  }, [serviceInitialized]);\n  \n  // Ocultar la notificación después de un tiempo\n  useEffect(() => {\n    if (showNotification) {\n      const timeoutId = setTimeout(() => {\n        setShowNotification(false);\n      }, 10000); // 10 segundos\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [showNotification]);\n  \n  // Si no hay correos no leídos, no mostrar nada\n  if (unreadCount === 0 || !showNotification) {\n    return null;\n  }\n  \n  return (\n    <div className=\"fixed bottom-4 right-4 bg-white rounded-lg shadow-lg p-4 max-w-xs z-50 border-l-4 border-blue-500 animate-bounce-once\">\n      <div className=\"flex items-center\">\n        <div className=\"mr-2\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-blue-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n          </svg>\n        </div>\n        <div className=\"flex-1\">\n          <h4 className=\"font-bold text-gray-800\">\n            {unreadCount === 1 \n              ? 'Tienes un nuevo mensaje' \n              : `Tienes ${unreadCount} mensajes nuevos`}\n          </h4>\n          <p className=\"text-sm text-gray-600\">\n            Pulsa aquí para ver tu bandeja de entrada\n          </p>\n        </div>\n        <button \n          onClick={(e) => {\n            e.stopPropagation();\n            setShowNotification(false);\n          }} \n          className=\"text-gray-400 hover:text-gray-600\"\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n      <div \n        onClick={() => alert('Funcionalidad de buzón temporalmente no disponible')} \n        className=\"absolute inset-0 cursor-pointer\"\n        aria-hidden=\"true\"\n      />\n      \n      {/* Estilos para la animación de rebote */}\n      <style jsx=\"true\">{`\n        @keyframes bounce-once {\n          0%, 100% { transform: translateY(0); }\n          50% { transform: translateY(-10px); }\n        }\n        .animate-bounce-once {\n          animation: bounce-once 1s ease-in-out;\n        }\n      `}</style>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\FreeDrawCanvas.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState, useEffect } from 'react';\r\n\r\n/**\r\n * FreeDrawCanvas\r\n * Simple freehand drawing canvas that captures pointer strokes, smooths them with Chaikin algorithm,\r\n * and renders the smoothed path as SVG.\r\n * Props:\r\n *   onFinalize(points) => called when user double-clicks / presses Finish to commit current stroke\r\n */\r\nexport default function FreeDrawCanvas({ className = '', style = {}, strokeColor = '#3b82f6', scale = 1, offset = { x: 0, y: 0 }, areas = [], drawMode = 'free', onFinalize, onDeleteArea = () => {} }) {\r\n  const svgRef = useRef(null);\r\n  const [points, setPoints] = useState([]);\r\n  const [drawing, setDrawing] = useState(false);\r\n  const startRef = useRef(null);\r\n\r\n  const toSvgPoint = (e) => {\r\n    const svg = svgRef.current;\r\n    const rect = svg.getBoundingClientRect();\r\n    // adjust for current transform\r\n    return {\r\n      x: (e.clientX - rect.left - offset.x) / scale,\r\n      y: (e.clientY - rect.top - offset.y) / scale,\r\n    };\r\n  };\r\n\r\n  // Chaikin smoothing – one iteration\r\n  const smooth = (pts) => {\r\n    if (pts.length < 2) return pts;\r\n    const out = [];\r\n    for (let i = 0; i < pts.length - 1; i++) {\r\n      const p0 = pts[i];\r\n      const p1 = pts[i + 1];\r\n      out.push({ x: 0.75 * p0.x + 0.25 * p1.x, y: 0.75 * p0.y + 0.25 * p1.y });\r\n      out.push({ x: 0.25 * p0.x + 0.75 * p1.x, y: 0.25 * p0.y + 0.75 * p1.y });\r\n    }\r\n    return out;\r\n  };\r\n\r\n  const getPathD = (pts) => {\r\n    if (!pts.length) return '';\r\n    const d = [`M ${pts[0].x} ${pts[0].y}`];\r\n    for (let i = 1; i < pts.length; i++) d.push(`L ${pts[i].x} ${pts[i].y}`);\r\n    return d.join(' ');\r\n  };\r\n\r\n  const handlePointerDown = (e) => {\r\n    e.preventDefault();\r\n    const pt = toSvgPoint(e);\r\n    if (drawMode === 'line') {\r\n      setDrawing(true);\r\n      setPoints([pt]);\r\n      return;\r\n    }\r\n    if (drawMode === 'rect') {\r\n      setDrawing(true);\r\n      startRef.current = pt;\r\n      setPoints([pt]);\r\n      return;\r\n    }\r\n    if (drawMode === 'free' || drawMode === 'curve') {\r\n      setDrawing(true);\r\n      setPoints([pt]);\r\n    }\r\n  };\r\n\r\n  const handlePointerMove = (e) => {\r\n    if (!drawing) return;\r\n    if (drawMode === 'line') {\r\n      const pt = toSvgPoint(e);\r\n      setPoints(prev => (prev.length === 1 ? [prev[0], pt] : [prev[0], pt]));\r\n      return;\r\n    }\r\n    if (drawMode === 'rect') {\r\n      const cur = toSvgPoint(e);\r\n      const start = startRef.current;\r\n      if (!start) return;\r\n      const rectPts = [\r\n        start,\r\n        { x: cur.x, y: start.y },\r\n        cur,\r\n        { x: start.x, y: cur.y },\r\n        start,\r\n      ];\r\n      setPoints(rectPts);\r\n      return;\r\n    }\r\n    if (drawMode === 'free' || drawMode === 'curve') {\r\n      const pt = toSvgPoint(e);\r\n      setPoints(prev => [...prev, pt]);\r\n    }\r\n  };\r\n\r\n  const handlePointerUp = (e) => {\r\n    if (!drawing) return;\r\n    if (drawMode === 'line') {\r\n      const pt = toSvgPoint(e);\r\n      const line = points.length === 2 ? points : [points[0], pt];\r\n      onFinalize && onFinalize(line);\r\n      setPoints([]);\r\n      setDrawing(false);\r\n      return;\r\n    }\r\n    if (drawMode === 'rect') {\r\n      if (points.length >= 4) {\r\n        onFinalize && onFinalize(points);\r\n      }\r\n      setPoints([]);\r\n      startRef.current = null;\r\n      setDrawing(false);\r\n      return;\r\n    }\r\n    // Para freehand / curva simplemente detenemos la captura; la finalización será mediante doble clic\r\n    setDrawing(false);\r\n  };\r\n\r\n  const handleDoubleClick = () => {\r\n    if (drawMode === 'free' || drawMode === 'curve') {\r\n      if (points.length > 2) {\r\n        const smoothed = smooth(points);\r\n        onFinalize && onFinalize(smoothed);\r\n        setPoints([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <svg\r\n      ref={svgRef}\r\n      className={`w-full h-full touch-none ${className}`}\r\n      style={style}\r\n      onPointerDown={handlePointerDown}\r\n      onPointerMove={handlePointerMove}\r\n      onPointerUp={handlePointerUp}\r\n      onDoubleClick={handleDoubleClick}\r\n    >\r\n      {/* Áreas existentes */}\r\n      <g transform={`translate(${offset.x} ${offset.y}) scale(${scale})`}>\r\n        {areas.map((poly, idx) => (\r\n          <path\r\n            key={idx}\r\n            d={getPathD(poly)}\r\n            stroke=\"#10b981\"\r\n            strokeWidth={2}\r\n            fill=\"none\"\r\n            onPointerDown={drawMode === 'erase' ? (e) => { e.stopPropagation(); onDeleteArea(idx); } : undefined}\r\n            style={{ cursor: drawMode === 'erase' ? 'pointer' : 'default' }}\r\n          />\r\n        ))}\r\n        {/* Trazo actual */}\r\n        {points.length > 0 && (\r\n          <path d={getPathD(points)} stroke={strokeColor} strokeWidth={2} fill=\"none\" />\r\n        )}\r\n      </g>\r\n    </svg>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\GlobalSearch.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ChevronRight' is defined but never used.","line":2,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":55},{"ruleId":"no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":66,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":66,"endColumn":48},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":319,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10758,10812],"text":"\n                  No se encontraron resultados para &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10758,10812],"text":"\n                  No se encontraron resultados para &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10758,10812],"text":"\n                  No se encontraron resultados para &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10758,10812],"text":"\n                  No se encontraron resultados para &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":319,"column":66,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10824,10842],"text":"&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10824,10842],"text":"&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10824,10842],"text":"&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10824,10842],"text":"&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Search, Mail, Calendar, User, X, ChevronRight, Clock } from 'lucide-react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\nimport * as EmailService from '../services/EmailService';\nimport * as ProveedorService from '../services/ProveedorService';\n\n/**\n * Componente de búsqueda global que permite buscar en emails, eventos y proveedores\n * desde un único punto de acceso en la aplicación\n * \n * @returns {React.ReactElement} Componente de búsqueda global\n */\nconst GlobalSearch = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [results, setResults] = useState({\n    emails: [],\n    events: [],\n    providers: []\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedSection, setSelectedSection] = useState('all');\n  const [activeIndex, setActiveIndex] = useState(-1);\n  \n  const searchRef = useRef(null);\n  const inputRef = useRef(null);\n  const resultsRef = useRef(null);\n  const navigate = useNavigate();\n  \n  // Cerrar al hacer clic fuera del componente\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (searchRef.current && !searchRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  \n  // Manejar teclas de navegación\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (!isOpen) return;\n      \n      switch (e.key) {\n        case 'ArrowDown':\n          e.preventDefault();\n          setActiveIndex(prev => {\n            const flatResults = getFlatResults();\n            return Math.min(prev + 1, flatResults.length - 1);\n          });\n          break;\n          \n        case 'ArrowUp':\n          e.preventDefault();\n          setActiveIndex(prev => Math.max(prev - 1, -1));\n          break;\n          \n        case 'Enter':\n          e.preventDefault();\n          const flatResults = getFlatResults();\n          if (activeIndex >= 0 && activeIndex < flatResults.length) {\n            handleSelectResult(flatResults[activeIndex]);\n          }\n          break;\n          \n        case 'Escape':\n          e.preventDefault();\n          setIsOpen(false);\n          break;\n          \n        default:\n          break;\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isOpen, activeIndex]);\n  \n  // Desplazar al elemento seleccionado\n  useEffect(() => {\n    if (activeIndex >= 0 && resultsRef.current) {\n      const activeElement = resultsRef.current.querySelector(`[data-index=\"${activeIndex}\"]`);\n      if (activeElement) {\n        activeElement.scrollIntoView({ block: 'nearest' });\n      }\n    }\n  }, [activeIndex]);\n  \n  // Aplanar resultados para navegación por teclado\n  const getFlatResults = () => {\n    const flat = [];\n    \n    if (selectedSection === 'all' || selectedSection === 'emails') {\n      results.emails.forEach(item => flat.push({ ...item, type: 'email' }));\n    }\n    \n    if (selectedSection === 'all' || selectedSection === 'events') {\n      results.events.forEach(item => flat.push({ ...item, type: 'event' }));\n    }\n    \n    if (selectedSection === 'all' || selectedSection === 'providers') {\n      results.providers.forEach(item => flat.push({ ...item, type: 'provider' }));\n    }\n    \n    return flat;\n  };\n  \n  // Función de búsqueda con debounce para mejorar rendimiento\n  const performSearch = useCallback(\n    debounce(async (term) => {\n      if (!term || term.trim().length < 2) {\n        setResults({ emails: [], events: [], providers: [] });\n        setIsLoading(false);\n        return;\n      }\n      \n      setIsLoading(true);\n      \n      try {\n        // Búsqueda en paralelo en diferentes servicios\n        const [emailResults, eventResults, providerResults] = await Promise.all([\n          EmailService.searchEmails(term),\n          EmailService.searchEvents(term),\n          ProveedorService.searchProviders(term)\n        ]);\n        \n        setResults({\n          emails: emailResults.slice(0, 5),\n          events: eventResults.slice(0, 5),\n          providers: providerResults.slice(0, 5)\n        });\n        \n      } catch (error) {\n        console.error('Error en búsqueda global:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }, 300),\n    []\n  );\n  \n  // Actualizar resultados al cambiar el término de búsqueda\n  useEffect(() => {\n    if (isOpen) {\n      setIsLoading(true);\n      performSearch(searchTerm);\n    }\n  }, [searchTerm, isOpen, performSearch]);\n  \n  // Abrir el buscador\n  const handleOpen = () => {\n    setIsOpen(true);\n    setTimeout(() => {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, 100);\n  };\n  \n  // Manejar cambios en el campo de búsqueda\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n    setActiveIndex(-1);\n  };\n  \n  // Seleccionar un resultado\n  const handleSelectResult = (item) => {\n    switch (item.type) {\n      case 'email':\n        navigate(`/buzon/${item.id}`);\n        break;\n      case 'event':\n        navigate(`/calendario/evento/${item.id}`);\n        break;\n      case 'provider':\n        navigate(`/proveedores/${item.id}`);\n        break;\n      default:\n        break;\n    }\n    \n    setIsOpen(false);\n    setSearchTerm('');\n  };\n  \n  // Formatear fecha para mostrar\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  };\n  \n  // Resaltar coincidencias en el texto\n  const highlightMatch = (text, term) => {\n    if (!text || !term) return text;\n    \n    const regex = new RegExp(`(${term})`, 'gi');\n    const parts = text.split(regex);\n    \n    return parts.map((part, index) => \n      regex.test(part) ? <mark key={index} className=\"bg-yellow-200 rounded-sm\">{part}</mark> : part\n    );\n  };\n  \n  // Total de resultados\n  const totalResults = results.emails.length + results.events.length + results.providers.length;\n  \n  return (\n    <div className=\"relative z-50\" ref={searchRef}>\n      {/* Botón de búsqueda */}\n      <button\n        onClick={handleOpen}\n        className=\"flex items-center text-gray-600 hover:text-gray-900 focus:outline-none\"\n        aria-label=\"Buscar en Lovenda\"\n      >\n        <Search size={20} />\n        <span className=\"ml-2 hidden md:inline\">Buscar</span>\n      </button>\n      \n      {/* Modal de búsqueda */}\n      {isOpen && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-20 flex items-start justify-center pt-16 px-4\">\n          <div className=\"bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[80vh] overflow-hidden flex flex-col\">\n            {/* Cabecera y campo de búsqueda */}\n            <div className=\"p-4 border-b border-gray-200\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={18} />\n                <input\n                  ref={inputRef}\n                  type=\"text\"\n                  value={searchTerm}\n                  onChange={handleSearchChange}\n                  placeholder=\"Buscar emails, eventos, proveedores...\"\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition\"\n                  autoFocus\n                />\n                {searchTerm && (\n                  <button\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                    onClick={() => setSearchTerm('')}\n                  >\n                    <X size={16} />\n                  </button>\n                )}\n              </div>\n              \n              {/* Pestañas de filtrado */}\n              <div className=\"flex mt-3 border-b border-gray-200\">\n                <button\n                  onClick={() => setSelectedSection('all')}\n                  className={`px-3 py-2 text-sm font-medium ${\n                    selectedSection === 'all' \n                      ? 'text-blue-600 border-b-2 border-blue-600' \n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  Todo\n                </button>\n                <button\n                  onClick={() => setSelectedSection('emails')}\n                  className={`px-3 py-2 text-sm font-medium flex items-center ${\n                    selectedSection === 'emails' \n                      ? 'text-blue-600 border-b-2 border-blue-600' \n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  <Mail size={16} className=\"mr-1\" />\n                  Emails\n                </button>\n                <button\n                  onClick={() => setSelectedSection('events')}\n                  className={`px-3 py-2 text-sm font-medium flex items-center ${\n                    selectedSection === 'events' \n                      ? 'text-blue-600 border-b-2 border-blue-600' \n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  <Calendar size={16} className=\"mr-1\" />\n                  Eventos\n                </button>\n                <button\n                  onClick={() => setSelectedSection('providers')}\n                  className={`px-3 py-2 text-sm font-medium flex items-center ${\n                    selectedSection === 'providers' \n                      ? 'text-blue-600 border-b-2 border-blue-600' \n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  <User size={16} className=\"mr-1\" />\n                  Proveedores\n                </button>\n              </div>\n            </div>\n            \n            {/* Contenido de resultados */}\n            <div className=\"overflow-y-auto flex-grow\" ref={resultsRef}>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center p-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n                </div>\n              ) : searchTerm.length < 2 ? (\n                <div className=\"text-center p-8 text-gray-500\">\n                  Escribe al menos 2 caracteres para buscar\n                </div>\n              ) : totalResults === 0 ? (\n                <div className=\"text-center p-8 text-gray-500\">\n                  No se encontraron resultados para \"{searchTerm}\"\n                </div>\n              ) : (\n                <>\n                  {/* Resultados de Emails */}\n                  {(selectedSection === 'all' || selectedSection === 'emails') && results.emails.length > 0 && (\n                    <div className=\"px-4 py-3\">\n                      <h3 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2 flex items-center\">\n                        <Mail size={14} className=\"mr-1\" />\n                        Emails ({results.emails.length})\n                      </h3>\n                      <ul className=\"space-y-1\">\n                        {results.emails.map((email, index) => {\n                          // Calcular índice global\n                          const globalIndex = selectedSection === 'all' ? index : index;\n                          \n                          return (\n                            <li \n                              key={email.id}\n                              onClick={() => handleSelectResult({ ...email, type: 'email' })}\n                              className={`p-2 rounded-md cursor-pointer transition ${\n                                activeIndex === globalIndex ? 'bg-blue-50' : 'hover:bg-gray-50'\n                              }`}\n                              data-index={globalIndex}\n                            >\n                              <div className=\"flex justify-between\">\n                                <div className=\"font-medium\">\n                                  {highlightMatch(email.subject || '(Sin asunto)', searchTerm)}\n                                </div>\n                                <div className=\"text-xs text-gray-500 flex items-center\">\n                                  <Clock size={12} className=\"mr-1\" />\n                                  {formatDate(email.date)}\n                                </div>\n                              </div>\n                              <div className=\"text-sm text-gray-600 truncate\">\n                                {email.from && (\n                                  <span className=\"mr-1\">\n                                    De: {highlightMatch(email.from, searchTerm)}\n                                  </span>\n                                )}\n                              </div>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                    </div>\n                  )}\n                  \n                  {/* Resultados de Eventos */}\n                  {(selectedSection === 'all' || selectedSection === 'events') && results.events.length > 0 && (\n                    <div className=\"px-4 py-3 border-t border-gray-100\">\n                      <h3 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2 flex items-center\">\n                        <Calendar size={14} className=\"mr-1\" />\n                        Eventos ({results.events.length})\n                      </h3>\n                      <ul className=\"space-y-1\">\n                        {results.events.map((event, index) => {\n                          // Calcular índice global\n                          const globalIndex = selectedSection === 'all' \n                            ? results.emails.length + index\n                            : index;\n                            \n                          return (\n                            <li \n                              key={event.id}\n                              onClick={() => handleSelectResult({ ...event, type: 'event' })}\n                              className={`p-2 rounded-md cursor-pointer transition ${\n                                activeIndex === globalIndex ? 'bg-blue-50' : 'hover:bg-gray-50'\n                              }`}\n                              data-index={globalIndex}\n                            >\n                              <div className=\"font-medium\">\n                                {highlightMatch(event.title, searchTerm)}\n                              </div>\n                              <div className=\"text-sm text-gray-600 flex items-center\">\n                                <Calendar size={14} className=\"mr-1 text-blue-500\" />\n                                <span>\n                                  {new Date(event.dateTime).toLocaleDateString('es-ES')} - {new Date(event.dateTime).toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })}\n                                </span>\n                              </div>\n                              {event.location && (\n                                <div className=\"text-sm text-gray-600 truncate\">\n                                  {highlightMatch(event.location, searchTerm)}\n                                </div>\n                              )}\n                            </li>\n                          );\n                        })}\n                      </ul>\n                    </div>\n                  )}\n                  \n                  {/* Resultados de Proveedores */}\n                  {(selectedSection === 'all' || selectedSection === 'providers') && results.providers.length > 0 && (\n                    <div className=\"px-4 py-3 border-t border-gray-100\">\n                      <h3 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2 flex items-center\">\n                        <User size={14} className=\"mr-1\" />\n                        Proveedores ({results.providers.length})\n                      </h3>\n                      <ul className=\"space-y-1\">\n                        {results.providers.map((provider, index) => {\n                          // Calcular índice global\n                          const globalIndex = selectedSection === 'all' \n                            ? results.emails.length + results.events.length + index\n                            : index;\n                            \n                          return (\n                            <li \n                              key={provider.id}\n                              onClick={() => handleSelectResult({ ...provider, type: 'provider' })}\n                              className={`p-2 rounded-md cursor-pointer transition ${\n                                activeIndex === globalIndex ? 'bg-blue-50' : 'hover:bg-gray-50'\n                              }`}\n                              data-index={globalIndex}\n                            >\n                              <div className=\"font-medium\">\n                                {highlightMatch(provider.name, searchTerm)}\n                              </div>\n                              {provider.type && (\n                                <div className=\"text-sm text-gray-600\">\n                                  {highlightMatch(provider.type, searchTerm)}\n                                </div>\n                              )}\n                              {provider.contact && (\n                                <div className=\"text-sm text-gray-600 truncate\">\n                                  {highlightMatch(provider.contact, searchTerm)}\n                                </div>\n                              )}\n                            </li>\n                          );\n                        })}\n                      </ul>\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n            \n            {/* Pie de resultados */}\n            {!isLoading && searchTerm.length >= 2 && totalResults > 0 && (\n              <div className=\"px-4 py-2 text-xs text-gray-500 border-t border-gray-200\">\n                Usa ↑↓ para navegar, Enter para seleccionar\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GlobalSearch;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\GuestItem.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\HomePage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Phone' is defined but never used.","line":8,"column":78,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":83},{"ruleId":"no-unused-vars","severity":2,"message":"'logoUrl' is assigned a value but never used.","line":23,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":63},{"ruleId":"no-unused-vars","severity":2,"message":"'totalGuests' is assigned a value but never used.","line":66,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useUserContext } from '../context/UserContext';\nimport { Card } from './ui/Card';\nimport { Progress } from './ui/Progress';\nimport Nav from './Nav';\n\nimport { User, DollarSign, Calendar, Users, ChevronLeft, ChevronRight, Plus, Phone } from 'lucide-react';\nimport Input from './Input';\nimport ProviderSearchModal from './ProviderSearchModal';\n\nimport inspo1 from '../assets/inspo1.jpg';\nimport inspo2 from '../assets/inspo2.jpg';\nimport inspo3 from '../assets/inspo3.jpg';\nimport inspo4 from '../assets/inspo4.jpg';\n\nexport default function HomePage() {\n  // Todo se maneja con modales locales\n  const [noteText, setNoteText] = useState('');\n  const [guest, setGuest] = useState({name: '', side: 'novia', contact: ''});\n  const [newMovement, setNewMovement] = useState({concept: '', amount: 0, date: '', type: 'expense'});\n  const [activeModal, setActiveModal] = useState(null);\n  const { user, role, userName, weddingName, progress, logoUrl } = useUserContext();\n  const galleryRef = useRef(null);\n\n  const handleRedoTutorial = async () => {\n    if (!confirm('Esto eliminará datos locales y creará una nueva boda de prueba. ¿Continuar?')) return;\n    try {\n      // 1. Marcar flag para forzar onboarding y limpiar localStorage\n      localStorage.clear();\n      localStorage.setItem('forceOnboarding', '1');\n      // 2. Crear evento de prueba en backend si estamos autenticados\n      if (user?.uid && process.env.NODE_ENV === 'development') {\n        const res = await fetch('/api/events', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${user.uid}`,\n          },\n          body: JSON.stringify({ name: 'Boda de prueba', date: new Date().toISOString().substring(0, 10) }),\n        });\n        if (!res.ok) throw new Error('Fallo creando boda');\n      }\n      toast.success('Tutorial reiniciado: recargando...');\n      setTimeout(() => window.location.reload(), 800);\n    } catch (err) {\n      console.error(err);\n      toast.error('No se pudo reiniciar el tutorial');\n    }\n  };\n  const scrollAmount = 300;\n\n  const scrollPrev = () => {\n    galleryRef.current?.scrollBy({ left: -scrollAmount, behavior: 'smooth' });\n  };\n\n  const scrollNext = () => {\n    galleryRef.current?.scrollBy({ left: scrollAmount, behavior: 'smooth' });\n  };\n\n  // --- Métricas dinámicas ---\n  const guestsArr = (() => {\n    try { return JSON.parse(localStorage.getItem('lovendaGuests') || '[]'); } catch { return []; }\n  })();\n  const confirmedCount = guestsArr.filter(g => ((g.response || g.status || '').toLowerCase() === 'confirmado')).length;\n  const totalGuests = guestsArr.length;\n\n  const tasksCompletedMap = (() => { try { return JSON.parse(localStorage.getItem('tasksCompleted') || '{}'); } catch { return {}; } })();\n  const meetingsArr = (() => { try { return JSON.parse(localStorage.getItem('lovendaMeetings') || '[]'); } catch { return []; } })();\n  const longTasksArr = (() => { try { return JSON.parse(localStorage.getItem('lovendaLongTasks') || '[]'); } catch { return []; } })();\n  const allTasks = [...meetingsArr, ...longTasksArr];\n  const tasksTotal = allTasks.length;\n  const tasksCompleted = allTasks.filter(t => tasksCompletedMap[t.id]).length;\n\n  const providersArr = (() => { try { return JSON.parse(localStorage.getItem('lovendaProviders') || '[]'); } catch { return []; } })();\n  const providersTotalNeeded = 8; // puede venir de ajustes\n  const providersAssigned = providersArr.length;\n\n  const movements = (() => { try { return JSON.parse(localStorage.getItem('quickMovements') || '[]'); } catch { return []; } })();\n  const spent = movements.filter(m => m.type !== 'income').reduce((sum, m) => sum + (m.amount || 0), 0);\n  const budgetTotal = 15000; // placeholder\n\n  const statsNovios = [\n    { label: 'Invitados confirmados', value: confirmedCount, icon: Users },\n    { label: 'Presupuesto gastado', value: `€${spent.toLocaleString()}` + (budgetTotal ? ` / €${budgetTotal.toLocaleString()}` : ''), icon: DollarSign },\n    { label: 'Proveedores contratados', value: `${providersAssigned} / ${providersTotalNeeded}`, icon: User },\n    { label: 'Tareas completadas', value: `${tasksCompleted} / ${tasksTotal}`, icon: Calendar },\n  ];\n\n  const statsPlanner = [\n    { label: 'Tareas asignadas', value: `${tasksTotal}`, icon: Calendar },\n    { label: 'Proveedores asignados', value: providersAssigned, icon: User },\n    { label: 'Invitados confirmados', value: confirmedCount, icon: Users },\n    { label: 'Presupuesto gastado', value: `€${spent.toLocaleString()}` + (budgetTotal ? ` / €${budgetTotal.toLocaleString()}` : ''), icon: DollarSign },\n  ];\n\n  const statsCommon = role === 'particular' ? statsNovios : statsPlanner;\n\n  return (\n    <React.Fragment>\n      {/* Botón solo visible en desarrollo */}\n      {true && (\n        <button\n          onClick={handleRedoTutorial}\n          className=\"fixed top-4 right-4 bg-red-600 text-white px-4 py-2 rounded-full shadow-lg z-[100]\"\n        >\n          Rehacer tutorial\n        </button>\n      )}\n      <div className=\"relative flex flex-col h-full bg-[var(--color-bg)] pb-16\">\n        {/* Decorative background circle */}\n        <div className=\"absolute top-0 right-0 w-64 h-64 bg-[var(--color-accent)] rounded-full opacity-20 transform translate-x-1/2 -translate-y-1/2\" />\n\n        {/* Header */}\n        <header className=\"relative z-10 p-6 flex justify-between items-center\">\n          <div className=\"space-y-1\">\n            <h1 className=\"page-title\">Bienvenidos, {weddingName}{weddingName && userName ? ' y ' : ''}{userName}</h1>\n            <p className=\"text-4xl font-bold text-[color:var(--color-text)]\">Cada detalle hace tu boda inolvidable</p>\n          </div>\n          <img\n            src={`${import.meta.env.BASE_URL}logo-app.png`}\n            alt=\"Logo de la boda\"\n            className=\"w-32 h-32 object-contain\"\n          />\n        </header>\n\n        {/* Progress Section */}\n        <section className=\"z-10 w-full p-6\">\n          <Card className=\"bg-[var(--color-surface)]/70 backdrop-blur-md p-4 w-full\">\n            <p className=\"text-sm text-[color:var(--color-text)]/70 mb-2\">Progreso de tareas</p>\n            <Progress\n              className=\"h-4 rounded-full w-full\"\n              value={progress}\n              max={100}\n              variant={\n                progress >= 100\n                  ? 'success'\n                  : progress >= 80\n                  ? 'primary'\n                  : 'destructive'\n              }\n            />\n            <p className=\"mt-2 text-sm font-medium text-[color:var(--color-text)]\">\n              {progress}% completado\n            </p>\n          </Card>\n        </section>\n\n        {/* Quick Actions */}\n        <section className=\"z-10 p-6 flex flex-nowrap gap-4 w-full\">\n          {[\n            { key: 'proveedor', label: 'Buscar proveedor', icon: User },\n            { key: 'invitado', label: 'Añadir invitado', icon: Users },\n            { key: 'movimiento', label: 'Añadir movimiento', icon: DollarSign },\n            { key: 'nota', label: 'Nueva nota', icon: Plus },\n          ].map((action, idx) => {\n            const Icon = action.icon;\n            return (\n              <Card\n                key={idx}\n                role=\"button\"\n                onClick={() => setActiveModal(action.key)}\n                className=\"flex-1 flex items-center justify-between p-4 bg-[var(--color-surface)]/80 backdrop-blur-md hover:shadow-lg transition transform hover:scale-105 cursor-pointer\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <Icon className=\"text-[var(--color-primary)]\" />\n                  <span className=\"text-[color:var(--color-text)] font-medium\">{action.label}</span>\n                </div>\n                <ChevronRight className=\"text-[color:var(--color-text)]/50\" />\n              </Card>\n            );\n          })}\n        </section>\n\n        {/* Stats Cards */}\n        <section className=\"z-10 grid grid-cols-1 sm:grid-cols-2 gap-6 p-6 flex-grow\">\n          {statsCommon.map((stat, idx) => {\n            const Icon = stat.icon;\n            return (\n              <Card key={idx} className=\"p-4 bg-[var(--color-surface)]/80 backdrop-blur-md hover:shadow-lg transition transform hover:scale-105\">\n                <div className=\"flex items-center space-x-2\">\n                  <Icon className=\"text-[var(--color-primary)]\" />\n                  <p className=\"text-sm text-[color:var(--color-text)]\">{stat.label}</p>\n                </div>\n                <p className=\"text-2xl font-extrabold text-[var(--color-primary)] mt-2\">\n                  {stat.value}\n                </p>\n              </Card>\n            );\n          })}\n        </section>\n\n        {/* Inspiration Gallery */}\n        <section className=\"z-10 p-6 pb-12 relative\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-bold text-[var(--color-text)]\">Inspiración para tu boda</h2>\n            <div className=\"flex space-x-2\">\n              <button onClick={scrollPrev} className=\"p-2 rounded-full bg-[var(--color-surface)]/80 backdrop-blur-md\">\n                <ChevronLeft className=\"text-[var(--color-primary)]\" />\n              </button>\n              <button onClick={scrollNext} className=\"p-2 rounded-full bg-[var(--color-surface)]/80 backdrop-blur-md\">\n                <ChevronRight className=\"text-[var(--color-primary)]\" />\n              </button>\n            </div>\n          </div>\n          <div \n            ref={galleryRef} \n            className=\"flex space-x-4 overflow-x-auto pb-4 snap-x scrollbar-hide\"\n          >\n            {[\n              { src: inspo1, alt: \"Decoración floral\" },\n              { src: inspo2, alt: \"Mesa de banquete\" },\n              { src: inspo3, alt: \"Pastel de bodas\" },\n              { src: inspo4, alt: \"Ceremonia al aire libre\" }\n            ].map((img, idx) => (\n              <div key={idx} className=\"snap-start flex-shrink-0 w-64 h-64 relative rounded-lg overflow-hidden\">\n                <img \n                  src={img.src} \n                  alt={img.alt}\n                  className=\"w-full h-full object-cover transition transform hover:scale-110\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex items-end p-4\">\n                  <p className=\"text-white font-medium\">{img.alt}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </section>\n\n        {/* Artículos de Inspiración */}\n        <section className=\"z-10 grid grid-cols-1 sm:grid-cols-2 gap-6 p-6\">\n          {[\n            { title: \"10 ideas para personalizar tu boda\", source: \"Blog de Bodas\", url: \"#\" },\n            { title: \"Tendencias en decoración para este año\", source: \"Revista Novias\", url: \"#\" },\n            { title: \"Guía de planificación paso a paso\", source: \"Lovenda\", url: \"#\" },\n            { title: \"Consejos para elegir proveedores\", source: \"Expertos en Bodas\", url: \"#\" }\n          ].map((article, idx) => (\n            <Card key={idx} className=\"p-4 hover:shadow-lg transition\">\n              <p className=\"text-lg font-medium text-[var(--color-text)]\">\n                {article.title}\n              </p>\n              <p className=\"text-sm text-[color:var(--color-text)] mt-1\">\n                {article.source}\n              </p>\n              <a\n                href={article.url}\n                className=\"inline-flex items-center text-[var(--color-primary)] mt-2\"\n              >\n                Leer más\n              </a>\n            </Card>\n          ))}\n        </section>\n\n        <Nav active=\"home\" />\n      </div>\n      \n      {/* Modales */}\n      {activeModal === 'proveedor' && <ProviderSearchModal onClose={() => setActiveModal(null)} />}\n\n      {activeModal === 'invitado' && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-[var(--color-surface)] p-6 rounded-lg w-96 max-w-full\">\n            <h2 className=\"text-xl font-bold mb-4\">Añadir Invitado</h2>\n            <div className=\"space-y-4\">\n              <Input \n                label=\"Nombre\" \n                value={guest.name} \n                onChange={e => setGuest({...guest, name: e.target.value})} \n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Parte de</label>\n                  <select \n                    className=\"w-full p-2 border border-gray-300 rounded\"\n                    value={guest.side}\n                    onChange={e => setGuest({...guest, side: e.target.value})}\n                  >\n                    <option value=\"novia\">Novia</option>\n                    <option value=\"novio\">Novio</option>\n                    <option value=\"ambos\">Ambos</option>\n                  </select>\n                </div>\n                <Input \n                  label=\"Contacto\" \n                  value={guest.contact} \n                  onChange={e => setGuest({...guest, contact: e.target.value})} \n                />\n              </div>\n            </div>\n            <div className=\"flex justify-end space-x-2 mt-6\">\n              <button \n                onClick={() => setActiveModal(null)}\n                className=\"px-4 py-2 text-[var(--color-text)] border border-[var(--color-text)]/20 rounded\"\n              >\n                Cancelar\n              </button>\n              <button \n                onClick={() => {\n                  const guests = JSON.parse(localStorage.getItem('lovendaGuests') || '[]');\n                  guests.push({...guest, id: Date.now()});\n                  localStorage.setItem('lovendaGuests', JSON.stringify(guests));\n                  setGuest({name:'',side:'novia',contact:''});\n                  setActiveModal(null);\n                }}\n                className=\"px-4 py-2 bg-[var(--color-primary)] text-white rounded\"\n              >\n                Guardar\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeModal === 'movimiento' && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-[var(--color-surface)] p-6 rounded-lg w-96 max-w-full\">\n            <h2 className=\"text-xl font-bold mb-4\">Nuevo Movimiento</h2>\n            <div className=\"space-y-4\">\n              <Input \n                label=\"Concepto\" \n                value={newMovement.concept} \n                onChange={e => setNewMovement({...newMovement, concept: e.target.value})} \n              />\n              <Input \n                label=\"Cantidad (€)\" \n                type=\"number\"\n                value={newMovement.amount} \n                onChange={e => setNewMovement({...newMovement, amount: parseFloat(e.target.value) || 0})} \n              />\n              <Input \n                label=\"Fecha\" \n                type=\"date\"\n                value={newMovement.date} \n                onChange={e => setNewMovement({...newMovement, date: e.target.value})} \n              />\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Tipo</label>\n                <select \n                  className=\"w-full p-2 border border-gray-300 rounded\"\n                  value={newMovement.type}\n                  onChange={e => setNewMovement({...newMovement, type: e.target.value})}\n                >\n                  <option value=\"expense\">Gasto</option>\n                  <option value=\"income\">Ingreso</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"flex justify-end space-x-2 mt-6\">\n              <button \n                onClick={() => setActiveModal(null)}\n                className=\"px-4 py-2 text-[var(--color-text)] border border-[var(--color-text)]/20 rounded\"\n              >\n                Cancelar\n              </button>\n              <button \n                onClick={() => {\n                  const movs = JSON.parse(localStorage.getItem('quickMovements') || '[]');\n                  movs.push({...newMovement, id: Date.now()});\n                  localStorage.setItem('quickMovements', JSON.stringify(movs));\n                  setNewMovement({concept:'',amount:0,date:'',type:'expense'});\n                  setActiveModal(null);\n                }}\n                className=\"px-4 py-2 bg-[var(--color-primary)] text-white rounded\"\n              >\n                Guardar\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeModal === 'nota' && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-[var(--color-surface)] p-6 rounded-lg w-96 max-w-full\">\n            <h2 className=\"text-xl font-bold mb-4\">Nueva Nota</h2>\n            <div className=\"space-y-4\">\n              <textarea\n                className=\"w-full p-3 border border-gray-300 rounded h-32\"\n                placeholder=\"Escribe tu nota aquí...\"\n                value={noteText}\n                onChange={e => setNoteText(e.target.value)}\n              ></textarea>\n            </div>\n            <div className=\"flex justify-end space-x-2 mt-6\">\n              <button \n                onClick={() => setActiveModal(null)}\n                className=\"px-4 py-2 text-[var(--color-text)] border border-[var(--color-text)]/20 rounded\"\n              >\n                Cancelar\n              </button>\n              <button \n                onClick={() => {\n                  const notes = JSON.parse(localStorage.getItem('lovendaNotes') || '[]');\n                  notes.push({text: noteText, id: Date.now()});\n                  localStorage.setItem('lovendaNotes', JSON.stringify(notes));\n                  setNoteText('');\n                  setActiveModal(null);\n                }}\n                className=\"px-4 py-2 bg-[var(--color-primary)] text-white rounded\"\n              >\n                Guardar\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ImageGeneratorAI.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":20,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'downloadAsPdf' is assigned a value but never used.","line":221,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":221,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { saveData, loadData } from '../services/SyncService';\nimport Spinner from './Spinner';\nimport { jsPDF } from 'jspdf';\nimport { saveAs } from 'file-saver';\nimport { Wand2, RefreshCcw, Download, FileDown } from 'lucide-react';\n\n/**\n * Componente para generar imágenes con IA\n * @param {Object} props - Propiedades del componente\n * @param {string} props.category - Categoría de la imagen (invitaciones, logo, menu, etc.)\n * @param {Array} props.templates - Array de plantillas predefinidas\n * @param {Function} props.onImageGenerated - Callback cuando se genera una imagen\n */\nconst ImageGeneratorAI = ({ category = 'general', templates = [], onImageGenerated = () => {} }) => {\n  const [prompt, setPrompt] = useState('');\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [generatedImages, setGeneratedImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [toast, setToast] = useState(null);\n  \n  // Cargar imágenes guardadas al iniciar\n  useEffect(() => {\n    const savedImages = loadData(`lovenda_ai_images_${category}`, { \n      defaultValue: [], \n      collection: 'userDesigns' \n    });\n    \n    if (savedImages && savedImages.length > 0) {\n      setGeneratedImages(savedImages);\n    }\n  }, [category]);\n\n  // Mostrar toast temporal\n  useEffect(() => {\n    if (toast) {\n      const timer = setTimeout(() => {\n        setToast(null);\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [toast]);\n\n  // Seleccionar una plantilla y aplicarla al prompt\n  const handleSelectTemplate = (template) => {\n    setSelectedTemplate(template);\n    setPrompt(template.prompt);\n  };\n\n  // Generar imagen usando OpenAI DALL-E\n  const generateImage = async () => {\n    if (!prompt.trim()) {\n      setToast({\n        type: 'error',\n        message: 'Por favor, escribe un prompt o selecciona una plantilla'\n      });\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Si tenemos un proxy API, lo usamos\n      try {\n        const res = await fetch('/api/ai-image', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ prompt })\n        });\n\n        if (res.ok) {\n          const data = await res.json();\n          if (data && data.url) {\n            handleImageGenerated(data.url);\n            return;\n          }\n        }\n      } catch (err) {\n        console.warn('Error con el proxy de API, intentando directo con OpenAI:', err);\n      }\n\n      // Si no hay proxy o falló, usamos OpenAI directamente\n      const response = await fetch('https://api.openai.com/v1/images/generations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"dall-e-3\",\n          prompt: prompt,\n          n: 1,\n          size: \"1024x1024\",\n          quality: \"hd\"\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error?.message || 'Error al generar la imagen');\n      }\n\n      const data = await response.json();\n      \n      if (data && data.data && data.data[0] && data.data[0].url) {\n        handleImageGenerated(data.data[0].url);\n      } else {\n        throw new Error('No se recibió URL de imagen en la respuesta');\n      }\n    } catch (err) {\n      console.error('Error al generar imagen:', err);\n      setError(err.message || 'Error al generar la imagen');\n      setToast({\n        type: 'error',\n        message: 'Error al generar la imagen. Intenta con otro prompt.'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Manejar la imagen generada\n  const handleImageGenerated = (imageUrl) => {\n    const newImage = {\n      id: Date.now(),\n      url: imageUrl,\n      prompt,\n      timestamp: new Date().toISOString(),\n      category\n    };\n\n    const updatedImages = [newImage, ...generatedImages];\n    setGeneratedImages(updatedImages);\n    \n    // Guardar en almacenamiento local\n    saveData(`lovenda_ai_images_${category}`, updatedImages, {\n      collection: 'userDesigns',\n      showNotification: false\n    });\n\n    // Llamar al callback\n    onImageGenerated(newImage);\n    \n    setToast({\n      type: 'success',\n      message: '¡Imagen generada con éxito!'\n    });\n  };\n\n  // Descargar la imagen\n  const downloadImage = async (imageUrl, imageName) => {\n    const urlObj = new URL(imageUrl);\n    const sameOrigin = urlObj.origin === window.location.origin;\n\n    // Si es otro dominio (Azure/OpenAI), usamos fallback directo sin fetch para evitar CORS error\n    if (!sameOrigin) {\n      const a = document.createElement('a');\n      a.href = imageUrl;\n      a.target = '_blank';\n      a.rel = 'noopener noreferrer';\n      a.download = imageName || `lovenda-${category}-${Date.now()}.png`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      return;\n    }\n\n    try {\n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = imageName || `lovenda-${category}-${Date.now()}.png`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (err) {\n      console.error('Error al descargar la imagen:', err);\n      // Fallback: abrir la URL directamente en nueva pestaña\n      const aFallback = document.createElement('a');\n      aFallback.href = imageUrl;\n      aFallback.target = '_blank';\n      aFallback.rel = 'noopener noreferrer';\n      document.body.appendChild(aFallback);\n      aFallback.click();\n      document.body.removeChild(aFallback);\n      setToast({\n        type: 'error',\n        message: 'Error al descargar la imagen'\n      });\n    }\n  };\n\n  // Descargar como PDF vectorial listo para impresión\n  const downloadVectorPdf = async (imageUrl, fileName) => {\n    try {\n      const res = await fetch('/api/ai-image/vector-pdf', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ url: imageUrl })\n      });\n      if (!res.ok) throw new Error('Error generando PDF');\n\n      const blob = await res.blob();\n      if (!blob || blob.size === 0) throw new Error('PDF vacío');\n\n      // Descargar usando FileSaver (cross-browser)\n      saveAs(blob, fileName || `lovenda-${category}-${Date.now()}.pdf`);\n    } catch (err) {\n      console.error('Error al descargar PDF:', err);\n      setToast({ type: 'error', message: 'No se pudo generar el PDF' });\n    }\n  };\n\n  // Descargar como PDF sin márgenes\n  const downloadAsPdf = async (imageUrl, fileName) => {\n    try {\n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const img = new Image();\n      img.src = url;\n      img.onload = () => {\n        const pdf = new jsPDF({\n          unit: 'pt',\n          orientation: img.width >= img.height ? 'l' : 'p',\n          format: [img.width, img.height]\n        });\n        pdf.addImage(img, 'PNG', 0, 0, img.width, img.height);\n        pdf.save(fileName || `lovenda-${category}-${Date.now()}.pdf`);\n        window.URL.revokeObjectURL(url);\n      };\n    } catch (err) {\n      console.error('Error al descargar PDF:', err);\n      setToast({\n        type: 'error',\n        message: 'Error al generar el PDF'\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col space-y-6\">\n      {/* Panel de plantillas */}\n      {templates.length > 0 && (\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold mb-3\">Plantillas disponibles</h3>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3\">\n            {templates.map((template, index) => (\n              <div \n                key={index} \n                className={`p-3 border rounded-lg cursor-pointer transition-all ${\n                  selectedTemplate === template \n                    ? 'border-blue-500 bg-blue-50' \n                    : 'border-gray-200 hover:border-blue-300'\n                }`}\n                onClick={() => handleSelectTemplate(template)}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium\">{template.name}</h4>\n                  {selectedTemplate === template && (\n                    <span className=\"bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded\">Seleccionada</span>\n                  )}\n                </div>\n                <p className=\"text-xs text-gray-600 line-clamp-2\">{template.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Editor de prompt */}\n      <div className=\"bg-white p-4 border rounded-lg\">\n        <label htmlFor=\"prompt\" className=\"block font-medium mb-2\">Prompt para la generación</label>\n        <div className=\"flex space-x-2\">\n          <textarea\n            id=\"prompt\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"Describe la imagen que quieres generar...\"\n            className=\"flex-1 border rounded-lg p-3 min-h-[100px]\"\n          />\n        </div>\n        <div className=\"mt-4 flex justify-end\">\n          <button\n            onClick={generateImage}\n            disabled={loading || !prompt.trim()}\n            className={`flex items-center space-x-2 px-4 py-2 rounded-lg ${\n              loading || !prompt.trim() \n                ? 'bg-gray-300 cursor-not-allowed' \n                : 'bg-blue-600 hover:bg-blue-700 text-white'\n            }`}\n          >\n            {loading ? (\n              <><RefreshCcw className=\"animate-spin h-4 w-4\" /><span>Generando...</span></>\n            ) : (\n              <><Wand2 className=\"h-4 w-4\" /><span>Generar imagen</span></>\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Galería de imágenes generadas */}\n      {generatedImages.length > 0 && (\n        <div className=\"mt-8\">\n          <h3 className=\"font-semibold mb-4\">Imágenes generadas</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {generatedImages.map((image) => (\n              <div key={image.id} className=\"border rounded-lg overflow-hidden\">\n                <div className=\"relative\">\n                  <img \n                    src={image.url} \n                    alt={image.prompt} \n                    className=\"w-full h-auto object-contain\"\n                    loading=\"lazy\"\n                  />\n                  <div className=\"absolute top-2 right-2 flex space-x-2\">\n                    <button\n                      onClick={() => downloadImage(image.url)}\n                      className=\"bg-white/80 p-2 rounded-full hover:bg-white\"\n                      title=\"Descargar PNG\"\n                    >\n                      <Download className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      onClick={() => downloadVectorPdf(image.url)}\n                      className=\"bg-white/80 p-2 rounded-full hover:bg-white\"\n                      title=\"Descargar PDF\"\n                    >\n                      <FileDown className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n                <div className=\"p-3\">\n                  <p className=\"text-sm text-gray-700 line-clamp-2\">{image.prompt}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    {new Date(image.timestamp).toLocaleDateString()} {new Date(image.timestamp).toLocaleTimeString()}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Toast de notificación */}\n      {toast && (\n        <div \n          className={`fixed bottom-4 right-4 px-4 py-2 rounded shadow-lg ${\n            toast.type === 'error' \n              ? 'bg-red-600 text-white' \n              : toast.type === 'success' \n                ? 'bg-green-600 text-white' \n                : 'bg-blue-600 text-white'\n          }`}\n        >\n          {toast.message}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageGeneratorAI;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\Input.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\MainLayout.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'logoUrl' is assigned a value but never used.","line":16,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Outlet, Link } from 'react-router-dom';\nimport { useUserContext } from '../context/UserContext';\nimport Nav from './Nav';\nimport ChatWidget from './ChatWidget';\nimport DefaultAvatar from './DefaultAvatar';\nimport GlobalSearch from './GlobalSearch';\nimport NotificationCenter from './NotificationCenter';\nimport DarkModeToggle from './DarkModeToggle';\nimport EmailNotificationBadge from './email/EmailNotificationBadge';\nimport OnboardingTutorial from './Onboarding/OnboardingTutorial';\nimport { useOnboarding } from '../hooks/useOnboarding';\n\n\nexport default function MainLayout() {\n  const { logoUrl, logout } = useUserContext();\n  const [openMenu, setOpenMenu] = useState(false);\n  const { showOnboarding, completeOnboarding } = useOnboarding();\n\n  if (showOnboarding) {\n    return (\n      <div className=\"min-h-screen flex flex-col bg-[var(--color-bg)]\">\n        <OnboardingTutorial onComplete={completeOnboarding} />\n      </div>\n    );\n  }\n  return (\n    <div className=\"relative min-h-screen flex flex-col bg-[var(--color-bg)] text-[color:var(--color-text)] font-sans\">\n      \n      \n        \n        <div className=\"absolute top-4 right-4 z-20 flex items-center space-x-4\">\n          {/* Componente de Búsqueda Global */}\n          <div className=\"hidden md:block\">\n            <GlobalSearch />\n          </div>\n          \n          {/* Centro de Notificaciones */}\n          <NotificationCenter />\n          \n          {/* Toggle modo oscuro */}\n          <DarkModeToggle />\n          \n          {/* Notificaciones de correo */}\n          <EmailNotificationBadge />\n          \n          {/* Avatar y menú de usuario */}\n          <div className=\"relative\">\n            <DefaultAvatar onClick={() => setOpenMenu(!openMenu)} className=\"w-8 h-8 text-gray-800 cursor-pointer\" />\n            {openMenu && (\n              <div className=\"absolute right-0 mt-2 bg-white border rounded shadow p-2 space-y-1 min-w-[180px]\">\n                <Link to=\"/perfil\" onClick={() => setOpenMenu(false)} className=\"block px-2 py-1 hover:bg-gray-100\">Perfil</Link>\n                <Link to=\"/notificaciones\" onClick={() => setOpenMenu(false)} className=\"block px-2 py-1 hover:bg-gray-100\">Notificaciones</Link>\n                <Link to=\"/user/email\" onClick={() => setOpenMenu(false)} className=\"block px-2 py-1 hover:bg-gray-100\">Buzón de Emails</Link>\n                <div className=\"border-t border-gray-200 my-1\"></div>\n                <button onClick={logout} className=\"w-full text-left px-2 py-1 hover:bg-gray-100 text-red-600\">Cerrar sesión</button>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Versión móvil de búsqueda global */}\n        <div className=\"block md:hidden fixed bottom-20 left-0 right-0 px-4 z-20\">\n          <div className=\"bg-white rounded-full shadow-lg p-2\">\n            <GlobalSearch />\n          </div>\n        </div>\n      \n      <main className=\"container flex-grow mx-auto px-4 pt-8 pb-36\">\n        <Outlet />\n      </main>\n      <Nav />\n        <ChatWidget />\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\Modal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\Nav.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\NotificationCenter.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Bell, X, Mail, Calendar, User, Trash, Check, AlertTriangle, Info } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from './ui';\nimport * as NotificationService from '../services/NotificationService';\n\n/**\n * Centro de notificaciones unificado para toda la aplicación\n * Muestra notificaciones de emails, eventos, proveedores y sistema\n * Permite marcar como leído, eliminar y navegar directamente a la fuente de la notificación\n * \n * @returns {React.ReactElement} Componente del centro de notificaciones\n */\nconst NotificationCenter = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [activeTab, setActiveTab] = useState('all');\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const notificationRef = useRef(null);\n  const navigate = useNavigate();\n  \n  // Cargar notificaciones al abrir el centro\n  useEffect(() => {\n    if (isOpen) {\n      loadNotifications();\n    }\n  }, [isOpen, activeTab]);\n  \n  // Cerrar al hacer clic fuera del componente\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (notificationRef.current && !notificationRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  \n  // Escuchar eventos de notificación toast\n  useEffect(() => {\n    const handleToastEvent = (event) => {\n      if (event.detail) {\n        showToast(event.detail);\n      }\n    };\n    \n    window.addEventListener('lovenda-toast', handleToastEvent);\n    \n    return () => {\n      window.removeEventListener('lovenda-toast', handleToastEvent);\n    };\n  }, []);\n  \n  // Cargar notificaciones\n  const loadNotifications = async () => {\n    setIsLoading(true);\n    \n    try {\n      const filter = activeTab !== 'all' ? activeTab : undefined;\n      const notificationData = await NotificationService.getNotifications(filter);\n      \n      setNotifications(notificationData.notifications || []);\n      setUnreadCount(notificationData.unreadCount || 0);\n    } catch (error) {\n      console.error('Error al cargar notificaciones:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Mostrar toast de notificación\n  const showToast = ({ title, message, type = 'info', duration = 3000 }) => {\n    // Crear elemento toast\n    const toastElement = document.createElement('div');\n    toastElement.className = `fixed bottom-4 right-4 bg-white rounded-md shadow-lg p-4 flex items-start max-w-sm transform transition-all duration-300 z-50 border-l-4 ${getToastBorderColor(type)}`;\n    \n    // Contenido del toast\n    toastElement.innerHTML = `\n      <div class=\"flex-shrink-0 mr-3 mt-0.5\">\n        ${getToastIcon(type)}\n      </div>\n      <div class=\"flex-grow\">\n        <h3 class=\"font-medium text-gray-900\">${title}</h3>\n        <p class=\"text-sm text-gray-600\">${message}</p>\n      </div>\n      <button class=\"ml-4 text-gray-400 hover:text-gray-600\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n        </svg>\n      </button>\n    `;\n    \n    // Añadir al DOM\n    document.body.appendChild(toastElement);\n    \n    // Animación de entrada\n    setTimeout(() => {\n      toastElement.classList.add('translate-y-0', 'opacity-100');\n    }, 10);\n    \n    // Manejar cierre\n    const closeButton = toastElement.querySelector('button');\n    if (closeButton) {\n      closeButton.addEventListener('click', () => {\n        removeToast(toastElement);\n      });\n    }\n    \n    // Auto-cierre después de duration\n    setTimeout(() => {\n      removeToast(toastElement);\n    }, duration);\n  };\n  \n  // Eliminar toast del DOM\n  const removeToast = (element) => {\n    element.classList.add('opacity-0', '-translate-y-2');\n    \n    setTimeout(() => {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    }, 300);\n  };\n  \n  // Obtener color de borde para el toast\n  const getToastBorderColor = (type) => {\n    switch (type) {\n      case 'success':\n        return 'border-green-500';\n      case 'error':\n        return 'border-red-500';\n      case 'warning':\n        return 'border-yellow-500';\n      default:\n        return 'border-blue-500';\n    }\n  };\n  \n  // Obtener icono para el toast\n  const getToastIcon = (type) => {\n    switch (type) {\n      case 'success':\n        return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"text-green-500\">\n          <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n          <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n        </svg>`;\n      case 'error':\n        return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"text-red-500\">\n          <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n          <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\n          <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\n        </svg>`;\n      case 'warning':\n        return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"text-yellow-500\">\n          <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\n          <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\n          <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n        </svg>`;\n      default:\n        return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"text-blue-500\">\n          <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n          <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line>\n          <line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line>\n        </svg>`;\n    }\n  };\n  \n  // Manejar clic en notificación\n  const handleNotificationClick = async (notification) => {\n    // Marcar como leída\n    if (!notification.read) {\n      await NotificationService.markAsRead(notification.id);\n      \n      // Actualizar estado local\n      setNotifications(prevNotifications => \n        prevNotifications.map(n => \n          n.id === notification.id ? { ...n, read: true } : n\n        )\n      );\n      \n      // Actualizar contador\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    }\n    \n    // Navegar según el tipo de acción\n    if (notification.action) {\n      setIsOpen(false);\n      \n      switch (notification.action) {\n        case 'viewEmail':\n          navigate(`/buzon/${notification.emailId}`);\n          break;\n        case 'viewEvent':\n          navigate(`/calendario/evento/${notification.eventId}`);\n          break;\n        case 'viewProvider':\n          navigate(`/proveedores/${notification.providerId}`);\n          break;\n        default:\n          // Acción personalizada o ninguna\n          break;\n      }\n    }\n  };\n  \n  // Eliminar notificación\n  const handleDeleteNotification = async (event, notificationId) => {\n    event.stopPropagation(); // Evitar que se active el clic en la notificación\n    \n    try {\n      await NotificationService.deleteNotification(notificationId);\n      \n      // Actualizar estado local\n      const notificationToDelete = notifications.find(n => n.id === notificationId);\n      setNotifications(prev => prev.filter(n => n.id !== notificationId));\n      \n      // Actualizar contador si era no leída\n      if (notificationToDelete && !notificationToDelete.read) {\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      }\n      \n    } catch (error) {\n      console.error('Error al eliminar notificación:', error);\n    }\n  };\n  \n  // Marcar todas como leídas\n  const handleMarkAllAsRead = async () => {\n    try {\n      await NotificationService.markAllAsRead();\n      \n      // Actualizar estado local\n      setNotifications(prev => \n        prev.map(n => ({ ...n, read: true }))\n      );\n      \n      setUnreadCount(0);\n      \n    } catch (error) {\n      console.error('Error al marcar todas como leídas:', error);\n    }\n  };\n  \n  // Renderizar icono según el tipo de notificación\n  const renderNotificationIcon = (notification) => {\n    switch (notification.type) {\n      case 'email':\n        return <Mail size={18} className=\"text-blue-500\" />;\n      case 'event':\n        return <Calendar size={18} className=\"text-purple-500\" />;\n      case 'provider':\n        return <User size={18} className=\"text-green-500\" />;\n      case 'warning':\n        return <AlertTriangle size={18} className=\"text-yellow-500\" />;\n      case 'error':\n        return <AlertTriangle size={18} className=\"text-red-500\" />;\n      default:\n        return <Info size={18} className=\"text-gray-500\" />;\n    }\n  };\n  \n  // Filtrar notificaciones según la pestaña activa\n  const filteredNotifications = notifications;\n  \n  return (\n    <div className=\"relative\" ref={notificationRef}>\n      {/* Botón de notificaciones */}\n      <button\n        onClick={() => setIsOpen(prev => !prev)}\n        className=\"relative p-2 rounded-full hover:bg-gray-100 focus:outline-none\"\n        aria-label=\"Notificaciones\"\n      >\n        <Bell size={20} />\n        {unreadCount > 0 && (\n          <span className=\"absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-500 rounded-full\">\n            {unreadCount > 99 ? '99+' : unreadCount}\n          </span>\n        )}\n      </button>\n      \n      {/* Panel de notificaciones */}\n      {isOpen && (\n        <div className=\"absolute right-0 mt-2 w-80 sm:w-96 bg-white rounded-md shadow-lg overflow-hidden z-50\">\n          <div className=\"border-b border-gray-200 p-3 flex justify-between items-center\">\n            <h3 className=\"font-medium\">Notificaciones</h3>\n            <div className=\"flex space-x-2\">\n              {unreadCount > 0 && (\n                <button\n                  onClick={handleMarkAllAsRead}\n                  className=\"text-xs text-blue-600 hover:text-blue-800 flex items-center\"\n                >\n                  <Check size={14} className=\"mr-1\" />\n                  Marcar todas como leídas\n                </button>\n              )}\n            </div>\n          </div>\n          \n          {/* Pestañas de filtro */}\n          <div className=\"flex border-b border-gray-200\">\n            <button\n              onClick={() => setActiveTab('all')}\n              className={`flex-grow py-2 text-sm font-medium ${\n                activeTab === 'all' \n                  ? 'text-blue-600 border-b-2 border-blue-600' \n                  : 'text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              Todas\n            </button>\n            <button\n              onClick={() => setActiveTab('email')}\n              className={`flex-grow py-2 text-sm font-medium ${\n                activeTab === 'email' \n                  ? 'text-blue-600 border-b-2 border-blue-600' \n                  : 'text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              Emails\n            </button>\n            <button\n              onClick={() => setActiveTab('event')}\n              className={`flex-grow py-2 text-sm font-medium ${\n                activeTab === 'event' \n                  ? 'text-blue-600 border-b-2 border-blue-600' \n                  : 'text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              Eventos\n            </button>\n          </div>\n          \n          {/* Lista de notificaciones */}\n          <div className=\"max-h-80 overflow-y-auto\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center p-4\">\n                <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500\"></div>\n              </div>\n            ) : filteredNotifications.length === 0 ? (\n              <div className=\"p-4 text-center text-gray-500\">\n                No hay notificaciones\n              </div>\n            ) : (\n              <ul>\n                {filteredNotifications.map(notification => (\n                  <li \n                    key={notification.id}\n                    onClick={() => handleNotificationClick(notification)}\n                    className={`px-4 py-3 border-b border-gray-100 flex items-start hover:bg-gray-50 cursor-pointer transition ${\n                      !notification.read ? 'bg-blue-50' : ''\n                    }`}\n                  >\n                    <div className=\"flex-shrink-0 mt-0.5 mr-3\">\n                      {renderNotificationIcon(notification)}\n                    </div>\n                    \n                    <div className=\"flex-grow min-w-0\">\n                      <p className={`text-sm ${!notification.read ? 'font-medium' : 'text-gray-800'}`}>\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {new Date(notification.timestamp).toLocaleDateString('es-ES', { \n                          day: '2-digit',\n                          month: '2-digit',\n                          hour: '2-digit',\n                          minute: '2-digit'\n                        })}\n                      </p>\n                    </div>\n                    \n                    <button\n                      onClick={(e) => handleDeleteNotification(e, notification.id)}\n                      className=\"ml-2 text-gray-400 hover:text-gray-600\"\n                    >\n                      <Trash size={16} />\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n          \n          {/* Pie del panel */}\n          <div className=\"p-3 border-t border-gray-200 bg-gray-50 text-center\">\n            <Button \n              variant=\"link\" \n              size=\"sm\"\n              onClick={() => {\n                navigate('/notificaciones');\n                setIsOpen(false);\n              }}\n            >\n              Ver todas las notificaciones\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NotificationCenter;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\Onboarding\\OnboardingTutorial.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":6,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":82}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useUserContext } from '../../context/UserContext';\nimport { doc, getDoc, updateDoc, setDoc } from 'firebase/firestore';\nimport { googleCalendarService } from '../../services/GoogleCalendarService';\nimport { db } from '../../firebaseConfig';\nimport { ChevronRight, ChevronLeft, Check, Calendar, Users, ShoppingBag, Settings, Image } from 'lucide-react';\n\n/**\n * Tutorial de onboarding para nuevos usuarios\n */\nconst OnboardingTutorial = ({ onComplete }) => {\n  const { user } = useUserContext();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [profileData, setProfileData] = useState({\n    nombres: '',\n    apellidos: '',\n    fecha: '',\n    lugar: '',\n    presupuesto: '',\n    imagen: ''\n  });\n  const [loading, setLoading] = useState(false);\n\n  // Carga datos del perfil si existen\n  useEffect(() => {\n    const fetchProfileData = async () => {\n      if (!user?.uid) return;\n      \n      try {\n        const profileDoc = await getDoc(doc(db, 'userProfile', user.uid));\n        if (profileDoc.exists()) {\n          const data = profileDoc.data();\n          if (data.weddingInfo) {\n            setProfileData({\n              nombres: data.weddingInfo.brideAndGroom || '',\n              apellidos: data.weddingInfo.surnames || '',\n              fecha: data.weddingInfo.weddingDate || '',\n              lugar: data.weddingInfo.celebrationPlace || '',\n              presupuesto: data.weddingInfo.budget || '',\n              imagen: data.weddingInfo.profileImage || ''\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error al cargar datos del perfil:', error);\n      }\n    };\n\n    fetchProfileData();\n  }, [user]);\n\n  const steps = [\n    {\n      title: \"¡Bienvenido a Lovenda!\",\n      content: (\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-32 h-32 bg-blue-100 rounded-full flex items-center justify-center mb-6\">\n            <img src=\"/logo.png\" alt=\"Lovenda\" className=\"w-20 h-20\" />\n          </div>\n          <h2 className=\"text-2xl font-bold mb-4\">¡Comienza a planificar tu boda!</h2>\n          <p className=\"mb-6 text-gray-600\">\n            Te guiaremos a través de los primeros pasos para configurar tu boda en Lovenda.\n            Este tutorial te ayudará a personalizar la app y conocer sus funcionalidades principales.\n          </p>\n        </div>\n      )\n    },\n    {\n      title: \"Datos básicos\",\n      content: (\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\">Completa los datos básicos de tu boda</h2>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Nombres de la pareja</label>\n              <input\n                type=\"text\"\n                value={profileData.nombres}\n                onChange={(e) => setProfileData({...profileData, nombres: e.target.value})}\n                placeholder=\"Ej: María y Juan\"\n                className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Apellidos</label>\n              <input\n                type=\"text\"\n                value={profileData.apellidos}\n                onChange={(e) => setProfileData({...profileData, apellidos: e.target.value})}\n                placeholder=\"Ej: García y Pérez\"\n                className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Fecha de la boda</label>\n              <input\n                type=\"date\"\n                value={profileData.fecha}\n                onChange={(e) => setProfileData({...profileData, fecha: e.target.value})}\n                className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Lugar de celebración</label>\n              <input\n                type=\"text\"\n                value={profileData.lugar}\n                onChange={(e) => setProfileData({...profileData, lugar: e.target.value})}\n                placeholder=\"Ej: Madrid\"\n                className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Presupuesto estimado</label>\n              <input\n                type=\"number\"\n                value={profileData.presupuesto}\n                onChange={(e) => setProfileData({...profileData, presupuesto: e.target.value})}\n                placeholder=\"Ej: 15000\"\n                className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm\"\n              />\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Gestión de invitados\",\n      content: (\n        <div>\n          <div className=\"mb-6 flex items-center justify-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Users className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </div>\n          <h2 className=\"text-xl font-semibold mb-2 text-center\">Gestión de Invitados</h2>\n          <p className=\"mb-4 text-gray-600 text-center\">\n            Organiza tu lista de invitados, confirma asistencia y asigna mesas para la ceremonia.\n          </p>\n          <ul className=\"space-y-3\">\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Añade invitados y sus acompañantes</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Organiza por grupos (familia, amigos...)</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Confirma asistencias y alérgenos</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Diseña el plano de mesas con arrastrar y soltar</span>\n            </li>\n          </ul>\n        </div>\n      )\n    },\n    {\n      title: \"Proveedores y Presupuesto\",\n      content: (\n        <div>\n          <div className=\"mb-6 flex items-center justify-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n              <ShoppingBag className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </div>\n          <h2 className=\"text-xl font-semibold mb-2 text-center\">Proveedores</h2>\n          <p className=\"mb-4 text-gray-600 text-center\">\n            Gestiona tus proveedores, consulta con IA y lleva el seguimiento de todos los servicios contratados.\n          </p>\n          <ul className=\"space-y-3\">\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Busca proveedores recomendados con IA</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Añade detalles, presupuestos y contratos</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Marca favoritos para comparar opciones</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Registra pagos y señales para control financiero</span>\n            </li>\n          </ul>\n        </div>\n      )\n    },\n    {\n      title: \"Calendario y Tareas\",\n      content: (\n        <div>\n          <div className=\"mb-6 flex items-center justify-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Calendar className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </div>\n          <h2 className=\"text-xl font-semibold mb-2 text-center\">Planificación</h2>\n          <p className=\"mb-4 text-gray-600 text-center\">\n            Organiza todo tu calendario y listas de tareas para llevar un control perfecto.\n          </p>\n          <ul className=\"space-y-3\">\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Sincroniza con Google Calendar y otros</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Organiza tareas por prioridad y fecha</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Checklists para antes y durante la boda</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Recibe recordatorios importantes</span>\n            </li>\n          </ul>\n        </div>\n      )\n    },\n    {\n      title: \"Diseños e Invitaciones\",\n      content: (\n        <div>\n          <div className=\"mb-6 flex items-center justify-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Image className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </div>\n          <h2 className=\"text-xl font-semibold mb-2 text-center\">Diseños con IA</h2>\n          <p className=\"mb-4 text-gray-600 text-center\">\n            Crea invitaciones, menús y otros elementos visuales para tu boda con ayuda de IA.\n          </p>\n          <ul className=\"space-y-3\">\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Genera diseños personalizados con IA</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Crea invitaciones, menús y señalización</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Diseña tu logo de boda personalizado</span>\n            </li>\n            <li className=\"flex items-center\">\n              <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n              <span>Exporta en alta resolución para imprimir</span>\n            </li>\n          </ul>\n        </div>\n      )\n    },\n    {\n      title: \"¡Listo para empezar!\",\n      content: (\n        <div className=\"text-center\">\n          <div className=\"mb-6 flex items-center justify-center\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\">\n              <Check className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </div>\n          <h2 className=\"text-2xl font-bold mb-4\">¡Todo listo!</h2>\n          <p className=\"mb-6 text-gray-600\">\n            Has completado el tutorial inicial. Ya puedes comenzar a utilizar todas las funciones de Lovenda para \n            planificar la boda de tus sueños.\n          </p>\n          <p className=\"text-sm text-gray-500\">\n            Recuerda que puedes acceder a la configuración en cualquier momento para modificar tus datos o \n            consultar esta guía nuevamente.\n          </p>\n        </div>\n      )\n    }\n  ];\n\n  const handleNext = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleComplete = async () => {\n    if (!user?.uid) {\n      onComplete && onComplete();\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Guardar los datos del perfil\n      const profileRef = doc(db, 'userProfile', user.uid);\n      const profileDoc = await getDoc(profileRef);\n      \n      const updatedData = {\n        weddingInfo: {\n          brideAndGroom: profileData.nombres,\n          surnames: profileData.apellidos,\n          weddingDate: profileData.fecha,\n          celebrationPlace: profileData.lugar,\n          budget: profileData.presupuesto,\n          profileImage: profileData.imagen\n        },\n        onboardingCompleted: true,\n        lastUpdated: new Date().toISOString()\n      };\n\n      if (profileDoc.exists()) {\n        await updateDoc(profileRef, updatedData);\n      } else {\n        await setDoc(profileRef, {\n          ...updatedData,\n          createdAt: new Date().toISOString(),\n          userId: user.uid\n        });\n      }\n      \n      // Crear evento en calendario si hay fecha de boda\n      if (profileData.fecha) {\n        try {\n          // Asegurar autenticación con Google; si el usuario no concede, se ignora\n          await googleCalendarService.loadClient().catch(() => {});\n          if (!googleCalendarService.isAuthenticated()) {\n            await googleCalendarService.signIn().catch(() => {});\n          }\n          if (googleCalendarService.isAuthenticated()) {\n            const startDate = new Date(profileData.fecha + 'T12:00:00');\n            const endDate = new Date(startDate.getTime() + 2 * 60 * 60 * 1000);\n            await googleCalendarService.createEvent({\n              title: 'Boda',\n              desc: 'Fecha de la boda planificada en Lovenda',\n              start: startDate,\n              end: endDate,\n              location: profileData.lugar || undefined,\n              category: 'LUGAR'\n            });\n          }\n        } catch (calErr) {\n          console.error('No se pudo crear evento en el calendario:', calErr);\n        }\n      }\n\n      // Llamar al callback cuando se completa\n      onComplete && onComplete();\n    } catch (error) {\n      console.error('Error al guardar datos de onboarding:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n        {/* Encabezado */}\n        <div className=\"bg-gradient-to-r from-pink-500 to-rose-500 text-white px-6 py-4 rounded-t-lg flex justify-between items-start\">\n          <div>\n            <h3 className=\"font-semibold text-lg\">{steps[currentStep].title}</h3>\n            <div className=\"flex mt-2\">\n              {steps.map((_, index) => (\n                <div\n                key={index}\n                className={`h-1 rounded-full mr-1 flex-1 ${\n                  index <= currentStep ? 'bg-white' : 'bg-white bg-opacity-30'\n                }`}\n              />\n            ))}\n            </div>\n          </div>\n          {/* Botón saltar */}\n          <button\n            onClick={handleComplete}\n            className=\"text-xs underline hover:text-gray-200\"\n          >\n            Saltar\n          </button>\n        </div>\n        \n        {/* Contenido */}\n        <div className=\"px-6 py-6\">\n          {steps[currentStep].content}\n        </div>\n        \n        {/* Botones */}\n        <div className=\"px-6 py-4 bg-gray-50 rounded-b-lg flex justify-between\">\n          <button\n            onClick={handlePrevious}\n            disabled={currentStep === 0}\n            className={`px-4 py-2 rounded flex items-center ${\n              currentStep === 0 ? 'text-gray-400 cursor-not-allowed' : 'text-gray-700 hover:bg-gray-200'\n            }`}\n          >\n            <ChevronLeft className=\"w-5 h-5 mr-1\" /> Anterior\n          </button>\n          \n          {currentStep < steps.length - 1 ? (\n            <button\n              onClick={handleNext}\n              className=\"px-4 py-2 bg-rose-500 text-white rounded flex items-center hover:bg-rose-600\"\n            >\n              Siguiente <ChevronRight className=\"w-5 h-5 ml-1\" />\n            </button>\n          ) : (\n            <button\n              onClick={handleComplete}\n              disabled={loading}\n              className={`px-4 py-2 bg-green-500 text-white rounded flex items-center hover:bg-green-600 ${\n                loading ? 'opacity-70 cursor-wait' : ''\n              }`}\n            >\n              {loading ? 'Guardando...' : 'Finalizar'} <Check className=\"w-5 h-5 ml-1\" />\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OnboardingTutorial;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\PageWrapper.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport Button from './Button';\r\n\r\n/**\r\n * PageWrapper encapsula la estructura común de página: título fuera de los cards\r\n * y contenedor principal con paddings y espacio vertical.\r\n * Props:\r\n *  - title: string (título principal)\r\n *  - actions: ReactNode (botones u otros elementos a la derecha del título)\r\n *  - className: clases tailwind opcionales para el contenedor principal\r\n *  - children: contenido de la página (Cards y secciones)\r\n */\r\nexport default function PageWrapper({ title, actions = null, className = '', children }) {\r\n  return (\r\n    <div className={`p-4 md:p-6 space-y-8 ${className}`}>\r\n      {(title || actions) && (\r\n        <div className=\"flex items-center justify-between flex-wrap gap-2\">\r\n          {title && <h1 className=\"text-2xl font-bold text-gray-800 mr-auto\">{title}</h1>}\r\n          {actions && <div className=\"flex gap-2\">{actions}</div>}\r\n        </div>\r\n      )}\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\Pagination.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ProviderSearchModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":2,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Search, RefreshCcw, Star, MapPin } from 'lucide-react';\nimport { saveData, loadData } from '../services/SyncService';\nimport Spinner from './Spinner';\n\nexport default function ProviderSearchModal({ onClose, onSelectProvider }) {\n  const [aiQuery, setAiQuery] = useState('');\n  const [serviceFilter, setServiceFilter] = useState('');\n  const [budgetRange, setBudgetRange] = useState('');\n  const [aiLoading, setAiLoading] = useState(false);\n  const [aiResults, setAiResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [toast, setToast] = useState(null);\n\n  const modalRef = useRef(null);\n\n  // Cerrar al hacer clic fuera usando referencia (por si overlay pierde eventos)\n  useEffect(() => {\n    const handleOutside = (e) => {\n      if (modalRef.current && !modalRef.current.contains(e.target)) {\n        onClose();\n      }\n    };\n    document.addEventListener('mousedown', handleOutside);\n    return () => document.removeEventListener('mousedown', handleOutside);\n  }, [onClose]);\n\n  // Cerrar con tecla ESC\n  useEffect(() => {\n    const handleEsc = (e) => {\n      if (e.key === 'Escape') onClose();\n    };\n    document.addEventListener('keydown', handleEsc);\n    return () => document.removeEventListener('keydown', handleEsc);\n  }, [onClose]);\n\n  // Servicios comunes para bodas\n  const commonServices = [\n    'Catering', 'Fotógrafo', 'Música', 'Flores',\n    'Vestidos', 'Decoración', 'Lugar', 'Transporte',\n    'Invitaciones', 'Pasteles', 'Joyería', 'Detalles'\n  ];\n\n  // Verificar la operatividad de enlaces de proveedores\n  const verifyProviderLinks = async (providers) => {\n    console.log('Verificando validez de enlaces de proveedores...');\n    \n    // Crear un array de proveedores normalizados (asegurar que todos tienen campos consistentes)\n    const normalizedProviders = providers.map(provider => ({\n      title: provider.title || provider.name || 'Proveedor sin nombre',\n      link: provider.link || provider.url || '',\n      snippet: provider.snippet || provider.description || '',\n      service: provider.service || serviceFilter || 'Proveedor',\n      location: provider.location || 'No especificada',\n      priceRange: provider.priceRange || provider.price || 'Consultar',\n      image: provider.image || '',\n      // Por defecto consideramos válido hasta que se demuestre lo contrario\n      verified: true\n    }));\n    \n    // Filtrar proveedores con enlaces vacíos o mal formados\n    const validProviders = normalizedProviders.filter(provider => {\n      const link = provider.link || '';\n      // Verificación básica del formato del enlace\n      return link && \n        (link.startsWith('http://') || link.startsWith('https://')) &&\n        link.includes('.');\n    });\n    \n    console.log(`${validProviders.length} de ${normalizedProviders.length} tienen enlaces potencialmente válidos`);\n    \n    // Si no hay proveedores válidos después del filtro, devolver al menos uno como respaldo\n    if (validProviders.length === 0 && normalizedProviders.length > 0) {\n      // Crear un resultado de respaldo para el directorio de bodas.net\n      return [{\n        title: 'Directorio de proveedores para bodas',\n        link: `https://www.bodas.net/busqueda/${(serviceFilter || 'proveedores').toLowerCase().replace(/\\s+/g, '-')}-espana`,\n        snippet: `Encuentra proveedores de ${serviceFilter || 'boda'} en toda España`,\n        service: serviceFilter || 'Proveedor',\n        location: 'España',\n        priceRange: 'Varios precios disponibles',\n        verified: true\n      }];\n    }\n    \n    return validProviders;\n  };\n\n  // Manejar búsqueda con IA\n  const handleAiSearch = async (e) => {\n    e.preventDefault();\n    if (!aiQuery.trim()) return;\n    setAiLoading(true);\n    \n    try {\n      const profile = loadData('lovendaProfile', { defaultValue: {}, collection: 'userProfile' });\n      \n      // Extraer información de ubicación del perfil\n      let locationInfo = '';\n      \n      if (profile.weddingInfo && profile.weddingInfo.celebrationPlace) {\n        locationInfo = profile.weddingInfo.celebrationPlace;\n      }\n      \n      const formattedLocation = locationInfo || 'Valencia';\n      \n      // Intentar realizar la búsqueda a través del API proxy\n      try {\n        const res = await fetch('/api/ai-suppliers', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            query: aiQuery, \n            service: serviceFilter, \n            budget: budgetRange, \n            profile: profile,\n            location: formattedLocation\n          })\n        });\n        \n        let data = [];\n        if (res.ok) {\n          try {\n            data = await res.json();\n          } catch (_) { /* cuerpo vacío */ }\n        }\n        \n        if (Array.isArray(data) && data.length) {\n          // Verificar operatividad de los enlaces antes de mostrarlos\n          const verifiedResults = await verifyProviderLinks(data);\n          setAiResults(verifiedResults);\n          setShowResults(true);\n          saveData('lovendaSuppliers', verifiedResults, {\n            collection: 'userSuppliers',\n            showNotification: false\n          });\n          window.dispatchEvent(new Event('lovenda-suppliers'));\n          return;\n        }\n      } catch (err) {\n        console.error(\"Error en solicitud API:\", err);\n      }\n      \n      // Si la solicitud API falló o no devolvió resultados, usar OpenAI directamente\n      await fetchOpenAi();\n    } catch (err) {\n      console.error(\"Error general:\", err);\n      setToast({ \n        message: 'Error al buscar proveedores. Inténtalo de nuevo más tarde.', \n        type: 'error' \n      });\n    } finally {\n      setAiLoading(false);\n    }\n  };\n\n  // Función para buscar proveedores usando OpenAI directamente\n  const fetchOpenAi = async () => {\n    try {\n      const profile = loadData('lovendaProfile', { defaultValue: {}, collection: 'userProfile' });\n      \n      // Extraer datos relevantes del perfil\n      const servicioSeleccionado = serviceFilter || '';\n      let locationInfo = '';\n      \n      if (profile.weddingInfo && profile.weddingInfo.celebrationPlace) {\n        locationInfo = profile.weddingInfo.celebrationPlace;\n      }\n      \n      const formattedLocation = locationInfo || 'Valencia';\n      \n      // Crear el prompt para OpenAI\n      const locationPrompt = formattedLocation ? \n        `La boda es en ${formattedLocation}.` : \n        'La ubicación de la boda no está especificada.';\n      \n      const budgetPrompt = budgetRange ? \n        `El presupuesto es ${budgetRange}.` : \n        'No hay un presupuesto especificado.';\n      \n      const prompt = `Actúa como un asistente de bodas que busca proveedores.\n        Necesito encontrar proveedores de \"${servicioSeleccionado || 'servicios para bodas'}\" \n        que ofrezcan: \"${aiQuery}\".\n        ${locationPrompt}\n        ${budgetPrompt}\n        \n        Devuelve ÚNICAMENTE un array JSON con 5 opciones de proveedores reales, \n        con este formato exacto por cada proveedor:\n        {\n          \"title\": \"Nombre del proveedor\",\n          \"link\": \"URL de su web oficial o perfil en plataforma de bodas\",\n          \"snippet\": \"Breve descripción del servicio que ofrecen\",\n          \"service\": \"${servicioSeleccionado || 'Servicios para bodas'}\",\n          \"location\": \"Ubicación del proveedor (ciudad o provincia)\",\n          \"priceRange\": \"Rango de precios aproximado\"\n        }\n        \n        Asegúrate de:\n        1. Incluir enlaces reales y operativos, preferiblemente web oficial o perfil en bodas.net\n        2. Priorizar proveedores en ${formattedLocation || 'la ubicación de la boda'}\n        3. Que los proveedores sean relevantes para la búsqueda \"${aiQuery}\"\n        4. SOLO devolver el array JSON, sin texto adicional ni explicaciones`;\n      \n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [{ role: \"user\", content: prompt }],\n          temperature: 0.7\n        })\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(`Error en la API de OpenAI: ${error.error?.message || 'Error desconocido'}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.choices || !data.choices.length) {\n        throw new Error('Respuesta vacía de OpenAI');\n      }\n      \n      if (!data.choices[0].message || !data.choices[0].message.content) {\n        throw new Error('Formato de respuesta inválido');\n      }\n      \n      // Intentar extraer los resultados del texto de respuesta\n      const content = data.choices[0].message.content;\n      \n      // Detectar si la respuesta contiene un mensaje de error explícito\n      if (content.toLowerCase().includes('error') && content.length < 150) {\n        throw new Error(`Error reportado por OpenAI: ${content}`);\n      }\n      \n      // Intentar extraer JSON de la respuesta con estrategias múltiples\n      let jsonMatches = content.match(/```json\\s*([\\s\\S]+?)\\s*```/) || \n                        content.match(/```\\s*([\\s\\S]+?)\\s*```/) ||\n                        content.match(/\\[\\s*\\{[\\s\\S]*\\}\\s*\\]/);\n      \n      // Si encontramos array directo\n      if (jsonMatches && jsonMatches[0].startsWith('[')) {\n        jsonMatches = [null, jsonMatches[0]];\n      }\n      \n      // Si todo falla, usar texto completo\n      if (!jsonMatches) {\n        jsonMatches = [null, content.trim()];\n      }\n      \n      if (!jsonMatches || !jsonMatches[1]) {\n        console.error('No se pudo extraer JSON de la respuesta');\n        throw new Error('No se pudo extraer JSON de la respuesta');\n      }\n      \n      // Intentar analizar el JSON\n      let results = [];\n      try {\n        const jsonText = jsonMatches[1].trim();\n        results = JSON.parse(jsonText);\n      } catch (jsonError) {\n        console.error('Error al parsear JSON:', jsonError);\n        \n        try {\n          // Intento alternativo: buscar corchetes de array\n          const startIdx = jsonMatches[1].indexOf('[');\n          const endIdx = jsonMatches[1].lastIndexOf(']');\n          \n          if (startIdx !== -1 && endIdx !== -1 && startIdx < endIdx) {\n            const arrayText = jsonMatches[1].substring(startIdx, endIdx + 1);\n            results = JSON.parse(arrayText);\n          } else {\n            throw new Error('No se encontró estructura de array en la respuesta');\n          }\n        } catch (subError) {\n          // Crear resultado manual si todo falla\n          const lines = content.split('\\n');\n          const providerCandidates = lines.filter(line => \n            line.trim().length > 10 && \n            /^[A-Z]/.test(line.trim()) && \n            !line.trim().startsWith('```')\n          );\n          \n          if (providerCandidates.length > 0) {\n            results = providerCandidates.map((line, index) => ({\n              title: line.trim().split(':')[0] || `Proveedor ${index + 1}`,\n              name: line.trim().split(':')[0] || `Proveedor ${index + 1}`,\n              link: `https://www.bodas.net/busqueda/${servicioSeleccionado.toLowerCase().replace(/\\s+/g, '-')}-${formattedLocation ? formattedLocation.split(',')[0].toLowerCase() : 'espana'}`,\n              snippet: line,\n              service: servicioSeleccionado,\n              location: formattedLocation || 'España',\n              priceRange: 'Consultar'\n            }));\n          }\n        }\n      }\n      \n      // Verificar que results es un array\n      if (!Array.isArray(results)) {\n        console.error('El resultado no es un array:', results);\n        results = [];\n      }\n      \n      // Verificar y normalizar los resultados\n      const validResults = await verifyProviderLinks(results);\n      \n      if (validResults.length === 0 && results.length > 0) {\n        // Crear un resultado de respaldo para evitar que no haya resultados\n        validResults.push({\n          title: 'Directorio de proveedores para bodas',\n          link: `https://www.bodas.net/busqueda/${servicioSeleccionado.toLowerCase().replace(/\\s+/g, '-')}-${formattedLocation ? formattedLocation.split(',')[0].toLowerCase() : 'espana'}`,\n          snippet: `Encuentra proveedores de ${servicioSeleccionado} en ${formattedLocation || 'toda España'}`,\n          service: servicioSeleccionado,\n          location: formattedLocation || 'España',\n          priceRange: 'Varios precios disponibles',\n          verified: true\n        });\n      }\n      \n      // Mostrar los resultados\n      if (validResults.length > 0) {\n        setAiResults(validResults);\n        setShowResults(true);\n        saveData('lovendaSuppliers', validResults, {\n          collection: 'userSuppliers',\n          showNotification: false\n        });\n        window.dispatchEvent(new Event('lovenda-suppliers'));\n      } else {\n        setToast({ \n          message: 'No se encontraron proveedores que coincidan con tu búsqueda. Intenta con otros términos.', \n          type: 'info' \n        });\n      }\n    } catch (err) {\n      console.error('Error en la búsqueda de proveedores:', err);\n      setToast({ \n        message: 'Error al buscar proveedores. Inténtalo de nuevo más tarde.', \n        type: 'error' \n      });\n    }\n  };\n\n  const selectProvider = (item) => {\n    if (onSelectProvider) {\n      onSelectProvider(item);\n    }\n    onClose();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-[999]\" onMouseDownCapture={(e)=>{if(e.target===e.currentTarget) onClose();}}>\n      <div ref={modalRef} role=\"dialog\" aria-modal=\"true\"\n        className=\"bg-white rounded shadow-lg w-full max-w-lg max-h-[90vh] flex flex-col p-4 m-4 overflow-y-auto\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <h3 className=\"text-xl font-semibold mb-4\">Buscar proveedor</h3>\n        \n        {/* Formulario de búsqueda */}\n        <form onSubmit={handleAiSearch} className=\"space-y-4 mb-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <input \n                value={aiQuery} \n                onChange={e => setAiQuery(e.target.value)} \n                className=\"w-full border rounded p-3\" \n                placeholder=\"¿Qué buscas? Ej: Fotógrafo con experiencia en bodas al aire libre\" \n              />\n            </div>\n            <button \n              type=\"submit\" \n              className=\"bg-blue-600 text-white rounded-full p-3 flex items-center justify-center\" \n              disabled={aiLoading}\n            >\n              {aiLoading ? <RefreshCcw className=\"animate-spin\" /> : <Search />}\n            </button>\n          </div>\n          \n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <select \n                value={serviceFilter} \n                onChange={e => setServiceFilter(e.target.value)} \n                className=\"w-full border rounded p-3\"\n              >\n                <option value=\"\">Todos los servicios</option>\n                {commonServices.map((service, idx) => (\n                  <option key={idx} value={service}>{service}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"flex-1\">\n              <select \n                value={budgetRange} \n                onChange={e => setBudgetRange(e.target.value)} \n                className=\"w-full border rounded p-3\"\n              >\n                <option value=\"\">Cualquier presupuesto</option>\n                <option value=\"económico\">Económico</option>\n                <option value=\"medio\">Precio medio</option>\n                <option value=\"premium\">Premium</option>\n              </select>\n            </div>\n          </div>\n        </form>\n        \n        {/* Indicador de carga */}\n        {aiLoading && (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <Spinner text=\"Buscando proveedores...\" />\n          </div>\n        )}\n        \n        {/* Resultados de búsqueda */}\n        {!aiLoading && showResults && (\n          <div className=\"flex-1 overflow-y-auto\">\n            <h4 className=\"font-medium mb-2\">Resultados ({aiResults.length})</h4>\n            {aiResults.length === 0 ? (\n              <p className=\"text-gray-500\">No se encontraron proveedores que coincidan con tu búsqueda.</p>\n            ) : (\n              <div className=\"space-y-4\">\n                {aiResults.map((item, idx) => (\n                  <div key={idx} className=\"border rounded p-3 hover:bg-gray-50 cursor-pointer\" onClick={() => selectProvider(item)}>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <p className=\"font-semibold text-blue-600\">{item.title || item.name}</p>\n                        <div className=\"flex items-center text-xs text-gray-600 mt-1 space-x-2\">\n                          <span className=\"flex items-center\">\n                            <MapPin size={12} className=\"mr-1\" />\n                            {item.location || 'No especificada'}\n                          </span>\n                          {item.priceRange && (\n                            <span className=\"flex items-center\">\n                              <span className=\"mr-1\">💰</span>\n                              {item.priceRange}\n                            </span>\n                          )}\n                          {item.service && (\n                            <span className=\"bg-gray-100 px-2 py-0.5 rounded\">\n                              {item.service}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <p className=\"text-sm mt-2 text-gray-700 line-clamp-2\">\n                      {item.snippet || 'Sin descripción disponible'}\n                    </p>\n                    {item.link && (\n                      <a \n                        href={item.link} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\" \n                        className=\"text-xs text-blue-600 hover:underline mt-1 inline-block\"\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        {new URL(item.link).hostname.replace('www.', '')}\n                      </a>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n        \n        {/* Toast para mensajes */}\n        {toast && (\n          <div className={`fixed bottom-4 right-4 px-4 py-2 rounded shadow-lg ${toast.type === 'error' ? 'bg-red-600 text-white' : toast.type === 'success' ? 'bg-green-600 text-white' : 'bg-blue-600 text-white'}`}>\n            {toast.message}\n          </div>\n        )}\n        \n        {/* Botones de acción */}\n        <div className=\"mt-4 pt-4 border-t flex justify-end space-x-2\">\n          <button onClick={onClose} className=\"px-4 py-2 bg-gray-200 rounded\">\n            Cerrar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\SeatItem.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\Spinner.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\SyncIndicator.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\TableConfigModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\TableItem.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'guestCount' is assigned a value but never used.","line":41,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'getFirst' is assigned a value but never used.","line":137,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef } from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { ItemTypes } from './GuestItem';\r\n\r\n// Basic draggable table (circle or rectangle)\r\n// Helper para obtener primer nombre (máx 8 caracteres)\r\nconst firstName = (str='?') => {\r\n  const first = String(str).trim().split(/\\s+/)[0] || '?';\r\n  return first.length>8? first.slice(0,8)+'…' : first;\r\n};\r\nexport default function TableItem({ table, scale, offset, onMove, onAssignGuest, onToggleEnabled, onOpenConfig, onSelect, guests = [], canMove = true }) {\r\n  const ref = useRef(null);\r\n\r\n  // drop logic\r\n  const [{ isOver }, drop] = useDrop(() => ({\r\n    accept: ItemTypes.GUEST,\r\n    canDrop: () => table.enabled !== false && !table.guestId,\r\n    drop: (item) => onAssignGuest(table.id, item.id),\r\n    collect: (monitor) => ({ isOver: monitor.isOver() }),\r\n  }), [table.id]);\r\n\r\n  const handlePointerDown = (e) => {\r\n    e.stopPropagation();\r\n    const start = { x: e.clientX, y: e.clientY };\r\n    const orig = { x: table.x, y: table.y };\r\n    const move = (ev) => {\r\n      const dx = (ev.clientX - start.x) / scale;\r\n      const dy = (ev.clientY - start.y) / scale;\r\n      onMove(table.id, { x: orig.x + dx, y: orig.y + dy });\r\n    };\r\n    const up = () => {\r\n      window.removeEventListener('pointermove', move);\r\n      window.removeEventListener('pointerup', up);\r\n    };\r\n    window.addEventListener('pointermove', move);\r\n    window.addEventListener('pointerup', up);\r\n  };\r\n\r\n  // Contar invitados asignados considerando acompañantes\r\n  // Total de personas (invitado + acompañantes) asignadas a esta mesa\r\n  const guestCount = (() => {\r\n    // Conteo desde lista global de invitados (por id o nombre de mesa)\r\n    const countFromGuests = guests.reduce((sum, g) => {\r\n      const matches = (() => {\r\n      if (g.tableId !== undefined && g.tableId !== null) {\r\n        return String(g.tableId) === String(table.id);\r\n      }\r\n      if (g.table !== undefined && g.table !== null && String(g.table).trim() !== '') {\r\n        // puede ser nombre de mesa o número en string\r\n        return String(g.table).trim() === String(table.id) || (table.name && String(g.table).trim() === String(table.name));\r\n      }\r\n      return false;\r\n    })();\r\n      if (!matches) return sum;\r\n      const comp = parseInt(g.companion, 10) || 0;\r\n      return sum + 1 + comp;\r\n    }, 0);\r\n    if (countFromGuests) return countFromGuests;\r\n    // Conteo alternativo para propiedad assignedGuests (banquete)\r\n    if (Array.isArray(table.assignedGuests) && table.assignedGuests.length) {\r\n      return table.assignedGuests.reduce((sum, g) => sum + 1 + (parseInt(g.companion, 10) || 0), 0);\r\n    }\r\n    // Conteo para ceremonia (un solo invitado por mesa)\r\n    return table.guestId ? 1 : 0;\r\n  })();\r\n  // Lista de invitados asignados a esta mesa (ignoramos acompañantes para las iniciales)\r\n  const guestsList = (() => {\r\n    // Primero, obtenemos los invitados de la lista global\r\n    const list = guests.filter(g => {\r\n      if (g.tableId !== undefined && g.tableId !== null) {\r\n        return String(g.tableId) === String(table.id);\r\n      }\r\n      if (g.table !== undefined && g.table !== null && String(g.table).trim() !== '') {\r\n        return String(g.table).trim() === String(table.id) || (table.name && String(g.table).trim() === String(table.name));\r\n      }\r\n      return false;\r\n    });\r\n    \r\n    // Modo ceremonia: usamos exclusivamente los invitados de la lista global\r\n    // Modo banquete: podemos tener invitados en la propiedad assignedGuests\r\n    \r\n    // Si hay assignedGuests (modo banquete) y no hay invitados en la lista global,\r\n    // o si estamos en modo banquete (determinado por la presencia de assignedGuests)\r\n    if (Array.isArray(table.assignedGuests) && table.assignedGuests.length) {\r\n      // Evitamos duplicados creando un mapa de IDs ya incluidos\r\n      const guestIds = new Set(list.map(g => g.id).filter(id => id));\r\n      \r\n      // Filtramos assignedGuests para incluir solo los que no están ya en la lista global\r\n      const uniqueAssignedGuests = table.assignedGuests.filter(g => !g.id || !guestIds.has(g.id));\r\n      \r\n      // Combinamos ambas fuentes\r\n      return [...list, ...uniqueAssignedGuests];\r\n    }\r\n    \r\n    // Si no hay assignedGuests, devolvemos la lista global (puede ser vacía)\r\n    return list;\r\n  })();\r\n  const seatDots = guestsList.length; // mostramos iniciales alrededor\r\n  // Tamaño base: diámetro para circular o ancho/alto para rectangular\r\n  const sizeX = table.shape === 'circle' ? (table.diameter || 60) : (table.width || 80);\r\n  const sizeY = table.shape === 'circle' ? (table.diameter || 60) : (table.height || table.length || 60);\r\n  const disabled = table.enabled === false;\r\n\r\n  const style = {\r\n    position: 'absolute',\r\n    left: table.x * scale + offset.x - (sizeX * scale) / 2,\r\n    top: table.y * scale + offset.y - (sizeY * scale) / 2,\r\n    width: sizeX * scale,\r\n    height: sizeY * scale,\r\n    backgroundColor: disabled ? '#e5e7eb' : '#fef3c7',\r\n    border: '2px solid #f59e0b',\r\n    borderRadius: table.shape === 'circle' ? '50%' : '6px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    cursor: disabled ? 'not-allowed' : 'grab',\r\n    userSelect: 'none'\r\n  };\r\n\r\n  return (\r\n    <div ref={node => {ref.current=node; drop(node);}} \r\n      style={{...style, backgroundColor: isOver ? '#d1fae5' : style.backgroundColor}} \r\n      onPointerDown={disabled || !canMove ? undefined : handlePointerDown}\r\n      onContextMenu={e=>{e.preventDefault(); onToggleEnabled(table.id);}}\r\n      onClick={(e)=>{e.stopPropagation(); onSelect && onSelect(table.id);}}\r\n      onDoubleClick={()=>onOpenConfig(table)}> \r\n      <button \r\n        onClick={(e)=>{e.stopPropagation(); onAssignGuest(table.id, null);}}\r\n        className=\"absolute top-0 right-0 text-xs px-1 text-red-600\">✖</button>\r\n      {/* Contenido central opcional: solo mostramos el número de mesa pequeño */}\r\n      <span style={{fontSize:14, fontWeight:'bold', pointerEvents:'none', color:'#374151'}}>{table.id}</span>\r\n    {disabled && <div className=\"absolute inset-0 bg-white bg-opacity-50 rounded\" />} \r\n      {/* seats */}\r\n      {(() => {\r\n        if(seatDots===0) return null;\r\n        // Función para obtener el primer nombre\r\n        const getFirst = (name='?') => {\r\n           const first = name.trim().split(/\\s+/)[0] || '?';\r\n           return first;\r\n         }\r\n        if (table.shape === 'rect') {\r\n           const cols = seatDots > 0 ? Math.ceil(seatDots / 2) : 0;\r\n          return Array.from({ length: seatDots }).map((_, i) => {\r\n            const isTop = i < cols;\r\n            const idx = isTop ? i : i - cols;\r\n            const px = (sizeX * scale) / (cols + 1) * (idx + 1);\r\n            const offset = 18 * scale;\r\n            const py = isTop ? -offset : sizeY * scale + offset; // fuera del borde\r\n            return (\r\n              <div\r\n                key={i}\r\n                style={{\r\n                  position: 'absolute',\r\n                  minWidth:24,\r\n                   width:'auto',\r\n                  height: 24,\r\n                  background: '#2563eb',\r\n                  borderRadius: '9999px',\r\n                  display:'flex',\r\n                  alignItems:'center',\r\n                  justifyContent:'center',\r\n                  color:'#fff',\r\n                  fontSize:10,\r\n                  fontWeight:'bold',\r\n                  left: px - 12,\r\n                  top: py - 12,\r\n                }}\r\n              >{firstName(guestsList[i]?.name || guestsList[i]?.nombre || '')}</div>\r\n            );\r\n          });\r\n        }\r\n         const seats = seatDots; // puntos según invitados\r\n         if(seats===0) return null;\r\n         const centerX = (sizeX * scale) / 2;\r\n         const centerY = (sizeY * scale) / 2;\r\n         return Array.from({ length: seats }).map((_, i) => {\r\n          const angle = (Math.PI * 2 * i) / seats;\r\n                    // Radio ligeramente mayor al de la mesa, proporcional al zoom para que siempre quede fuera\r\n          const r = (Math.max(sizeX,sizeY) * scale) / 2 + 30 * scale; // fuera del borde\r\n          const sx = centerX + Math.cos(angle) * r;\r\n          const sy = centerY + Math.sin(angle) * r;\r\n          return (\r\n            <div\r\n              key={i}\r\n              style={{\r\n                position: 'absolute',\r\n                minWidth:24,\r\n                   width:'auto',\r\n                height: 24,\r\n                background: '#2563eb',\r\n                borderRadius: '9999px',\r\n                display:'flex',\r\n                alignItems:'center',\r\n                justifyContent:'center',\r\n                color:'#fff',\r\n                fontSize:10,\r\n                fontWeight:'bold',\r\n                left: sx - 12,\r\n                top: sy - 12,\r\n              }}\r\n            >{firstName(guestsList[i]?.name || guestsList[i]?.nombre || '')}</div>\r\n          );\r\n        });\r\n      })()}\r\n\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\TemplatesModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ThemeToggle.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\Toast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\UploadImageCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\UsernameWizard.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":18,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { auth } from \"../lib/firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport useEmailUsername from \"../hooks/useEmailUsername\";\nimport Spinner from \"./ui/Spinner\";\nimport Button from \"./ui/Button\";\nimport Alert from \"./ui/Alert\";\n\n/**\n * Muestra un modal la primera vez que el usuario accede para que elija su nombre\n * de correo @mywed360.com. Una vez configurado desaparece para siempre.\n */\nconst UsernameWizard = () => {\n  const {\n    checkUsernameAvailability,\n    reserveUsername,\n    getCurrentUsername,\n    loading,\n    error,\n  } = useEmailUsername();\n\n  const [stepLoading, setStepLoading] = useState(true);\n  const [showWizard, setShowWizard] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [checking, setChecking] = useState(false);\n  const [available, setAvailable] = useState(null); // null sin comprobar, true/false resultado\n  const [feedback, setFeedback] = useState(null);\n\n  // Al montar, esperamos a que Firebase conozca al usuario autenticado\n  // y entonces comprobamos si ya tiene nombre de correo configurado.\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      if (!user) {\n        // No hay usuario autenticado; no mostramos wizard y detenemos loading.\n        setStepLoading(false);\n        return;\n      }\n\n      const current = await getCurrentUsername();\n      if (!current) {\n        setShowWizard(true);\n      }\n      setStepLoading(false);\n      // Nos desuscribimos porque solo necesitamos esta comprobación una vez.\n      // (La función retornada por useEffect hará el cleanup).\n      \n    });\n\n    return () => unsubscribe();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (stepLoading) return null; // evita parpadeo\n  if (!showWizard) return null; // usuario ya configuró nombre\n\n  const handleCheck = async () => {\n    setChecking(true);\n    const ok = await checkUsernameAvailability(username.trim());\n    setAvailable(ok);\n    if (ok) {\n      setFeedback(\"Disponible ✅\");\n    } else {\n      setFeedback(\"No disponible ❌\");\n    }\n    setChecking(false);\n  };\n\n  const handleSave = async () => {\n    if (!available) return;\n    setChecking(true);\n    const saved = await reserveUsername(username.trim());\n    if (saved) {\n      setShowWizard(false);\n    }\n    setChecking(false);\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40\">\n      <div className=\"w-full max-w-md rounded-lg bg-white p-6 shadow-lg\">\n        <h2 className=\"mb-4 text-xl font-semibold text-gray-700\">\n          Configura tu correo @mywed360.com\n        </h2>\n        <p className=\"mb-4 text-sm text-gray-600\">\n          Elige tu nombre de usuario. Solo podrás configurarlo una vez.\n        </p>\n\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            className=\"flex-1 rounded border px-3 py-2 text-sm focus:border-indigo-500 focus:outline-none\"\n            placeholder=\"nombre.deseado\"\n            value={username}\n            onChange={(e) => {\n              setUsername(e.target.value.toLowerCase());\n              setAvailable(null);\n              setFeedback(null);\n            }}\n          />\n          <span className=\"self-center text-sm text-gray-700\">@mywed360.com</span>\n        </div>\n\n        {feedback && (\n          <p\n            className={`mt-2 text-sm ${available ? \"text-green-600\" : \"text-red-600\"}`}\n          >\n            {feedback}\n          </p>\n        )}\n        {error && (\n          <Alert variant=\"error\" className=\"mt-2 text-sm\">\n            {error}\n          </Alert>\n        )}\n\n        <div className=\"mt-6 flex justify-end gap-2\">\n          <Button onClick={handleCheck} disabled={checking || !username}>\n            {checking ? <Spinner size=\"sm\" /> : \"Comprobar\"}\n          </Button>\n          <Button\n            onClick={handleSave}\n            variant=\"primary\"\n            disabled={checking || !available}\n          >\n            {checking ? <Spinner size=\"sm\" /> : \"Guardar\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UsernameWizard;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\VirtualizedList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\__tests__\\Nav.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\admin\\AdminDashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Bell' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { Grid, Card, CardContent, CardHeader, Typography, Box, Chip, Avatar } from '@mui/material';\nimport { \n  Users, \n  Mail, \n  Calendar, \n  Check, \n  AlertTriangle,\n  Bell,\n  Activity,\n  ShoppingBag\n} from 'lucide-react';\n\n/**\n * Panel de administración principal\n * Muestra resumen de métricas y accesos rápidos\n */\nconst AdminDashboard = () => {\n  const { currentUser } = useAuth();\n  const [stats, setStats] = useState({\n    activeUsers: 0,\n    pendingProviders: 0,\n    emailsSent: 0,\n    upcomingEvents: 0,\n    completedOrders: 0,\n    alerts: 0\n  });\n\n  // Simular carga de datos\n  useEffect(() => {\n    // En una implementación real, estos datos vendrían de una API\n    setTimeout(() => {\n      setStats({\n        activeUsers: 432,\n        pendingProviders: 12,\n        emailsSent: 2789,\n        upcomingEvents: 8,\n        completedOrders: 145,\n        alerts: 3\n      });\n    }, 800);\n  }, []);\n\n  // Tarjetas de métricas para el dashboard\n  const metricsCards = [\n    {\n      title: 'Usuarios activos',\n      value: stats.activeUsers,\n      icon: <Users size={24} />,\n      color: 'rgb(37, 99, 235)'\n    },\n    {\n      title: 'Proveedores pendientes',\n      value: stats.pendingProviders,\n      icon: <ShoppingBag size={24} />,\n      color: 'rgb(236, 72, 153)'\n    },\n    {\n      title: 'Emails enviados',\n      value: stats.emailsSent,\n      icon: <Mail size={24} />,\n      color: 'rgb(234, 88, 12)'\n    },\n    {\n      title: 'Eventos próximos',\n      value: stats.upcomingEvents,\n      icon: <Calendar size={24} />,\n      color: 'rgb(5, 150, 105)'\n    },\n    {\n      title: 'Pedidos completados',\n      value: stats.completedOrders,\n      icon: <Check size={24} />,\n      color: 'rgb(79, 70, 229)'\n    },\n    {\n      title: 'Alertas del sistema',\n      value: stats.alerts,\n      icon: <AlertTriangle size={24} />,\n      color: 'rgb(239, 68, 68)'\n    }\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-8\">\n        <Typography variant=\"h4\" className=\"font-medium\">\n          Panel de Administración\n        </Typography>\n        <Chip\n          avatar={<Avatar alt={currentUser?.displayName || 'Admin'}>{(currentUser?.displayName?.[0] || 'A').toUpperCase()}</Avatar>}\n          label={`Hola, ${currentUser?.displayName || 'Admin'}`}\n          variant=\"outlined\"\n          color=\"primary\"\n        />\n      </div>\n\n      {/* Métricas principales */}\n      <Grid container spacing={3} className=\"mb-8\">\n        {metricsCards.map((card, index) => (\n          <Grid item xs={12} sm={6} md={4} key={index}>\n            <Card className=\"h-full\">\n              <CardContent>\n                <Box className=\"flex justify-between items-center\">\n                  <Box>\n                    <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n                      {card.title}\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"div\" className=\"font-semibold\">\n                      {card.value.toLocaleString()}\n                    </Typography>\n                  </Box>\n                  <Avatar\n                    sx={{\n                      bgcolor: card.color,\n                      width: 56,\n                      height: 56\n                    }}\n                  >\n                    {card.icon}\n                  </Avatar>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      {/* Accesos rápidos */}\n      <Typography variant=\"h5\" className=\"mb-4\">\n        Accesos Rápidos\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <Card className=\"h-full\">\n            <CardHeader \n              title=\"Sistema de Correo\"\n              subheader=\"Gestión de correos electrónicos\"\n              avatar={\n                <Avatar sx={{ bgcolor: 'rgb(234, 88, 12)' }}>\n                  <Mail size={20} />\n                </Avatar>\n              }\n            />\n            <CardContent>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Accede al panel de administración de correo para monitorizar el envío, recepción y rendimiento del sistema de email.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Card className=\"h-full\">\n            <CardHeader \n              title=\"Actividad del Sistema\" \n              subheader=\"Monitorización en tiempo real\"\n              avatar={\n                <Avatar sx={{ bgcolor: 'rgb(79, 70, 229)' }}>\n                  <Activity size={20} />\n                </Avatar>\n              }\n            />\n            <CardContent>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Visualiza la actividad del sistema en tiempo real, incluyendo sesiones de usuarios, transacciones y eventos del sistema.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\admin\\CachePerformancePanel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\admin\\EmailAdminDashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":2,"column":88,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":93},{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":2,"column":95,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":102},{"ruleId":"no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Tabs, Tab, Button, Box, Typography, Menu, MenuItem, Paper, Badge, Divider } from '@mui/material';\n// Eliminando importación problemática de @mui/icons-material\n// Vamos a usar alternativas simples de texto para los íconos\nimport { performanceMonitor } from '../../services/PerformanceMonitor';\nimport MetricsDashboard from './MetricsDashboard';\nimport { useNavigate } from 'react-router-dom';\n\n/**\n * Panel de administración para el sistema de correo electrónico\n * Proporciona acceso a métricas, configuración y feedback de usuarios\n * \n * @component\n * @example\n * ```jsx\n * <EmailAdminDashboard />\n * ```\n */\nfunction EmailAdminDashboard() {\n  const [activeTab, setActiveTab] = useState('metrics');\n  const [isLoading, setIsLoading] = useState(true);\n  const [emailStats, setEmailStats] = useState({\n    totalAccounts: 0,\n    activeToday: 0,\n    totalSent: 0,\n    totalReceived: 0,\n    averageResponseTime: 0,\n    topSenders: [],\n    topDomains: []\n  });\n  const [feedbackStats, setFeedbackStats] = useState({\n    averageRating: 0,\n    totalFeedback: 0,\n    recentFeedback: []\n  });\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Simular carga de datos de estadísticas\n    const loadStats = async () => {\n      setIsLoading(true);\n      \n      try {\n        // En producción, estos datos vendrían de una API\n        // Por ahora generamos datos de ejemplo\n        \n        // Estadísticas de correos\n        setEmailStats({\n          totalAccounts: 120,\n          activeToday: 45,\n          totalSent: 876,\n          totalReceived: 1243,\n          averageResponseTime: 43, // minutos\n          topSenders: [\n            { email: 'maria@lovenda.com', count: 56 },\n            { email: 'juan@lovenda.com', count: 42 },\n            { email: 'ana@lovenda.com', count: 38 }\n          ],\n          topDomains: [\n            { domain: 'gmail.com', count: 356 },\n            { domain: 'hotmail.com', count: 189 },\n            { domain: 'outlook.com', count: 132 }\n          ]\n        });\n        \n        // Estadísticas de feedback\n        setFeedbackStats({\n          averageRating: 4.2,\n          totalFeedback: 38,\n          recentFeedback: [\n            { id: 1, rating: 5, comment: \"Me encanta la detección automática de eventos\", date: \"2025-07-12\" },\n            { id: 2, rating: 4, comment: \"Muy útil, aunque a veces es lento\", date: \"2025-07-10\" },\n            { id: 3, rating: 3, comment: \"Necesita mejores plantillas\", date: \"2025-07-09\" }\n          ]\n        });\n        \n        // Registrar visita al panel en el monitor de rendimiento\n        performanceMonitor.logEvent('admin_dashboard_view', {\n          tab: activeTab\n        });\n      } catch (error) {\n        console.error('Error al cargar estadísticas:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadStats();\n  }, [activeTab]);\n  \n  // Manejador para cambiar de pestaña\n  const handleTabChange = (event, newTab) => {\n    setActiveTab(newTab);\n    performanceMonitor.logEvent('admin_tab_change', { tab: newTab });\n  };\n  \n  // Manejador para exportar informes\n  const handleExportReport = (format) => {\n    performanceMonitor.logEvent('export_report', { format, tab: activeTab });\n    \n    // Simulamos la exportación\n    alert(`Informe exportado en formato ${format}`);\n  };\n\n  // Estado para el menú desplegable de exportación\n  const [exportAnchorEl, setExportAnchorEl] = useState(null);\n  const openExportMenu = Boolean(exportAnchorEl);\n  \n  // Abrir menú de exportación\n  const handleExportClick = (event) => {\n    setExportAnchorEl(event.currentTarget);\n  };\n  \n  // Cerrar menú de exportación\n  const handleExportClose = () => {\n    setExportAnchorEl(null);\n  };\n  \n  // Manejador para ir a la configuración de emails\n  const handleGoToEmailSettings = () => {\n    navigate('/settings/email');\n  };\n\n  return (\n    <Box sx={{ p: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>\n        <Typography variant=\"h4\">Panel de Administración de Email</Typography>\n        <Button \n          variant=\"contained\"\n          onClick={() => navigate('/admin/metrics')}\n          // Eliminado el icono problemático\n          \n        >\n          Ver Dashboard Completo\n        </Button>\n      </Box>\n      \n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>\n        <Typography variant=\"h5\">Estadísticas</Typography>\n        \n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <div>\n            <Button \n              variant=\"outlined\" \n              onClick={handleExportClick}\n              // Eliminado el icono problemático\n              \n            >\n              Exportar Informe\n            </Button>\n            <Menu\n              anchorEl={exportAnchorEl}\n              open={openExportMenu}\n              onClose={handleExportClose}\n            >\n              <MenuItem onClick={() => { handleExportReport('pdf'); handleExportClose(); }}>\n                PDF\n              </MenuItem>\n              <MenuItem onClick={() => { handleExportReport('csv'); handleExportClose(); }}>\n                CSV\n              </MenuItem>\n              <MenuItem onClick={() => { handleExportReport('excel'); handleExportClose(); }}>\n                Excel\n              </MenuItem>\n            </Menu>\n          </div>\n          \n          <Button \n            variant=\"contained\"\n            onClick={handleGoToEmailSettings}\n            // Eliminado el icono problemático\n            \n          >\n            Configuración de Email\n          </Button>\n        </Box>\n      </Box>\n      \n      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 4 }}>\n        <Card sx={{ flex: '1 1 22%', minWidth: '160px', height: '100%' }}>\n          <CardContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n            <Typography variant=\"h4\" color=\"primary\">{emailStats.totalAccounts}</Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">Cuentas de Email</Typography>\n          </CardContent>\n        </Card>\n        \n        <Card sx={{ flex: '1 1 22%', minWidth: '160px', height: '100%' }}>\n          <CardContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n            <Typography variant=\"h4\" color=\"success.main\">{emailStats.activeToday}</Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">Usuarios Activos Hoy</Typography>\n          </CardContent>\n        </Card>\n        \n        <Card sx={{ flex: '1 1 22%', minWidth: '160px', height: '100%' }}>\n          <CardContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n            <Typography variant=\"h4\" color=\"info.main\">{emailStats.totalSent}</Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">Emails Enviados</Typography>\n          </CardContent>\n        </Card>\n        \n        <Card sx={{ flex: '1 1 22%', minWidth: '160px', height: '100%' }}>\n          <CardContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n            <Typography variant=\"h4\" color=\"warning.main\">{emailStats.totalReceived}</Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">Emails Recibidos</Typography>\n          </CardContent>\n        </Card>\n      </Box>\n      \n      <Tabs\n        value={activeTab}\n        onChange={handleTabChange}\n        sx={{ mb: 4 }}\n      >\n        <Tab value=\"metrics\" label=\"Métricas\" />\n        <Tab value=\"feedback\" label=\"Feedback de Usuarios\" />\n        <Tab value=\"accounts\" label=\"Cuentas de Email\" />\n      </Tabs>\n\n      {activeTab === 'metrics' && (\n        <Paper elevation={1} sx={{ p: 4, mb: 4 }}>\n          <MetricsDashboard />\n        </Paper>\n      )}\n      \n      {activeTab === 'feedback' && (\n        <Paper elevation={1} sx={{ p: 4, mb: 4 }}>\n              <div className=\"mb-4\">\n                <h3 className=\"h5 mb-3\">Resumen de Feedback</h3>\n                <div className=\"d-flex align-items-center mb-3\">\n                  <div className=\"me-3\">\n                    <span className=\"h3 mb-0\">{feedbackStats.averageRating.toFixed(1)}</span>\n                    <div className=\"text-muted\">Valoración media</div>\n                  </div>\n                  <div className=\"ms-4\">\n                    <div className=\"ratings\">\n                      {[1, 2, 3, 4, 5].map((star) => (\n                        <span \n                          key={star} \n                          className={`h4 ${star <= Math.round(feedbackStats.averageRating) ? 'text-warning' : 'text-muted'}`}\n                        >\n                          ★\n                        </span>\n                      ))}\n                    </div>\n                    <div className=\"text-muted\">\n                      Basado en {feedbackStats.totalFeedback} valoraciones\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mb-4\">\n                <h3 className=\"h5 mb-3\">Comentarios Recientes</h3>\n                {feedbackStats.recentFeedback.length === 0 ? (\n                  <p className=\"text-muted\">No hay comentarios recientes.</p>\n                ) : (\n                  <div className=\"list-group\">\n                    {feedbackStats.recentFeedback.map((item) => (\n                      <div key={item.id} className=\"list-group-item\">\n                        <div className=\"d-flex justify-content-between align-items-start mb-1\">\n                          <div>\n                            {Array.from({ length: 5 }).map((_, i) => (\n                              <span key={i} className={`small ${i < item.rating ? 'text-warning' : 'text-muted'}`}>\n                                ★\n                              </span>\n                            ))}\n                          </div>\n                          <small className=\"text-muted\">{item.date}</small>\n                        </div>\n                        <p className=\"mb-0\">{item.comment}</p>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n        </Paper>\n      )}\n      \n      {activeTab === 'accounts' && (\n        <Paper elevation={1} sx={{ p: 4, mb: 4 }}>\n              <h3 className=\"h5 mb-3\">Gestión de Cuentas</h3>\n              \n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead>\n                    <tr>\n                      <th>Email</th>\n                      <th>Usuario</th>\n                      <th>Creado</th>\n                      <th>Estado</th>\n                      <th>Acciones</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>juan@lovenda.com</td>\n                      <td>Juan Pérez</td>\n                      <td>10/06/2025</td>\n                      <td>\n                        <span className=\"badge bg-success\">Activo</span>\n                      </td>\n                      <td>\n                        <button className=\"btn btn-sm btn-outline-secondary me-1\">\n                          <i className=\"bi bi-pencil\"></i>\n                        </button>\n                        <button className=\"btn btn-sm btn-outline-danger\">\n                          <i className=\"bi bi-trash\"></i>\n                        </button>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>maria@lovenda.com</td>\n                      <td>María García</td>\n                      <td>15/06/2025</td>\n                      <td>\n                        <span className=\"badge bg-success\">Activo</span>\n                      </td>\n                      <td>\n                        <button className=\"btn btn-sm btn-outline-secondary me-1\">\n                          <i className=\"bi bi-pencil\"></i>\n                        </button>\n                        <button className=\"btn btn-sm btn-outline-danger\">\n                          <i className=\"bi bi-trash\"></i>\n                        </button>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>carlos@lovenda.com</td>\n                      <td>Carlos López</td>\n                      <td>20/06/2025</td>\n                      <td>\n                        <span className=\"badge bg-warning text-dark\">Suspendido</span>\n                      </td>\n                      <td>\n                        <button className=\"btn btn-sm btn-outline-secondary me-1\">\n                          <i className=\"bi bi-pencil\"></i>\n                        </button>\n                        <button className=\"btn btn-sm btn-outline-danger\">\n                          <i className=\"bi bi-trash\"></i>\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              \n              <div className=\"d-flex justify-content-between mt-3\">\n                <button className=\"btn btn-outline-primary\">\n                  <i className=\"bi bi-plus\"></i> Crear Cuenta\n                </button>\n                \n                <nav>\n                  <ul className=\"pagination pagination-sm mb-0\">\n                    <li className=\"page-item disabled\">\n                      <a className=\"page-link\" href=\"#\" tabIndex=\"-1\">Anterior</a>\n                    </li>\n                    <li className=\"page-item active\">\n                      <a className=\"page-link\" href=\"#\">1</a>\n                    </li>\n                    <li className=\"page-item\">\n                      <a className=\"page-link\" href=\"#\">2</a>\n                    </li>\n                    <li className=\"page-item\">\n                      <a className=\"page-link\" href=\"#\">3</a>\n                    </li>\n                    <li className=\"page-item\">\n                      <a className=\"page-link\" href=\"#\">Siguiente</a>\n                    </li>\n                  </ul>\n                </nav>\n              </div>\n        </Paper>\n      )}\n    </Box>\n  );\n}\n\nexport default EmailAdminDashboard;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\admin\\MetricsDashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'performanceMonitor' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { \n  LineChart, Line, BarChart, Bar, PieChart, Pie, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, Cell\n} from 'recharts';\nimport { performanceMonitor } from '../../services/PerformanceMonitor';\n\n/**\n * Dashboard para visualizar métricas de rendimiento del sistema\n * Especialmente enfocado en el sistema de correo electrónico personalizado\n * \n * @component\n * @example\n * ```jsx\n * <MetricsDashboard />\n * ```\n */\nfunction MetricsDashboard() {\n  const [metrics, setMetrics] = useState(null);\n  const [selectedTimeframe, setSelectedTimeframe] = useState('day'); // day, week, month\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Colores para gráficos\n  const colors = {\n    email: '#8884d8',\n    search: '#82ca9d',\n    notification: '#ffc658',\n    eventDetection: '#ff8042',\n    error: '#ff0000'\n  };\n\n  // Cargar datos de métricas al montar el componente\n  useEffect(() => {\n    const fetchMetrics = async () => {\n      setIsLoading(true);\n      setError(null);\n      \n      try {\n        // Intentar obtener métricas de localStorage (modo desarrollo)\n        let localMetrics = null;\n        try {\n          const storedMetrics = localStorage.getItem('lovenda_last_metrics');\n          if (storedMetrics) {\n            localMetrics = JSON.parse(storedMetrics);\n          }\n        } catch (e) {\n          console.log('No se encontraron métricas locales');\n        }\n        \n        // Si hay un endpoint de métricas configurado, obtener de allí\n        let remoteMetrics = null;\n        const metricsEndpoint = import.meta.env.VITE_METRICS_ENDPOINT;\n        \n        if (metricsEndpoint) {\n          const response = await fetch(`${metricsEndpoint}/dashboard?timeframe=${selectedTimeframe}`);\n          if (response.ok) {\n            remoteMetrics = await response.json();\n          } else {\n            throw new Error(`Error al obtener métricas: ${response.statusText}`);\n          }\n        }\n        \n        // Usar métricas remotas si están disponibles, sino las locales\n        setMetrics(remoteMetrics || localMetrics || generateMockMetrics());\n      } catch (err) {\n        console.error('Error al cargar métricas:', err);\n        setError('No se pudieron cargar las métricas. Usando datos de ejemplo.');\n        setMetrics(generateMockMetrics());\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    fetchMetrics();\n    \n    // Programar actualización de métricas cada minuto\n    const intervalId = setInterval(fetchMetrics, 60000);\n    return () => clearInterval(intervalId);\n  }, [selectedTimeframe]);\n  \n  // Generar datos de ejemplo para desarrollo y demostración\n  const generateMockMetrics = () => {\n    const now = Date.now();\n    const dayInMs = 24 * 60 * 60 * 1000;\n    \n    // Generar datos para los últimos 7 días\n    const timeSeriesData = Array.from({ length: 7 }).map((_, i) => {\n      const date = new Date(now - (6 - i) * dayInMs);\n      return {\n        date: date.toISOString().split('T')[0],\n        emailSent: Math.floor(Math.random() * 25) + 5,\n        emailReceived: Math.floor(Math.random() * 30) + 10,\n        searchCount: Math.floor(Math.random() * 40) + 20,\n        notificationsRendered: Math.floor(Math.random() * 100) + 50,\n        eventsDetected: Math.floor(Math.random() * 8) + 1,\n      };\n    });\n    \n    // Datos de rendimiento\n    const performanceData = {\n      emailProcessing: Math.floor(Math.random() * 500) + 100,\n      searchPerformance: Math.floor(Math.random() * 300) + 50,\n      notificationsRendering: Math.floor(Math.random() * 100) + 20,\n      eventDetection: Math.floor(Math.random() * 800) + 200,\n    };\n    \n    // Datos de errores\n    const errorData = [\n      { name: 'Email', value: Math.floor(Math.random() * 5) },\n      { name: 'Búsqueda', value: Math.floor(Math.random() * 3) },\n      { name: 'Notificaciones', value: Math.floor(Math.random() * 2) },\n      { name: 'Detección de eventos', value: Math.floor(Math.random() * 1) },\n    ];\n    \n    // Datos de uso\n    const usageData = [\n      { name: 'Email enviados', value: Math.floor(Math.random() * 100) + 50 },\n      { name: 'Email recibidos', value: Math.floor(Math.random() * 150) + 70 },\n      { name: 'Búsquedas', value: Math.floor(Math.random() * 80) + 30 },\n      { name: 'Eventos detectados', value: Math.floor(Math.random() * 30) + 10 },\n    ];\n    \n    return {\n      timeSeriesData,\n      performanceData,\n      errorData,\n      usageData,\n      timestamp: now,\n    };\n  };\n  \n  // Procesar los datos de rendimiento para el gráfico de barras\n  const processedPerformanceData = useMemo(() => {\n    if (!metrics || !metrics.performanceData) return [];\n    \n    return Object.entries(metrics.performanceData).map(([key, value]) => ({\n      name: key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()),\n      value: value,\n    }));\n  }, [metrics]);\n  \n  // Si está cargando, mostrar indicador\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500\"></div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"bg-white shadow-md rounded-lg p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-800\">Panel de Métricas</h2>\n        \n        <div className=\"flex space-x-2\">\n          <button\n            onClick={() => setSelectedTimeframe('day')}\n            className={`px-4 py-2 text-sm rounded-md ${\n              selectedTimeframe === 'day' \n                ? 'bg-indigo-600 text-white' \n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            Día\n          </button>\n          <button\n            onClick={() => setSelectedTimeframe('week')}\n            className={`px-4 py-2 text-sm rounded-md ${\n              selectedTimeframe === 'week' \n                ? 'bg-indigo-600 text-white' \n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            Semana\n          </button>\n          <button\n            onClick={() => setSelectedTimeframe('month')}\n            className={`px-4 py-2 text-sm rounded-md ${\n              selectedTimeframe === 'month' \n                ? 'bg-indigo-600 text-white' \n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            Mes\n          </button>\n        </div>\n      </div>\n      \n      {error && (\n        <div className=\"mb-4 p-3 bg-red-100 text-red-700 rounded-md\">\n          {error}\n        </div>\n      )}\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Gráfico de actividad de email */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"text-lg font-medium text-gray-700 mb-4\">Actividad de Email</h3>\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart\n                data={metrics?.timeSeriesData || []}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"emailSent\" name=\"Enviados\" stroke={colors.email} activeDot={{ r: 8 }} />\n                <Line type=\"monotone\" dataKey=\"emailReceived\" name=\"Recibidos\" stroke={colors.notification} />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n        \n        {/* Gráfico de rendimiento */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"text-lg font-medium text-gray-700 mb-4\">Tiempo de Respuesta (ms)</h3>\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={processedPerformanceData}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"value\" name=\"Tiempo (ms)\">\n                  {processedPerformanceData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`} \n                      fill={\n                        entry.name.includes('Email') ? colors.email :\n                        entry.name.includes('Search') ? colors.search :\n                        entry.name.includes('Notification') ? colors.notification :\n                        colors.eventDetection\n                      } \n                    />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n        \n        {/* Errores */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"text-lg font-medium text-gray-700 mb-4\">Errores por Componente</h3>\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={metrics?.errorData || []}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                >\n                  {metrics?.errorData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={colors.error} opacity={(index + 5) / 10} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n        \n        {/* Uso del sistema */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"text-lg font-medium text-gray-700 mb-4\">Uso del Sistema</h3>\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={metrics?.usageData || []}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                layout=\"vertical\"\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis type=\"number\" />\n                <YAxis dataKey=\"name\" type=\"category\" width={100} />\n                <Tooltip />\n                <Bar dataKey=\"value\" name=\"Cantidad\">\n                  {metrics?.usageData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`} \n                      fill={\n                        entry.name.includes('Email enviados') ? colors.email :\n                        entry.name.includes('Email recibidos') ? colors.notification :\n                        entry.name.includes('Búsquedas') ? colors.search :\n                        colors.eventDetection\n                      } \n                    />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mt-6\">\n        <h3 className=\"text-lg font-medium text-gray-700 mb-3\">Estadísticas de Uso del Sistema de Emails</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {/* Tarjetas de estadísticas */}\n          <StatCard \n            title=\"Emails enviados hoy\" \n            value={metrics?.timeSeriesData?.[metrics.timeSeriesData.length-1]?.emailSent || 0} \n            trend={10} \n            icon=\"📤\" \n          />\n          <StatCard \n            title=\"Emails recibidos hoy\" \n            value={metrics?.timeSeriesData?.[metrics.timeSeriesData.length-1]?.emailReceived || 0} \n            trend={15} \n            icon=\"📥\" \n          />\n          <StatCard \n            title=\"Búsquedas realizadas\" \n            value={metrics?.timeSeriesData?.[metrics.timeSeriesData.length-1]?.searchCount || 0} \n            trend={-5} \n            icon=\"🔍\" \n          />\n          <StatCard \n            title=\"Eventos detectados\" \n            value={metrics?.timeSeriesData?.[metrics.timeSeriesData.length-1]?.eventsDetected || 0} \n            trend={20} \n            icon=\"📅\" \n          />\n        </div>\n      </div>\n      \n      {/* Última actualización */}\n      <div className=\"mt-6 text-right text-sm text-gray-500\">\n        Última actualización: {metrics?.timestamp ? new Date(metrics.timestamp).toLocaleString() : 'N/A'}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Tarjeta para mostrar estadísticas individuales\n */\nfunction StatCard({ title, value, trend, icon }) {\n  return (\n    <div className=\"bg-white p-4 rounded-lg border border-gray-200 shadow-sm\">\n      <div className=\"flex justify-between items-start\">\n        <span className=\"text-2xl\">{icon}</span>\n        <span className={`text-sm font-medium ${trend >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n          {trend >= 0 ? '↑' : '↓'} {Math.abs(trend)}%\n        </span>\n      </div>\n      <h4 className=\"mt-2 text-gray-500 text-sm\">{title}</h4>\n      <p className=\"mt-1 text-2xl font-semibold\">{value.toLocaleString()}</p>\n    </div>\n  );\n}\n\nexport default MetricsDashboard;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\admin\\SystemSettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Box, Tabs, Tab, Button, TextField, Switch, FormControlLabel, Divider, Alert } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport RefreshIcon from '@mui/icons-material/Refresh';\n\n/**\n * Componente de configuración del sistema para administradores\n * Permite gestionar parámetros globales de la aplicación\n * \n * @component\n * @example\n * ```jsx\n * <SystemSettings />\n * ```\n */\nfunction SystemSettings() {\n  const [activeTab, setActiveTab] = useState(0);\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [saveError, setSaveError] = useState(null);\n  \n  // Estados para las diferentes configuraciones\n  const [generalSettings, setGeneralSettings] = useState({\n    siteName: 'Lovenda',\n    siteDescription: 'Plataforma de conexión con proveedores',\n    maxUploadSize: 10,\n    allowedFileTypes: '.jpg,.png,.pdf,.docx,.xlsx',\n    enableUserRegistration: true,\n    maintenanceMode: false,\n    contactEmail: 'soporte@lovenda.com',\n  });\n\n  const [emailSettings, setEmailSettings] = useState({\n    defaultEmailDomain: 'lovenda.com',\n    smtpServer: 'smtp.lovenda.com',\n    smtpPort: 587,\n    smtpUseSSL: true,\n    smtpUsername: '',\n    smtpPassword: '',\n    emailsPerHour: 100,\n    maxAttachmentSize: 5,\n    defaultSignature: '-- Enviado desde Lovenda',\n  });\n\n  const [securitySettings, setSecuritySettings] = useState({\n    sessionTimeoutMinutes: 30,\n    maxLoginAttempts: 5,\n    requireStrongPasswords: true,\n    passwordResetTimeHours: 24,\n    twoFactorAuthDefault: false,\n    ipWhitelist: '',\n  });\n  \n  // Manejo de cambios en las pestañas\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  // Manejadores de cambio para cada sección\n  const handleGeneralChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setGeneralSettings({\n      ...generalSettings,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setEmailSettings({\n      ...emailSettings,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n\n  const handleSecurityChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setSecuritySettings({\n      ...securitySettings,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n\n  // Simulación de guardado\n  const handleSaveSettings = () => {\n    setIsSaving(true);\n    setSaveSuccess(false);\n    setSaveError(null);\n\n    // Simular una llamada API\n    setTimeout(() => {\n      setIsSaving(false);\n      \n      // Simulamos éxito (en producción esto sería una llamada a la API)\n      setSaveSuccess(true);\n      \n      // Resetear el mensaje de éxito después de 3 segundos\n      setTimeout(() => {\n        setSaveSuccess(false);\n      }, 3000);\n    }, 1500);\n  };\n\n  return (\n    <div className=\"p-6\">\n      <Typography variant=\"h4\" className=\"mb-6\">Configuración del Sistema</Typography>\n      \n      {saveSuccess && (\n        <Alert severity=\"success\" className=\"mb-4\">\n          Configuración guardada correctamente\n        </Alert>\n      )}\n      \n      {saveError && (\n        <Alert severity=\"error\" className=\"mb-4\">\n          Error al guardar la configuración: {saveError}\n        </Alert>\n      )}\n      \n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs value={activeTab} onChange={handleTabChange} aria-label=\"configuración del sistema\">\n          <Tab label=\"General\" />\n          <Tab label=\"Correo Electrónico\" />\n          <Tab label=\"Seguridad\" />\n        </Tabs>\n      </Box>\n      \n      {/* Panel General */}\n      {activeTab === 0 && (\n        <Card className=\"mt-4\">\n          <CardContent className=\"space-y-4\">\n            <Typography variant=\"h6\">Configuración General</Typography>\n            <Divider />\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n              <TextField\n                label=\"Nombre del Sitio\"\n                name=\"siteName\"\n                value={generalSettings.siteName}\n                onChange={handleGeneralChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <TextField\n                label=\"Descripción del Sitio\"\n                name=\"siteDescription\"\n                value={generalSettings.siteDescription}\n                onChange={handleGeneralChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <TextField\n                label=\"Tamaño máximo de archivos (MB)\"\n                name=\"maxUploadSize\"\n                type=\"number\"\n                value={generalSettings.maxUploadSize}\n                onChange={handleGeneralChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <TextField\n                label=\"Tipos de archivos permitidos\"\n                name=\"allowedFileTypes\"\n                value={generalSettings.allowedFileTypes}\n                onChange={handleGeneralChange}\n                fullWidth\n                variant=\"outlined\"\n                helperText=\"Separados por comas, ej: .jpg,.png,.pdf\"\n              />\n              \n              <TextField\n                label=\"Email de Contacto\"\n                name=\"contactEmail\"\n                value={generalSettings.contactEmail}\n                onChange={handleGeneralChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <div className=\"col-span-1 md:col-span-2 flex flex-col space-y-2\">\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={generalSettings.enableUserRegistration}\n                      onChange={handleGeneralChange}\n                      name=\"enableUserRegistration\"\n                    />\n                  }\n                  label=\"Permitir registro de usuarios\"\n                />\n                \n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={generalSettings.maintenanceMode}\n                      onChange={handleGeneralChange}\n                      name=\"maintenanceMode\"\n                    />\n                  }\n                  label=\"Modo de mantenimiento\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Panel de Email */}\n      {activeTab === 1 && (\n        <Card className=\"mt-4\">\n          <CardContent className=\"space-y-4\">\n            <Typography variant=\"h6\">Configuración de Correo Electrónico</Typography>\n            <Divider />\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n              <TextField\n                label=\"Dominio de email predeterminado\"\n                name=\"defaultEmailDomain\"\n                value={emailSettings.defaultEmailDomain}\n                onChange={handleEmailChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <TextField\n                label=\"Servidor SMTP\"\n                name=\"smtpServer\"\n                value={emailSettings.smtpServer}\n                onChange={handleEmailChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <TextField\n                label=\"Puerto SMTP\"\n                name=\"smtpPort\"\n                type=\"number\"\n                value={emailSettings.smtpPort}\n                onChange={handleEmailChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <div className=\"flex items-center\">\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={emailSettings.smtpUseSSL}\n                      onChange={handleEmailChange}\n                      name=\"smtpUseSSL\"\n                    />\n                  }\n                  label=\"Usar SSL\"\n                />\n              </div>\n              \n              <TextField\n                label=\"Usuario SMTP\"\n                name=\"smtpUsername\"\n                value={emailSettings.smtpUsername}\n                onChange={handleEmailChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <TextField\n                label=\"Contraseña SMTP\"\n                name=\"smtpPassword\"\n                type=\"password\"\n                value={emailSettings.smtpPassword}\n                onChange={handleEmailChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <TextField\n                label=\"Emails por hora\"\n                name=\"emailsPerHour\"\n                type=\"number\"\n                value={emailSettings.emailsPerHour}\n                onChange={handleEmailChange}\n                fullWidth\n                variant=\"outlined\"\n                helperText=\"Límite para evitar bloqueos por spam\"\n              />\n              \n              <TextField\n                label=\"Tamaño máximo de adjuntos (MB)\"\n                name=\"maxAttachmentSize\"\n                type=\"number\"\n                value={emailSettings.maxAttachmentSize}\n                onChange={handleEmailChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <TextField\n                label=\"Firma predeterminada\"\n                name=\"defaultSignature\"\n                value={emailSettings.defaultSignature}\n                onChange={handleEmailChange}\n                fullWidth\n                variant=\"outlined\"\n                multiline\n                rows={2}\n                className=\"col-span-1 md:col-span-2\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Panel de Seguridad */}\n      {activeTab === 2 && (\n        <Card className=\"mt-4\">\n          <CardContent className=\"space-y-4\">\n            <Typography variant=\"h6\">Configuración de Seguridad</Typography>\n            <Divider />\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n              <TextField\n                label=\"Tiempo de sesión (minutos)\"\n                name=\"sessionTimeoutMinutes\"\n                type=\"number\"\n                value={securitySettings.sessionTimeoutMinutes}\n                onChange={handleSecurityChange}\n                fullWidth\n                variant=\"outlined\"\n                helperText=\"0 = sin límite\"\n              />\n              \n              <TextField\n                label=\"Máximo de intentos de login\"\n                name=\"maxLoginAttempts\"\n                type=\"number\"\n                value={securitySettings.maxLoginAttempts}\n                onChange={handleSecurityChange}\n                fullWidth\n                variant=\"outlined\"\n                helperText=\"Bloqueo temporal después de X intentos\"\n              />\n              \n              <TextField\n                label=\"Tiempo de validez para reset de contraseña (horas)\"\n                name=\"passwordResetTimeHours\"\n                type=\"number\"\n                value={securitySettings.passwordResetTimeHours}\n                onChange={handleSecurityChange}\n                fullWidth\n                variant=\"outlined\"\n              />\n              \n              <TextField\n                label=\"Lista blanca de IPs\"\n                name=\"ipWhitelist\"\n                value={securitySettings.ipWhitelist}\n                onChange={handleSecurityChange}\n                fullWidth\n                variant=\"outlined\"\n                helperText=\"Separadas por comas, vacío = permitir todas\"\n              />\n              \n              <div className=\"col-span-1 md:col-span-2 flex flex-col space-y-2\">\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={securitySettings.requireStrongPasswords}\n                      onChange={handleSecurityChange}\n                      name=\"requireStrongPasswords\"\n                    />\n                  }\n                  label=\"Requerir contraseñas seguras\"\n                />\n                \n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={securitySettings.twoFactorAuthDefault}\n                      onChange={handleSecurityChange}\n                      name=\"twoFactorAuthDefault\"\n                    />\n                  }\n                  label=\"Autenticación de dos factores por defecto\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      <div className=\"flex justify-end mt-6 space-x-4\">\n        <Button \n          variant=\"outlined\" \n          color=\"secondary\"\n          startIcon={<RefreshIcon />}\n        >\n          Restaurar Valores\n        </Button>\n        \n        <Button \n          variant=\"contained\" \n          color=\"primary\"\n          startIcon={<SaveIcon />}\n          onClick={handleSaveSettings}\n          disabled={isSaving}\n        >\n          {isSaving ? 'Guardando...' : 'Guardar Configuración'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default SystemSettings;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\admin\\UserManagement.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'currentUser' is assigned a value but never used.","line":37,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControlLabel,\n  Switch,\n  IconButton,\n  Chip,\n  Avatar,\n  Tooltip,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel\n} from '@mui/material';\nimport { Search, Edit, Delete, Mail, Key, Shield, Download } from 'lucide-react';\nimport { useAuth } from '../../hooks/useAuth';\n\n/**\n * Panel de gestión de usuarios para administradores\n * Permite crear, editar, eliminar y gestionar usuarios\n */\nconst UserManagement = () => {\n  const { currentUser } = useAuth();\n  \n  // Estado para usuarios y filtros\n  const [users, setUsers] = useState([]);\n  const [filteredUsers, setFilteredUsers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [roleFilter, setRoleFilter] = useState('all');\n  const [statusFilter, setStatusFilter] = useState('all');\n  \n  // Estado para modal de edición\n  const [openEditDialog, setOpenEditDialog] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n  \n  // Cargar usuarios de muestra\n  useEffect(() => {\n    // En un entorno real, estos datos vendrían de una API\n    const mockUsers = [\n      {\n        id: 1,\n        name: 'Ana García',\n        email: 'ana.garcia@lovenda.com',\n        role: 'admin',\n        status: 'active',\n        createdAt: '2023-01-15',\n        lastLogin: '2023-09-28'\n      },\n      {\n        id: 2,\n        name: 'Juan Pérez',\n        email: 'juan.perez@lovenda.com',\n        role: 'user',\n        status: 'active',\n        createdAt: '2023-02-05',\n        lastLogin: '2023-09-27'\n      },\n      {\n        id: 3,\n        name: 'María López',\n        email: 'maria.lopez@lovenda.com',\n        role: 'provider',\n        status: 'active',\n        createdAt: '2023-03-12',\n        lastLogin: '2023-09-25'\n      },\n      {\n        id: 4,\n        name: 'Carlos Ruiz',\n        email: 'carlos.ruiz@lovenda.com',\n        role: 'user',\n        status: 'inactive',\n        createdAt: '2023-04-18',\n        lastLogin: '2023-08-15'\n      },\n      {\n        id: 5,\n        name: 'Laura Fernández',\n        email: 'laura.fernandez@lovenda.com',\n        role: 'provider',\n        status: 'pending',\n        createdAt: '2023-05-22',\n        lastLogin: null\n      },\n      {\n        id: 6,\n        name: 'Pedro Martínez',\n        email: 'pedro.martinez@lovenda.com',\n        role: 'user',\n        status: 'active',\n        createdAt: '2023-06-30',\n        lastLogin: '2023-09-26'\n      }\n    ];\n    \n    setUsers(mockUsers);\n    setFilteredUsers(mockUsers);\n  }, []);\n  \n  // Filtrar usuarios\n  useEffect(() => {\n    let result = users;\n    \n    // Filtrar por término de búsqueda\n    if (searchTerm) {\n      result = result.filter(user => \n        user.name.toLowerCase().includes(searchTerm.toLowerCase()) || \n        user.email.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n    \n    // Filtrar por rol\n    if (roleFilter !== 'all') {\n      result = result.filter(user => user.role === roleFilter);\n    }\n    \n    // Filtrar por estado\n    if (statusFilter !== 'all') {\n      result = result.filter(user => user.status === statusFilter);\n    }\n    \n    setFilteredUsers(result);\n  }, [searchTerm, roleFilter, statusFilter, users]);\n  \n  // Abrir modal de edición\n  const handleEditUser = (user) => {\n    setSelectedUser({ ...user });\n    setOpenEditDialog(true);\n  };\n  \n  // Cerrar modal de edición\n  const handleCloseDialog = () => {\n    setOpenEditDialog(false);\n    setSelectedUser(null);\n  };\n  \n  // Guardar cambios de usuario\n  const handleSaveUser = () => {\n    // Actualizar el usuario en la lista\n    setUsers(users.map(user => \n      user.id === selectedUser.id ? selectedUser : user\n    ));\n    handleCloseDialog();\n    \n    // En un entorno real, aquí se enviarían los datos a una API\n    console.log('Usuario actualizado:', selectedUser);\n  };\n  \n  // Eliminar usuario\n  const handleDeleteUser = (userId) => {\n    // Confirmar eliminación\n    if (window.confirm('¿Está seguro de que desea eliminar este usuario?')) {\n      setUsers(users.filter(user => user.id !== userId));\n      \n      // En un entorno real, aquí se enviaría la petición a una API\n      console.log('Usuario eliminado:', userId);\n    }\n  };\n  \n  // Exportar datos de usuarios\n  const handleExportUsers = () => {\n    // En un entorno real, aquí se generaría un CSV o Excel\n    console.log('Exportando datos de usuarios:', filteredUsers);\n    alert('Datos de usuarios exportados correctamente');\n  };\n  \n  // Renderizar chip de estado del usuario\n  const renderStatusChip = (status) => {\n    let color = 'default';\n    let label = status;\n    \n    switch (status) {\n      case 'active':\n        color = 'success';\n        label = 'Activo';\n        break;\n      case 'inactive':\n        color = 'error';\n        label = 'Inactivo';\n        break;\n      case 'pending':\n        color = 'warning';\n        label = 'Pendiente';\n        break;\n      default:\n        break;\n    }\n    \n    return <Chip label={label} color={color} size=\"small\" />;\n  };\n  \n  // Renderizar chip de rol del usuario\n  const renderRoleChip = (role) => {\n    let color = 'default';\n    let label = role;\n    let icon = null;\n    \n    switch (role) {\n      case 'admin':\n        color = 'secondary';\n        label = 'Administrador';\n        icon = <Shield size={14} />;\n        break;\n      case 'user':\n        color = 'primary';\n        label = 'Usuario';\n        break;\n      case 'provider':\n        color = 'info';\n        label = 'Proveedor';\n        break;\n      default:\n        break;\n    }\n    \n    return (\n      <Chip \n        label={label} \n        color={color} \n        size=\"small\"\n        icon={icon}\n      />\n    );\n  };\n  \n  return (\n    <Box className=\"p-6\">\n      <Box className=\"flex justify-between items-center mb-6\">\n        <Typography variant=\"h4\" component=\"h1\">\n          Gestión de Usuarios\n        </Typography>\n        <Button \n          variant=\"contained\" \n          color=\"primary\"\n          startIcon={<Download />}\n          onClick={handleExportUsers}\n        >\n          Exportar\n        </Button>\n      </Box>\n      \n      {/* Filtros */}\n      <Box className=\"flex flex-col md:flex-row gap-4 mb-6\">\n        <TextField\n          label=\"Buscar usuario\"\n          variant=\"outlined\"\n          size=\"small\"\n          fullWidth\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          InputProps={{\n            startAdornment: <Search size={20} className=\"mr-2 text-gray-500\" />,\n          }}\n          className=\"md:w-1/3\"\n        />\n        \n        <FormControl size=\"small\" className=\"md:w-1/4\">\n          <InputLabel>Filtrar por rol</InputLabel>\n          <Select\n            value={roleFilter}\n            label=\"Filtrar por rol\"\n            onChange={(e) => setRoleFilter(e.target.value)}\n          >\n            <MenuItem value=\"all\">Todos los roles</MenuItem>\n            <MenuItem value=\"admin\">Administradores</MenuItem>\n            <MenuItem value=\"user\">Usuarios</MenuItem>\n            <MenuItem value=\"provider\">Proveedores</MenuItem>\n          </Select>\n        </FormControl>\n        \n        <FormControl size=\"small\" className=\"md:w-1/4\">\n          <InputLabel>Filtrar por estado</InputLabel>\n          <Select\n            value={statusFilter}\n            label=\"Filtrar por estado\"\n            onChange={(e) => setStatusFilter(e.target.value)}\n          >\n            <MenuItem value=\"all\">Todos los estados</MenuItem>\n            <MenuItem value=\"active\">Activos</MenuItem>\n            <MenuItem value=\"inactive\">Inactivos</MenuItem>\n            <MenuItem value=\"pending\">Pendientes</MenuItem>\n          </Select>\n        </FormControl>\n        \n        <Button \n          variant=\"outlined\"\n          onClick={() => {\n            setSearchTerm('');\n            setRoleFilter('all');\n            setStatusFilter('all');\n          }}\n          className=\"md:w-1/6\"\n        >\n          Limpiar\n        </Button>\n      </Box>\n      \n      {/* Tabla de usuarios */}\n      <TableContainer component={Paper} className=\"mb-4\">\n        <Table aria-label=\"tabla de usuarios\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Usuario</TableCell>\n              <TableCell>Email</TableCell>\n              <TableCell>Rol</TableCell>\n              <TableCell>Estado</TableCell>\n              <TableCell>Registro</TableCell>\n              <TableCell>Último acceso</TableCell>\n              <TableCell align=\"right\">Acciones</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredUsers.map((user) => (\n              <TableRow key={user.id}>\n                <TableCell>\n                  <Box className=\"flex items-center\">\n                    <Avatar \n                      sx={{ width: 32, height: 32, mr: 1 }}\n                    >\n                      {user.name.charAt(0)}\n                    </Avatar>\n                    <Typography variant=\"body2\">{user.name}</Typography>\n                  </Box>\n                </TableCell>\n                <TableCell>{user.email}</TableCell>\n                <TableCell>{renderRoleChip(user.role)}</TableCell>\n                <TableCell>{renderStatusChip(user.status)}</TableCell>\n                <TableCell>{new Date(user.createdAt).toLocaleDateString()}</TableCell>\n                <TableCell>\n                  {user.lastLogin \n                    ? new Date(user.lastLogin).toLocaleDateString()\n                    : 'Nunca'}\n                </TableCell>\n                <TableCell align=\"right\">\n                  <Box className=\"flex justify-end\">\n                    <Tooltip title=\"Enviar email\">\n                      <IconButton size=\"small\" onClick={() => alert(`Enviar email a ${user.email}`)}>\n                        <Mail size={18} />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Resetear contraseña\">\n                      <IconButton size=\"small\" onClick={() => alert(`Resetear contraseña de ${user.name}`)}>\n                        <Key size={18} />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Editar\">\n                      <IconButton size=\"small\" onClick={() => handleEditUser(user)}>\n                        <Edit size={18} />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Eliminar\">\n                      <IconButton \n                        size=\"small\" \n                        color=\"error\"\n                        onClick={() => handleDeleteUser(user.id)}\n                      >\n                        <Delete size={18} />\n                      </IconButton>\n                    </Tooltip>\n                  </Box>\n                </TableCell>\n              </TableRow>\n            ))}\n            {filteredUsers.length === 0 && (\n              <TableRow>\n                <TableCell colSpan={7} align=\"center\" className=\"py-8\">\n                  <Typography variant=\"body1\" color=\"textSecondary\">\n                    No se encontraron usuarios con los filtros seleccionados\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      \n      <Typography variant=\"body2\" color=\"textSecondary\" className=\"mt-2\">\n        Mostrando {filteredUsers.length} de {users.length} usuarios\n      </Typography>\n      \n      {/* Modal de edición */}\n      <Dialog open={openEditDialog} onClose={handleCloseDialog} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Editar Usuario</DialogTitle>\n        <DialogContent>\n          {selectedUser && (\n            <Box className=\"flex flex-col gap-4 pt-2\">\n              <TextField\n                label=\"Nombre\"\n                fullWidth\n                value={selectedUser.name}\n                onChange={(e) => setSelectedUser({...selectedUser, name: e.target.value})}\n              />\n              <TextField\n                label=\"Email\"\n                fullWidth\n                value={selectedUser.email}\n                onChange={(e) => setSelectedUser({...selectedUser, email: e.target.value})}\n              />\n              <FormControl fullWidth>\n                <InputLabel>Rol</InputLabel>\n                <Select\n                  value={selectedUser.role}\n                  label=\"Rol\"\n                  onChange={(e) => setSelectedUser({...selectedUser, role: e.target.value})}\n                >\n                  <MenuItem value=\"admin\">Administrador</MenuItem>\n                  <MenuItem value=\"user\">Usuario</MenuItem>\n                  <MenuItem value=\"provider\">Proveedor</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControl fullWidth>\n                <InputLabel>Estado</InputLabel>\n                <Select\n                  value={selectedUser.status}\n                  label=\"Estado\"\n                  onChange={(e) => setSelectedUser({...selectedUser, status: e.target.value})}\n                >\n                  <MenuItem value=\"active\">Activo</MenuItem>\n                  <MenuItem value=\"inactive\">Inactivo</MenuItem>\n                  <MenuItem value=\"pending\">Pendiente</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControlLabel\n                control={\n                  <Switch \n                    checked={selectedUser.status === 'active'}\n                    onChange={(e) => setSelectedUser({\n                      ...selectedUser, \n                      status: e.target.checked ? 'active' : 'inactive'\n                    })}\n                  />\n                }\n                label=\"Usuario activo\"\n              />\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>Cancelar</Button>\n          <Button onClick={handleSaveUser} variant=\"contained\" color=\"primary\">\n            Guardar cambios\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default UserManagement;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\Dashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'WidgetTypes' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":21},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":164,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5295,5365],"text":"Haz clic en &quot;Personalizar\" para agregar widgets a tu panel de control."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5295,5365],"text":"Haz clic en &ldquo;Personalizar\" para agregar widgets a tu panel de control."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5295,5365],"text":"Haz clic en &#34;Personalizar\" para agregar widgets a tu panel de control."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5295,5365],"text":"Haz clic en &rdquo;Personalizar\" para agregar widgets a tu panel de control."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":164,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5295,5365],"text":"Haz clic en \"Personalizar&quot; para agregar widgets a tu panel de control."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5295,5365],"text":"Haz clic en \"Personalizar&ldquo; para agregar widgets a tu panel de control."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5295,5365],"text":"Haz clic en \"Personalizar&#34; para agregar widgets a tu panel de control."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5295,5365],"text":"Haz clic en \"Personalizar&rdquo; para agregar widgets a tu panel de control."},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { isMobile } from 'react-device-detect';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Widget } from './Widget';\nimport { WidgetSelector } from './WidgetSelector';\nimport { WidgetTypes } from './widgets/WidgetTypes';\nimport { useWidgets } from '../../hooks/useWidgets';\n\n// Animation variants\nconst container = {\n  hidden: { opacity: 0 },\n  show: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1\n    }\n  }\n};\n\nconst item = {\n  hidden: { opacity: 0, y: 20 },\n  show: { \n    opacity: 1, \n    y: 0,\n    transition: {\n      duration: 0.3,\n      ease: 'easeOut'\n    }\n  },\n  exit: { \n    opacity: 0, \n    y: -20,\n    transition: {\n      duration: 0.2,\n      ease: 'easeIn'\n    }\n  }\n};\n\nexport function Dashboard() {\n  const { \n    widgets, \n    addWidget, \n    removeWidget, \n    moveWidget, \n    updateWidgetConfig \n  } = useWidgets();\n  \n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Set up the appropriate drag and drop backend based on device type\n  const dndBackend = isMobile ? TouchBackend : HTML5Backend;\n  \n  return (\n    <div className=\"p-4 md:p-6 max-w-7xl mx-auto\">\n      <motion.div \n        initial={{ opacity: 0, y: -10 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4\"\n      >\n        <div>\n          <h1 className=\"text-2xl md:text-3xl font-bold text-gray-800\">Panel de Control</h1>\n          <p className=\"text-gray-500 mt-1\">\n            {isEditing \n              ? 'Arrastra y suelta para reorganizar los widgets' \n              : 'Vista general de tu boda'}\n          </p>\n        </div>\n        <button\n          onClick={() => setIsEditing(!isEditing)}\n          className={`px-4 py-2 rounded-md transition-all flex items-center gap-2 ${\n            isEditing\n              ? 'bg-blue-100 text-blue-700 hover:bg-blue-200'\n              : 'bg-white border border-gray-200 text-gray-700 hover:bg-gray-50 shadow-sm'\n          }`}\n        >\n          {isEditing ? (\n            <>\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n              Listo\n            </>\n          ) : (\n            <>\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n              </svg>\n              Personalizar\n            </>\n          )}\n        </button>\n      </motion.div>\n      \n      <DndProvider backend={dndBackend}>\n        <motion.div \n          variants={container}\n          initial=\"hidden\"\n          animate=\"show\"\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\"\n        >\n          <AnimatePresence>\n            {widgets.map((widget, index) => (\n              <motion.div\n                key={widget.id}\n                variants={item}\n                layout\n                transition={{\n                  type: \"spring\",\n                  damping: 25,\n                  stiffness: 120\n                }}\n              >\n                <Widget\n                  index={index}\n                  widget={widget}\n                  isEditing={isEditing}\n                  onRemove={removeWidget}\n                  onMove={moveWidget}\n                  onConfigUpdate={updateWidgetConfig}\n                />\n              </motion.div>\n            ))}\n            \n            {isEditing && (\n              <motion.div\n                variants={item}\n                initial=\"hidden\"\n                animate=\"show\"\n                exit=\"exit\"\n                layout\n              >\n                <WidgetSelector onSelect={addWidget} />\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </DndProvider>\n      \n      {widgets.length === 0 && !isEditing && (\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mt-16 text-center text-gray-500\"\n        >\n          <svg \n            className=\"mx-auto h-12 w-12 text-gray-400\" \n            fill=\"none\" \n            viewBox=\"0 0 24 24\" \n            stroke=\"currentColor\"\n          >\n            <path \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\" \n              strokeWidth={1.5} \n              d=\"M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z\" \n            />\n          </svg>\n          <h3 className=\"mt-2 text-lg font-medium text-gray-700\">No hay widgets en tu panel</h3>\n          <p className=\"mt-1\">Haz clic en \"Personalizar\" para agregar widgets a tu panel de control.</p>\n          <button\n            onClick={() => setIsEditing(true)}\n            className=\"mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            <svg className=\"-ml-1 mr-2 h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\" clipRule=\"evenodd\" />\n            </svg>\n            Agregar widgets\n          </button>\n        </motion.div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\Widget.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'cursor' is assigned a value but never used.","line":99,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { WidgetContent } from './WidgetContent';\nimport { WidgetConfig } from './WidgetConfig';\n\n// Animation variants\nconst widgetVariants = {\n  hidden: { opacity: 0, scale: 0.95 },\n  visible: { \n    opacity: 1, \n    scale: 1,\n    transition: { \n      duration: 0.2,\n      ease: 'easeOut'\n    }\n  },\n  exit: { \n    opacity: 0, \n    scale: 0.95,\n    transition: { \n      duration: 0.15,\n      ease: 'easeIn'\n    }\n  },\n  hover: {\n    y: -2,\n    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'\n  },\n  drag: {\n    scale: 1.02,\n    boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'\n  }\n};\n\nexport const Widget = ({\n  widget,\n  index,\n  isEditing,\n  onRemove,\n  onMove,\n  onConfigUpdate,\n}) => {\n  const ref = useRef(null);\n  const [showConfig, setShowConfig] = useState(false);\n  \n  const [{ isDragging }, drag] = useDrag({\n    type: 'WIDGET',\n    item: { id: widget.id, index },\n    canDrag: isEditing,\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, drop] = useDrop({\n    accept: 'WIDGET',\n    hover(item, monitor) {\n      if (!ref.current) return;\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      \n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) return;\n      \n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current.getBoundingClientRect();\n      \n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      \n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      \n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      \n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) return;\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) return;\n      \n      // Time to actually perform the action\n      onMove(dragIndex, hoverIndex);\n      \n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  \n  // Initialize drag and drop refs\n  drag(drop(ref));\n  \n  const opacity = isDragging ? 0.4 : 1;\n  const cursor = isEditing ? 'cursor-move' : 'cursor-default';\n  \n  return (\n    <motion.div \n      ref={ref}\n      className=\"relative group\"\n      style={{ opacity }}\n      variants={widgetVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      exit=\"exit\"\n      whileHover={isEditing ? \"hover\" : undefined}\n      whileTap={isEditing ? { scale: 0.98 } : undefined}\n      drag={isEditing}\n      dragConstraints={{ top: 0, left: 0, right: 0, bottom: 0 }}\n      dragElastic={0.1}\n      dragMomentum={false}\n      layout\n    >\n      <div \n        className={`bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden transition-all duration-200 ${\n          isEditing ? 'ring-2 ring-blue-400 ring-opacity-50 hover:ring-blue-400' : 'hover:shadow-md'\n        }`}\n      >\n        <div className=\"p-4 border-b border-gray-100 bg-gradient-to-r from-white to-gray-50\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-base font-semibold text-gray-800 flex items-center gap-2\">\n              {widget.type === 'calendar' && (\n                <span className=\"text-blue-500\">📅</span>\n              )}\n              {widget.type === 'tasks' && (\n                <span className=\"text-green-500\">✅</span>\n              )}\n              {widget.type === 'budget' && (\n                <span className=\"text-yellow-500\">💰</span>\n              )}\n              {widget.type === 'guest_list' && (\n                <span className=\"text-purple-500\">👥</span>\n              )}\n              {widget.type === 'timeline' && (\n                <span className=\"text-red-500\">⏱️</span>\n              )}\n              {widget.config.title}\n            </h3>\n            {isEditing && (\n              <div className=\"flex items-center gap-1\">\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowConfig(!showConfig);\n                  }}\n                  className=\"p-1.5 rounded-full text-gray-400 hover:text-gray-600 hover:bg-gray-100 transition-colors\"\n                  aria-label=\"Configurar widget\"\n                >\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                  </svg>\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onRemove(widget.id);\n                  }}\n                  className=\"p-1.5 rounded-full text-red-400 hover:text-red-600 hover:bg-red-50 transition-colors\"\n                  aria-label=\"Eliminar widget\"\n                >\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                  </svg>\n                </button>\n                <div className=\"w-6 h-6 flex items-center justify-center text-gray-300 cursor-grab active:cursor-grabbing\">\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 8h16M4 16h16\" />\n                  </svg>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        <AnimatePresence>\n          {showConfig && (\n            <motion.div \n              initial={{ opacity: 0, height: 0, overflow: 'hidden' }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"border-b border-gray-100\"\n            >\n              <div className=\"p-4 bg-gray-50\">\n                <WidgetConfig \n                  config={widget.config} \n                  onUpdate={(newConfig) => onConfigUpdate(widget.id, newConfig)}\n                />\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n        \n        <div className=\"p-4\">\n          <WidgetContent widget={widget} />\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\WidgetConfig.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\WidgetContent.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\WidgetSelector.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\widgets\\BudgetWidget.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\widgets\\CalendarWidget.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":3,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport const CalendarWidget = ({ config }) => {\n  const today = new Date();\n  const month = today.toLocaleString('es-ES', { month: 'long' });\n  const year = today.getFullYear();\n  const daysInMonth = new Date(year, today.getMonth() + 1, 0).getDate();\n  const firstDayOfMonth = new Date(year, today.getMonth(), 1).getDay();\n  \n  // Create array of days in month\n  const days = [];\n  for (let i = 1; i <= daysInMonth; i++) {\n    days.push(i);\n  }\n  \n  // Add empty cells for days before the first day of the month\n  const emptyCells = [];\n  for (let i = 0; i < firstDayOfMonth; i++) {\n    emptyCells.push(<div key={`empty-${i}`} className=\"h-8\"></div>);\n  }\n  \n  return (\n    <div className=\"h-full\">\n      <div className=\"text-center font-semibold mb-2\">\n        {month.charAt(0).toUpperCase() + month.slice(1)} {year}\n      </div>\n      <div className=\"grid grid-cols-7 gap-1 text-xs text-center\">\n        {['L', 'M', 'X', 'J', 'V', 'S', 'D'].map(day => (\n          <div key={day} className=\"font-medium text-gray-500\">{day}</div>\n        ))}\n        {emptyCells}\n        {days.map(day => (\n          <div \n            key={day} \n            className={`h-8 flex items-center justify-center rounded-full ${\n              day === today.getDate() \n                ? 'bg-blue-500 text-white' \n                : 'hover:bg-gray-100'\n            }`}\n          >\n            {day}\n          </div>\n        ))}\n      </div>\n      <div className=\"mt-4 text-sm\">\n        <div className=\"flex items-center mb-1\">\n          <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-2\"></div>\n          <span>Evento de boda</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n          <span>Reunión con proveedor</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\widgets\\GuestListWidget.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\widgets\\TasksWidget.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\widgets\\TimelineWidget.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":46,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nconst TIMELINE_EVENTS = [\n  {\n    id: 1,\n    title: 'Ceremonia',\n    time: '17:00 - 18:00',\n    location: 'Iglesia de Santa María',\n    completed: true,\n    current: false,\n  },\n  {\n    id: 2,\n    title: 'Cóctel de bienvenida',\n    time: '18:30 - 20:00',\n    location: 'Jardines del Palacio',\n    completed: true,\n    current: false,\n  },\n  {\n    id: 3,\n    title: 'Cena de gala',\n    time: '20:30 - 23:00',\n    location: 'Salón de eventos',\n    completed: false,\n    current: true,\n  },\n  {\n    id: 4,\n    title: 'Baile y fiesta',\n    time: '23:00 - 02:00',\n    location: 'Sala de baile',\n    completed: false,\n    current: false,\n  },\n  {\n    id: 5,\n    title: 'Despedida',\n    time: '02:30',\n    location: '',\n    completed: false,\n    current: false,\n  },\n];\n\nexport const TimelineWidget = ({ config }) => {\n  return (\n    <div className=\"h-full\">\n      <div className=\"relative\n        after:absolute\n        after:top-0\n        after:bottom-0\n        after:left-4\n        after:w-0.5\n        after:bg-gray-200\n        after:content-['']\n      \">\n        {TIMELINE_EVENTS.map((event, index) => (\n          <div key={event.id} className=\"relative pl-8 pb-6 group\">\n            <div className={`absolute left-0 z-10 w-8 h-8 rounded-full flex items-center justify-center ${\n              event.completed \n                ? 'bg-green-500 text-white' \n                : event.current\n                ? 'bg-blue-500 text-white ring-4 ring-blue-200'\n                : 'bg-white border-2 border-gray-300 text-gray-400'\n            }`}>\n              {event.completed ? (\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                </svg>\n              ) : (\n                <span className=\"font-medium\">{index + 1}</span>\n              )}\n            </div>\n            <div className={`p-3 rounded-lg ${\n              event.current \n                ? 'bg-blue-50 border-l-4 border-blue-500' \n                : 'bg-white border border-gray-200'\n            }`}>\n              <div className=\"flex justify-between items-start\">\n                <h4 className={`font-medium ${\n                  event.completed ? 'text-gray-500' : 'text-gray-900'\n                }`}>\n                  {event.title}\n                </h4>\n                <span className={`text-sm ${\n                  event.completed ? 'text-gray-400' : 'text-blue-600'\n                }`}>\n                  {event.time}\n                </span>\n              </div>\n              {event.location && (\n                <div className=\"mt-1 flex items-center text-sm text-gray-500\">\n                  <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                  </svg>\n                  {event.location}\n                </div>\n              )}\n              {event.current && (\n                <div className=\"mt-2 text-xs text-blue-600 font-medium\">\n                  Evento actual\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n      <div className=\"mt-4 text-right\">\n        <button className=\"text-sm text-blue-600 hover:text-blue-800\">\n          Ver cronograma completo →\n        </button>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\dashboard\\widgets\\WidgetTypes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\debug\\ErrorBoundary.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":14,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { performanceMonitor } from '../../services/PerformanceMonitor';\n\n/**\n * ErrorBoundary global para capturar errores de React y registrar métricas.\n * Muestra un mensaje amigable y registra el error mediante el monitor de rendimiento.\n */\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, errorInfo: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ errorInfo: info });\n    try {\n      performanceMonitor.logError('react_error', error, { componentStack: info.componentStack });\n    } catch (e) {\n      // En caso de fallo en el monitor, al menos mostramos por consola\n      console.error('Error report failed:', e);\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"p-8 text-center\">\n          <h1 className=\"text-2xl font-semibold mb-4\">Algo ha ido mal</h1>\n          <p className=\"text-gray-600 mb-4\">Se ha producido un error inesperado. Nuestro equipo ha sido notificado.</p>\n          {process.env.NODE_ENV !== 'production' && this.state.errorInfo && (\n            <pre className=\"text-left whitespace-pre-wrap bg-gray-100 p-4 rounded shadow-inner overflow-x-auto max-h-64\">\n              {this.state.errorInfo.componentStack}\n            </pre>\n          )}\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\AIEmailHistoryPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":2,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":70},{"ruleId":"no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":4,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":55}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Box, Typography, Tabs, Tab, CircularProgress, Paper, Divider, \n         Table, TableBody, TableCell, TableContainer, TableHead, TableRow, \n         Chip, Card, CardContent, Grid, LinearProgress } from '@mui/material';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, \n         LinearScale, PointElement, LineElement, BarElement } from 'chart.js';\nimport { Pie, Bar } from 'react-chartjs-2';\nimport AIEmailTrackingService from '../../services/AIEmailTrackingService';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\n// Registrar componentes de Chart.js\nChartJS.register(\n  ArcElement, \n  Tooltip, \n  Legend, \n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement\n);\n\n/**\n * Componente que muestra estadísticas y el historial de correos originados desde búsquedas AI\n */\nconst AIEmailHistoryPanel = () => {\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState(0);\n  const [activities, setActivities] = useState([]);\n  const [metrics, setMetrics] = useState(null);\n  const [comparisonData, setComparisonData] = useState(null);\n  \n  const trackingService = new AIEmailTrackingService();\n  \n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      \n      // Cargar actividades\n      const activitiesData = trackingService.getActivities();\n      setActivities(activitiesData);\n      \n      // Cargar métricas\n      const metricsData = trackingService.getMetrics();\n      setMetrics(metricsData);\n      \n      // Cargar datos de comparación\n      const comparisonData = trackingService.getComparisonData();\n      setComparisonData(comparisonData);\n      \n      setLoading(false);\n    };\n    \n    loadData();\n  }, []);\n  \n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n  \n  // Datos para el gráfico de tasa de respuesta\n  const responseRateChartData = {\n    labels: ['Correos AI', 'Correos Tradicionales'],\n    datasets: [\n      {\n        label: 'Tasa de Respuesta (%)',\n        data: comparisonData ? [\n          parseFloat(comparisonData.ai.responseRate),\n          parseFloat(comparisonData.nonAi.responseRate)\n        ] : [0, 0],\n        backgroundColor: [\n          'rgba(54, 162, 235, 0.6)',\n          'rgba(255, 99, 132, 0.6)',\n        ],\n        borderColor: [\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 99, 132, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n  \n  // Datos para el gráfico de tasa de respuesta por categoría\n  const categoryChartData = {\n    labels: comparisonData?.categoryBreakdown?.map(cat => cat.category) || [],\n    datasets: [\n      {\n        label: 'Tasa de Respuesta por Categoría (%)',\n        data: comparisonData?.categoryBreakdown?.map(cat => parseFloat(cat.responseRate)) || [],\n        backgroundColor: [\n          'rgba(75, 192, 192, 0.6)',\n          'rgba(153, 102, 255, 0.6)',\n          'rgba(255, 159, 64, 0.6)',\n          'rgba(255, 99, 132, 0.6)',\n          'rgba(54, 162, 235, 0.6)',\n        ],\n        borderColor: [\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)',\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n  \n  // Opciones para los gráficos de barras\n  const barOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        max: 100,\n      },\n    },\n  };\n\n  return (\n    <Box sx={{ width: '100%', p: 2 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Historial de Correos desde Búsqueda AI\n      </Typography>\n      \n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n        <Tabs value={activeTab} onChange={handleTabChange}>\n          <Tab label=\"Resumen\" />\n          <Tab label=\"Comparativa AI vs Tradicional\" />\n          <Tab label=\"Historial de Actividad\" />\n        </Tabs>\n      </Box>\n      \n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n          <CircularProgress />\n        </Box>\n      ) : (\n        <>\n          {/* Tab 1: Resumen */}\n          {activeTab === 0 && (\n            <Box>\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={4}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Correos Enviados\n                      </Typography>\n                      <Typography variant=\"h4\">\n                        {metrics?.totalEmails || 0}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Tasa de Respuesta\n                      </Typography>\n                      <Typography variant=\"h4\">\n                        {metrics ? `${metrics.responseRate.toFixed(2)}%` : '0%'}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Tiempo Promedio de Respuesta\n                      </Typography>\n                      <Typography variant=\"h4\">\n                        {metrics ? `${metrics.averageResponseTime.toFixed(1)}h` : '0h'}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Distribución de Respuestas\n                      </Typography>\n                      <Box height={250}>\n                        <Pie \n                          data={{\n                            labels: ['Respondidos', 'Sin Respuesta'],\n                            datasets: [\n                              {\n                                data: [\n                                  metrics?.totalResponses || 0,\n                                  (metrics?.totalEmails || 0) - (metrics?.totalResponses || 0)\n                                ],\n                                backgroundColor: [\n                                  'rgba(75, 192, 192, 0.6)',\n                                  'rgba(255, 99, 132, 0.6)',\n                                ],\n                                borderColor: [\n                                  'rgba(75, 192, 192, 1)',\n                                  'rgba(255, 99, 132, 1)',\n                                ],\n                                borderWidth: 1,\n                              },\n                            ],\n                          }}\n                        />\n                      </Box>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Tasas de Respuesta por Categoría\n                      </Typography>\n                      <Box height={250}>\n                        <Bar \n                          data={categoryChartData} \n                          options={barOptions} \n                        />\n                      </Box>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n          \n          {/* Tab 2: Comparativa */}\n          {activeTab === 1 && comparisonData && (\n            <Box>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Comparación de Efectividad: Correos AI vs Tradicionales\n                      </Typography>\n                      <TableContainer>\n                        <Table>\n                          <TableHead>\n                            <TableRow>\n                              <TableCell>Métrica</TableCell>\n                              <TableCell align=\"center\">Correos AI</TableCell>\n                              <TableCell align=\"center\">Correos Tradicionales</TableCell>\n                              <TableCell align=\"center\">Diferencia</TableCell>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            <TableRow>\n                              <TableCell>Total Enviados</TableCell>\n                              <TableCell align=\"center\">{comparisonData.ai.total}</TableCell>\n                              <TableCell align=\"center\">{comparisonData.nonAi.total}</TableCell>\n                              <TableCell align=\"center\">-</TableCell>\n                            </TableRow>\n                            <TableRow>\n                              <TableCell>Total Respondidos</TableCell>\n                              <TableCell align=\"center\">{comparisonData.ai.responded}</TableCell>\n                              <TableCell align=\"center\">{comparisonData.nonAi.responded}</TableCell>\n                              <TableCell align=\"center\">-</TableCell>\n                            </TableRow>\n                            <TableRow>\n                              <TableCell>Tasa de Respuesta</TableCell>\n                              <TableCell align=\"center\">{comparisonData.ai.responseRate}%</TableCell>\n                              <TableCell align=\"center\">{comparisonData.nonAi.responseRate}%</TableCell>\n                              <TableCell \n                                align=\"center\"\n                                sx={{\n                                  color: parseFloat(comparisonData.difference.responseRate) > 0 ? 'success.main' : 'error.main',\n                                  fontWeight: 'bold'\n                                }}\n                              >\n                                {comparisonData.difference.responseRate > 0 ? '+' : ''}{comparisonData.difference.responseRate}%\n                              </TableCell>\n                            </TableRow>\n                            <TableRow>\n                              <TableCell>Tiempo Promedio de Respuesta</TableCell>\n                              <TableCell align=\"center\">{comparisonData.ai.avgResponseTime}h</TableCell>\n                              <TableCell align=\"center\">{comparisonData.nonAi.avgResponseTime}h</TableCell>\n                              <TableCell \n                                align=\"center\"\n                                sx={{\n                                  color: parseFloat(comparisonData.difference.avgResponseTime) > 0 ? 'success.main' : 'error.main',\n                                  fontWeight: 'bold'\n                                }}\n                              >\n                                {comparisonData.difference.avgResponseTime > 0 ? '+' : ''}{comparisonData.difference.avgResponseTime}h\n                              </TableCell>\n                            </TableRow>\n                          </TableBody>\n                        </Table>\n                      </TableContainer>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Comparación de Tasas de Respuesta\n                      </Typography>\n                      <Box height={250}>\n                        <Bar \n                          data={responseRateChartData}\n                          options={barOptions}\n                        />\n                      </Box>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Eficacia por Categoría de Proveedor\n                      </Typography>\n                      <TableContainer>\n                        <Table size=\"small\">\n                          <TableHead>\n                            <TableRow>\n                              <TableCell>Categoría</TableCell>\n                              <TableCell align=\"center\">Total</TableCell>\n                              <TableCell align=\"center\">Tasa Respuesta</TableCell>\n                              <TableCell align=\"center\">Tiempo Promedio</TableCell>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {comparisonData.categoryBreakdown.map((cat, index) => (\n                              <TableRow key={index}>\n                                <TableCell>{cat.category}</TableCell>\n                                <TableCell align=\"center\">{cat.total}</TableCell>\n                                <TableCell align=\"center\">{cat.responseRate}%</TableCell>\n                                <TableCell align=\"center\">{cat.avgResponseTime}h</TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n          \n          {/* Tab 3: Historial de Actividad */}\n          {activeTab === 2 && (\n            <Box>\n              <TableContainer component={Paper}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Fecha</TableCell>\n                      <TableCell>Proveedor</TableCell>\n                      <TableCell>Categoría</TableCell>\n                      <TableCell>Consulta Original</TableCell>\n                      <TableCell>Estado</TableCell>\n                      <TableCell>Tiempo de Respuesta</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {activities.length > 0 ? (\n                      activities.map((activity) => (\n                        <TableRow key={activity.id}>\n                          <TableCell>\n                            {format(new Date(activity.timestamp), 'dd MMM yyyy HH:mm', { locale: es })}\n                          </TableCell>\n                          <TableCell>{activity.providerName || 'N/A'}</TableCell>\n                          <TableCell>{activity.templateCategory || 'general'}</TableCell>\n                          <TableCell>\n                            {activity.searchQuery?.length > 30\n                              ? `${activity.searchQuery.substring(0, 30)}...`\n                              : activity.searchQuery}\n                          </TableCell>\n                          <TableCell>\n                            <Chip \n                              label={activity.responseReceived ? 'Respondido' : 'Pendiente'} \n                              color={activity.responseReceived ? 'success' : 'default'}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                          <TableCell>\n                            {activity.responseTime \n                              ? `${activity.responseTime.toFixed(1)}h` \n                              : 'Pendiente'}\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    ) : (\n                      <TableRow>\n                        <TableCell colSpan={6} align=\"center\">\n                          <Typography variant=\"body1\">\n                            No hay actividades registradas\n                          </Typography>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n          )}\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default AIEmailHistoryPanel;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\CalendarIntegration.jsx","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":56,"column":36,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":56,"endColumn":37,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1907,1908],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1907,1907],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":56,"column":38,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":56,"endColumn":39,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1909,1910],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1909,1909],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":56,"column":51,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":56,"endColumn":52,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1922,1923],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1922,1922],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":56,"column":53,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":56,"endColumn":54,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1924,1925],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1924,1924],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Calendar, Clock, MapPin, User, X, Check, AlertCircle } from 'lucide-react';\nimport Button from '../Button';\nimport Card from '../Card';\n\n/**\n * Componente para extraer información de eventos y fechas desde emails y crear eventos en el calendario\n * \n * @param {Object} props - Propiedades del componente\n * @param {Object} props.email - Datos del email del cual extraer información\n * @param {Function} props.onClose - Función para cerrar el modal\n * @param {Function} props.onSave - Función llamada al guardar el evento\n * @returns {React.ReactElement} Formulario de integración con calendario\n */\nconst CalendarIntegration = ({ email, onClose, onSave }) => {\n  const [eventData, setEventData] = useState({\n    title: '',\n    date: '',\n    time: '12:00',\n    location: '',\n    description: '',\n    attendees: [],\n    providerRelated: false,\n    providerId: null,\n  });\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [extractedInfo, setExtractedInfo] = useState([]);\n  \n  useEffect(() => {\n    if (!email) {\n      setError('No hay email para analizar');\n      setLoading(false);\n      return;\n    }\n    \n    // Extraer posibles fechas, ubicaciones y personas del email\n    extractEventInfo(email);\n  }, [email]);\n  \n  /**\n   * Extrae información relevante para eventos del contenido del email\n   */\n  const extractEventInfo = (email) => {\n    setLoading(true);\n    \n    try {\n      // En un entorno real, aquí podríamos usar algún servicio de NLP\n      // Por ahora, usamos una implementación sencilla basada en expresiones regulares\n      \n      // Título posible basado en asunto del email\n      const possibleTitle = email.subject ? email.subject.replace(/^Re: |^Fwd: /gi, '') : '';\n      \n      // Extraer posibles fechas (formato DD/MM/YYYY o similar)\n      const dateRegex = /(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})|(\\d{1,2}) de ([a-zá-úñ]+)( de (\\d{4}))?/gi;\n      const dates = [];\n      let dateMatch;\n      const bodyText = email.body || '';\n      \n      while ((dateMatch = dateRegex.exec(bodyText)) !== null) {\n        // Convertir a formato de fecha ISO\n        let formattedDate = '';\n        if (dateMatch[1]) { // Formato numérico\n          formattedDate = `${dateMatch[3]}-${dateMatch[2].padStart(2, '0')}-${dateMatch[1].padStart(2, '0')}`;\n        } else { // Formato con mes en texto\n          const monthNames = {\n            'enero': '01', 'febrero': '02', 'marzo': '03', 'abril': '04',\n            'mayo': '05', 'junio': '06', 'julio': '07', 'agosto': '08',\n            'septiembre': '09', 'octubre': '10', 'noviembre': '11', 'diciembre': '12'\n          };\n          const month = monthNames[dateMatch[5].toLowerCase()];\n          const year = dateMatch[7] || new Date().getFullYear().toString();\n          formattedDate = `${year}-${month}-${dateMatch[4].padStart(2, '0')}`;\n        }\n        \n        dates.push({\n          type: 'date',\n          value: formattedDate,\n          original: dateMatch[0]\n        });\n      }\n      \n      // Extraer posibles horas (formato HH:MM o similar)\n      const timeRegex = /(\\d{1,2}):(\\d{2})( ?(?:AM|PM|a\\.m\\.|p\\.m\\.))?/gi;\n      const times = [];\n      let timeMatch;\n      \n      while ((timeMatch = timeRegex.exec(bodyText)) !== null) {\n        let hours = parseInt(timeMatch[1]);\n        const minutes = timeMatch[2];\n        const period = timeMatch[3]?.trim().toLowerCase();\n        \n        // Convertir a formato 24 horas si es necesario\n        if (period && (period === 'pm' || period === 'p.m.')) {\n          if (hours < 12) hours += 12;\n        } else if (period && (period === 'am' || period === 'a.m.') && hours === 12) {\n          hours = 0;\n        }\n        \n        const formattedTime = `${hours.toString().padStart(2, '0')}:${minutes}`;\n        \n        times.push({\n          type: 'time',\n          value: formattedTime,\n          original: timeMatch[0]\n        });\n      }\n      \n      // Extraer posibles ubicaciones\n      const locationKeywords = ['en', 'ubicado en', 'ubicada en', 'dirección', 'lugar', 'local', 'ubicación'];\n      const locationRegex = new RegExp(`(${locationKeywords.join('|')})\\\\s+([^.,;:\\\\n]{5,50})`, 'gi');\n      const locations = [];\n      let locationMatch;\n      \n      while ((locationMatch = locationRegex.exec(bodyText)) !== null) {\n        locations.push({\n          type: 'location',\n          value: locationMatch[2].trim(),\n          original: locationMatch[0]\n        });\n      }\n      \n      // Extraer posibles personas/contactos\n      // Esto es simplificado, en un entorno real usaríamos NLP más avanzado\n      const attendeeRegex = /([A-Za-zÁ-ÿÑñ]{2,} [A-Za-zÁ-ÿÑñ]{2,})/g;\n      const attendees = new Set();\n      let attendeeMatch;\n      \n      while ((attendeeMatch = attendeeRegex.exec(bodyText)) !== null) {\n        const name = attendeeMatch[1].trim();\n        // Filtrar nombres muy cortos o que parecen no ser nombres\n        if (name.length > 4 && !['para', 'este', 'esta', 'esos', 'esas', 'todos', 'todas'].includes(name.toLowerCase())) {\n          attendees.add(name);\n        }\n      }\n      \n      // Verificar si el email está relacionado con un proveedor\n      const isProviderRelated = email.to?.includes('proveedor') || \n                                email.from?.includes('proveedor') ||\n                                bodyText.toLowerCase().includes('proveedor') ||\n                                bodyText.toLowerCase().includes('servicio') ||\n                                bodyText.toLowerCase().includes('contratación');\n      \n      // Compilar toda la información extraída\n      const allExtracted = [\n        ...dates,\n        ...times,\n        ...locations,\n        ...[...attendees].map(name => ({ type: 'attendee', value: name, original: name }))\n      ];\n      \n      setExtractedInfo(allExtracted);\n      \n      // Preparar datos iniciales para el formulario con la información más probable\n      setEventData({\n        title: possibleTitle,\n        date: dates.length > 0 ? dates[0].value : '',\n        time: times.length > 0 ? times[0].value : '12:00',\n        location: locations.length > 0 ? locations[0].value : '',\n        description: `Evento creado a partir del email: \"${email.subject || '(Sin asunto)'}\"`,\n        attendees: [...attendees],\n        providerRelated: isProviderRelated,\n        providerId: email.providerId || null\n      });\n      \n    } catch (err) {\n      console.error('Error al analizar email:', err);\n      setError('No se pudo analizar correctamente el contenido del email');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setEventData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  const handleAttendeeChange = (index, value) => {\n    const newAttendees = [...eventData.attendees];\n    newAttendees[index] = value;\n    \n    setEventData(prev => ({\n      ...prev,\n      attendees: newAttendees\n    }));\n  };\n  \n  const removeAttendee = (index) => {\n    setEventData(prev => ({\n      ...prev,\n      attendees: prev.attendees.filter((_, i) => i !== index)\n    }));\n  };\n  \n  const addAttendee = () => {\n    setEventData(prev => ({\n      ...prev,\n      attendees: [...prev.attendees, '']\n    }));\n  };\n  \n  const handleSubmit = () => {\n    // Validación básica\n    if (!eventData.title) {\n      setError('El título del evento es obligatorio');\n      return;\n    }\n    \n    if (!eventData.date) {\n      setError('Debes seleccionar una fecha para el evento');\n      return;\n    }\n    \n    // Formatear datos para guardar\n    const formattedEvent = {\n      ...eventData,\n      // Combinar fecha y hora en un solo campo ISO\n      dateTime: `${eventData.date}T${eventData.time}:00`,\n      // Filtrar asistentes vacíos\n      attendees: eventData.attendees.filter(a => a.trim())\n    };\n    \n    onSave(formattedEvent);\n    onClose();\n  };\n  \n  const applyExtracted = (item) => {\n    switch (item.type) {\n      case 'date':\n        setEventData(prev => ({ ...prev, date: item.value }));\n        break;\n      case 'time':\n        setEventData(prev => ({ ...prev, time: item.value }));\n        break;\n      case 'location':\n        setEventData(prev => ({ ...prev, location: item.value }));\n        break;\n      case 'attendee':\n        if (!eventData.attendees.includes(item.value)) {\n          setEventData(prev => ({ \n            ...prev, \n            attendees: [...prev.attendees, item.value] \n          }));\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-3xl max-h-[90vh] flex flex-col\">\n        <div className=\"flex items-center justify-between border-b border-gray-200 p-4\">\n          <h2 className=\"text-xl font-bold flex items-center\">\n            <Calendar size={24} className=\"mr-2 text-blue-500\" />\n            Añadir evento al calendario\n          </h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n          >\n            <X size={20} />\n          </Button>\n        </div>\n        \n        <div className=\"p-4 overflow-y-auto flex-grow\">\n          {error && (\n            <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md flex items-center text-red-700\">\n              <AlertCircle size={18} className=\"flex-shrink-0 mr-2\" />\n              <span>{error}</span>\n            </div>\n          )}\n          \n          {loading ? (\n            <div className=\"text-center py-8\">Analizando contenido del email...</div>\n          ) : (\n            <>\n              {extractedInfo.length > 0 && (\n                <div className=\"mb-4\">\n                  <h3 className=\"font-medium mb-2\">Información detectada en el email:</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {extractedInfo.map((item, index) => (\n                      <span\n                        key={index}\n                        className=\"inline-flex items-center px-2.5 py-1 rounded-md text-sm bg-blue-50 border border-blue-200 cursor-pointer hover:bg-blue-100\"\n                        onClick={() => applyExtracted(item)}\n                        title={`Usar ${item.type === 'date' ? 'esta fecha' : \n                                 item.type === 'time' ? 'esta hora' : \n                                 item.type === 'location' ? 'esta ubicación' : \n                                 'este asistente'}`}\n                      >\n                        {item.type === 'date' && <Calendar size={14} className=\"mr-1 text-blue-600\" />}\n                        {item.type === 'time' && <Clock size={14} className=\"mr-1 text-blue-600\" />}\n                        {item.type === 'location' && <MapPin size={14} className=\"mr-1 text-blue-600\" />}\n                        {item.type === 'attendee' && <User size={14} className=\"mr-1 text-blue-600\" />}\n                        {item.original}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Título del evento:</label>\n                  <input\n                    type=\"text\"\n                    name=\"title\"\n                    value={eventData.title}\n                    onChange={handleChange}\n                    className=\"w-full border border-gray-300 rounded-md p-2\"\n                    placeholder=\"Título del evento\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Fecha:</label>\n                    <input\n                      type=\"date\"\n                      name=\"date\"\n                      value={eventData.date}\n                      onChange={handleChange}\n                      className=\"w-full border border-gray-300 rounded-md p-2\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hora:</label>\n                    <input\n                      type=\"time\"\n                      name=\"time\"\n                      value={eventData.time}\n                      onChange={handleChange}\n                      className=\"w-full border border-gray-300 rounded-md p-2\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Ubicación:</label>\n                  <input\n                    type=\"text\"\n                    name=\"location\"\n                    value={eventData.location}\n                    onChange={handleChange}\n                    className=\"w-full border border-gray-300 rounded-md p-2\"\n                    placeholder=\"Ubicación del evento\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Descripción:</label>\n                  <textarea\n                    name=\"description\"\n                    value={eventData.description}\n                    onChange={handleChange}\n                    className=\"w-full border border-gray-300 rounded-md p-2\"\n                    rows=\"3\"\n                    placeholder=\"Descripción del evento\"\n                  ></textarea>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Asistentes:</label>\n                  \n                  {eventData.attendees.map((attendee, index) => (\n                    <div key={index} className=\"flex mb-2\">\n                      <input\n                        type=\"text\"\n                        value={attendee}\n                        onChange={(e) => handleAttendeeChange(index, e.target.value)}\n                        className=\"flex-grow border border-gray-300 rounded-md p-2\"\n                        placeholder=\"Nombre del asistente\"\n                      />\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeAttendee(index)}\n                        className=\"ml-2\"\n                      >\n                        <X size={18} />\n                      </Button>\n                    </div>\n                  ))}\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addAttendee}\n                    className=\"mt-1\"\n                  >\n                    Añadir asistente\n                  </Button>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"providerRelated\"\n                    name=\"providerRelated\"\n                    checked={eventData.providerRelated}\n                    onChange={(e) => setEventData(prev => ({\n                      ...prev,\n                      providerRelated: e.target.checked\n                    }))}\n                    className=\"mr-2\"\n                  />\n                  <label htmlFor=\"providerRelated\" className=\"text-sm text-gray-700\">\n                    Este evento está relacionado con un proveedor\n                  </label>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n        \n        <div className=\"border-t border-gray-200 p-4 flex justify-end\">\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={loading}\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={handleSubmit}\n              disabled={loading}\n              className=\"flex items-center\"\n            >\n              <Check size={18} className=\"mr-1\" />\n              Guardar evento\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default CalendarIntegration;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\ComposeEmail.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'profile' is assigned a value but never used.","line":18,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { AlertCircle, Paperclip } from 'lucide-react';\nimport Button from '../Button';\nimport Card from '../Card';\nimport * as EmailService from '../../services/EmailService';\nimport useAuth from '../../hooks/useAuth';\n\n/**\n * Página de composición de correo electrónico pensada para las rutas\n * /compose y /compose/:action/:id usadas en los tests E2E.\n * Incluye los placeholders exactos ('Para:' y 'Asunto:') y el elemento\n * con data-testid=\"email-body-editor\" que esperan los tests.\n */\nconst ComposeEmail = () => {\n  const navigate = useNavigate();\n  const { action, id } = useParams();\n  const { profile } = useAuth();\n\n  // Estado del formulario\n  const [to, setTo] = useState('');\n  const [subject, setSubject] = useState('');\n  const [body, setBody] = useState('');\n  const [attachments, setAttachments] = useState([]);\n  const [sending, setSending] = useState(false);\n  const [error, setError] = useState('');\n\n  // Cargar borrador u otra acción si fuese necesario (placeholder para el futuro)\n  React.useEffect(() => {\n    /* Aquí podríamos cargar un borrador si action === 'edit' y id existe. */\n  }, [action, id]);\n\n  const handleFileUpload = (e) => {\n    const files = Array.from(e.target.files);\n    if (files.length === 0) return;\n\n    // Validar tamaño máximo 10MB cada archivo\n    const invalid = files.filter((f) => f.size > 10 * 1024 * 1024);\n    if (invalid.length > 0) {\n      setError('Algunos archivos exceden el tamaño máximo de 10MB');\n      return;\n    }\n\n    setAttachments((prev) => [...prev, ...files]);\n    e.target.value = '';\n  };\n\n  const validate = () => {\n    if (!to) {\n      setError('Debes especificar un destinatario');\n      return false;\n    }\n    if (!subject) {\n      setError('Por favor, añade un asunto al email');\n      return false;\n    }\n    return true;\n  };\n\n  const handleSend = async () => {\n    setError('');\n    if (!validate()) return;\n\n    setSending(true);\n    try {\n      await EmailService.sendMail({ to, subject, body, attachments });\n      // Redirigir a bandeja de entrada tras envío exitoso\n      navigate('/');\n    } catch (err) {\n      console.error(err);\n      setError(`Error al enviar correo: ${err.message}`);\n    } finally {\n      setSending(false);\n    }\n  };\n\n  return (\n    <div className=\"p-4 max-w-4xl mx-auto\">\n      <Card className=\"flex flex-col\">\n        <div className=\"border-b border-gray-200 p-4 flex items-center justify-between\">\n          <h2 className=\"text-xl font-bold\">Nuevo correo</h2>\n        </div>\n        <div className=\"p-4 space-y-4\">\n          {error && (\n            <div className=\"flex items-center text-red-700 bg-red-50 border border-red-200 p-3 rounded-md\">\n              <AlertCircle size={18} className=\"mr-2\" />\n              <span>{error}</span>\n            </div>\n          )}\n\n          {/* Campo Para */}\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Para:\"\n              value={to}\n              onChange={(e) => setTo(e.target.value)}\n              className=\"w-full border border-gray-300 rounded-md p-2\"\n              disabled={sending}\n            />\n          </div>\n\n          {/* Campo Asunto */}\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Asunto:\"\n              value={subject}\n              onChange={(e) => setSubject(e.target.value)}\n              className=\"w-full border border-gray-300 rounded-md p-2\"\n              disabled={sending}\n            />\n          </div>\n\n          {/* Editor de cuerpo */}\n          <div>\n            <div\n              data-testid=\"email-body-editor\"\n              contentEditable\n              className=\"w-full min-h-[120px] border border-gray-300 rounded-md p-2 focus:outline-none\"\n              onInput={(e) => setBody(e.currentTarget.innerHTML)}\n              suppressContentEditableWarning\n            />\n          </div>\n\n          {/* Adjuntos */}\n          <div>\n            <label className=\"cursor-pointer inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-sm bg-white hover:bg-gray-50\" aria-label=\"Adjuntar archivo\">\n              <Paperclip size={16} className=\"mr-1\" /> Adjuntar archivo\n              <input type=\"file\" className=\"hidden\" multiple onChange={handleFileUpload} />\n            </label>\n            {attachments.length > 0 && (\n              <ul className=\"mt-2 list-disc list-inside text-sm text-gray-700\">\n                {attachments.map((file, idx) => (\n                  <li key={idx}>{file.name}</li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </div>\n        <div className=\"border-t border-gray-200 p-4 flex justify-end\">\n          <Button onClick={handleSend} disabled={sending}>\n            {sending ? 'Enviando...' : 'Enviar'}\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default ComposeEmail;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\ComposeEmailModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\CustomFolders.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailComments.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailComposer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailDetail.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailFeedbackCollector.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailFilters.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailFolderList.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'onDeleteFolder' is assigned a value but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Folder, Plus } from 'lucide-react';\nimport Button from '../Button';\n\n/**\n * Lista de carpetas de correo. Implementación ligera para satisfacer\n * los tests de accesibilidad.\n *\n * Props esperadas por los tests:\n * - folders: Array<{ id, name, systemFolder, count }>\n * - selectedFolder: string\n * - onSelectFolder: (id) => void\n * - onCreateFolder: () => void\n * - onDeleteFolder: (id) => void  (no usado en tests)\n */\nconst EmailFolderList = ({\n  folders = [],\n  selectedFolder = '',\n  onSelectFolder = () => {},\n  onCreateFolder = () => {},\n  onDeleteFolder = () => {},\n}) => {\n  return (\n    <nav aria-label=\"Carpetas de correo\" className=\"space-y-2\">\n      <div className=\"flex items-center justify-between px-2\">\n        <h2 className=\"text-sm font-medium text-gray-700\">Carpetas</h2>\n        <Button\n          size=\"xs\"\n          variant=\"ghost\"\n          onClick={onCreateFolder}\n          aria-label=\"Nueva carpeta\"\n          className=\"flex items-center space-x-1\"\n        >\n          <Plus size={14} />\n          <span className=\"sr-only sm:not-sr-only sm:inline\">Nueva carpeta</span>\n        </Button>\n      </div>\n\n      <ul role=\"list\" className=\"space-y-1\">\n        {folders.map((folder) => (\n          <li key={folder.id}>\n            <button\n              type=\"button\"\n              onClick={() => onSelectFolder(folder.id)}\n              className={`w-full text-left px-2 py-1 rounded flex items-center justify-between focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                selectedFolder === folder.id ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'\n              }`}\n              aria-current={selectedFolder === folder.id ? 'true' : undefined}\n            >\n              <span className=\"flex items-center space-x-2 truncate\">\n                <Folder size={14} />\n                <span className=\"truncate\">{folder.name}</span>\n              </span>\n              {typeof folder.count === 'number' && folder.count > 0 && (\n                <span className=\"text-xs text-gray-600\">{folder.count}</span>\n              )}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default EmailFolderList;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailInbox.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailNotificationBadge.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailRecommendationsPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'Rating' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { \n  Box, \n  Typography, \n  Paper, \n  Divider, \n  Chip, \n  List, \n  ListItem, \n  ListItemIcon, \n  ListItemText,\n  CircularProgress,\n  Alert,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Button,\n  Tooltip,\n  Rating,\n  Grid\n} from '@mui/material';\nimport Lightbulb from '@mui/icons-material/Lightbulb';\nimport AccessTime from '@mui/icons-material/AccessTime';\nimport Subject from '@mui/icons-material/Subject';\nimport Edit from '@mui/icons-material/Edit';\nimport Category from '@mui/icons-material/Category';\nimport TipsAndUpdates from '@mui/icons-material/TipsAndUpdates';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport CheckCircle from '@mui/icons-material/CheckCircle';\nimport VerifiedUser from '@mui/icons-material/VerifiedUser';\nimport Schedule from '@mui/icons-material/Schedule';\nimport EmailRecommendationService from '../../services/EmailRecommendationService';\n\n/**\n * Componente que muestra recomendaciones personalizadas para mejorar la efectividad\n * de los correos electrónicos enviados a proveedores\n */\nconst EmailRecommendationsPanel = ({ category, searchQuery, onApplyRecommendation }) => {\n  const [loading, setLoading] = useState(true);\n  const [recommendations, setRecommendations] = useState(null);\n  const [error, setError] = useState(null);\n  \n  // Instanciar el servicio de recomendaciones\n  const recommendationService = new EmailRecommendationService();\n  \n  useEffect(() => {\n    const generateRecommendations = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Generar recomendaciones basadas en el contexto proporcionado\n        const data = recommendationService.generateRecommendations(category, searchQuery);\n        setRecommendations(data);\n      } catch (err) {\n        console.error('Error generando recomendaciones:', err);\n        setError('No se pudieron generar las recomendaciones. Inténtalo de nuevo más tarde.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    generateRecommendations();\n  }, [category, searchQuery]);\n  \n  // Función para aplicar una recomendación\n  const handleApplyRecommendation = (type, data) => {\n    if (onApplyRecommendation) {\n      onApplyRecommendation(type, data);\n    }\n  };\n  \n  // Renderiza el indicador de confianza\n  const renderConfidenceIndicator = () => {\n    if (!recommendations) return null;\n    \n    const score = recommendations.confidenceScore || 0;\n    let color = 'error';\n    let label = 'Baja';\n    \n    if (score >= 70) {\n      color = 'success';\n      label = 'Alta';\n    } else if (score >= 40) {\n      color = 'warning';\n      label = 'Media';\n    }\n    \n    return (\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\" mr={1}>\n          Confianza en recomendaciones:\n        </Typography>\n        <Chip \n          size=\"small\"\n          label={`${label} (${score}%)`} \n          color={color}\n          icon={<VerifiedUser fontSize=\"small\" />}\n        />\n      </Box>\n    );\n  };\n  \n  // Si está cargando, mostrar indicador\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', p: 3 }}>\n        <CircularProgress size={40} />\n        <Typography variant=\"body2\" color=\"text.secondary\" mt={2}>\n          Analizando datos y generando recomendaciones...\n        </Typography>\n      </Box>\n    );\n  }\n  \n  // Si hay error, mostrar mensaje\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ m: 2 }}>\n        {error}\n      </Alert>\n    );\n  }\n  \n  // Si no hay recomendaciones, mostrar mensaje\n  if (!recommendations) {\n    return (\n      <Alert severity=\"info\" sx={{ m: 2 }}>\n        No hay suficientes datos para generar recomendaciones personalizadas.\n      </Alert>\n    );\n  }\n  \n  return (\n    <Box sx={{ p: 2 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" gutterBottom>\n          Recomendaciones Personalizadas\n        </Typography>\n        <Tooltip title=\"Las recomendaciones se basan en datos históricos de efectividad\">\n          <TipsAndUpdates color=\"primary\" />\n        </Tooltip>\n      </Box>\n      \n      {renderConfidenceIndicator()}\n      \n      <Grid container spacing={2}>\n        {/* Mejor momento para enviar */}\n        <Grid item xs={12} md={6}>\n          <Accordion defaultExpanded>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <AccessTime color=\"primary\" sx={{ mr: 1 }} />\n              <Typography variant=\"subtitle1\">Mejor momento para enviar</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Box>\n                {recommendations.bestTimeToSend.hasSufficientData ? (\n                  <>\n                    <Typography variant=\"body1\">\n                      El mejor momento para enviar correos es por la {' '}\n                      <strong>{recommendations.bestTimeToSend.bestTimeSlotName}</strong>\n                      {' '} con una tasa de respuesta del {recommendations.bestTimeToSend.bestRate}%\n                    </Typography>\n                    <Box sx={{ mt: 1, display: 'flex', alignItems: 'center' }}>\n                      <Button\n                        size=\"small\"\n                        variant=\"outlined\"\n                        startIcon={<Schedule />}\n                        onClick={() => handleApplyRecommendation('time', recommendations.bestTimeToSend)}\n                      >\n                        Programar en este horario\n                      </Button>\n                    </Box>\n                  </>\n                ) : (\n                  <Alert severity=\"info\" sx={{ mt: 1 }}>\n                    No hay suficientes datos para determinar el mejor momento. \n                    Por ahora, recomendamos enviar por la mañana (8-12h).\n                  </Alert>\n                )}\n              </Box>\n            </AccordionDetails>\n          </Accordion>\n        </Grid>\n        \n        {/* Línea de asunto */}\n        <Grid item xs={12} md={6}>\n          <Accordion defaultExpanded>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Subject color=\"primary\" sx={{ mr: 1 }} />\n              <Typography variant=\"subtitle1\">Línea de asunto efectiva</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                Patrones recomendados:\n              </Typography>\n              <List dense disablePadding>\n                {recommendations.subjectLineRecommendations.recommendedPatterns.map((pattern, idx) => (\n                  <ListItem key={idx} disablePadding sx={{ py: 0.5 }}>\n                    <ListItemIcon sx={{ minWidth: 30 }}>\n                      <CheckCircle fontSize=\"small\" color=\"success\" />\n                    </ListItemIcon>\n                    <ListItemText \n                      primary={pattern}\n                      primaryTypographyProps={{ variant: 'body2' }}\n                    />\n                    <Button\n                      size=\"small\"\n                      onClick={() => handleApplyRecommendation('subject', pattern)}\n                    >\n                      Usar\n                    </Button>\n                  </ListItem>\n                ))}\n              </List>\n              \n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom sx={{ mt: 1 }}>\n                Longitud óptima: entre {recommendations.subjectLineRecommendations.optimalLength.min} y {recommendations.subjectLineRecommendations.optimalLength.max} caracteres\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n        </Grid>\n        \n        {/* Personalización */}\n        <Grid item xs={12} md={6}>\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Edit color=\"primary\" sx={{ mr: 1 }} />\n              <Typography variant=\"subtitle1\">Impacto de personalización</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              {recommendations.customizationImpact.hasSufficientData ? (\n                <>\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <Typography variant=\"body1\" mr={1}>\n                      Los mensajes personalizados tienen un \n                    </Typography>\n                    <Chip \n                      label={`+${recommendations.customizationImpact.impact}%`} \n                      color={parseFloat(recommendations.customizationImpact.impact) > 0 ? \"success\" : \"default\"}\n                      size=\"small\"\n                    />\n                    <Typography variant=\"body1\" ml={1}>\n                      de tasa de respuesta\n                    </Typography>\n                  </Box>\n                  \n                  <Box sx={{ display: 'flex', mt: 2, justifyContent: 'space-around' }}>\n                    <Box sx={{ textAlign: 'center' }}>\n                      <Typography variant=\"h6\">\n                        {recommendations.customizationImpact.customized.rate}%\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Personalizados\n                      </Typography>\n                    </Box>\n                    <Divider orientation=\"vertical\" flexItem sx={{ mx: 2 }} />\n                    <Box sx={{ textAlign: 'center' }}>\n                      <Typography variant=\"h6\">\n                        {recommendations.customizationImpact.nonCustomized.rate}%\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        No personalizados\n                      </Typography>\n                    </Box>\n                  </Box>\n                </>\n              ) : (\n                <Alert severity=\"info\">\n                  {recommendations.customizationImpact.recommendCustomization \n                    ? 'Recomendamos personalizar tus mensajes para aumentar la tasa de respuesta.' \n                    : 'No hay suficientes datos para medir el impacto de la personalización.'}\n                </Alert>\n              )}\n            </AccordionDetails>\n          </Accordion>\n        </Grid>\n        \n        {/* Plantillas */}\n        <Grid item xs={12} md={6}>\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Category color=\"primary\" sx={{ mr: 1 }} />\n              <Typography variant=\"subtitle1\">Plantilla recomendada</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              {recommendations.templateRecommendations.hasSufficientData ? (\n                <>\n                  <Typography variant=\"body1\">\n                    La plantilla con mejor rendimiento es{' '}\n                    <strong>{recommendations.templateRecommendations.bestOverallTemplate}</strong>\n                    {' '}con una tasa de respuesta del {recommendations.templateRecommendations.bestOverallResponseRate}%\n                  </Typography>\n                  \n                  {recommendations.templateRecommendations.categorySpecificTemplate && (\n                    <Box sx={{ mt: 1 }}>\n                      <Typography variant=\"body2\">\n                        Para la categoría <strong>{recommendations.templateRecommendations.categorySpecificTemplate.category}</strong>:\n                        Tasa de respuesta del {recommendations.templateRecommendations.categorySpecificTemplate.responseRate}%\n                      </Typography>\n                    </Box>\n                  )}\n                  \n                  <Box sx={{ mt: 1 }}>\n                    <Button\n                      size=\"small\"\n                      variant=\"outlined\"\n                      onClick={() => handleApplyRecommendation('template', recommendations.templateRecommendations.bestOverallTemplate)}\n                    >\n                      Aplicar plantilla recomendada\n                    </Button>\n                  </Box>\n                </>\n              ) : (\n                <Alert severity=\"info\">\n                  No hay suficientes datos para recomendar una plantilla específica.\n                  Por ahora, recomendamos usar la plantilla general.\n                </Alert>\n              )}\n            </AccordionDetails>\n          </Accordion>\n        </Grid>\n        \n        {/* Tiempo de respuesta esperado */}\n        <Grid item xs={12} md={6}>\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Schedule color=\"primary\" sx={{ mr: 1 }} />\n              <Typography variant=\"subtitle1\">Tiempo de respuesta esperado</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              {recommendations.responseTimeExpectations.hasSufficientData ? (\n                <>\n                  <Typography variant=\"body1\">\n                    Tiempo promedio de respuesta: <strong>{recommendations.responseTimeExpectations.averageTime} horas</strong>\n                  </Typography>\n                  \n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                    Tiempo mediano: {recommendations.responseTimeExpectations.medianTime} horas\n                  </Typography>\n                  \n                  <Box sx={{ display: 'flex', mt: 1, justifyContent: 'space-between' }}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Respuesta más rápida: {recommendations.responseTimeExpectations.fastestResponse}h\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Respuesta más lenta: {recommendations.responseTimeExpectations.slowestResponse}h\n                    </Typography>\n                  </Box>\n                  \n                  {recommendations.responseTimeExpectations.categoryAverageTime && (\n                    <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                      Para esta categoría específica: <strong>{recommendations.responseTimeExpectations.categoryAverageTime} horas</strong>\n                    </Typography>\n                  )}\n                </>\n              ) : (\n                <Alert severity=\"info\">\n                  Con base en promedios generales, espera una respuesta en aproximadamente 24-48 horas.\n                </Alert>\n              )}\n            </AccordionDetails>\n          </Accordion>\n        </Grid>\n        \n        {/* Recomendaciones específicas de categoría */}\n        {recommendations.categorySpecific && (\n          <Grid item xs={12}>\n            <Accordion>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Lightbulb color=\"primary\" sx={{ mr: 1 }} />\n                <Typography variant=\"subtitle1\">\n                  Recomendaciones para {category || 'esta categoría'}\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                {recommendations.categorySpecific.hasSufficientData ? (\n                  <>\n                    <Typography variant=\"body2\" gutterBottom>\n                      Tasa de respuesta en esta categoría: {recommendations.categorySpecific.responseRate}%\n                    </Typography>\n                    <List dense>\n                      {recommendations.categorySpecific.recommendations.map((rec, idx) => (\n                        <ListItem key={idx}>\n                          <ListItemIcon>\n                            <CheckCircle color=\"success\" />\n                          </ListItemIcon>\n                          <ListItemText primary={rec} />\n                        </ListItem>\n                      ))}\n                    </List>\n                  </>\n                ) : (\n                  <Alert severity=\"info\">\n                    No hay suficientes datos para recomendaciones específicas en esta categoría.\n                  </Alert>\n                )}\n              </AccordionDetails>\n            </Accordion>\n          </Grid>\n        )}\n        \n        {/* Recomendaciones basadas en la consulta */}\n        {recommendations.querySpecific && recommendations.querySpecific.recommendations.length > 0 && (\n          <Grid item xs={12}>\n            <Accordion>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Lightbulb color=\"primary\" sx={{ mr: 1 }} />\n                <Typography variant=\"subtitle1\">\n                  Basado en tu búsqueda\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <List dense>\n                  {recommendations.querySpecific.recommendations.map((rec, idx) => (\n                    <ListItem key={idx}>\n                      <ListItemIcon>\n                        <CheckCircle color=\"success\" />\n                      </ListItemIcon>\n                      <ListItemText primary={rec} />\n                    </ListItem>\n                  ))}\n                </List>\n              </AccordionDetails>\n            </Accordion>\n          </Grid>\n        )}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default EmailRecommendationsPanel;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailSettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'currentUser' is assigned a value but never used.","line":21,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Check, AlertTriangle } from 'lucide-react';\nimport Button from '../Button';\nimport Card from '../Card';\nimport { createEmailAlias, initEmailService } from '../../services/emailService';\nimport { useAuth } from '../../context/AuthContext';\nimport TagsManager from './TagsManager';\nimport WeddingAccountLink from '../settings/WeddingAccountLink';\n\n/**\n * Componente para gestionar la configuración de correo electrónico del usuario\n * Permite personalizar su dirección de correo y gestionar preferencias\n */\nconst EmailSettings = () => {\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState('');\n  const [emailAddress, setEmailAddress] = useState('');\n  const [emailAlias, setEmailAlias] = useState('');\n  const [newAlias, setNewAlias] = useState('');\n  const { currentUser, userProfile, updateUserProfile } = useAuth();\n  \n  // Cargar datos del usuario\n  useEffect(() => {\n    if (userProfile) {\n      // Inicializar el servicio de email y obtener la dirección actual\n      const currentEmail = initEmailService(userProfile);\n      setEmailAddress(currentEmail);\n      setEmailAlias(userProfile.emailAlias || '');\n    }\n  }, [userProfile]);\n  \n  // Validar formato de alias\n  const validateAlias = (alias) => {\n    if (!alias) return false;\n    if (alias.length < 3) return false;\n    \n    // Comprobar que solo contiene caracteres válidos (letras, números, puntos)\n    const validAliasRegex = /^[a-z0-9.]+$/;\n    return validAliasRegex.test(alias);\n  };\n  \n  // Manejar cambio de alias\n  const handleChangeAlias = async (e) => {\n    e.preventDefault();\n    \n    if (!validateAlias(newAlias)) {\n      setError('El alias debe tener al menos 3 caracteres y solo puede contener letras, números y puntos.');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      setError('');\n      \n      // Crear el nuevo alias\n      const result = await createEmailAlias(userProfile, newAlias);\n      \n      if (result.success) {\n        // Actualizar perfil de usuario con el nuevo alias\n        const updatedProfile = {\n          ...userProfile,\n          emailAlias: result.alias\n        };\n        \n        // Actualizar en backend/estado\n        await updateUserProfile(updatedProfile);\n        \n        setEmailAddress(result.email);\n        setEmailAlias(result.alias);\n        setNewAlias('');\n        setSuccess(true);\n        \n        // Ocultar mensaje de éxito después de 3 segundos\n        setTimeout(() => setSuccess(false), 3000);\n      }\n    } catch (error) {\n      console.error('Error al cambiar alias de correo:', error);\n      setError(`Error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  return (\n    <Card className=\"p-4\">\n      <h2 className=\"text-xl font-semibold mb-4\">Configuración de Correo Electrónico</h2>\n      \n      <div className=\"space-y-6\">\n        {/* Dirección de correo actual */}\n        <div>\n          <h3 className=\"text-md font-medium mb-2\">Tu dirección de correo</h3>\n          <p className=\"text-gray-600 mb-1\">Esta es tu dirección de correo electrónico actual en Lovenda:</p>\n          <div className=\"bg-gray-50 p-3 rounded-md border\">\n            <p className=\"font-medium\">{emailAddress}</p>\n          </div>\n        </div>\n        \n        {/* Cambiar alias */}\n        <div>\n          <h3 className=\"text-md font-medium mb-2\">Personalizar dirección de correo</h3>\n          <p className=\"text-gray-600 mb-3\">\n            Puedes personalizar la parte inicial de tu dirección de correo para hacerla más fácil de recordar.\n          </p>\n          \n          <form onSubmit={handleChangeAlias} className=\"space-y-3\">\n            <div>\n              <label htmlFor=\"email-alias\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Nuevo alias de correo\n              </label>\n              <div className=\"flex\">\n                <input\n                  type=\"text\"\n                  id=\"email-alias\"\n                  value={newAlias}\n                  onChange={(e) => setNewAlias(e.target.value.toLowerCase())}\n                  className=\"flex-grow p-2 border rounded-l-md focus:ring-2 focus:ring-blue-500\"\n                  placeholder={emailAlias || \"tunombre\"}\n                />\n                <span className=\"bg-gray-100 p-2 border-r border-t border-b rounded-r-md flex items-center\">\n                  @lovenda.com\n                </span>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Solo letras minúsculas, números y puntos. Mínimo 3 caracteres.\n              </p>\n            </div>\n            \n            {error && (\n              <div className=\"p-3 bg-red-50 border border-red-200 text-red-700 rounded-md flex items-start\">\n                <AlertTriangle size={16} className=\"mr-2 mt-0.5\" />\n                <p className=\"text-sm\">{error}</p>\n              </div>\n            )}\n            \n            {success && (\n              <div className=\"p-3 bg-green-50 border border-green-200 text-green-700 rounded-md flex items-start\">\n                <Check size={16} className=\"mr-2 mt-0.5\" />\n                <p className=\"text-sm\">¡Tu dirección de correo ha sido actualizada con éxito!</p>\n              </div>\n            )}\n            \n            <Button\n              type=\"submit\"\n              variant=\"default\"\n              disabled={loading || !newAlias}\n            >\n              {loading ? 'Actualizando...' : 'Actualizar dirección'}\n            </Button>\n          </form>\n        </div>\n        \n        {/* Opciones adicionales */}\n        <div>\n          <h3 className=\"text-md font-medium mb-2\">Preferencias de notificación</h3>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"notify-new-email\"\n                defaultChecked={true}\n                className=\"w-4 h-4 text-blue-600 border-gray-300 rounded\"\n              />\n              <label htmlFor=\"notify-new-email\" className=\"ml-2 block text-sm text-gray-700\">\n                Notificarme cuando reciba nuevos correos\n              </label>\n            </div>\n            \n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"notify-read\"\n                defaultChecked={true}\n                className=\"w-4 h-4 text-blue-600 border-gray-300 rounded\"\n              />\n              <label htmlFor=\"notify-read\" className=\"ml-2 block text-sm text-gray-700\">\n                Notificarme cuando mis correos sean leídos\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        {/* Gestor de etiquetas */}\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <TagsManager />\n        </div>\n\n        {/* Vincular cuentas de boda */}\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <WeddingAccountLink />\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default EmailSettings;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailSetupForm.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":10,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Check, AlertCircle, Loader2 } from 'lucide-react';\nimport Button from '../ui/Button';\n\n/**\n * Componente para configurar el nombre de correo electrónico de usuario\n * Permite seleccionar un nombre de usuario para el dominio @mywed360\n * Incluye validación en tiempo real de disponibilidad\n */\nconst EmailSetupForm = ({ onSave, defaultUsername = '', userId }) => {\n  const [username, setUsername] = useState(defaultUsername);\n  const [availabilityStatus, setAvailabilityStatus] = useState('idle'); // 'idle', 'checking', 'available', 'unavailable'\n  const [error, setError] = useState('');\n  const [isSaving, setIsSaving] = useState(false);\n\n  // Función para comprobar si un nombre de usuario está disponible\n  const checkAvailability = async (value) => {\n    if (!value) {\n      setAvailabilityStatus('idle');\n      return;\n    }\n\n    // Validar formato del nombre de usuario\n    const usernameRegex = /^[a-z0-9][a-z0-9._-]{2,29}$/i;\n    if (!usernameRegex.test(value)) {\n      setError('El nombre solo puede contener letras, números, puntos, guiones y guiones bajos. Mínimo 3 caracteres.');\n      setAvailabilityStatus('unavailable');\n      return;\n    }\n\n    setAvailabilityStatus('checking');\n    setError('');\n    \n    try {\n      // En un entorno real, esto sería una llamada a la API\n      // En este ejemplo simulamos la llamada con un timeout\n      setTimeout(async () => {\n        // Simulamos que algunos nombres están ocupados\n        const takenUsernames = ['admin', 'info', 'soporte', 'ayuda', 'contacto'];\n        const isAvailable = !takenUsernames.includes(value.toLowerCase());\n        \n        setAvailabilityStatus(isAvailable ? 'available' : 'unavailable');\n        if (!isAvailable) {\n          setError(`El nombre \"${value}\" ya está en uso. Por favor elige otro.`);\n        }\n      }, 800); // Simular delay de red\n    } catch (error) {\n      console.error(\"Error al comprobar disponibilidad:\", error);\n      setAvailabilityStatus('unavailable');\n      setError('Error al comprobar disponibilidad. Inténtalo de nuevo más tarde.');\n    }\n  };\n\n  // Efecto para comprobar disponibilidad cuando el usuario escribe\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      checkAvailability(username);\n    }, 500); // Debounce de 500ms\n\n    return () => clearTimeout(timer);\n  }, [username]);\n\n  // Función para guardar el nombre de correo\n  const handleSave = async () => {\n    if (availabilityStatus !== 'available') return;\n    \n    setIsSaving(true);\n    try {\n      // En un entorno real, esto sería una llamada a la API para guardar\n      // el nombre de correo asociado al usuario\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulación\n      \n      if (onSave) {\n        onSave(username);\n      }\n    } catch (error) {\n      console.error(\"Error al guardar:\", error);\n      setError('Error al guardar. Inténtalo de nuevo más tarde.');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    <div className=\"p-5 bg-white border rounded-lg shadow-sm\">\n      <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">\n        Configura tu correo electrónico myWed360\n      </h2>\n      \n      <p className=\"text-gray-600 mb-5\">\n        Elige un nombre de usuario único para tu correo electrónico myWed360. \n        Este será tu correo oficial dentro de la plataforma.\n      </p>\n      \n      <div className=\"mb-4\">\n        <label htmlFor=\"email-username\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n          Tu dirección de correo:\n        </label>\n        \n        <div className=\"flex items-center\">\n          <input\n            id=\"email-username\"\n            type=\"text\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            className={`border px-3 py-2 rounded-l-md flex-1 focus:ring-2 focus:outline-none ${\n              availabilityStatus === 'available' \n                ? 'border-green-300 focus:border-green-500 focus:ring-green-200' \n                : availabilityStatus === 'unavailable'\n                  ? 'border-red-300 focus:border-red-500 focus:ring-red-200'\n                  : 'border-gray-300 focus:border-blue-500 focus:ring-blue-200'\n            }`}\n            placeholder=\"tunombre\"\n            aria-label=\"Nombre de usuario para correo\"\n            disabled={isSaving}\n          />\n          <div className=\"bg-gray-100 px-3 py-2 border-y border-r rounded-r-md text-gray-700 whitespace-nowrap\">\n            @mywed360\n          </div>\n        </div>\n        \n        <div className=\"mt-2 min-h-[24px]\">\n          {availabilityStatus === 'checking' && (\n            <div className=\"flex items-center text-gray-500\">\n              <Loader2 size={16} className=\"animate-spin mr-2\" />\n              <span className=\"text-sm\">Comprobando disponibilidad...</span>\n            </div>\n          )}\n          \n          {availabilityStatus === 'available' && username && (\n            <div className=\"flex items-center text-green-600\">\n              <Check size={16} className=\"mr-2\" />\n              <span className=\"text-sm\">¡Nombre disponible!</span>\n            </div>\n          )}\n          \n          {error && (\n            <div className=\"flex items-center text-red-600\">\n              <AlertCircle size={16} className=\"mr-2\" />\n              <span className=\"text-sm\">{error}</span>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"flex justify-end mt-6\">\n        <Button\n          onClick={handleSave}\n          disabled={availabilityStatus !== 'available' || isSaving}\n          className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md\"\n        >\n          {isSaving ? (\n            <>\n              <Loader2 size={16} className=\"animate-spin mr-2\" />\n              Guardando...\n            </>\n          ) : (\n            'Guardar dirección de correo'\n          )}\n        </Button>\n      </div>\n      \n      <div className=\"mt-4 text-sm text-gray-500\">\n        <p>Notas:</p>\n        <ul className=\"list-disc pl-5 space-y-1 mt-1\">\n          <li>Tu dirección de correo será <strong>{username || 'tunombre'}@mywed360</strong></li>\n          <li>Podrás enviar y recibir correos desde esta dirección</li>\n          <li>Este correo se utilizará para todas las comunicaciones con proveedores</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default EmailSetupForm;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailStats.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailTagsManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":2,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Tag, X, Plus, Check } from 'lucide-react';\nimport Button from '../Button';\nimport { useAuth } from '../../hooks/useAuth';\nimport { \n  getUserTags, \n  getEmailTagsDetails, \n  addTagToEmail, \n  removeTagFromEmail \n} from '../../services/tagService';\n\n/**\n * Componente para gestionar etiquetas de un correo electrónico\n */\nconst EmailTagsManager = ({ emailId, onTagsChange }) => {\n  const [tags, setTags] = useState([]);\n  const [allTags, setAllTags] = useState([]);\n  const [isSelectingTag, setIsSelectingTag] = useState(false);\n  const { currentUser } = useAuth();\n  \n  // Cargar etiquetas del correo y todas las disponibles\n  useEffect(() => {\n    if (!currentUser || !emailId) return;\n    \n    // Obtener todas las etiquetas disponibles\n    const availableTags = getUserTags(currentUser.uid);\n    setAllTags(availableTags);\n    \n    // Obtener etiquetas del correo\n    const emailTags = getEmailTagsDetails(currentUser.uid, emailId);\n    setTags(emailTags);\n  }, [currentUser, emailId]);\n  \n  // Añadir etiqueta al correo\n  const handleAddTag = (tagId) => {\n    if (!currentUser || !emailId) return;\n    \n    try {\n      // Añadir etiqueta\n      addTagToEmail(currentUser.uid, emailId, tagId);\n      \n      // Actualizar etiquetas del correo\n      const updatedTags = getEmailTagsDetails(currentUser.uid, emailId);\n      setTags(updatedTags);\n      \n      // Cerrar selector\n      setIsSelectingTag(false);\n      \n      // Notificar cambio\n      if (onTagsChange) {\n        onTagsChange(updatedTags);\n      }\n    } catch (error) {\n      console.error('Error al añadir etiqueta:', error);\n    }\n  };\n  \n  // Quitar etiqueta del correo\n  const handleRemoveTag = (tagId) => {\n    if (!currentUser || !emailId) return;\n    \n    try {\n      // Quitar etiqueta\n      removeTagFromEmail(currentUser.uid, emailId, tagId);\n      \n      // Actualizar etiquetas del correo\n      const updatedTags = getEmailTagsDetails(currentUser.uid, emailId);\n      setTags(updatedTags);\n      \n      // Notificar cambio\n      if (onTagsChange) {\n        onTagsChange(updatedTags);\n      }\n    } catch (error) {\n      console.error('Error al quitar etiqueta:', error);\n    }\n  };\n  \n  return (\n    <div className=\"mt-2\">\n      {/* Etiquetas actuales */}\n      <div className=\"flex flex-wrap gap-2 mb-2\">\n        {tags.map((tag) => (\n          <div \n            key={tag.id}\n            className=\"inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium\"\n            style={{ \n              backgroundColor: `${tag.color}20`,\n              color: tag.color,\n              borderColor: `${tag.color}50`,\n              borderWidth: '1px'\n            }}\n          >\n            <span>{tag.name}</span>\n            <button \n              onClick={() => handleRemoveTag(tag.id)}\n              className=\"ml-1 rounded-full hover:bg-opacity-20 hover:bg-gray-600\"\n            >\n              <X size={12} />\n            </button>\n          </div>\n        ))}\n        \n        {/* Botón para añadir etiqueta */}\n        {!isSelectingTag ? (\n          <button \n            onClick={() => setIsSelectingTag(true)}\n            className=\"inline-flex items-center rounded-full border border-dashed border-gray-300 px-2.5 py-0.5 text-xs text-gray-500 hover:border-gray-400 hover:bg-gray-50\"\n          >\n            <Plus size={12} className=\"mr-1\" /> \n            Añadir etiqueta\n          </button>\n        ) : (\n          <button \n            onClick={() => setIsSelectingTag(false)}\n            className=\"inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs text-gray-700\"\n          >\n            <X size={12} className=\"mr-1\" /> \n            Cancelar\n          </button>\n        )}\n      </div>\n      \n      {/* Selector de etiquetas */}\n      {isSelectingTag && (\n        <div className=\"mt-1 p-2 border rounded-md bg-white shadow-sm max-h-32 overflow-y-auto\">\n          <div className=\"space-y-1\">\n            {allTags\n              .filter(tag => !tags.some(t => t.id === tag.id))\n              .map(tag => (\n                <div\n                  key={tag.id}\n                  onClick={() => handleAddTag(tag.id)}\n                  className=\"flex items-center px-2 py-1 rounded hover:bg-gray-100 cursor-pointer\"\n                >\n                  <div \n                    className=\"w-3 h-3 rounded-full mr-2\"\n                    style={{ backgroundColor: tag.color }}\n                  />\n                  <span className=\"text-sm\">{tag.name}</span>\n                </div>\n              ))}\n              \n            {allTags.filter(tag => !tags.some(t => t.id === tag.id)).length === 0 && (\n              <div className=\"text-center py-2 text-xs text-gray-500\">\n                No hay más etiquetas disponibles\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EmailTagsManager;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailTemplateManager.jsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier 'uncategorized' has already been declared","line":471,"column":9,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { ChevronDown, Edit, Trash, Plus, Save, Copy, AlertCircle, RefreshCw, Search, ChevronLeft, ChevronRight, Zap } from 'lucide-react';\nimport Button from '../Button';\nimport Card from '../Card';\nimport * as EmailService from '../../services/EmailService';\nimport templateCache from '../../services/TemplateCacheService';\nimport { useMediaQuery } from '../../hooks/useMediaQuery';\nimport useEmailMonitoring from '../../hooks/useEmailMonitoring';\n\n/**\n * Componente para gestionar plantillas de email personalizadas\n * Permite crear, editar, eliminar y utilizar plantillas predefinidas para diferentes tipos de comunicación\n * \n * @param {Object} props - Propiedades del componente\n * @param {Function} props.onSelectTemplate - Función llamada al seleccionar una plantilla\n * @param {Function} props.onClose - Función para cerrar el gestor de plantillas\n * @returns {React.ReactElement} Gestor de plantillas de email\n */\nconst EmailTemplateManager = ({ onSelectTemplate, onClose }) => {\n  const [templates, setTemplates] = useState([]);\n  const [filteredTemplates, setFilteredTemplates] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [editingTemplate, setEditingTemplate] = useState(null);\n  const [editMode, setEditMode] = useState(false);\n  const [success, setSuccess] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  \n  // Inicializar hook de monitoreo\n  const {\n    trackTemplateUsage,\n    trackTemplateSearch,\n    logEmailError,\n    measureTemplateRendering\n  } = useEmailMonitoring();\n  \n  // Paginación\n  const [currentPage, setCurrentPage] = useState(1);\n  const [templatesPerPage, setTemplatesPerPage] = useState(10);\n  \n  // Detectar dispositivos móviles\n  const isMobile = useMediaQuery('(max-width: 768px)');\n  \n  // Ajustar elementos por página basado en el tamaño de pantalla\n  useEffect(() => {\n    if (isMobile) {\n      setTemplatesPerPage(5);\n    } else {\n      setTemplatesPerPage(10);\n    }\n  }, [isMobile]);\n  \n  // Categorías ordenadas para mostrar en el gestor\n  const [categories] = useState([\n    'Proveedores - Solicitud de información',\n    'Proveedores - Confirmación',\n    'Proveedores - Cancelación',\n    'Proveedores - Seguimiento',\n    'Invitados - Información',\n    'Invitados - Recordatorio',\n    'Seguimiento',\n    'General'\n  ]);\n  \n  // Estado para controlar categorías expandidas\n  const [expandedCategories, setExpandedCategories] = useState({});\n  \n  // Estado para saber si se está usando caché\n  const [usingCache, setUsingCache] = useState(false);\n  const [cacheStats, setCacheStats] = useState({\n    hits: 0,\n    misses: 0\n  });\n  \n  // Cargar plantillas existentes\n  const loadTemplates = async (bypassCache = false) => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      // Iniciar medición de tiempo\n      const startTime = performance.now();\n      \n      // Usar el hook de monitoreo para trackear la operación\n      const templateList = await trackTemplateUsage(\n        'all', // templateId\n        'all', // category\n        'load', // action\n        async () => {\n          // Obtener plantillas con o sin caché según el parámetro\n          return await EmailService.getEmailTemplates(bypassCache);\n        },\n        { operation: 'loadAll', bypassCache }\n      );\n      \n      // Finalizar medición de tiempo\n      const endTime = performance.now();\n      const loadTime = Math.round(endTime - startTime);\n      \n      // Actualizar estado de caché\n      setUsingCache(!bypassCache);\n      \n      // Registrar rendimiento\n      measureTemplateRendering('load', loadTime, {\n        count: templateList?.length || 0,\n        fromCache: !bypassCache\n      });\n      \n      // Registrar estadísticas\n      if (!bypassCache) {\n        setCacheStats(prevStats => ({\n          hits: prevStats.hits + 1,\n          misses: prevStats.misses\n        }));\n      } else {\n        setCacheStats(prevStats => ({\n          hits: prevStats.hits,\n          misses: prevStats.misses + 1\n        }));\n      }\n      \n      setTemplates(templateList || []);\n    } catch (err) {\n      logEmailError('template_load', err, { operation: 'loadTemplates', bypassCache });\n      console.error('Error al cargar plantillas:', err);\n      setError('No se pudieron cargar las plantillas');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Función para recargar plantillas ignorando la caché\n  const refreshTemplates = () => {\n    loadTemplates(true);\n  };\n  \n  // Cargar plantillas al iniciar el componente\n  useEffect(() => {    \n    loadTemplates();\n  }, []);\n  \n  // Filtrar plantillas basado en término de búsqueda\n  useEffect(() => {\n    if (!searchTerm.trim()) {\n      setFilteredTemplates(templates);\n      return;\n    }\n    \n    // Usar trackTemplateSearch para monitorear la búsqueda de plantillas\n    trackTemplateSearch(searchTerm, 'all', () => {\n      const lowercasedSearch = searchTerm.toLowerCase();\n      const filtered = templates.filter(template => \n        template.name.toLowerCase().includes(lowercasedSearch) || \n        template.category.toLowerCase().includes(lowercasedSearch) ||\n        template.subject.toLowerCase().includes(lowercasedSearch) ||\n        template.body.toLowerCase().includes(lowercasedSearch)\n      );\n      \n      setFilteredTemplates(filtered);\n      setCurrentPage(1); // Reiniciar a primera página al buscar\n      \n      return filtered;\n    });\n  }, [searchTerm, templates, trackTemplateSearch]);\n  \n  // Calcular plantillas para la página actual\n  const currentTemplates = useMemo(() => {\n    const indexOfLastTemplate = currentPage * templatesPerPage;\n    const indexOfFirstTemplate = indexOfLastTemplate - templatesPerPage;\n    return filteredTemplates.slice(indexOfFirstTemplate, indexOfLastTemplate);\n  }, [currentPage, templatesPerPage, filteredTemplates]);\n  \n  // Cambiar de página\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n  \n  // Calcular número total de páginas\n  const totalPages = useMemo(() => {\n    return Math.ceil(filteredTemplates.length / templatesPerPage);\n  }, [filteredTemplates, templatesPerPage]);\n  \n  // Manejar cambios en campo de búsqueda\n  const handleSearchChange = useCallback((e) => {\n    setSearchTerm(e.target.value);\n  }, []);\n  \n  // Alternar expansión de categoría\n  const toggleCategory = useCallback((category) => {\n    setExpandedCategories(prev => ({\n      ...prev,\n      [category]: !prev[category]\n    }));\n  }, []);\n  \n  // Función para restablecer las plantillas predefinidas del sistema\n  const handleResetTemplates = async () => {\n    if (!window.confirm('¿Estás seguro de que deseas restablecer todas las plantillas predefinidas? Esta acción no eliminará tus plantillas personalizadas.')) {\n      return;\n    }\n    \n    setLoading(true);\n    setError('');\n    \n    try {\n      const restoredTemplates = await EmailService.resetPredefinedTemplates();\n      setTemplates(restoredTemplates);\n      setSuccess('Se han restablecido correctamente las plantillas predefinidas');\n      \n      // Ocultar el mensaje de éxito después de 5 segundos\n      setTimeout(() => {\n        setSuccess('');\n      }, 5000);\n    } catch (err) {\n      console.error('Error al restablecer plantillas predefinidas:', err);\n      setError('No se pudieron restablecer las plantillas predefinidas');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Configurar una plantilla nueva para edición\n  const handleCreateNew = () => {\n    setEditingTemplate({\n      id: `template_${Date.now()}`,\n      name: '',\n      category: 'Proveedores - Solicitud de información',\n      subject: '',\n      body: '',\n      isSystem: false,\n      variables: []\n    });\n    setEditMode(true);\n  };\n  \n  // Configurar una plantilla existente para edición\n  const handleEdit = (template) => {\n    setEditingTemplate({ ...template });\n    setEditMode(true);\n  };\n  \n  // Duplicar una plantilla existente\n  const handleDuplicate = (template) => {\n    setEditingTemplate({\n      ...template,\n      id: `template_${Date.now()}`,\n      name: `${template.name} (Copia)`,\n      isSystem: false\n    });\n    setEditMode(true);\n  };\n  \n  // Eliminar una plantilla\n  const handleDelete = async (templateId) => {\n    if (window.confirm('¿Estás seguro de que deseas eliminar esta plantilla?')) {\n      try {\n        await EmailService.deleteEmailTemplate(templateId);\n        \n        setTemplates(prev => prev.filter(t => t.id !== templateId));\n      } catch (err) {\n        console.error('Error al eliminar plantilla:', err);\n        setError('No se pudo eliminar la plantilla');\n      }\n    }\n  };\n  \n  // Manejar cambios en el formulario de edición\n  const handleFormChange = (e) => {\n    const { name, value } = e.target;\n    setEditingTemplate(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  // Detectar variables en el contenido del email\n  const detectVariables = (content) => {\n    const regex = /\\{\\{([^}]+)\\}\\}/g;\n    const variables = new Set();\n    let match;\n    \n    while ((match = regex.exec(content)) !== null) {\n      variables.add(match[1].trim());\n    }\n    \n  // Guardar una plantilla (nueva o editada)\n  const handleSaveTemplate = async () => {\n    if (!editingTemplate?.subject || !editingTemplate?.body) {\n      setError('El asunto y el cuerpo de la plantilla son obligatorios');\n      return;\n    }\n    \n    setError('');\n    setLoading(true);\n    \n    try {\n      // Medir tiempo de renderizado para el monitor de rendimiento\n      const renderStart = performance.now();\n      \n      // Detectar variables en contenido\n      const variables = detectVariables(editingTemplate.body);\n      \n      // Preparar plantilla con fecha y variables\n      const templateToSave = {\n        ...editingTemplate,\n        variables,\n        lastUpdated: new Date().toISOString()\n      };\n      \n      // Si es una plantilla nueva, generar ID único\n      if (!templateToSave.id) {\n        templateToSave.id = `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      }\n      \n      // Guardar mediante el servicio\n      const savedTemplate = await trackTemplateUsage(\n        templateToSave.id,\n        templateToSave.category || 'Sin categoría',\n        'save',\n        async () => EmailService.saveEmailTemplate(templateToSave),\n        { operation: 'saveTemplate' }\n      );\n      \n      // Medir tiempo de guardado\n      const renderEnd = performance.now();\n      measureTemplateRendering('save', renderEnd - renderStart, { template: templateToSave.id });\n      \n      // Actualizar la lista de plantillas\n      await loadTemplates(true); // Forzar actualización ignorando caché\n      \n      // Registrar uso de la plantilla para mejorar precarga\n      if (savedTemplate && savedTemplate.category) {\n        templateCache.registerTemplateUsage(savedTemplate.id, savedTemplate.category);\n      }\n      \n      setSuccess('Plantilla guardada correctamente');\n      setEditMode(false);\n      setEditingTemplate(null);\n    } catch (err) {\n      logEmailError('template_save', err, { templateId: editingTemplate?.id });\n      console.error('Error al guardar plantilla:', err);\n      setError('No se pudo guardar la plantilla');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Usar una plantilla\n  const handleUseTemplate = (template) => {\n    // Monitorear el uso de la plantilla\n    trackTemplateUsage(\n      template.id, \n      template.category || 'Sin categoría', \n      'use', \n      async () => {\n        // Registrar uso en la caché para mejorar precarga\n        templateCache.registerTemplateUsage(template.id, template.category || 'Sin categoría');\n        \n        // Guardar en caché para acceso rápido\n        templateCache.cacheTemplate(template);\n        \n        if (onSelectTemplate) {\n          onSelectTemplate(template);\n        }\n        if (onClose) {\n          onClose();\n        }\n      },\n      { operation: 'useTemplate' }\n    );\n  };\n  \n  // Modo de visualización de plantillas\n  const renderTemplateList = () => {\n    if (loading) {\n      return <div className=\"text-center py-8\">Cargando plantillas...</div>;\n    }\n    \n    if (templates.length === 0) {\n      return (\n        <div className=\"text-center py-8 text-gray-500\">\n          No hay plantillas disponibles. \n          <div className=\"flex justify-center space-x-4 mt-4\">\n            <button \n              onClick={handleCreateNew}\n              className=\"text-blue-500 hover:underline\"\n            >\n              Crear una nueva\n            </button>\n            <button \n              onClick={handleResetTemplates}\n              className=\"text-blue-500 hover:underline\"\n            >\n              Restablecer plantillas predefinidas\n            </button>\n          </div>\n        </div>\n      );\n    }\n    \n    // Si hay búsqueda pero no hay resultados\n    if (searchTerm && filteredTemplates.length === 0) {\n      return (\n        <div className=\"text-center py-8 text-gray-500\">\n          No se encontraron plantillas que coincidan con \"{searchTerm}\".\n          <div className=\"mt-4\">\n            <button \n              onClick={() => setSearchTerm('')}\n              className=\"text-blue-500 hover:underline\"\n            >\n              Limpiar búsqueda\n            </button>\n          </div>\n        </div>\n      );\n    }\n    \n    // Agrupar plantillas por categoría\n    var groupedTemplates = {};\n    categories.forEach(category => {\n      groupedTemplates[category] = templates.filter(t => t.category === category);\n    });\n    \n    // Plantillas sin categoría\n    const uncategorized = templates.filter(t => !categories.includes(t.category));\n    if (uncategorized.length > 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        No hay plantillas disponibles. \n        <div className=\"flex justify-center space-x-4 mt-4\">\n          <button \n            onClick={handleCreateNew}\n            className=\"text-blue-500 hover:underline\"\n          >\n            Crear una nueva\n          </button>\n          <button \n            onClick={handleResetTemplates}\n            className=\"text-blue-500 hover:underline\"\n          >\n            Restablecer plantillas predefinidas\n          </button>\n        </div>\n      </div>\n    );\n  }\n  \n  // Si hay búsqueda pero no hay resultados\n  if (searchTerm && filteredTemplates.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        No se encontraron plantillas que coincidan con \"{searchTerm}\".\n        <div className=\"mt-4\">\n          <button \n            onClick={() => setSearchTerm('')}\n            className=\"text-blue-500 hover:underline\"\n          >\n            Limpiar búsqueda\n          </button>\n        </div>\n      </div>\n    );\n  }\n  \n  // Agrupar plantillas por categoría\n  var groupedTemplates = {};\n  categories.forEach(category => {\n    groupedTemplates[category] = templates.filter(t => t.category === category);\n  });\n  \n  // Plantillas sin categoría\n  const uncategorized = templates.filter(t => !categories.includes(t.category));\n  if (uncategorized.length > 0) {\n    groupedTemplates['Otras'] = uncategorized;\n  }\n  \n  return editMode ? renderTemplateEditor() : (\n    <div className=\"space-y-4\">\n      {/* Barra superior con búsqueda y estado de caché */}\n      <div className=\"flex flex-col sm:flex-row items-center mb-6 gap-2\">\n        <div className=\"relative flex-grow\">\n          <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n            <Search className=\"w-4 h-4 text-gray-500\" />\n          </div>\n          <input\n            type=\"text\"\n            className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5\"\n            placeholder=\"Buscar plantillas...\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n          />\n        </div>\n        \n        {/* Indicador de caché y botón de recarga */}\n        <div className=\"flex items-center gap-2\">\n          {usingCache && (\n            <div className=\"text-xs flex items-center gap-1 text-blue-600 bg-blue-50 px-2 py-1 rounded\">\n              <Zap className=\"w-3 h-3\" /> \n              <span>Caché activa</span>\n            </div>\n          )}\n          <Button \n            size=\"sm\" \n            variant=\"secondary\" \n            onClick={refreshTemplates} \n            title=\"Recargar plantillas (ignorar caché)\"\n            className=\"flex items-center gap-1\"\n          >\n            <RefreshCw className=\"w-3 h-3\" /> \n            <span className=\"hidden sm:inline\">Recargar</span>\n          </Button>\n        </div>\n      </div>\n      \n      {/* Estadísticas de caché */}\n      {(cacheStats.hits > 0 || cacheStats.misses > 0) && (\n        <div className=\"mb-4 text-xs text-gray-500 flex flex-wrap items-center gap-2 bg-gray-50 p-2 rounded\">\n          <div>Rendimiento de caché:</div>\n          <div className=\"flex items-center gap-1\">\n            <span className=\"font-medium text-green-600\">{cacheStats.hits}</span> aciertos\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <span className=\"font-medium text-amber-600\">{cacheStats.misses}</span> fallos\n          </div>\n          {cacheStats.hits > 0 && (\n            <div className=\"text-xs\">\n              <span className=\"font-medium text-blue-600\">\n                {Math.round((cacheStats.hits / (cacheStats.hits + cacheStats.misses)) * 100)}%\n              </span> efectividad\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Lista de plantillas por categoría */}\n      {categories.map(category => {\n        // Filtrar plantillas por categoría (usando la lista filtrada si hay búsqueda)\n        const categoryTemplates = currentTemplates.filter(t => t.category === category);\n        \n        if (categoryTemplates.length === 0) return null;\n        \n        const isExpanded = expandedCategories[category] !== false; // Por defecto expandido\n        \n        return (\n          <div key={category} className=\"border rounded-lg overflow-hidden shadow-sm\">\n            <div \n              className=\"bg-gray-100 p-3 cursor-pointer flex justify-between items-center transition-colors hover:bg-gray-200\"\n              onClick={() => toggleCategory(category)}\n            >\n              <h3 className=\"font-medium\">{category}</h3>\n              <ChevronDown \n                size={18} \n                className={`transform transition-transform ${isExpanded ? 'rotate-180' : ''}`}\n              />\n            </div>\n            \n            {isExpanded && (\n              <div className=\"divide-y\">\n                {categoryTemplates.map(template => (\n                  <div key={template.id} className=\"p-3 hover:bg-gray-50 transition-colors\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className={isMobile ? \"w-2/3\" : \"w-3/4\"}>\n                        <h4 className=\"font-medium truncate\">{template.name}</h4>\n                        <p className=\"text-sm text-gray-500 truncate\">{template.subject}</p>\n                      </div>\n                      \n                      <div className={`flex ${isMobile ? 'flex-col space-y-2' : 'space-x-2'}`}>\n                        <button \n                          onClick={() => handleSelect(template)}\n                          className=\"p-1 text-blue-500 hover:bg-blue-50 rounded\"\n                          title=\"Usar esta plantilla\"\n                        >\n                          <Copy size={isMobile ? 14 : 16} />\n                        </button>\n                        \n                        <button \n                          onClick={() => handleEdit(template)}\n                          className=\"p-1 text-green-500 hover:bg-green-50 rounded\"\n                          title=\"Editar plantilla\"\n                        >\n                          <Edit size={isMobile ? 14 : 16} />\n                        </button>\n                        \n                        {!template.isSystem && (\n                          <button \n                            onClick={() => handleDelete(template.id)}\n                            className=\"p-1 text-red-500 hover:bg-red-50 rounded\"\n                            title=\"Eliminar plantilla\"\n                    <div className=\"mt-1 text-sm text-gray-600\">\n                      Asunto: {template.subject}\n                    </div>\n                    {template.variables.length > 0 && (\n                      <div className=\"mt-2 flex flex-wrap gap-1\">\n                        {template.variables.map(variable => (\n                          <span \n                            key={variable} \n                            className=\"text-xs bg-blue-50 text-blue-700 px-2 py-0.5 rounded\"\n                          >\n                            {variable}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n  \n  // Modo de edición de plantilla\n  const renderTemplateEditor = () => {\n    return (\n      <div className=\"space-y-4\">\n        {error && (\n          <div className=\"p-3 bg-red-50 border border-red-200 rounded-md flex items-center text-red-700\">\n            <AlertCircle size={18} className=\"flex-shrink-0 mr-2\" />\n            <span>{error}</span>\n          </div>\n        )}\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Nombre de la plantilla:</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={editingTemplate.name}\n            onChange={handleFormChange}\n            className=\"w-full border border-gray-300 rounded-md p-2\"\n            placeholder=\"Ej: Solicitud de presupuesto\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Categoría:</label>\n          <div className=\"relative\">\n            <select\n              name=\"category\"\n              value={editingTemplate.category}\n              onChange={handleFormChange}\n              className=\"w-full border border-gray-300 rounded-md p-2 pr-8 appearance-none\"\n            >\n              {categories.map(category => (\n                <option key={category} value={category}>{category}</option>\n              ))}\n            </select>\n            <ChevronDown size={16} className=\"absolute right-2 top-3 pointer-events-none text-gray-500\" />\n          </div>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Asunto:</label>\n          <input\n            type=\"text\"\n            name=\"subject\"\n            value={editingTemplate.subject}\n            onChange={handleFormChange}\n            className=\"w-full border border-gray-300 rounded-md p-2\"\n            placeholder=\"Ej: Solicitud de información para {{servicio}}\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Contenido del email:</label>\n          <textarea\n            name=\"body\"\n            value={editingTemplate.body}\n            onChange={handleFormChange}\n            className=\"w-full border border-gray-300 rounded-md p-2\"\n            rows=\"10\"\n            placeholder=\"Escribe el contenido de la plantilla aquí...\"\n          ></textarea>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            Usa {{variable}} para crear campos dinámicos (ej: {{nombre_proveedor}}, {{fecha_boda}})\n          </p>\n        </div>\n        \n        <div className=\"flex justify-end space-x-3\">\n          <Button\n            variant=\"outline\"\n            onClick={handleCancelEdit}\n          >\n            Cancelar\n          </Button>\n          <Button\n            onClick={handleSaveTemplate}\n            className=\"flex items-center\"\n          >\n            <Save size={18} className=\"mr-1\" />\n            Guardar plantilla\n          </Button>\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div className=\"p-4\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold mb-2 sm:mb-0\">Plantillas de email</h2>\n        {!editMode && (\n          <div className={`flex ${isMobile ? 'w-full justify-between' : 'space-x-2'}`}>\n            <Button\n              variant=\"outline\"\n              onClick={handleResetTemplates}\n              className=\"flex items-center\"\n              title=\"Restablecer plantillas predefinidas\"\n              size={isMobile ? \"sm\" : \"md\"}\n            >\n              <RefreshCw size={isMobile ? 14 : 16} className=\"mr-1\" />\n              {isMobile ? \"Restablecer\" : \"Restablecer plantillas\"}\n            </Button>\n            <Button\n              onClick={handleCreateNew}\n              className=\"flex items-center\"\n              size={isMobile ? \"sm\" : \"md\"}\n            >\n              <Plus size={isMobile ? 14 : 16} className=\"mr-1\" />\n              {isMobile ? \"Nueva\" : \"Nueva plantilla\"}\n            </Button>\n          </div>\n        )}\n      </div>\n      \n      {/* Mensajes de estado */}\n      {error && (\n        <div className=\"p-3 bg-red-50 border border-red-200 rounded-md flex items-center text-red-700 mb-4\">\n          <AlertCircle size={18} className=\"flex-shrink-0 mr-2\" />\n          <span>{error}</span>\n        </div>\n      )}\n      \n      {success && (\n        <div className=\"p-3 bg-green-50 border border-green-200 rounded-md flex items-center text-green-700 mb-4\">\n          <span>{success}</span>\n        </div>\n      )}\n      \n      {editMode ? renderTemplateEditor() : renderTemplateList()}\n    </div>\n  );\n};\n\nexport default EmailTemplateManager;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailView.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EmailViewer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\EventDetector.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'chunkId' is assigned a value but never used.","line":48,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'isDone' is assigned a value but never used.","line":48,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\nimport useEventCache from '../../hooks/useEventCache';\n\n/**\n * Componente que analiza el contenido de un email en busca de posibles eventos\n * (fechas, horas, ubicaciones) y permite al usuario añadirlos al calendario\n * con un solo clic.\n * \n * @component\n * @example\n * ```jsx\n * <EventDetector\n *   emailContent={email.body}\n *   emailSubject={email.subject}\n *   onEventDetected={(eventData) => addToCalendar(eventData)}\n * />\n * ```\n */\nfunction EventDetector({ emailContent, emailSubject, onEventDetected }) {\n  const [detectedEvents, setDetectedEvents] = useState([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const workerRef = useRef();\n  const chunksProcessed = useRef(0);\n  const totalChunks = useRef(0);\n  \n  // Usar cache para eventos ya detectados\n  const { getCachedEvents, cacheEvents } = useEventCache();\n  \n  /**\n   * Inicializa un nuevo web worker para la detección de eventos\n   * @returns {Worker} Instancia del worker\n   */\n  const initWorker = useCallback(() => {\n    // Terminar el worker anterior si existe\n    if (workerRef.current) {\n      workerRef.current.terminate();\n    }\n    \n    // Crear un nuevo worker\n    const worker = new Worker(new URL('../../workers/eventDetectorWorker.js', import.meta.url));\n    \n    // Manejar mensajes del worker\n    worker.onmessage = (e) => {\n      const { type, events, chunkId, isDone, error } = e.data;\n      \n      if (type === 'error') {\n        console.error('Error en worker:', error);\n      } else if (type === 'result') {\n        // Procesar eventos detectados\n        if (events && events.length > 0) {\n          // Convertir las fechas de formato ISO a objetos Date\n          const processedEvents = events.map(event => ({\n            ...event,\n            date: new Date(event.date)\n          }));\n          \n          // Añadir a los eventos detectados\n          setDetectedEvents(prev => [...prev, ...processedEvents]);\n        }\n        \n        // Actualizar progreso\n        chunksProcessed.current += 1;\n        const newProgress = Math.round((chunksProcessed.current / totalChunks.current) * 100);\n        setProgress(newProgress);\n        \n        // Comprobar si se han procesado todos los chunks\n        if (chunksProcessed.current >= totalChunks.current) {\n          setIsAnalyzing(false);\n          \n          // Guardar eventos en caché\n          if (emailContent) {\n            const contentHash = btoa(emailContent.substring(0, 100)); // Usar inicio del contenido como clave\n            cacheEvents(contentHash, detectedEvents);\n          }\n        }\n      }\n    };\n    \n    workerRef.current = worker;\n    return worker;\n  }, [cacheEvents]);\n  \n  /**\n   * Divide el texto en chunks y los envía al worker para procesamiento\n   * @param {string} text - Texto completo a analizar\n   * @param {string} subject - Asunto del email\n   */\n  const detectPotentialEvents = useCallback((text, subject) => {\n    if (!text) {\n      setDetectedEvents([]);\n      setIsAnalyzing(false);\n      return;\n    }\n    \n    // Comprobar caché primero\n    const contentHash = btoa(text.substring(0, 100));\n    const cachedEvents = getCachedEvents(contentHash);\n    \n    if (cachedEvents && cachedEvents.length > 0) {\n      console.log('Usando eventos en caché');\n      setDetectedEvents(cachedEvents);\n      return;\n    }\n    \n    setIsAnalyzing(true);\n    setDetectedEvents([]);\n    setProgress(0);\n    chunksProcessed.current = 0;\n    \n    try {\n      // Inicializar worker\n      const worker = initWorker();\n      \n      // Dividir el texto en chunks de aproximadamente 1000 caracteres\n      // pero respetando los límites de palabras\n      const chunkSize = 1000;\n      const chunks = [];\n      let startIndex = 0;\n      \n      while (startIndex < text.length) {\n        let endIndex = Math.min(startIndex + chunkSize, text.length);\n        \n        // Ajustar para no cortar palabras\n        if (endIndex < text.length) {\n          // Buscar el próximo espacio en blanco\n          while (endIndex > startIndex && text[endIndex] !== ' ' && text[endIndex] !== '\\n') {\n            endIndex--;\n          }\n          \n          // Si no encontramos un buen punto de corte, usar el límite original\n          if (endIndex === startIndex) {\n            endIndex = Math.min(startIndex + chunkSize, text.length);\n          }\n        }\n        \n        chunks.push({\n          text: text.substring(startIndex, endIndex),\n          start: startIndex\n        });\n        \n        startIndex = endIndex;\n      }\n      \n      // Establecer el número total de chunks\n      totalChunks.current = chunks.length;\n      \n      // Procesar cada chunk con el worker\n      chunks.forEach((chunk, index) => {\n        worker.postMessage({\n          text: chunk.text,\n          subject,\n          chunkId: index,\n          startIndex: chunk.start,\n          chunkSize\n        });\n      });\n      \n    } catch (error) {\n      console.error('Error al detectar eventos:', error);\n      setIsAnalyzing(false);\n      setProgress(0);\n    }\n  }, [getCachedEvents, cacheEvents, initWorker]);\n\n  // Analizar el contenido del email cuando cambie\n  useEffect(() => {\n    if (emailContent) {\n      detectPotentialEvents(emailContent, emailSubject);\n    } else {\n      setDetectedEvents([]);\n    }\n    \n    // Cleanup: terminar worker cuando se desmonte el componente\n    return () => {\n      if (workerRef.current) {\n        workerRef.current.terminate();\n        workerRef.current = null;\n      }\n    };\n  }, [emailContent, emailSubject, detectPotentialEvents]);\n  \n  // Filtrar eventos que ya pasaron y eliminar duplicados\n  const validEvents = useMemo(() => {\n    const now = new Date();\n    \n    // Filtrar eventos futuros\n    const futureEvents = detectedEvents.filter(event => event.date > now);\n    \n    // Eliminar duplicados (mismo título, fecha y ubicación)\n    const uniqueEvents = [];\n    const eventMap = new Map();\n    \n    futureEvents.forEach(event => {\n      const key = `${event.date.toISOString()}_${event.location}_${event.title}`;\n      if (!eventMap.has(key)) {\n        eventMap.set(key, event);\n        uniqueEvents.push(event);\n      }\n    });\n    \n    return uniqueEvents;\n  }, [detectedEvents]);\n  \n  // No renderizar nada si no hay eventos detectados o está analizando\n  if ((validEvents.length === 0 && !isAnalyzing) || !emailContent) {\n    return null;\n  }\n\n  return (\n    <div className=\"mt-4 border-t pt-3\">\n      <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\n        {isAnalyzing ? 'Analizando posibles eventos...' : 'Eventos detectados'}\n      </h4>\n      \n      {isAnalyzing ? (\n        <div className=\"text-sm text-gray-500\">\n          <div className=\"flex items-center\">\n            <div className=\"w-4 h-4 mr-2 border-2 border-gray-300 border-t-indigo-500 rounded-full animate-spin\"></div>\n            Analizando contenido...\n          </div>\n          \n          {progress > 0 && (\n            <div className=\"mt-2\">\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                <div \n                  className=\"bg-indigo-500 h-2.5 rounded-full transition-all duration-300\" \n                  style={{ width: `${progress}%` }}\n                ></div>\n              </div>\n              <p className=\"text-xs mt-1 text-right\">{progress}% completado</p>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {validEvents.map((event, index) => (\n            <div \n              key={index} \n              className=\"p-3 bg-indigo-50 border border-indigo-100 rounded-md\"\n            >\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <div className=\"text-sm font-medium\">{event.title}</div>\n                  <div className=\"text-xs text-gray-500\">\n                    {format(event.date, 'EEEE, d MMMM yyyy', { locale: es })} · {format(event.date, 'HH:mm')}\n                  </div>\n                  {event.location && (\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      <span className=\"font-medium\">Ubicación:</span> {event.location}\n                    </div>\n                  )}\n                </div>\n                <button\n                  onClick={() => onEventDetected(event)}\n                  className=\"px-3 py-1 bg-indigo-500 hover:bg-indigo-600 text-white text-xs rounded-md transition\"\n                  aria-label=\"Añadir al calendario\"\n                >\n                  Añadir al calendario\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nEventDetector.propTypes = {\n  /** Contenido del email donde buscar eventos */\n  emailContent: PropTypes.string.isRequired,\n  /** Asunto del email para generar títulos de eventos */\n  emailSubject: PropTypes.string,\n  /** Función a llamar cuando el usuario quiere añadir un evento detectado */\n  onEventDetected: PropTypes.func.isRequired\n};\n\nexport default EventDetector;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\FolderSelectionModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\MailgunTester.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":5,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { sendEmail, validateEmail, checkUsernameAvailability } from '../../services/mailgunService';\nimport { \n  Box, Button, TextField, Typography, Paper, Grid, \n  Snackbar, Alert, CircularProgress, Divider\n} from '@mui/material';\n\n/**\n * Componente para probar las funcionalidades de Mailgun\n * Permite probar envío de emails, validación y disponibilidad de nombres de usuario\n */\nfunction MailgunTester() {\n  // Estado para formulario de envío de email\n  const [sending, setSending] = useState(false);\n  const [emailForm, setEmailForm] = useState({\n    from: `Test <test@mg.mywed360.com>`,\n    to: '',\n    subject: 'Prueba de Mailgun desde myWed360',\n    text: 'Este es un correo de prueba enviado desde la aplicación myWed360.',\n  });\n  \n  // Estado para validación de email\n  const [validating, setValidating] = useState(false);\n  const [emailToValidate, setEmailToValidate] = useState('');\n  const [validationResult, setValidationResult] = useState(null);\n  \n  // Estado para verificación de disponibilidad de username\n  const [checking, setChecking] = useState(false);\n  const [usernameToCheck, setUsernameToCheck] = useState('');\n  const [availabilityResult, setAvailabilityResult] = useState(null);\n  \n  // Estado para notificaciones\n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n\n  // Manejar cambios en el formulario de email\n  const handleEmailFormChange = (e) => {\n    const { name, value } = e.target;\n    setEmailForm(prev => ({ ...prev, [name]: value }));\n  };\n\n  // Enviar email de prueba\n  const handleSendEmail = async (e) => {\n    e.preventDefault();\n    setSending(true);\n    \n    try {\n      const result = await sendEmail(emailForm);\n      setNotification({\n        open: true,\n        message: `Email enviado correctamente! ID: ${result.messageId}`,\n        severity: 'success'\n      });\n      console.log('Respuesta del servidor:', result);\n    } catch (error) {\n      setNotification({\n        open: true,\n        message: `Error al enviar email: ${error.message}`,\n        severity: 'error'\n      });\n      console.error('Error al enviar:', error);\n    } finally {\n      setSending(false);\n    }\n  };\n\n  // Validar email\n  const handleValidateEmail = async (e) => {\n    e.preventDefault();\n    setValidating(true);\n    \n    try {\n      const result = await validateEmail(emailToValidate);\n      setValidationResult(result);\n      setNotification({\n        open: true,\n        message: result.isValid \n          ? 'El email es válido' \n          : `El email no es válido: ${result.reason || 'formato incorrecto'}`,\n        severity: result.isValid ? 'success' : 'warning'\n      });\n    } catch (error) {\n      setNotification({\n        open: true,\n        message: `Error al validar: ${error.message}`,\n        severity: 'error'\n      });\n      setValidationResult(null);\n    } finally {\n      setValidating(false);\n    }\n  };\n\n  // Verificar disponibilidad de nombre de usuario\n  const handleCheckAvailability = async (e) => {\n    e.preventDefault();\n    setChecking(true);\n    \n    try {\n      const isAvailable = await checkUsernameAvailability(usernameToCheck);\n      setAvailabilityResult(isAvailable);\n      setNotification({\n        open: true,\n        message: isAvailable \n          ? `El nombre de usuario \"${usernameToCheck}\" está disponible` \n          : `El nombre de usuario \"${usernameToCheck}\" ya está en uso`,\n        severity: isAvailable ? 'success' : 'warning'\n      });\n    } catch (error) {\n      setNotification({\n        open: true,\n        message: `Error al verificar disponibilidad: ${error.message}`,\n        severity: 'error'\n      });\n      setAvailabilityResult(null);\n    } finally {\n      setChecking(false);\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3, maxWidth: 800, mx: 'auto' }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Probador de Mailgun myWed360\n      </Typography>\n      \n      <Grid container spacing={4}>\n        {/* Sección de envío de correo */}\n        <Grid item xs={12}>\n          <Paper elevation={3} sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              1. Enviar Email de Prueba\n            </Typography>\n            <Box component=\"form\" onSubmit={handleSendEmail} sx={{ mt: 2 }}>\n              <TextField\n                label=\"Desde\"\n                name=\"from\"\n                value={emailForm.from}\n                onChange={handleEmailFormChange}\n                fullWidth\n                margin=\"normal\"\n                required\n              />\n              <TextField\n                label=\"Para\"\n                name=\"to\"\n                value={emailForm.to}\n                onChange={handleEmailFormChange}\n                fullWidth\n                margin=\"normal\"\n                required\n                placeholder=\"ejemplo@gmail.com\"\n              />\n              <TextField\n                label=\"Asunto\"\n                name=\"subject\"\n                value={emailForm.subject}\n                onChange={handleEmailFormChange}\n                fullWidth\n                margin=\"normal\"\n                required\n              />\n              <TextField\n                label=\"Mensaje\"\n                name=\"text\"\n                value={emailForm.text}\n                onChange={handleEmailFormChange}\n                fullWidth\n                margin=\"normal\"\n                multiline\n                rows={4}\n                required\n              />\n              <Button \n                type=\"submit\" \n                variant=\"contained\" \n                color=\"primary\" \n                sx={{ mt: 2 }}\n                disabled={sending}\n              >\n                {sending ? <CircularProgress size={24} /> : 'Enviar Email'}\n              </Button>\n            </Box>\n          </Paper>\n        </Grid>\n        \n        {/* Sección de validación de email */}\n        <Grid item xs={12} md={6}>\n          <Paper elevation={3} sx={{ p: 3, height: '100%' }}>\n            <Typography variant=\"h6\" gutterBottom>\n              2. Validar Email\n            </Typography>\n            <Box component=\"form\" onSubmit={handleValidateEmail}>\n              <TextField\n                label=\"Email para validar\"\n                value={emailToValidate}\n                onChange={(e) => setEmailToValidate(e.target.value)}\n                fullWidth\n                margin=\"normal\"\n                required\n                placeholder=\"ejemplo@gmail.com\"\n              />\n              <Button \n                type=\"submit\" \n                variant=\"contained\" \n                color=\"secondary\" \n                sx={{ mt: 2 }}\n                disabled={validating}\n              >\n                {validating ? <CircularProgress size={24} /> : 'Validar'}\n              </Button>\n              \n              {validationResult && (\n                <Box sx={{ mt: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>\n                  <Typography variant=\"body1\" color={validationResult.isValid ? 'success.main' : 'error.main'}>\n                    {validationResult.isValid ? '✅ Email válido' : '❌ Email inválido'}\n                  </Typography>\n                </Box>\n              )}\n            </Box>\n          </Paper>\n        </Grid>\n        \n        {/* Sección de verificación de disponibilidad */}\n        <Grid item xs={12} md={6}>\n          <Paper elevation={3} sx={{ p: 3, height: '100%' }}>\n            <Typography variant=\"h6\" gutterBottom>\n              3. Verificar Disponibilidad\n            </Typography>\n            <Box component=\"form\" onSubmit={handleCheckAvailability}>\n              <TextField\n                label=\"Nombre de usuario\"\n                value={usernameToCheck}\n                onChange={(e) => setUsernameToCheck(e.target.value)}\n                fullWidth\n                margin=\"normal\"\n                required\n                placeholder=\"nombre\"\n                helperText=\"Solo el nombre sin @mywed360.com\"\n              />\n              <Button \n                type=\"submit\" \n                variant=\"contained\" \n                color=\"secondary\" \n                sx={{ mt: 2 }}\n                disabled={checking}\n              >\n                {checking ? <CircularProgress size={24} /> : 'Verificar Disponibilidad'}\n              </Button>\n              \n              {availabilityResult !== null && (\n                <Box sx={{ mt: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>\n                  <Typography variant=\"body1\" color={availabilityResult ? 'success.main' : 'error.main'}>\n                    {availabilityResult \n                      ? `✅ \"${usernameToCheck}@mywed360.com\" está disponible` \n                      : `❌ \"${usernameToCheck}@mywed360.com\" ya está en uso`}\n                  </Typography>\n                </Box>\n              )}\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n      \n      <Snackbar \n        open={notification.open} \n        autoHideDuration={6000} \n        onClose={() => setNotification({...notification, open: false})}\n      >\n        <Alert \n          onClose={() => setNotification({...notification, open: false})} \n          severity={notification.severity}\n          variant=\"filled\"\n          sx={{ width: '100%' }}\n        >\n          {notification.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n}\n\nexport default MailgunTester;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\SmartEmailComposer.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'Collapse' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'InsertDriveFile' is defined but never used.","line":25,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'setCategory' is assigned a value but never used.","line":54,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'recommendationService' is assigned a value but never used.","line":60,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":30},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":118,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":121,"endColumn":42},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":132,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":132,"endColumn":84},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":151,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":151,"endColumn":37},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":154,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":154,"endColumn":23},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":163,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":163,"endColumn":194}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Grid, \n  Paper, \n  Typography, \n  TextField, \n  Button, \n  Divider, \n  IconButton,\n  Tooltip,\n  Collapse,\n  Alert,\n  Snackbar,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem\n} from '@mui/material';\nimport Send from '@mui/icons-material/Send';\nimport Lightbulb from '@mui/icons-material/Lightbulb';\nimport LightbulbOutlined from '@mui/icons-material/LightbulbOutlined';\nimport Schedule from '@mui/icons-material/Schedule';\nimport AccessTime from '@mui/icons-material/AccessTime';\nimport InsertDriveFile from '@mui/icons-material/InsertDriveFile';\nimport EmailRecommendationService from '../../services/EmailRecommendationService';\nimport EmailRecommendationsPanel from './EmailRecommendationsPanel';\n\n/**\n * Componente para componer correos con recomendaciones inteligentes integradas\n * @param {Object} props - Propiedades del componente\n * @param {Object} props.provider - Proveedor al que se enviará el correo (opcional)\n * @param {string} props.searchQuery - Consulta de búsqueda original (opcional)\n * @param {Function} props.onSend - Función llamada al enviar el correo\n * @param {Function} props.onCancel - Función llamada al cancelar\n * @param {Array} props.templates - Lista de plantillas disponibles (opcional)\n */\nconst SmartEmailComposer = ({ \n  provider, \n  searchQuery, \n  onSend, \n  onCancel,\n  templates = []\n}) => {\n  // Estado del formulario\n  const [subject, setSubject] = useState('');\n  const [message, setMessage] = useState('');\n  const [selectedTemplate, setSelectedTemplate] = useState('');\n  const [scheduledTime, setScheduledTime] = useState('');\n  \n  // Estado de las recomendaciones\n  const [showRecommendations, setShowRecommendations] = useState(false);\n  const [feedback, setFeedback] = useState(null);\n  const [category, setCategory] = useState(provider?.service || null);\n  \n  // Para seguimiento de recomendaciones aplicadas\n  const [appliedRecommendations, setAppliedRecommendations] = useState([]);\n  \n  // Servicio de recomendaciones\n  const recommendationService = new EmailRecommendationService();\n  \n  // Cargar plantilla inicial si hay proveedor y categoría\n  useEffect(() => {\n    if (provider && category && templates.length > 0) {\n      const categoryTemplate = templates.find(t => t.category === category);\n      if (categoryTemplate) {\n        setSelectedTemplate(categoryTemplate.id);\n        \n        // Pre-rellenar el asunto y mensaje con la plantilla\n        setSubject(categoryTemplate.subjectTemplate\n          .replace('[Proveedor]', provider.name || 'proveedor')\n          .replace('[Servicio]', provider.service || 'servicio'));\n        \n        setMessage(categoryTemplate.messageTemplate\n          .replace('[Proveedor]', provider.name || 'proveedor')\n          .replace('[Servicio]', provider.service || 'servicio'));\n      }\n    }\n  }, [provider, category, templates]);\n  \n  // Manejar envío del correo\n  const handleSend = () => {\n    if (!subject || !message) {\n      setFeedback({\n        type: 'error',\n        message: 'Por favor, completa el asunto y el mensaje antes de enviar.'\n      });\n      return;\n    }\n    \n    // Preparar datos del correo\n    const emailData = {\n      to: provider?.email || '',\n      subject,\n      message,\n      scheduledTime: scheduledTime || null,\n      provider,\n      searchQuery,\n      wasCustomized: appliedRecommendations.length > 0,\n      appliedRecommendations\n    };\n    \n    // Llamar a la función de envío proporcionada por el padre\n    if (onSend) {\n      onSend(emailData);\n    }\n  };\n  \n  // Manejar aplicación de recomendaciones\n  const handleApplyRecommendation = (type, data) => {\n    // Registrar la recomendación aplicada\n    setAppliedRecommendations([...appliedRecommendations, { type, timestamp: new Date().toISOString() }]);\n    \n    // Aplicar la recomendación según su tipo\n    switch (type) {\n      case 'subject':\n        // Aplicar el patrón de asunto recomendado\n        const newSubject = data\n          .replace('[Servicio]', provider?.service || 'servicio')\n          .replace('[Fecha]', 'próximamente')\n          .replace('[Evento]', 'evento');\n        \n        setSubject(newSubject);\n        setFeedback({\n          type: 'success',\n          message: 'Línea de asunto actualizada con la recomendación'\n        });\n        break;\n        \n      case 'template':\n        // Buscar la plantilla recomendada\n        const template = templates.find(t => t.category === data || t.id === data);\n        if (template) {\n          setSelectedTemplate(template.id);\n          \n          // Actualizar el mensaje con la plantilla\n          const templateMessage = template.messageTemplate\n            .replace('[Proveedor]', provider?.name || 'proveedor')\n            .replace('[Servicio]', provider?.service || 'servicio');\n          \n          setMessage(templateMessage);\n          setFeedback({\n            type: 'success',\n            message: `Plantilla \"${template.name}\" aplicada`\n          });\n        }\n        break;\n        \n      case 'time':\n        // Programar el envío para la franja horaria recomendada\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        \n        let hour = 10; // Por defecto a media mañana\n        \n        // Ajustar hora según la franja recomendada\n        if (data.bestTimeSlot === 'morning') hour = 10;\n        else if (data.bestTimeSlot === 'afternoon') hour = 14;\n        else if (data.bestTimeSlot === 'evening') hour = 18;\n        else if (data.bestTimeSlot === 'night') hour = 21;\n        \n        // Formatear fecha para input datetime-local\n        const scheduledDate = `${tomorrow.getFullYear()}-${String(tomorrow.getMonth() + 1).padStart(2, '0')}-${String(tomorrow.getDate()).padStart(2, '0')}T${String(hour).padStart(2, '0')}:00`;\n        \n        setScheduledTime(scheduledDate);\n        setFeedback({\n          type: 'success',\n          message: `Correo programado para mañana a las ${hour}:00h (${data.bestTimeSlotName})`\n        });\n        break;\n        \n      default:\n        console.log('Tipo de recomendación no implementado:', type, data);\n    }\n  };\n  \n  // Cambiar plantilla seleccionada\n  const handleTemplateChange = (e) => {\n    const templateId = e.target.value;\n    setSelectedTemplate(templateId);\n    \n    if (templateId) {\n      const template = templates.find(t => t.id === templateId);\n      if (template) {\n        // Actualizar el mensaje con la plantilla\n        const templateMessage = template.messageTemplate\n          .replace('[Proveedor]', provider?.name || 'proveedor')\n          .replace('[Servicio]', provider?.service || 'servicio');\n        \n        setMessage(templateMessage);\n      }\n    }\n  };\n  \n  // Cerrar alerta de feedback\n  const handleCloseFeedback = () => {\n    setFeedback(null);\n  };\n  \n  return (\n    <Box sx={{ p: 2 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Redactar Correo\n        {provider && (\n          <Typography component=\"span\" variant=\"subtitle1\" sx={{ ml: 1 }}>\n            a {provider.name}\n          </Typography>\n        )}\n      </Typography>\n      \n      <Grid container spacing={2}>\n        <Grid item xs={12} md={showRecommendations ? 7 : 12}>\n          <Paper sx={{ p: 2 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\n              <Typography variant=\"h6\">Mensaje</Typography>\n              <Tooltip title={showRecommendations ? \"Ocultar recomendaciones\" : \"Mostrar recomendaciones\"}>\n                <IconButton onClick={() => setShowRecommendations(!showRecommendations)}>\n                  {showRecommendations ? <Lightbulb color=\"primary\" /> : <LightbulbOutlined />}\n                </IconButton>\n              </Tooltip>\n            </Box>\n            \n            <Grid container spacing={2}>\n              {/* Asunto */}\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Asunto\"\n                  value={subject}\n                  onChange={(e) => setSubject(e.target.value)}\n                  variant=\"outlined\"\n                  placeholder=\"Escribe un asunto efectivo...\"\n                />\n              </Grid>\n              \n              {/* Selección de plantilla */}\n              {templates.length > 0 && (\n                <Grid item xs={12}>\n                  <FormControl fullWidth>\n                    <InputLabel id=\"template-select-label\">Plantilla</InputLabel>\n                    <Select\n                      labelId=\"template-select-label\"\n                      value={selectedTemplate}\n                      label=\"Plantilla\"\n                      onChange={handleTemplateChange}\n                    >\n                      <MenuItem value=\"\">\n                        <em>Ninguna</em>\n                      </MenuItem>\n                      {templates.map(template => (\n                        <MenuItem key={template.id} value={template.id}>\n                          {template.name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              )}\n              \n              {/* Mensaje */}\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  multiline\n                  rows={8}\n                  label=\"Mensaje\"\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  variant=\"outlined\"\n                  placeholder=\"Escribe tu mensaje aquí...\"\n                />\n              </Grid>\n              \n              {/* Programación de envío */}\n              <Grid item xs={12}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <AccessTime color=\"action\" />\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Programar envío:\n                  </Typography>\n                  <TextField\n                    type=\"datetime-local\"\n                    value={scheduledTime}\n                    onChange={(e) => setScheduledTime(e.target.value)}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    sx={{ ml: 1 }}\n                    size=\"small\"\n                  />\n                  {scheduledTime && (\n                    <Button \n                      size=\"small\"\n                      onClick={() => setScheduledTime('')}\n                      sx={{ ml: 1 }}\n                    >\n                      Limpiar\n                    </Button>\n                  )}\n                </Box>\n              </Grid>\n              \n              {/* Botones de acción */}\n              <Grid item xs={12}>\n                <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, mt: 2 }}>\n                  <Button \n                    variant=\"outlined\" \n                    onClick={onCancel}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    variant=\"contained\" \n                    startIcon={scheduledTime ? <Schedule /> : <Send />}\n                    onClick={handleSend}\n                  >\n                    {scheduledTime ? 'Programar' : 'Enviar'}\n                  </Button>\n                </Box>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n        \n        {/* Panel de recomendaciones */}\n        {showRecommendations && (\n          <Grid item xs={12} md={5}>\n            <Paper sx={{ height: '100%', overflow: 'auto' }}>\n              <EmailRecommendationsPanel \n                category={category}\n                searchQuery={searchQuery}\n                onApplyRecommendation={handleApplyRecommendation}\n              />\n            </Paper>\n          </Grid>\n        )}\n      </Grid>\n      \n      {/* Alertas de feedback */}\n      <Snackbar \n        open={!!feedback} \n        autoHideDuration={6000} \n        onClose={handleCloseFeedback}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert \n          onClose={handleCloseFeedback} \n          severity={feedback?.type || 'info'} \n          sx={{ width: '100%' }}\n        >\n          {feedback?.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default SmartEmailComposer;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\TagsManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":2,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'Circle' is defined but never used.","line":2,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'getUserTags' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":14}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Tag, Plus, Edit, Trash, X, Check, Circle } from 'lucide-react';\nimport Button from '../Button';\nimport { useAuth } from '../../hooks/useAuth';\nimport { \n  getUserTags,\n  getCustomTags, \n  createTag, \n  deleteTag,\n  SYSTEM_TAGS\n} from '../../services/tagService';\nimport { toast } from 'react-toastify';\n\n/**\n * Componente para administrar todas las etiquetas del usuario\n */\nconst TagsManager = () => {\n  const [tags, setTags] = useState([]);\n  const [systemTags, setSystemTags] = useState([]);\n  const [isCreating, setIsCreating] = useState(false);\n  const [newTagName, setNewTagName] = useState('');\n  const [newTagColor, setNewTagColor] = useState('#64748b'); // Color predeterminado\n  const { currentUser } = useAuth();\n  \n  // Colores disponibles para etiquetas\n  const colorOptions = [\n    '#e53e3e', // Rojo\n    '#dd6b20', // Naranja\n    '#d69e2e', // Amarillo\n    '#38a169', // Verde\n    '#3182ce', // Azul\n    '#805ad5', // Morado\n    '#d53f8c', // Rosa\n    '#64748b', // Gris\n    '#000000', // Negro\n  ];\n  \n  // Cargar etiquetas al montar el componente\n  useEffect(() => {\n    if (!currentUser) return;\n    loadTags();\n  }, [currentUser]);\n  \n  // Cargar etiquetas del usuario\n  const loadTags = () => {\n    if (!currentUser) return;\n    \n    // Obtener etiquetas personalizadas\n    const customTags = getCustomTags(currentUser.uid);\n    setTags(customTags);\n    \n    // Establecer etiquetas del sistema\n    setSystemTags(SYSTEM_TAGS);\n  };\n  \n  // Crear nueva etiqueta\n  const handleCreateTag = () => {\n    if (!currentUser || !newTagName.trim()) return;\n    \n    try {\n      // Crear etiqueta\n      createTag(currentUser.uid, newTagName.trim(), newTagColor);\n      \n      // Limpiar formulario\n      setNewTagName('');\n      setNewTagColor('#64748b');\n      setIsCreating(false);\n      \n      // Recargar etiquetas\n      loadTags();\n      \n      // Notificar éxito\n      toast.success(`Etiqueta \"${newTagName.trim()}\" creada con éxito`);\n    } catch (error) {\n      console.error('Error al crear etiqueta:', error);\n      toast.error(`Error: ${error.message || 'No se pudo crear la etiqueta'}`);\n    }\n  };\n  \n  // Eliminar etiqueta\n  const handleDeleteTag = (tagId, tagName) => {\n    if (!currentUser) return;\n    \n    if (confirm(`¿Estás seguro de eliminar la etiqueta \"${tagName}\"?`)) {\n      try {\n        // Eliminar etiqueta\n        deleteTag(currentUser.uid, tagId);\n        \n        // Recargar etiquetas\n        loadTags();\n        \n        // Notificar éxito\n        toast.success(`Etiqueta \"${tagName}\" eliminada con éxito`);\n      } catch (error) {\n        console.error('Error al eliminar etiqueta:', error);\n        toast.error(`Error: ${error.message || 'No se pudo eliminar la etiqueta'}`);\n      }\n    }\n  };\n  \n  return (\n    <div className=\"bg-white border rounded-md overflow-hidden\">\n      <div className=\"px-4 py-3 border-b\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Gestionar etiquetas</h3>\n        <p className=\"mt-1 text-sm text-gray-600\">\n          Crea y organiza etiquetas para clasificar tus correos\n        </p>\n      </div>\n      \n      <div className=\"px-4 py-3\">\n        <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Etiquetas del sistema</h4>\n        <div className=\"space-y-2 mb-4\">\n          {systemTags.map((tag) => (\n            <div key={tag.id} className=\"flex items-center justify-between py-2 px-3 bg-gray-50 rounded-md\">\n              <div className=\"flex items-center\">\n                <div \n                  className=\"w-3 h-3 rounded-full mr-2\"\n                  style={{ backgroundColor: tag.color }}\n                />\n                <span className=\"text-sm font-medium\">{tag.name}</span>\n              </div>\n              <span className=\"text-xs text-gray-500 italic\">Predefinida</span>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"border-t border-gray-200 pt-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h4 className=\"text-sm font-medium text-gray-700\">Etiquetas personalizadas</h4>\n            {!isCreating && (\n              <Button \n                onClick={() => setIsCreating(true)}\n                variant=\"secondary\"\n                size=\"sm\"\n                className=\"text-xs py-1 px-2\"\n              >\n                <Plus size={14} className=\"mr-1\" />\n                Nueva etiqueta\n              </Button>\n            )}\n          </div>\n          \n          {/* Formulario para crear etiqueta */}\n          {isCreating && (\n            <div className=\"mb-4 p-3 border border-gray-200 bg-gray-50 rounded-md\">\n              <div className=\"mb-2\">\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                  Nombre de la etiqueta\n                </label>\n                <input\n                  type=\"text\"\n                  value={newTagName}\n                  onChange={(e) => setNewTagName(e.target.value)}\n                  placeholder=\"Nombre de la etiqueta\"\n                  className=\"w-full px-3 py-1.5 border border-gray-300 rounded-md text-sm shadow-sm focus:outline-none focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500\"\n                />\n              </div>\n              \n              <div className=\"mb-3\">\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                  Color\n                </label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {colorOptions.map((color) => (\n                    <div\n                      key={color}\n                      onClick={() => setNewTagColor(color)}\n                      style={{ backgroundColor: color }}\n                      className={`w-6 h-6 rounded-full cursor-pointer flex items-center justify-center ${newTagColor === color ? 'ring-2 ring-offset-2 ring-gray-400' : ''}`}\n                    >\n                      {newTagColor === color && (\n                        <Check size={14} className=\"text-white\" />\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"flex space-x-2 mt-2\">\n                <Button \n                  onClick={handleCreateTag}\n                  disabled={!newTagName.trim()}\n                  className=\"text-xs py-1.5\"\n                  size=\"sm\"\n                >\n                  <Check size={14} className=\"mr-1\" />\n                  Crear etiqueta\n                </Button>\n                <Button \n                  onClick={() => {\n                    setIsCreating(false);\n                    setNewTagName('');\n                    setNewTagColor('#64748b');\n                  }}\n                  variant=\"secondary\"\n                  className=\"text-xs py-1.5\"\n                  size=\"sm\"\n                >\n                  <X size={14} className=\"mr-1\" />\n                  Cancelar\n                </Button>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"space-y-2\">\n            {tags.length === 0 && !isCreating && (\n              <p className=\"text-sm text-gray-500 text-center py-4\">\n                No has creado etiquetas personalizadas\n              </p>\n            )}\n            \n            {tags.map((tag) => (\n              <div key={tag.id} className=\"flex items-center justify-between py-2 px-3 border border-gray-200 rounded-md\">\n                <div className=\"flex items-center\">\n                  <div \n                    className=\"w-3 h-3 rounded-full mr-2\"\n                    style={{ backgroundColor: tag.color }}\n                  />\n                  <span className=\"text-sm\">{tag.name}</span>\n                </div>\n                <Button \n                  onClick={() => handleDeleteTag(tag.id, tag.name)}\n                  variant=\"danger\"\n                  className=\"text-xs py-1 px-2\"\n                  size=\"sm\"\n                >\n                  <Trash size={14} />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TagsManager;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\UnifiedEmailSystem.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\UnifiedInbox\\EmailCategoryLabel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\UnifiedInbox\\EmailDetail.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'memo' is defined but never used.","line":1,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'toBlob' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'IconArrowLeft' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'IconReply' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'IconTrash' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'IconDownload' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'IconStar' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'IconMore' is defined but never used.","line":15,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'IconExternal' is defined but never used.","line":16,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'IconPrinter' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'IconFlag' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'IconArrowLeftRight' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'IconFolderMove' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'setLoadingImages' is assigned a value but never used.","line":63,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'getMimeType' is assigned a value but never used.","line":126,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":126,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowLeft' is not defined.","line":225,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":225,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Reply' is not defined.","line":235,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":235,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash' is not defined.","line":245,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":245,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Star' is not defined.","line":253,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":253,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MoreHorizontal' is not defined.","line":262,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":262,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Printer' is not defined.","line":269,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":269,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":273,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":273,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":277,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":277,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowLeftRight' is not defined.","line":281,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":281,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Flag' is not defined.","line":285,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":285,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":434,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":434,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Reply' is not defined.","line":494,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":494,"endColumn":19}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, memo } from 'react';\nimport sanitizeHtml from '../../../utils/sanitizeHtml';\nimport EmailComments from '../EmailComments';\n// Importación problemática eliminada temporalmente\n// import { Viewer } from 'react-tiff';\nimport { toBlob } from 'html-to-image';\n\n// Importamos nuestros componentes de iconos personalizados\nimport {\n  IconArrowLeft,\n  IconReply,\n  IconTrash,\n  IconDownload,\n  IconStar,\n  IconMoreHorizontal as IconMore,\n  IconExternalLink as IconExternal,\n  IconPrinter,\n  IconFlag,\n  IconArrowLeftRight,\n  IconFolderMove\n} from '../../ui/IconComponents';\nimport Button from '../../Button';\nimport EmailCategoryLabel from './EmailCategoryLabel';\n\n/**\n * Componente para mostrar el detalle completo de un email\n * \n * @param {Object} props - Propiedades del componente\n * @param {Object} props.email - Email a mostrar\n * @param {Function} props.onReply - Función para responder al email\n * @param {Function} props.onDelete - Función para eliminar el email\n * @param {Function} props.onBack - Función para volver a la lista\n * @param {Function} props.onMarkRead - Función para marcar como leído\n * @returns {JSX.Element} Componente de detalle de email\n */\n\n// Constantes para tipos de archivos\nconst IMAGE_TYPES = {\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'png': 'image/png',\n  'gif': 'image/gif',\n  'webp': 'image/webp',\n  'svg': 'image/svg+xml',\n  'tiff': 'image/tiff',\n  'tif': 'image/tiff',\n  'bmp': 'image/bmp',\n  'ico': 'image/x-icon'\n};\nconst EmailDetail = ({ email, onReply, onDelete, onBack, onMarkRead }) => {\n  // Si email es null o undefined, mostrar un mensaje\n  if (!email) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-full p-8 text-gray-500\">\n        <p className=\"text-lg\">Selecciona un email para ver su contenido</p>\n      </div>\n    );\n  }\n  const [isStarred, setIsStarred] = useState(email?.important || false);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [isRead, setIsRead] = useState(email?.read || false);\n  const [expandedImage, setExpandedImage] = useState(null);\n  const [loadingImages, setLoadingImages] = useState({});\n  const prevEmailIdRef = useRef(email?.id);\n  \n  // Efecto para actualizar el estado visual cuando cambia el email seleccionado\n  useEffect(() => {\n    if (email?.id !== prevEmailIdRef.current) {\n      setIsRead(email?.read || false);\n      prevEmailIdRef.current = email?.id;\n    }\n  }, [email?.id, email?.read]);\n  \n  // Efecto para marcar automáticamente como leído cuando se visualiza un email no leído\n  useEffect(() => {\n    if (email && !isRead) {\n      setIsRead(true); // Actualizar inmediatamente el estado visual\n      if (onMarkRead) {\n        // Notificar al componente padre que debe actualizar el estado\n        onMarkRead(email.id);\n      }\n    }\n  }, [email, isRead, onMarkRead]);\n\n  if (!email) {\n    return (\n      <div className=\"h-full flex items-center justify-center text-gray-500\">\n        Selecciona un email para ver su contenido\n      </div>\n    );\n  }\n\n  // Función para manejar el marcado como importante\n  const handleToggleStar = () => {\n    setIsStarred(!isStarred);\n    // Actualizar en el servidor y notificar al componente padre\n    // Esta función debería conectarse con el servicio de email\n    // por ahora solo actualizamos el estado local\n  };\n\n  // Formatear la fecha completa\n  const formatFullDate = (dateString) => {\n    return new Date(dateString).toLocaleString('es-ES', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Obtener extensión del archivo\n  const getFileExtension = (filename) => {\n    if (!filename) return '';\n    return filename.split('.').pop().toLowerCase();\n  };\n  \n  // Verificar si el archivo es una imagen\n  const isImageFile = (filename) => {\n    const ext = getFileExtension(filename);\n    return Object.keys(IMAGE_TYPES).includes(ext);\n  };\n  \n  // Obtener tipo MIME basado en la extensión\n  const getMimeType = (filename) => {\n    const ext = getFileExtension(filename);\n    return IMAGE_TYPES[ext] || 'application/octet-stream';\n  };\n  \n  // Manejar click en una imagen adjunta\n  const handleImageClick = (attachment) => {\n    setExpandedImage(attachment);\n  };\n  \n  // Cerrar visualizador de imagen\n  const handleCloseImageViewer = () => {\n    setExpandedImage(null);\n  };\n  \n  // Manejar la descarga de un archivo adjunto\n  const handleDownloadAttachment = (attachment) => {\n    // Aquí implementaríamos la lógica de descarga\n    console.log('Descargando:', attachment.filename);\n    // Idealmente, esto conectaría con un endpoint de la API\n  };\n  \n  // Obtener iniciales para el avatar\n  const getInitials = (emailAddress) => {\n    if (!emailAddress) return '?';\n    \n    const name = emailAddress.split('@')[0].replace(/[^a-zA-Z0-9]/g, ' ').trim();\n    const parts = name.split(' ').filter(part => part.length > 0);\n    \n    if (parts.length === 0) return '?';\n    if (parts.length === 1) return parts[0][0].toUpperCase();\n    \n    return (parts[0][0] + parts[parts.length - 1][0]).toUpperCase();\n  };\n\n  // Procesar el contenido HTML del email de forma segura\n  const getSafeHtml = (htmlContent) => {\n    return sanitizeHtml(htmlContent || '');\n  };\n    \n    \n\n    \n  \n  // Obtener color para el avatar basado en el remitente\n  const getAvatarColor = (email) => {\n    const colors = [\n      'bg-blue-500',\n      'bg-green-500',\n      'bg-yellow-500',\n      'bg-purple-500',\n      'bg-pink-500',\n      'bg-indigo-500',\n      'bg-red-500',\n      'bg-teal-500'\n    ];\n    \n    // Usar una función simple de hash para asignar un color consistente\n    let hash = 0;\n    for (let i = 0; i < email.length; i++) {\n      hash = ((hash << 5) - hash) + email.charCodeAt(i);\n      hash |= 0;\n    }\n    \n    const colorIndex = Math.abs(hash) % colors.length;\n    return colors[colorIndex];\n  };\n\n  // Detectar las categorías del email\n  const detectCategories = (email) => {\n    const categories = [];\n    \n    // Ejemplo de lógica para detectar categorías\n    if (email.from.includes('proveedor') || email.subject.toLowerCase().includes('proveedor')) {\n      categories.push({ name: 'Proveedor', color: 'bg-blue-500' });\n    }\n    \n    if (email.from.includes('invitado') || email.subject.toLowerCase().includes('invitado')) {\n      categories.push({ name: 'Invitado', color: 'bg-green-500' });\n    }\n    \n    if (email.subject.toLowerCase().includes('importante') || email.important) {\n      categories.push({ name: 'Importante', color: 'bg-yellow-500' });\n    }\n    \n    return categories;\n  };\n\n  const emailCategories = detectCategories(email);\n\n  return (\n    <div className=\"flex flex-col h-full bg-white\">\n      {/* Barra de herramientas */}\n      <div className=\"p-4 border-b flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          <button \n            onClick={onBack}\n            className=\"mr-4 text-gray-600 hover:text-gray-900 md:hidden\"\n          >\n            <ArrowLeft size={20} />\n          </button>\n          \n          <Button \n            onClick={onReply}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center mr-2\"\n            aria-label=\"Responder\"\n          >\n            <Reply size={16} className=\"mr-1\" />\n            <span className=\"hidden sm:inline\">Responder</span>\n          </Button>\n          \n          <Button\n            onClick={onDelete}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center mr-2\"\n          >\n            <Trash size={16} className=\"mr-1\" />\n            <span className=\"hidden sm:inline\">Eliminar</span>\n          </Button>\n          \n          <button\n            onClick={handleToggleStar}\n            className={`p-1.5 rounded-full hover:bg-gray-100 ${isStarred ? 'text-yellow-500' : 'text-gray-500'}`}\n          >\n            <Star size={20} className={isStarred ? 'fill-yellow-500' : ''} />\n          </button>\n        </div>\n        \n        <div className=\"relative\">\n          <button\n            onClick={() => setShowDropdown(!showDropdown)}\n            className=\"p-1.5 rounded-full hover:bg-gray-100 text-gray-600\"\n          >\n            <MoreHorizontal size={20} />\n          </button>\n          \n          {showDropdown && (\n            <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10 border\">\n              <div className=\"py-1\">\n                <button className=\"flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">\n                  <Printer size={16} className=\"mr-2\" />\n                  Imprimir\n                </button>\n                <button className=\"flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">\n                  <Download size={16} className=\"mr-2\" />\n                  Descargar\n                </button>\n                <button className=\"flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">\n                  <ExternalLink size={16} className=\"mr-2\" />\n                  Abrir en nueva ventana\n                </button>\n                <button className=\"flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">\n                  <ArrowLeftRight size={16} className=\"mr-2\" />\n                  Reenviar\n                </button>\n                <button className=\"flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">\n                  <Flag size={16} className=\"mr-2\" />\n                  Marcar\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Cabecera del email */}\n      <div className=\"p-6 border-b\">\n        <div className=\"flex items-start\">\n          <div className={`w-10 h-10 rounded-full ${getAvatarColor(email.from)} flex items-center justify-center text-white font-medium mr-4 flex-shrink-0`}>\n            {getInitials(email.from)}\n          </div>\n          \n          <div className=\"flex-grow\">\n            <div className=\"flex items-start justify-between\">\n              <h1 className=\"text-xl font-medium mb-2\">\n                {email.subject || '(Sin asunto)'}\n              </h1>\n            </div>\n            \n            <div className=\"flex flex-wrap items-center mb-1\">\n              <span className=\"font-medium mr-1\">{email.from}</span>\n              <span className=\"text-gray-500 text-sm mr-1\">para</span>\n              <span className=\"mr-2\">{email.to}</span>\n              \n              {email.cc && (\n                <>\n                  <span className=\"text-gray-500 text-sm mr-1\">cc:</span>\n                  <span>{email.cc}</span>\n                </>\n              )}\n            </div>\n            \n            <div className=\"text-gray-500 text-sm mb-2\">\n              {formatFullDate(email.date)}\n            </div>\n            \n            {emailCategories.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {emailCategories.map((category, index) => (\n                  <EmailCategoryLabel \n                    key={index}\n                    name={category.name}\n                    color={category.color}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Contenido del email */}\n      <div className=\"p-6 overflow-auto flex-grow\">\n        {email.body ? (\n          <div \n            className=\"prose max-w-none\"\n            dangerouslySetInnerHTML={{ __html: getSafeHtml(email.body) }}\n          />\n        ) : (\n          <div className=\"text-gray-500 italic\">\n            (Este mensaje no tiene contenido)\n          </div>\n        )}\n      </div>\n      \n      {/* Adjuntos si existen */}\n      {email.attachments && email.attachments.length > 0 && (\n        <div className=\"p-4 border-t\">\n          <h3 className=\"text-sm font-medium mb-2\">\n            Adjuntos ({email.attachments.length})\n          </h3>\n          \n          <div className=\"flex flex-wrap gap-3\">\n            {email.attachments.map((attachment, index) => {\n              const isImage = isImageFile(attachment.filename);\n              const fileExt = getFileExtension(attachment.filename);\n              const isTiff = fileExt === 'tiff' || fileExt === 'tif';\n              const isWebp = fileExt === 'webp';\n              \n              return (\n                <div \n                  key={index}\n                  className={`border rounded p-2 hover:border-blue-400 transition-all ${isImage ? 'cursor-zoom-in' : 'cursor-pointer'}`}\n                >\n                  {isImage ? (\n                    <div \n                      className=\"w-32 h-32 flex items-center justify-center overflow-hidden bg-gray-50 mb-1 relative\"\n                      onClick={() => handleImageClick(attachment)}\n                    >\n                      {isTiff ? (\n                        // Temporalmente deshabilitado el visor TIFF por problemas de compatibilidad\n                        <div className=\"text-center text-sm text-gray-400 p-2\">\n                          Imagen TIFF\n                          <div className=\"text-xs mt-1\">Visor temporalmente no disponible</div>\n                        </div>\n                      ) : isWebp ? (\n                        // Soporte específico para WebP\n                        <picture>\n                          <source srcSet={attachment.dataUrl} type=\"image/webp\" />\n                          <img \n                            src={attachment.dataUrl || '/placeholder-image.png'}\n                            alt={attachment.filename}\n                            className=\"max-h-full max-w-full object-contain\"\n                            onError={(e) => {\n                              e.target.onerror = null;\n                              e.target.src = '/placeholder-broken-image.png';\n                            }}\n                          />\n                        </picture>\n                      ) : (\n                        // Otras imágenes con fallback\n                        <img \n                          src={attachment.dataUrl || '/placeholder-image.png'}\n                          alt={attachment.filename}\n                          className=\"max-h-full max-w-full object-contain\"\n                          onError={(e) => {\n                            e.target.onerror = null;\n                            e.target.src = '/placeholder-broken-image.png';\n                          }}\n                        />\n                      )}\n                      {loadingImages[index] && (\n                        <div className=\"absolute inset-0 bg-white/70 flex items-center justify-center\">\n                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500\"></div>\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"w-32 h-32 flex items-center justify-center bg-gray-50 mb-1\">\n                      <div className=\"bg-gray-100 w-16 h-16 flex items-center justify-center rounded shadow-sm text-2xl\">\n                        📄\n                      </div>\n                    </div>\n                  )}\n                  <div className=\"w-32\">\n                    <div className=\"text-sm font-medium truncate\" title={attachment.filename}>\n                      {attachment.filename || `adjunto-${index+1}`}\n                    </div>\n                    <div className=\"text-xs text-gray-500 flex justify-between items-center mt-1\">\n                      <span>{attachment.size ? `${Math.round(attachment.size / 1024)} KB` : 'Tamaño desconocido'}</span>\n                      <button \n                        className=\"text-blue-600 hover:text-blue-800 p-1\"\n                        onClick={() => handleDownloadAttachment(attachment)}\n                        aria-label=\"Descargar archivo\"\n                      >\n                        <Download size={14} />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n      \n      {/* Visualizador de imagen expandida */}\n      {expandedImage && (\n        <div \n          className=\"fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4\"\n          onClick={handleCloseImageViewer}\n        >\n          <div className=\"max-w-4xl max-h-screen overflow-auto bg-white rounded-lg p-2\">\n            <div className=\"text-right mb-2\">\n              <button \n                className=\"text-gray-700 hover:text-gray-900 p-1 rounded-full hover:bg-gray-100\"\n                onClick={handleCloseImageViewer}\n              >\n                ✕\n              </button>\n            </div>\n            {getFileExtension(expandedImage.filename) === 'tiff' || \n             getFileExtension(expandedImage.filename) === 'tif' ? (\n              // Temporalmente deshabilitado el visor TIFF por problemas de compatibilidad\n              <div className=\"p-4 bg-gray-100 rounded text-center\">\n                <p className=\"text-gray-600 mb-2\">Vista previa de TIFF temporalmente no disponible</p>\n                <p className=\"text-sm text-gray-500\">El visor de archivos TIFF está siendo actualizado</p>\n              </div>\n            ) : (\n              <img \n                src={expandedImage.dataUrl} \n                alt={expandedImage.filename}\n                className=\"max-w-full\"\n              />\n            )}\n            <div className=\"mt-2 text-center text-sm text-gray-600\">\n              {expandedImage.filename}\n            </div>\n          </div>\n        </div>\n      )}\n\n      \n      {/* Panel de comentarios internos */}\n      <EmailComments emailId={email.id} />\n\n      {/* Acciones rápidas */}\n      <div className=\"p-4 border-t\">\n        <div className=\"flex space-x-2\">\n          <Button\n            onClick={onReply}\n            variant=\"primary\"\n            size=\"sm\"\n            className=\"flex items-center\"\n          >\n            <Reply size={16} className=\"mr-1\" />\n            Responder\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Exportación simple sin memo\nexport default EmailDetail;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\UnifiedInbox\\EmailDetailAdvanced.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\UnifiedInbox\\EmailList.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Search, \n  ArrowUp, \n  ArrowDown, \n  Trash, \n  Star, \n  AlertCircle,\n  Loader,\n  Star as StarIcon\n} from 'lucide-react';\nimport Button from '../../Button';\n\n/**\n * Componente que muestra una lista de emails con opciones de filtrado y ordenación\n * \n * @param {Object} props - Propiedades del componente\n * @param {Array} props.emails - Lista de emails a mostrar\n * @param {boolean} props.loading - Indicador de carga\n * @param {string} props.error - Mensaje de error si existe\n * @param {string} props.selectedEmailId - ID del email seleccionado\n * @param {Function} props.onSelectEmail - Función para seleccionar un email\n * @param {Function} props.onDeleteEmail - Función para eliminar un email\n * @param {Function} props.onSearch - Función para buscar emails\n * @param {string} props.searchTerm - Término de búsqueda actual\n * @param {string} props.sortField - Campo por el que ordenar\n * @param {string} props.sortDirection - Dirección de ordenación (asc/desc)\n * @param {Function} props.onSortChange - Función para cambiar ordenación\n * @param {string} props.currentFolder - Carpeta actual\n * @returns {JSX.Element} Componente de lista de emails\n */\nconst EmailList = ({\n  emails,\n  loading,\n  error,\n  selectedEmailId,\n  onSelectEmail,\n  onDeleteEmail,\n  onSearch,\n  searchTerm,\n  sortField,\n  sortDirection,\n  onSortChange,\n  currentFolder\n}) => {\n  const [selectedEmailIds, setSelectedEmailIds] = useState([]);\n\n  // Manejador para seleccionar varios emails\n  const handleToggleSelect = (emailId, event) => {\n    event.stopPropagation();\n    \n    if (selectedEmailIds.includes(emailId)) {\n      setSelectedEmailIds(prev => prev.filter(id => id !== emailId));\n    } else {\n      setSelectedEmailIds(prev => [...prev, emailId]);\n    }\n  };\n\n  // Manejador para seleccionar todos los emails\n  const handleSelectAll = () => {\n    if (selectedEmailIds.length === emails.length) {\n      setSelectedEmailIds([]);\n    } else {\n      setSelectedEmailIds(emails.map(email => email.id));\n    }\n  };\n\n  // Manejador para eliminar emails seleccionados\n  const handleDeleteSelected = () => {\n    selectedEmailIds.forEach(id => onDeleteEmail(id));\n    setSelectedEmailIds([]);\n  };\n\n  // Manejador para marcar como importante\n  const handleToggleImportant = (emailId, event) => {\n    event.stopPropagation();\n    // Aquí implementaremos la funcionalidad para marcar como importante\n    console.log('Marcar como importante:', emailId);\n  };\n\n  // Función para formatear la fecha\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    \n    // Si es de hoy, mostrar solo la hora\n    if (date.toDateString() === now.toDateString()) {\n      return date.toLocaleTimeString('es-ES', { \n        hour: '2-digit', \n        minute: '2-digit' \n      });\n    }\n    \n    // Si es de este año pero no de hoy, mostrar día y mes\n    if (date.getFullYear() === now.getFullYear()) {\n      return date.toLocaleDateString('es-ES', {\n        day: '2-digit',\n        month: '2-digit'\n      });\n    }\n    \n    // Si es de otro año, mostrar día/mes/año\n    return date.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: '2-digit'\n    });\n  };\n  \n  // Componente para renderizar mensaje de estado\n  const StatusMessage = ({ icon, message, className }) => (\n    <div className={`flex flex-col items-center justify-center py-16 ${className}`}>\n      {icon}\n      <p className=\"mt-4 text-sm\">{message}</p>\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Barra de búsqueda y acciones */}\n      <div className=\"p-4 border-b\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"relative flex-1 max-w-lg\">\n            <input\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => onSearch(e.target.value)}\n              placeholder=\"Buscar emails...\"\n              className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg w-full\"\n            />\n            <Search className=\"absolute left-3 top-2.5 text-gray-400\" size={18} />\n          </div>\n          \n          <div className=\"ml-4 flex space-x-2\">\n            <Button\n              disabled={selectedEmailIds.length === 0}\n              onClick={handleDeleteSelected}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex items-center\"\n            >\n              <Trash size={16} className=\"mr-1\" />\n              <span className=\"hidden sm:inline\">Eliminar</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Cabecera de tabla */}\n      <div className=\"border-b border-gray-200 px-4 py-2 grid grid-cols-12 gap-2 text-sm text-gray-500 font-medium bg-gray-50\">\n        <div className=\"col-span-1 flex items-center\">\n          <input\n            type=\"checkbox\"\n            checked={selectedEmailIds.length === emails.length && emails.length > 0}\n            onChange={handleSelectAll}\n            className=\"rounded\"\n            disabled={emails.length === 0}\n          />\n        </div>\n        <div\n          className=\"col-span-3 sm:col-span-3 flex items-center cursor-pointer\"\n          onClick={() => onSortChange('from')}\n        >\n          {currentFolder === 'sent' ? 'Para' : 'De'} \n          {sortField === 'from' && (\n            sortDirection === 'asc' \n              ? <ArrowUp size={14} className=\"inline ml-1\" /> \n              : <ArrowDown size={14} className=\"inline ml-1\" />\n          )}\n        </div>\n        <div\n          className=\"col-span-6 sm:col-span-6 cursor-pointer truncate\"\n          onClick={() => onSortChange('subject')}\n        >\n          Asunto {sortField === 'subject' && (\n            sortDirection === 'asc' \n              ? <ArrowUp size={14} className=\"inline ml-1\" /> \n              : <ArrowDown size={14} className=\"inline ml-1\" />\n          )}\n        </div>\n        <div\n          className=\"col-span-2 sm:col-span-2 text-right cursor-pointer\"\n          onClick={() => onSortChange('date')}\n        >\n          Fecha {sortField === 'date' && (\n            sortDirection === 'asc' \n              ? <ArrowUp size={14} className=\"inline ml-1\" /> \n              : <ArrowDown size={14} className=\"inline ml-1\" />\n          )}\n        </div>\n      </div>\n\n      {/* Lista de emails */}\n      <div className=\"overflow-auto flex-grow\">\n        {loading ? (\n          <StatusMessage \n            icon={<Loader size={32} className=\"animate-spin text-blue-500\" />}\n            message=\"Cargando emails...\"\n            className=\"text-gray-500\"\n          />\n        ) : error ? (\n          <StatusMessage \n            icon={<AlertCircle size={32} className=\"text-red-500\" />}\n            message={error}\n            className=\"text-red-500\"\n          />\n        ) : emails.length === 0 ? (\n          <StatusMessage \n            icon={<AlertCircle size={32} className=\"text-gray-400\" />}\n            message=\"No hay emails en esta carpeta\"\n            className=\"text-gray-500\"\n          />\n        ) : (\n          <div className=\"divide-y divide-gray-100\">\n            {emails.map((email) => (\n              <div\n                key={email.id}\n                onClick={() => onSelectEmail(email.id)}\n                className={`grid grid-cols-12 gap-2 px-4 py-3 hover:bg-gray-50 cursor-pointer transition-colors ${\n                  selectedEmailId === email.id ? 'bg-blue-50' : ''\n                } ${!email.read ? 'font-medium' : ''}`}\n              >\n                <div \n                  className=\"col-span-1 flex items-center justify-center\" \n                  onClick={(e) => handleToggleSelect(email.id, e)}\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedEmailIds.includes(email.id)}\n                    onChange={() => {}}\n                    className=\"rounded\"\n                  />\n                </div>\n                <div className=\"col-span-3 sm:col-span-3 truncate\">\n                  {currentFolder === 'sent' ? email.to : email.from}\n                </div>\n                <div className=\"col-span-6 sm:col-span-6 truncate flex items-center\">\n                  <span className=\"mr-2 truncate\">\n                    {email.subject || '(Sin asunto)'}\n                  </span>\n                  {email.attachments && email.attachments.length > 0 && (\n                    <span className=\"text-gray-500 text-xs\">📎</span>\n                  )}\n                </div>\n                <div className=\"col-span-2 sm:col-span-2 text-right text-gray-500 text-sm flex items-center justify-end\">\n                  <span className=\"mr-2\">{formatDate(email.date)}</span>\n                  <button \n                    onClick={(e) => handleToggleImportant(email.id, e)}\n                    className={`focus:outline-none ${email.important ? 'text-yellow-500' : 'text-gray-300 hover:text-gray-400'}`}\n                  >\n                    <StarIcon size={16} />\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EmailList;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\UnifiedInbox\\EmailListAdvanced.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\UnifiedInbox\\InboxContainer.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useContext' is defined but never used.","line":1,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":24,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":25,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useContext, useMemo, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { useAuth } from '../../../hooks/useAuth';\nimport * as EmailService from '../../../services/EmailService';\nimport { useEmailMonitoring } from '../../../hooks/useEmailMonitoring';\nimport { useUnifiedInboxMetrics } from '../../../hooks/useUnifiedInboxMetrics';\nimport { emailCache } from '../../../utils/EmailCache';\nimport InboxNavigation from './InboxNavigation';\nimport EmailList from './EmailList';\n\nimport EmailDetail from './EmailDetail';\nimport EmailComposer from '../EmailComposer';\n\n/**\n * Componente contenedor principal para la bandeja de entrada unificada\n * Gestiona el estado global de la bandeja y coordina los componentes hijo\n *\n * @returns {JSX.Element} Componente contenedor de la bandeja unificada\n */\nconst InboxContainer = () => {\n  // Mensaje de diagnóstico para verificar si el componente se renderiza\n  console.log('InboxContainer component rendering...');\n  const { user, profile } = useAuth();\n  const navigate = useNavigate();\n  const { trackOperation } = useEmailMonitoring();\n  const { logInitialLoad, logSearch, logEmailRender, logUserInteraction } = useUnifiedInboxMetrics();\n  \n  // Estado principal para la bandeja de entrada\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userEmail, setUserEmail] = useState('');\n  const [emails, setEmails] = useState([]);\n  const [selectedEmail, setSelectedEmail] = useState(null);\n  const [selectedEmailId, setSelectedEmailId] = useState(null);\n  const [currentFolder, setCurrentFolder] = useState('inbox');\n  const [isComposingEmail, setIsComposingEmail] = useState(false);\n  const [replyingToEmail, setReplyingToEmail] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortField, setSortField] = useState('date');\n  const [sortDirection, setSortDirection] = useState('desc');\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n  \n  // Estadísticas de bandeja\n  const [folderStats, setFolderStats] = useState({\n    inbox: { total: 0, unread: 0 },\n    sent: { total: 0 },\n    important: { total: 0, unread: 0 },\n    trash: { total: 0 }\n  });\n  \n  // Inicializar el servicio de email\n  useEffect(() => {\n    if (profile) {\n      const email = EmailService.initEmailService(profile);\n      setUserEmail(email);\n    }\n  }, [profile]);\n  \n  // Cargar emails al montar el componente o cambiar de carpeta\n  useEffect(() => {\n    loadEmails();\n    \n    // Registrar cambio de carpeta como interacción\n    if (currentFolder) {\n      logUserInteraction('folder_change', { folder: currentFolder });\n    }\n  }, [currentFolder, refreshTrigger]);\n  \n  // Cargar estadísticas de carpetas\n  useEffect(() => {\n    loadFolderStats();\n    \n    // Programar refresco periódico de estadísticas\n    const intervalId = setInterval(() => {\n      loadFolderStats();\n    }, 60000); // Cada minuto\n    \n    return () => clearInterval(intervalId);\n  }, [refreshTrigger]);\n  \n  // Función para cargar emails con soporte de caché\n  const loadEmails = useCallback(async () => {\n    if (!profile) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const startTime = performance.now();\n      \n      // Intentar obtener desde la caché primero\n      const cachedEmails = emailCache.getEmails(currentFolder);\n      let data;\n      \n      if (cachedEmails) {\n        // Usar datos de caché\n        data = cachedEmails;\n        setEmails(data);\n        setLoading(false);\n        \n        // Cargar datos frescos en segundo plano si han pasado más de 2 minutos\n        const lastLoad = emailCache.getMetrics().lastUpdated;\n        const needsRefresh = !lastLoad || (Date.now() - lastLoad) > 2 * 60 * 1000;\n        \n        if (needsRefresh) {\n          // Carga silenciosa en segundo plano\n          EmailService.getMails(currentFolder)\n            .then(freshData => {\n              if (freshData && freshData.length > 0) {\n                setEmails(freshData);\n                emailCache.setEmails(currentFolder, freshData);\n              }\n            })\n            .catch(err => console.error('Error en carga en segundo plano:', err));\n        }\n      } else {\n        // Sin caché válida, cargar desde el servicio\n        data = await EmailService.getMails(currentFolder);\n        const endTime = performance.now();\n        const loadTime = endTime - startTime;\n        \n        // Guardar en caché\n        emailCache.setEmails(currentFolder, data);\n        \n        // Registrar métricas de rendimiento\n        trackOperation('load_emails', {\n          folder: currentFolder,\n          count: data?.length || 0,\n          duration: loadTime,\n          fromCache: false\n        });\n        \n        // Registrar métricas específicas de la bandeja\n        logInitialLoad(currentFolder, data?.length || 0, loadTime);\n        \n        setEmails(data || []);\n      }\n    } catch (err) {\n      console.error('Error al cargar emails:', err);\n      setError('No se pudieron cargar los emails. Por favor, inténtalo de nuevo.');\n      toast.error('Error al cargar los emails');\n    } finally {\n      setLoading(false);\n    }\n  }, [currentFolder, profile, trackOperation, logInitialLoad]);\n  \n  // Función para cargar estadísticas de carpetas\n  const loadFolderStats = useCallback(async () => {\n    if (!profile) return;\n    \n    try {\n      // Para cada carpeta, obtener conteo\n      const inboxData = await EmailService.getMails('inbox');\n      const sentData = await EmailService.getMails('sent');\n      const importantData = await EmailService.getMails('important');\n      const trashData = await EmailService.getMails('trash');\n      \n      setFolderStats({\n        inbox: {\n          total: inboxData.length,\n          unread: inboxData.filter(e => !e.read).length\n        },\n        sent: { total: sentData.length },\n        important: {\n          total: importantData.length,\n          unread: importantData.filter(e => !e.read).length\n        },\n        trash: { total: trashData.length }\n      });\n    } catch (err) {\n      console.error('Error al cargar estadísticas:', err);\n    }\n  }, [profile]);\n  \n  // Manejador para marcar un email como leído\n  const handleMarkAsRead = useCallback(async (emailId) => {\n    try {\n      // Primero actualizamos la interfaz inmediatamente para evitar retardo visual\n      setEmails(prev => \n        prev.map(e => e.id === emailId ? { ...e, read: true } : e)\n      );\n      \n      // También actualizamos el email seleccionado si corresponde\n      if (selectedEmailId === emailId && selectedEmail) {\n        setSelectedEmail({ ...selectedEmail, read: true });\n      }\n      \n      // Actualizar caché inmediatamente\n      const cachedEmails = emailCache.getEmails(currentFolder);\n      if (cachedEmails) {\n        const updatedCache = cachedEmails.map(e => \n          e.id === emailId ? { ...e, read: true } : e\n        );\n        emailCache.setEmails(currentFolder, updatedCache);\n      }\n      \n      // Registrar interacción\n      logUserInteraction('mark_read', { emailId });\n      \n      // Luego realizamos la actualización en el servidor (en segundo plano)\n      await EmailService.markAsRead(emailId);\n    } catch (err) {\n      console.error('Error al marcar email como leído:', err);\n      toast.error('Error al actualizar estado de lectura');\n    }\n  }, [selectedEmailId, selectedEmail, emails, currentFolder, logUserInteraction]);\n  \n  // Manejador para seleccionar un email\n  const handleSelectEmail = useCallback(async (emailId) => {\n    const startTime = performance.now();\n    const email = emails.find(e => e.id === emailId);\n    if (!email) return;\n    \n    setSelectedEmailId(emailId);\n    setSelectedEmail(email);\n    \n    // Registrar interacción del usuario\n    logUserInteraction('email_select', { \n      emailId, \n      hasAttachments: !!email.attachments?.length,\n      isRead: !!email.read\n    });\n    \n    // Marcar como leído automáticamente si es necesario\n    if (!email.read) {\n      handleMarkAsRead(emailId);\n    }\n    \n    // Registrar tiempo de renderizado\n    const renderTime = performance.now() - startTime;\n    logEmailRender(\n      emailId, \n      !!email.attachments?.length, \n      email.body?.length || 0,\n      renderTime\n    );\n  }, [emails, handleMarkAsRead, logUserInteraction, logEmailRender]);\n  \n  // Manejador para cambiar de carpeta\n  const handleFolderChange = useCallback((folder) => {\n    setCurrentFolder(folder);\n    setSelectedEmail(null);\n    setSelectedEmailId(null);\n  }, []);\n  \n  // Manejador para buscar\n  const handleSearch = useCallback((term) => {\n    const startTime = performance.now();\n    setSearchTerm(term);\n    \n    // Solo registrar búsquedas reales (más de 2 caracteres)\n    if (term.length > 2) {\n      setTimeout(() => {\n        // Dar tiempo para que se actualice filteredEmails\n        const endTime = performance.now();\n        const searchTime = endTime - startTime;\n        const resultCount = filteredEmails.length;\n        \n        logSearch(term, resultCount, searchTime);\n        logUserInteraction('search', { term, resultCount });\n      }, 100);\n    }\n  }, [filteredEmails, logSearch, logUserInteraction]);\n  \n  // Manejador para cambiar ordenación\n  const handleSortChange = useCallback((field) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  }, [sortField]);\n  \n  // Manejador para componer un nuevo email\n  const handleComposeNew = useCallback(() => {\n    setIsComposingEmail(true);\n    setReplyingToEmail(null);\n  }, []);\n  \n  // Manejador para responder a un email\n  const handleReply = useCallback((email) => {\n    setIsComposingEmail(true);\n    setReplyingToEmail(email);\n  }, []);\n  \n  // Manejador para enviar email\n  const handleSendEmail = useCallback(async (emailData) => {\n    try {\n      await EmailService.sendMail(emailData);\n      toast.success('Email enviado correctamente');\n      setIsComposingEmail(false);\n      setReplyingToEmail(null);\n      \n      // Registrar la acción\n      logUserInteraction('send_email', { \n        recipientCount: emailData.to.split(',').length,\n        hasAttachments: !!emailData.attachments?.length,\n        subjectLength: emailData.subject?.length || 0\n      });\n      \n      // Invalidar la caché de enviados\n      emailCache.invalidateFolder('sent');\n      \n      // Refrescar lista de emails\n      setRefreshTrigger(prev => prev + 1);\n    } catch (err) {\n      console.error('Error al enviar email:', err);\n      toast.error('Error al enviar el email');\n    }\n  }, [logUserInteraction]);\n  \n  // Manejador para eliminar un email\n  const handleDeleteEmail = useCallback(async (emailId) => {\n    try {\n      await EmailService.deleteMail(emailId);\n      toast.success('Email eliminado correctamente');\n      \n      // Si el email eliminado es el seleccionado, resetear la selección\n      if (selectedEmailId === emailId) {\n        setSelectedEmail(null);\n        setSelectedEmailId(null);\n      }\n      \n      // Registrar la acción\n      logUserInteraction('delete_email', { emailId });\n      \n      // Invalidar la caché de la carpeta actual\n      emailCache.invalidateFolder(currentFolder);\n      \n      // Refrescar lista\n      setRefreshTrigger(prev => prev + 1);\n    } catch (err) {\n      console.error('Error al eliminar email:', err);\n      toast.error('Error al eliminar el email');\n    }\n  }, [selectedEmailId, currentFolder, logUserInteraction]);\n  \n  // Memoizar emails filtrados y ordenados\n  const filteredEmails = useMemo(() => {\n    if (!emails.length) return [];\n    \n    let filtered = [...emails];\n    \n    // Filtrar por término de búsqueda\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filtered = filtered.filter(email => \n        email.subject?.toLowerCase().includes(term) || \n        email.from?.toLowerCase().includes(term) ||\n        email.to?.toLowerCase().includes(term) ||\n        email.body?.toLowerCase().includes(term)\n      );\n    }\n    \n    // Ordenar emails\n    return filtered.sort((a, b) => {\n      let comparison = 0;\n      \n      switch (sortField) {\n        case 'date':\n          comparison = new Date(a.date) - new Date(b.date);\n          break;\n        case 'from':\n          comparison = (a.from || '').localeCompare(b.from || '');\n          break;\n        case 'subject':\n          comparison = (a.subject || '').localeCompare(b.subject || '');\n          break;\n        default:\n          comparison = 0;\n      }\n      \n      return sortDirection === 'asc' ? comparison : -comparison;\n    });\n  }, [emails, searchTerm, sortField, sortDirection]);\n  \n  return (\n    <div className=\"flex flex-col h-full bg-gray-50\">\n      {/* Cabecera con información del usuario */}\n      <div className=\"bg-white p-4 border-b shadow-sm\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <h1 className=\"text-2xl font-semibold text-gray-800\">Bandeja unificada</h1>\n          {userEmail && (\n            <div className=\"text-sm text-gray-600\">\n              Tu dirección: <span className=\"font-semibold\">{userEmail}</span>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Contenido principal */}\n      <div className=\"flex-grow flex overflow-hidden\">\n        {/* Panel de navegación */}\n        <InboxNavigation \n          currentFolder={currentFolder}\n          onFolderChange={handleFolderChange}\n          folderStats={folderStats}\n          onComposeNew={handleComposeNew}\n        />\n        \n        {/* Área de contenido principal */}\n        <div className=\"flex-grow flex overflow-hidden\">\n          {/* Lista de emails */}\n          <div className={`${selectedEmail ? 'hidden md:block md:w-1/3 lg:w-2/5' : 'w-full'} border-r overflow-auto`}>\n            <EmailList\n              emails={filteredEmails}\n              loading={loading}\n              error={error}\n              selectedEmailId={selectedEmailId}\n              onSelectEmail={handleSelectEmail}\n              onDeleteEmail={handleDeleteEmail}\n              onSearch={handleSearch}\n              searchTerm={searchTerm}\n              sortField={sortField}\n              sortDirection={sortDirection}\n              onSortChange={handleSortChange}\n              currentFolder={currentFolder}\n            />\n          </div>\n          \n          {/* Detalle de email o composición */}\n          {(selectedEmail || isComposingEmail) && (\n            <div className=\"w-full md:w-2/3 lg:w-3/5 overflow-auto\">\n              {isComposingEmail ? (\n                <EmailComposer\n                  replyTo={replyingToEmail}\n                  onSend={handleSendEmail}\n                  onCancel={() => {\n                    setIsComposingEmail(false);\n                    setReplyingToEmail(null);\n                  }}\n                  userEmail={userEmail}\n                />\n              ) : (\n                <EmailDetail\n                  email={selectedEmail}\n                  onReply={() => handleReply(selectedEmail)}\n                  onDelete={() => handleDeleteEmail(selectedEmail.id)}\n                  onMarkRead={handleMarkAsRead}\n                  onBack={() => {\n                    setSelectedEmail(null);\n                    setSelectedEmailId(null);\n                  }}\n                />\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InboxContainer;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\email\\UnifiedInbox\\InboxNavigation.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\finance\\BudgetAlerts.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\finance\\CategoryBreakdown.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\finance\\VendorPayments.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\gallery\\InspirationGallery.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\invitations\\InvitationCanvas.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'template' is defined but never used.","line":9,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\r\nimport Draggable from 'react-draggable';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CANVAS_WIDTH = 600;\r\nconst CANVAS_HEIGHT = 850; // A5 vertical\r\n\r\nconst InvitationCanvas = React.forwardRef(function InvitationCanvas(\r\n  { template, elements, setElements, scale, selectedId, onSelect },\r\n  ref,\r\n) {\r\n  // Seed demo elements only once\r\n  useEffect(() => {\r\n    if (elements.length === 0) {\r\n      setElements([\r\n        { id: 1, type: 'text', content: 'Nombre de los novios', x: 100, y: 200 },\r\n        { id: 2, type: 'text', content: 'Fecha del evento', x: 100, y: 260 },\r\n      ]);\r\n    }\r\n  }, [elements.length, setElements]);\r\n\r\n  const handleStop = (e, data, id) => {\r\n    setElements((prev) =>\r\n      prev.map((el) => (el.id === id ? { ...el, x: data.x, y: data.y } : el)),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div\r\n        ref={ref}\r\n        className=\"relative bg-white shadow-md border mx-auto\"\r\n        style={{ width: CANVAS_WIDTH * scale, height: CANVAS_HEIGHT * scale, transformOrigin: 'top left', transform: `scale(${scale})` }}\r\n        role=\"region\"\r\n        aria-label=\"Lienzo de invitación\"\r\n      >\r\n        {/* Bleed area */}\r\n        <div\r\n          className=\"absolute inset-0 border-dashed border-red-400 pointer-events-none\"\r\n          style={{ margin: 12 }}\r\n          aria-hidden=\"true\"\r\n        />\r\n\r\n        {elements.map((el) => (\r\n          <Draggable\r\n            key={el.id}\r\n            position={{ x: el.x, y: el.y }}\r\n            onStop={(e, d) => handleStop(e, d, el.id)}\r\n            bounds=\"parent\"\r\n          >\r\n            {el.type === 'text' ? (\r\n              <div\r\n                className={`cursor-move select-none text-gray-800 ${selectedId===el.id ? 'ring-2 ring-blue-500' : ''}`}\r\n                onMouseDown={() => onSelect(el.id)}\r\n              >\r\n                {el.content}\r\n              </div>\r\n            ) : null}\r\n          </Draggable>\r\n        ))}\r\n      </div>\r\n      <p className=\"text-xs text-gray-500 text-center mt-2\">\r\n        Arrastra los textos para recolocarlos (demo). Próximamente: añadir nuevos elementos y propiedades.\r\n      </p>\r\n    </div>\r\n  );\r\n});\r\n\r\nInvitationCanvas.propTypes = {\r\n  template: PropTypes.object.isRequired,\r\n  elements: PropTypes.array.isRequired,\r\n  setElements: PropTypes.func.isRequired,\r\n  scale: PropTypes.number.isRequired,\r\n  selectedId: PropTypes.number,\r\n  onSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default InvitationCanvas;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\invitations\\LayerPanel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\invitations\\PropertyPanel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\invitations\\TemplateGallery.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\invitations\\Toolbar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\layout\\MainLayout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\metrics\\MetricsDashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used.","line":41,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Panel de visualización de métricas del sistema de emails\n * \n * Este componente muestra estadísticas y métricas de rendimiento\n * recopiladas por el sistema de monitoreo para el módulo de emails y plantillas.\n * \n * @module components/metrics/MetricsDashboard\n */\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, \n         LineChart, Line, PieChart, Pie, Cell } from 'recharts';\nimport { RefreshCw, Filter, ChevronDown, Download } from 'lucide-react';\nimport Card from '../Card';\nimport Button from '../Button';\nimport { performanceMonitor } from '../../services/PerformanceMonitor';\nimport { useMediaQuery } from '../../hooks/useMediaQuery';\n\n// Colores para los gráficos\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658'];\n\n/**\n * Componente para visualizar métricas del sistema de emails y plantillas\n * @returns {React.ReactElement} Dashboard de métricas\n */\nconst MetricsDashboard = () => {\n  // Estados para almacenar las métricas\n  const [metrics, setMetrics] = useState({\n    counters: {},\n    timings: {},\n    events: [],\n    errors: []\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [timeRange, setTimeRange] = useState('24h'); // 24h, 7d, 30d, all\n  const [filterCategory, setFilterCategory] = useState('all');\n  const [showFilters, setShowFilters] = useState(false);\n  \n  // Detectar dispositivos móviles\n  const isMobile = useMediaQuery('(max-width: 768px)');\n  \n  // Cargar métricas desde el servicio de monitoreo\n  const loadMetrics = async () => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      // En producción, estas métricas vendrían de una API\n      // Por ahora usamos las métricas almacenadas en localStorage por el monitor\n      let rawMetrics;\n      try {\n        rawMetrics = JSON.parse(localStorage.getItem('lovenda_last_metrics') || '{}');\n      } catch (e) {\n        rawMetrics = {\n          counters: {},\n          timings: {},\n          events: [],\n          errors: []\n        };\n      }\n      \n      // También añadimos las métricas actuales del monitor\n      const currentMetrics = {\n        counters: { ...performanceMonitor.metrics.counters },\n        timings: { ...performanceMonitor.metrics.timings },\n        events: [...performanceMonitor.metrics.events],\n        errors: [...performanceMonitor.metrics.errors]\n      };\n      \n      // Combinamos ambas fuentes\n      const combinedMetrics = {\n        counters: { ...rawMetrics.counters, ...currentMetrics.counters },\n        timings: { ...rawMetrics.timings, ...currentMetrics.timings },\n        events: [...(rawMetrics.events || []), ...currentMetrics.events],\n        errors: [...(rawMetrics.errors || []), ...currentMetrics.errors]\n      };\n      \n      // Filtrar por rango de tiempo si es necesario\n      if (timeRange !== 'all') {\n        const now = Date.now();\n        let timeLimit;\n        \n        switch (timeRange) {\n          case '24h':\n            timeLimit = now - (24 * 60 * 60 * 1000);\n            break;\n          case '7d':\n            timeLimit = now - (7 * 24 * 60 * 60 * 1000);\n            break;\n          case '30d':\n            timeLimit = now - (30 * 24 * 60 * 60 * 1000);\n            break;\n          default:\n            timeLimit = 0;\n        }\n        \n        combinedMetrics.events = combinedMetrics.events.filter(\n          event => event.timestamp >= timeLimit\n        );\n        combinedMetrics.errors = combinedMetrics.errors.filter(\n          error => error.timestamp >= timeLimit\n        );\n      }\n      \n      setMetrics(combinedMetrics);\n    } catch (err) {\n      console.error('Error al cargar métricas:', err);\n      setError('No se pudieron cargar las métricas');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Cargar métricas al iniciar el componente\n  useEffect(() => {\n    loadMetrics();\n  }, [timeRange, filterCategory]);\n  \n  // Preparar datos para el gráfico de uso de plantillas por categoría\n  const templateUsageByCategory = useMemo(() => {\n    const categoryCounters = {};\n    \n    // Contar eventos por categoría\n    metrics.events\n      .filter(event => event.name === 'template_usage')\n      .forEach(event => {\n        const category = event.data.category || 'Sin categoría';\n        if (!categoryCounters[category]) {\n          categoryCounters[category] = 0;\n        }\n        categoryCounters[category]++;\n      });\n    \n    // Convertir a formato para gráfico\n    return Object.entries(categoryCounters).map(([category, count]) => ({\n      name: category,\n      value: count\n    }));\n  }, [metrics.events]);\n  \n  // Preparar datos para el gráfico de tipos de operaciones\n  const operationTypes = useMemo(() => {\n    const operations = {};\n    \n    // Buscar operaciones en contadores\n    Object.entries(metrics.counters)\n      .filter(([key]) => key.startsWith('template_') || key.startsWith('email_operation_'))\n      .forEach(([key, value]) => {\n        const operation = key.replace('template_', '').replace('email_operation_', '');\n        operations[operation] = value;\n      });\n    \n    // Convertir a formato para gráfico\n    return Object.entries(operations).map(([name, value]) => ({\n      name,\n      value\n    }));\n  }, [metrics.counters]);\n  \n  // Preparar datos para el gráfico de tiempos de operación\n  const operationTimings = useMemo(() => {\n    return Object.entries(metrics.timings)\n      .filter(([key]) => key.startsWith('email_') || key.startsWith('template_'))\n      .map(([key, timing]) => ({\n        name: key.replace('email_', '').replace('template_', ''),\n        avg: timing.total / timing.count,\n        min: timing.min,\n        max: timing.max\n      }));\n  }, [metrics.timings]);\n  \n  // Preparar lista de errores recientes\n  const recentErrors = useMemo(() => {\n    return metrics.errors\n      .filter(error => error.type.startsWith('email_') || error.type.includes('template'))\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(0, 5);\n  }, [metrics.errors]);\n  \n  // Descargar métricas en formato CSV\n  const downloadMetrics = () => {\n    // Crear contenido CSV\n    let csvContent = \"data:text/csv;charset=utf-8,\";\n    \n    // Encabezados\n    csvContent += \"Tipo,Métrica,Valor,Timestamp\\n\";\n    \n    // Contadores\n    Object.entries(metrics.counters).forEach(([key, value]) => {\n      csvContent += `Counter,${key},${value},${Date.now()}\\n`;\n    });\n    \n    // Tiempos\n    Object.entries(metrics.timings).forEach(([key, timing]) => {\n      csvContent += `Timing,${key}_avg,${timing.total / timing.count},${Date.now()}\\n`;\n      csvContent += `Timing,${key}_min,${timing.min},${Date.now()}\\n`;\n      csvContent += `Timing,${key}_max,${timing.max},${Date.now()}\\n`;\n    });\n    \n    // Eventos\n    metrics.events.forEach(event => {\n      csvContent += `Event,${event.name},1,${event.timestamp}\\n`;\n    });\n    \n    // Errores\n    metrics.errors.forEach(error => {\n      csvContent += `Error,${error.type},\"${error.message.replace(/\"/g, '\"\"')}\",${error.timestamp}\\n`;\n    });\n    \n    // Crear enlace para descargar\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", `lovenda_metrics_${new Date().toISOString().split('T')[0]}.csv`);\n    document.body.appendChild(link);\n    \n    // Simular clic en el enlace\n    link.click();\n    \n    // Limpiar\n    document.body.removeChild(link);\n  };\n  \n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center p-12\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"space-y-8 pb-8\">\n      <div className=\"flex flex-col md:flex-row justify-between items-center mb-6 gap-4\">\n        <h2 className=\"text-2xl font-semibold\">Dashboard de Métricas - Sistema de Emails</h2>\n        \n        <div className=\"flex items-center gap-3\">\n          <Button \n            onClick={() => setShowFilters(!showFilters)}\n            type=\"secondary\"\n            size=\"sm\"\n            className=\"flex items-center gap-1\"\n          >\n            <Filter size={16} />\n            <span>Filtros</span>\n            <ChevronDown size={16} className={`transform transition-transform ${showFilters ? 'rotate-180' : ''}`} />\n          </Button>\n          \n          <Button\n            onClick={loadMetrics}\n            type=\"secondary\"\n            size=\"sm\"\n            className=\"flex items-center gap-1\"\n          >\n            <RefreshCw size={16} />\n            <span>Actualizar</span>\n          </Button>\n          \n          <Button\n            onClick={downloadMetrics}\n            type=\"primary\"\n            size=\"sm\"\n            className=\"flex items-center gap-1\"\n          >\n            <Download size={16} />\n            <span>Exportar</span>\n          </Button>\n        </div>\n      </div>\n      \n      {showFilters && (\n        <Card className=\"mb-6 p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-start md:items-center\">\n            <div>\n              <label className=\"block text-sm mb-1\">Rango de tiempo</label>\n              <select \n                className=\"border rounded px-3 py-1\"\n                value={timeRange}\n                onChange={e => setTimeRange(e.target.value)}\n              >\n                <option value=\"24h\">Últimas 24 horas</option>\n                <option value=\"7d\">Últimos 7 días</option>\n                <option value=\"30d\">Últimos 30 días</option>\n                <option value=\"all\">Todo</option>\n              </select>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm mb-1\">Categoría</label>\n              <select \n                className=\"border rounded px-3 py-1\"\n                value={filterCategory}\n                onChange={e => setFilterCategory(e.target.value)}\n              >\n                <option value=\"all\">Todas</option>\n                <option value=\"proveedores\">Proveedores</option>\n                <option value=\"invitados\">Invitados</option>\n                <option value=\"seguimiento\">Seguimiento</option>\n                <option value=\"general\">General</option>\n              </select>\n            </div>\n          </div>\n        </Card>\n      )}\n      \n      {error && (\n        <div className=\"bg-red-50 border border-red-200 p-4 rounded-md text-red-700 mb-6\">\n          {error}\n        </div>\n      )}\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Gráfico de uso de plantillas por categoría */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-4\">Uso de plantillas por categoría</h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={templateUsageByCategory}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                >\n                  {templateUsageByCategory.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip formatter={(value) => [`${value} usos`, 'Cantidad']} />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n        \n        {/* Gráfico de tipos de operaciones */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-4\">Operaciones por tipo</h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={operationTypes}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"value\" name=\"Cantidad\" fill=\"#0088FE\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n        \n        {/* Gráfico de tiempos de operación */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-4\">Tiempos de operación (ms)</h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={operationTimings}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"avg\" name=\"Promedio\" stroke=\"#8884d8\" />\n                <Line type=\"monotone\" dataKey=\"min\" name=\"Mínimo\" stroke=\"#82ca9d\" />\n                <Line type=\"monotone\" dataKey=\"max\" name=\"Máximo\" stroke=\"#ff7300\" />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n        \n        {/* Errores recientes */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-4\">Errores recientes</h3>\n          {recentErrors.length > 0 ? (\n            <div className=\"overflow-auto max-h-64\">\n              <table className=\"min-w-full\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left py-2\">Tipo</th>\n                    <th className=\"text-left py-2\">Mensaje</th>\n                    <th className=\"text-left py-2\">Tiempo</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {recentErrors.map((error, index) => (\n                    <tr key={index} className={index % 2 === 0 ? 'bg-gray-50' : ''}>\n                      <td className=\"py-2 pr-4\">{error.type}</td>\n                      <td className=\"py-2 pr-4\">{error.message}</td>\n                      <td className=\"py-2\">\n                        {new Date(error.timestamp).toLocaleString()}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <p className=\"text-gray-500 italic\">No se han registrado errores.</p>\n          )}\n        </Card>\n      </div>\n      \n      {/* Resumen de contadores */}\n      <Card className=\"p-4\">\n        <h3 className=\"text-lg font-medium mb-4\">Resumen de actividad</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"bg-blue-50 p-4 rounded-md\">\n            <h4 className=\"text-sm text-blue-700\">Plantillas usadas</h4>\n            <p className=\"text-2xl font-semibold\">{metrics.counters['template_use'] || 0}</p>\n          </div>\n          <div className=\"bg-green-50 p-4 rounded-md\">\n            <h4 className=\"text-sm text-green-700\">Emails enviados</h4>\n            <p className=\"text-2xl font-semibold\">{metrics.counters['email_operation_send'] || 0}</p>\n          </div>\n          <div className=\"bg-purple-50 p-4 rounded-md\">\n            <h4 className=\"text-sm text-purple-700\">Plantillas creadas</h4>\n            <p className=\"text-2xl font-semibold\">{metrics.counters['template_create'] || 0}</p>\n          </div>\n          <div className=\"bg-amber-50 p-4 rounded-md\">\n            <h4 className=\"text-sm text-amber-700\">Búsquedas realizadas</h4>\n            <p className=\"text-2xl font-semibold\">{\n              Object.keys(metrics.counters)\n                .filter(key => key.includes('search'))\n                .reduce((sum, key) => sum + metrics.counters[key], 0)\n            }</p>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default MetricsDashboard;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\AIBusquedaModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ProveedorCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ProveedorCardNuevo.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Bookmark' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'Phone' is defined but never used.","line":2,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":2,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":37}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Star, Bookmark, Phone, Mail, Calendar, MoreHorizontal, Edit, Trash2 } from 'lucide-react';\n\n/**\n * Componente de tarjeta para mostrar información básica de un proveedor.\n * Permite acciones como marcar favorito, editar, eliminar y mostrar el detalle al hacer clic.\n * \n * @param {Object} props - Propiedades del componente\n * @param {Object} props.proveedor - Datos del proveedor\n * @param {Function} props.onClick - Función a ejecutar al hacer clic en la tarjeta\n * @param {Function} props.onToggleFavorito - Función para marcar/desmarcar como favorito\n * @param {Function} props.onEditar - Función para editar el proveedor\n * @param {Function} props.onEliminar - Función para eliminar el proveedor\n * @returns {React.ReactElement} Tarjeta del proveedor\n */\nconst ProveedorCardNuevo = ({ \n  proveedor, \n  onClick, \n  onToggleFavorito, \n  onEditar, \n  onEliminar \n}) => {\n  // Estados para el menú de acciones\n  const [menuAbierto, setMenuAbierto] = React.useState(false);\n\n  // Para evitar que el clic en los botones propague al contenedor\n  const handleAccion = (e, accion) => {\n    e.stopPropagation();\n    accion();\n  };\n\n  // Formato del presupuesto con separador de miles\n  const formatearPresupuesto = (valor) => {\n    if (!valor) return '€€€';\n    return new Intl.NumberFormat('es-ES', { \n      style: 'currency', \n      currency: 'EUR',\n      maximumFractionDigits: 0\n    }).format(valor);\n  };\n\n  // Obtener clase de estado según el valor\n  const getEstadoClase = (estado) => {\n    switch(estado) {\n      case 'Contratado': return 'bg-green-100 text-green-800';\n      case 'Contactado': return 'bg-blue-100 text-blue-800';\n      case 'Pendiente': return 'bg-amber-100 text-amber-800';\n      case 'Descartado': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div \n      className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden cursor-pointer transition-all hover:shadow-md\"\n      onClick={() => onClick(proveedor)}\n    >\n      {/* Cabecera con imagen y acciones */}\n      <div className=\"relative h-36 bg-gradient-to-r from-blue-500 to-purple-500\">\n        {proveedor.imagen && (\n          <img \n            src={proveedor.imagen} \n            alt={proveedor.nombre}\n            className=\"w-full h-full object-cover\"\n          />\n        )}\n        \n        {/* Botón favorito */}\n        <button \n          onClick={(e) => handleAccion(e, () => onToggleFavorito(proveedor.id))}\n          className=\"absolute top-2 left-2 p-1.5 rounded-full bg-white/80 hover:bg-white\"\n        >\n          <Star \n            size={18} \n            className={proveedor.favorito ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-400\"} \n          />\n        </button>\n        \n        {/* Botón menú */}\n        <div className=\"absolute top-2 right-2\">\n          <button \n            onClick={(e) => {\n              e.stopPropagation();\n              setMenuAbierto(!menuAbierto);\n            }}\n            className=\"p-1.5 rounded-full bg-white/80 hover:bg-white\"\n          >\n            <MoreHorizontal size={18} className=\"text-gray-600\" />\n          </button>\n          \n          {/* Menú desplegable */}\n          {menuAbierto && (\n            <div className=\"absolute right-0 mt-1 w-36 bg-white rounded-md shadow-lg z-10 border border-gray-200\">\n              <div className=\"py-1\">\n                <button\n                  onClick={(e) => handleAccion(e, () => onEditar(proveedor))}\n                  className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center\"\n                >\n                  <Edit size={14} className=\"mr-2\" />\n                  Editar\n                </button>\n                <button\n                  onClick={(e) => handleAccion(e, () => onEliminar(proveedor.id))}\n                  className=\"w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center\"\n                >\n                  <Trash2 size={14} className=\"mr-2\" />\n                  Eliminar\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Contenido principal */}\n      <div className=\"p-4\">\n        <div className=\"flex justify-between items-start\">\n          <h3 className=\"text-lg font-semibold text-gray-800 mb-1 truncate\">\n            {proveedor.nombre || 'Proveedor sin nombre'}\n          </h3>\n        </div>\n        \n        <div className=\"flex justify-between items-center mb-2\">\n          <p className=\"text-gray-600 text-sm\">\n            {proveedor.servicio || 'Sin categoría'}\n          </p>\n          \n          <span className={`text-xs px-2 py-1 rounded-full font-medium ${getEstadoClase(proveedor.estado)}`}>\n            {proveedor.estado || 'Nuevo'}\n          </span>\n        </div>\n        \n        <div className=\"border-t border-gray-100 pt-3 mt-3\">\n          <div className=\"flex justify-between\">\n            <div className=\"flex items-center\">\n              <Calendar size={16} className=\"text-gray-400 mr-1\" />\n              <span className=\"text-xs text-gray-500\">\n                {proveedor.fechaCita ? new Date(proveedor.fechaCita).toLocaleDateString() : 'Sin cita'}\n              </span>\n            </div>\n            <div className=\"font-medium text-sm\">\n              {formatearPresupuesto(proveedor.presupuesto)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProveedorCardNuevo;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ProveedorDetail.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":2,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":61}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { X, Star, Phone, Mail, Globe, Calendar, Edit2, Clock, MapPin } from 'lucide-react';\nimport Button from '../../components/Button';\nimport Card from '../../components/Card';\n\n/**\n * @typedef {import('../../hooks/useProveedores').Provider} Provider\n */\n\n/**\n * Componente que muestra los detalles completos de un proveedor seleccionado.\n * Incluye información de contacto, calificaciones, notas y opciones para editar.\n * También permite añadir valoraciones y mostrar el historial de interacciones.\n * \n * @param {Object} props - Propiedades del componente\n * @param {Provider} props.provider - Proveedor a mostrar en detalle\n * @param {Function} props.onClose - Función para cerrar el panel de detalles\n * @param {Function} props.onEdit - Función para editar el proveedor\n * @param {string} props.activeTab - Pestaña activa dentro del panel de detalles ('info', 'contacto', 'notas', 'historial')\n * @param {Function} props.setActiveTab - Función para cambiar la pestaña activa\n * @returns {React.ReactElement} Componente de detalle de proveedor\n */\nconst ProveedorDetail = ({ provider, onClose, onEdit, activeTab, setActiveTab }) => {\n  const [rating, setRating] = useState(provider.ratingCount > 0 ? provider.rating / provider.ratingCount : 0);\n  \n  // Renderizar estrellas para calificación\n  const renderRatingStars = (currentRating, interactive = false) => {\n    return (\n      <div className=\"flex\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            size={interactive ? 24 : 20}\n            className={`${\n              star <= currentRating\n                ? 'text-yellow-500 fill-yellow-500'\n                : 'text-gray-300'\n            } ${interactive ? 'cursor-pointer' : ''}`}\n            onClick={() => interactive && setRating(star)}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  // Formatear fecha para mostrar\n  const formatDate = (dateStr) => {\n    if (!dateStr) return '';\n    try {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString('es-ES', { \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      });\n    } catch (e) {\n      return dateStr;\n    }\n  };\n\n  // Color según estado del proveedor\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'Confirmado':\n        return 'bg-green-100 text-green-800';\n      case 'Contactado':\n        return 'bg-blue-100 text-blue-800';\n      case 'Seleccionado':\n        return 'bg-purple-100 text-purple-800';\n      case 'Rechazado':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\">\n        {/* Header con título y botón de cierre */}\n        <div className=\"flex justify-between items-center p-4 border-b\">\n          <h2 className=\"text-xl font-semibold\">{provider.name}</h2>\n          <button \n            onClick={onClose} \n            className=\"text-gray-500 hover:text-gray-700\"\n            aria-label=\"Cerrar\"\n          >\n            <X size={24} />\n          </button>\n        </div>\n        \n        {/* Pestañas de navegación */}\n        <div className=\"flex border-b\">\n          <button\n            className={`py-2 px-4 ${activeTab === 'info' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'}`}\n            onClick={() => setActiveTab('info')}\n          >\n            Información\n          </button>\n          <button\n            className={`py-2 px-4 ${activeTab === 'communications' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'}`}\n            onClick={() => setActiveTab('communications')}\n          >\n            Comunicaciones\n          </button>\n          <button\n            className={`py-2 px-4 ${activeTab === 'tracking' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'}`}\n            onClick={() => setActiveTab('tracking')}\n          >\n            Seguimiento\n          </button>\n        </div>\n        \n        {/* Contenido principal con scroll */}\n        <div className=\"overflow-y-auto p-4 flex-1\">\n          {activeTab === 'info' && (\n            <div className=\"space-y-6\">\n              {/* Información principal */}\n              <Card>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <span className={`text-sm px-3 py-1 rounded-full ${getStatusColor(provider.status)}`}>\n                      {provider.status}\n                    </span>\n                    <span className=\"ml-2 text-gray-500\">{provider.service}</span>\n                  </div>\n                  {onEdit && (\n                    <Button \n                      onClick={() => onEdit(provider)} \n                      variant=\"outline\" \n                      size=\"sm\"\n                    >\n                      <Edit2 size={16} className=\"mr-1\" /> Editar\n                    </Button>\n                  )}\n                </div>\n                \n                {/* Imagen principal si existe */}\n                {provider.image && (\n                  <div className=\"w-full h-64 overflow-hidden rounded-lg mb-4\">\n                    <img\n                      src={provider.image}\n                      alt={provider.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                )}\n                \n                {/* Descripción o snippet */}\n                {provider.snippet && (\n                  <p className=\"text-gray-700 mb-4\">{provider.snippet}</p>\n                )}\n                \n                {/* Detalles de contacto */}\n                <div className=\"space-y-3 mt-4\">\n                  {provider.contact && (\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center mr-3\">\n                        <span className=\"text-blue-600 font-medium\">{provider.contact.charAt(0)}</span>\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">Contacto</p>\n                        <p className=\"text-sm text-gray-600\">{provider.contact}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {provider.phone && (\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center mr-3\">\n                        <Phone size={16} className=\"text-green-600\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">Teléfono</p>\n                        <p className=\"text-sm text-gray-600\">{provider.phone}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {provider.email && (\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center mr-3\">\n                        <Mail size={16} className=\"text-red-600\" />\n                      </div>\n                      <div className=\"overflow-hidden\">\n                        <p className=\"font-medium\">Email</p>\n                        <a \n                          href={`mailto:${provider.email}`} \n                          className=\"text-sm text-blue-600 hover:underline truncate block\"\n                        >\n                          {provider.email}\n                        </a>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {provider.link && (\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center mr-3\">\n                        <Globe size={16} className=\"text-purple-600\" />\n                      </div>\n                      <div className=\"overflow-hidden\">\n                        <p className=\"font-medium\">Sitio web</p>\n                        <a \n                          href={provider.link} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\" \n                          className=\"text-sm text-blue-600 hover:underline truncate block\"\n                        >\n                          {provider.link}\n                        </a>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {provider.date && (\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-amber-100 flex items-center justify-center mr-3\">\n                        <Calendar size={16} className=\"text-amber-600\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">Fecha</p>\n                        <p className=\"text-sm text-gray-600\">{formatDate(provider.date)}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {(provider.location || provider.address) && (\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-teal-100 flex items-center justify-center mr-3\">\n                        <MapPin size={16} className=\"text-teal-600\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">Ubicación</p>\n                        <p className=\"text-sm text-gray-600\">{provider.location || provider.address}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {provider.priceRange && (\n                    <div className=\"mt-3 p-3 bg-gray-50 rounded-md\">\n                      <p className=\"font-medium\">Rango de precios</p>\n                      <p className=\"text-lg font-semibold text-gray-800\">{provider.priceRange}</p>\n                    </div>\n                  )}\n                </div>\n                \n                {/* Calificación */}\n                <div className=\"mt-6\">\n                  <p className=\"font-medium mb-1\">Calificación</p>\n                  <div className=\"flex items-center space-x-4\">\n                    {renderRatingStars(rating, true)}\n                    <span className=\"text-sm text-gray-500\">\n                      {rating.toFixed(1)} de 5 ({provider.ratingCount || 0} valoraciones)\n                    </span>\n                  </div>\n                </div>\n              </Card>\n            </div>\n          )}\n          \n          {activeTab === 'communications' && (\n            <div className=\"space-y-4\">\n              <Card>\n                <h3 className=\"text-lg font-medium mb-3\">Comunicaciones</h3>\n                {/* Aquí se renderizarían las comunicaciones */}\n                <p className=\"text-gray-500\">\n                  Historial de comunicaciones con este proveedor.\n                </p>\n              </Card>\n            </div>\n          )}\n          \n          {activeTab === 'tracking' && (\n            <div className=\"space-y-4\">\n              <Card>\n                <h3 className=\"text-lg font-medium mb-3\">Seguimiento</h3>\n                {/* Aquí se renderizaría el seguimiento */}\n                <p className=\"text-gray-500\">\n                  Historial de seguimiento de comunicaciones con este proveedor.\n                </p>\n              </Card>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer con botones de acción */}\n        <div className=\"border-t p-4 bg-gray-50 flex justify-end space-x-3\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Cerrar\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Optimizar renderizado con React.memo para evitar renderizados innecesarios\nexport default React.memo(ProveedorDetail, (prevProps, nextProps) => {\n  return (\n    prevProps.provider?.id === nextProps.provider?.id &&\n    prevProps.activeTab === nextProps.activeTab &&\n    // Solo re-renderizar si cambia el proveedor o la pestaña activa\n    JSON.stringify(prevProps.provider) === JSON.stringify(nextProps.provider)\n  );\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ProveedorDetalle.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'Bookmark' is defined but never used.","line":2,"column":68,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":76},{"ruleId":"no-unused-vars","severity":2,"message":"'ChevronRight' is defined but never used.","line":2,"column":78,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":90},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCheck' is defined but never used.","line":2,"column":92,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":102}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { X, ArrowLeft, Calendar, Mail, Phone, Globe, MapPin, Edit, Bookmark, ChevronRight, CheckCheck, MessageSquare } from 'lucide-react';\n\n/**\n * Componente para mostrar el detalle completo de un proveedor con pestañas\n * para información general y seguimiento de comunicaciones.\n * \n * @param {Object} props - Propiedades del componente\n * @param {Object} props.proveedor - Datos del proveedor\n * @param {Array} props.comunicaciones - Lista de comunicaciones con el proveedor\n * @param {Function} props.onCerrar - Función para cerrar el detalle\n * @param {Function} props.onEditar - Función para editar el proveedor\n * @param {Function} props.onNuevaComunicacion - Función para añadir nueva comunicación\n * @returns {React.ReactElement} Vista detalle del proveedor\n */\nconst ProveedorDetalle = ({ \n  proveedor, \n  comunicaciones = [], \n  onCerrar, \n  onEditar,\n  onNuevaComunicacion\n}) => {\n  // Estado para la pestaña activa\n  const [pestanaActiva, setPestanaActiva] = useState('info');\n  \n  // Formatear fecha\n  const formatearFecha = (fecha) => {\n    if (!fecha) return 'Sin fecha';\n    return new Date(fecha).toLocaleDateString('es-ES', {\n      day: 'numeric', \n      month: 'long', \n      year: 'numeric'\n    });\n  };\n  \n  // Formatear precio\n  const formatearPrecio = (valor) => {\n    if (!valor) return 'No especificado';\n    return new Intl.NumberFormat('es-ES', {\n      style: 'currency',\n      currency: 'EUR',\n      maximumFractionDigits: 0\n    }).format(valor);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md border border-gray-200 overflow-hidden\">\n      {/* Cabecera con imagen de fondo */}\n      <div className=\"relative h-48 bg-gradient-to-r from-blue-500 to-purple-500\">\n        {proveedor.imagen && (\n          <img \n            src={proveedor.imagen} \n            alt={proveedor.nombre} \n            className=\"w-full h-full object-cover\"\n          />\n        )}\n        \n        {/* Botones superiores */}\n        <div className=\"absolute top-0 left-0 w-full p-4 flex justify-between\">\n          <button \n            onClick={onCerrar}\n            className=\"p-2 rounded-full bg-white/80 hover:bg-white text-gray-700\"\n          >\n            <ArrowLeft size={20} />\n          </button>\n          \n          <button \n            onClick={() => onEditar(proveedor)}\n            className=\"p-2 rounded-full bg-white/80 hover:bg-white text-gray-700\"\n          >\n            <Edit size={20} />\n          </button>\n        </div>\n      </div>\n      \n      {/* Título y estado */}\n      <div className=\"p-5 border-b border-gray-200\">\n        <div className=\"flex justify-between items-start mb-2\">\n          <h2 className=\"text-2xl font-bold text-gray-800\">\n            {proveedor.nombre || 'Proveedor sin nombre'}\n          </h2>\n          <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n            proveedor.estado === 'Contratado' ? 'bg-green-100 text-green-800' :\n            proveedor.estado === 'Contactado' ? 'bg-blue-100 text-blue-800' :\n            proveedor.estado === 'Descartado' ? 'bg-red-100 text-red-800' :\n            'bg-gray-100 text-gray-800'\n          }`}>\n            {proveedor.estado || 'Nuevo'}\n          </span>\n        </div>\n        <p className=\"text-gray-600\">\n          {proveedor.servicio || 'Sin categoría'}\n        </p>\n      </div>\n      \n      {/* Navegación pestañas */}\n      <div className=\"flex border-b border-gray-200\">\n        <button\n          onClick={() => setPestanaActiva('info')}\n          className={`flex-1 py-3 font-medium text-sm border-b-2 transition-colors ${\n            pestanaActiva === 'info' \n              ? 'border-blue-500 text-blue-600' \n              : 'border-transparent text-gray-500 hover:text-gray-700'\n          }`}\n        >\n          Información\n        </button>\n        <button\n          onClick={() => setPestanaActiva('comunicaciones')}\n          className={`flex-1 py-3 font-medium text-sm border-b-2 transition-colors ${\n            pestanaActiva === 'comunicaciones' \n              ? 'border-blue-500 text-blue-600' \n              : 'border-transparent text-gray-500 hover:text-gray-700'\n          }`}\n        >\n          Seguimiento\n        </button>\n      </div>\n      \n      {/* Contenido de pestañas */}\n      <div className=\"p-5\">\n        {pestanaActiva === 'info' ? (\n          /* Información general */\n          <div className=\"space-y-5\">\n            {/* Presupuesto y cita */}\n            <div className=\"flex flex-wrap gap-4\">\n              <div className=\"flex-1 min-w-[200px] bg-blue-50 rounded-lg p-4\">\n                <p className=\"text-sm text-blue-600 mb-1\">Presupuesto</p>\n                <p className=\"text-lg font-semibold\">{formatearPrecio(proveedor.presupuesto)}</p>\n              </div>\n              <div className=\"flex-1 min-w-[200px] bg-purple-50 rounded-lg p-4\">\n                <p className=\"text-sm text-purple-600 mb-1\">Próxima cita</p>\n                <div className=\"flex items-center\">\n                  <Calendar size={18} className=\"mr-2 text-purple-500\" />\n                  <p className=\"text-lg font-semibold\">{formatearFecha(proveedor.fechaCita)}</p>\n                </div>\n              </div>\n            </div>\n            \n            {/* Contacto */}\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <h3 className=\"font-medium mb-3 text-gray-700\">Datos de contacto</h3>\n              <div className=\"space-y-3\">\n                {proveedor.contacto && (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 text-gray-400\"><MessageSquare size={16} /></div>\n                    <p>{proveedor.contacto}</p>\n                  </div>\n                )}\n                {proveedor.telefono && (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 text-gray-400\"><Phone size={16} /></div>\n                    <p>{proveedor.telefono}</p>\n                  </div>\n                )}\n                {proveedor.email && (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 text-gray-400\"><Mail size={16} /></div>\n                    <p>{proveedor.email}</p>\n                  </div>\n                )}\n                {proveedor.web && (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 text-gray-400\"><Globe size={16} /></div>\n                    <a \n                      href={proveedor.web} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-blue-600 hover:underline\"\n                    >\n                      {proveedor.web}\n                    </a>\n                  </div>\n                )}\n                {proveedor.ubicacion && (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 text-gray-400\"><MapPin size={16} /></div>\n                    <p>{proveedor.ubicacion}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            {/* Notas */}\n            {proveedor.notas && (\n              <div className=\"bg-amber-50 rounded-lg p-4\">\n                <h3 className=\"font-medium mb-2 text-amber-700\">Notas</h3>\n                <p className=\"text-gray-700 whitespace-pre-line\">{proveedor.notas}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          /* Seguimiento de comunicaciones */\n          <div>\n            <div className=\"flex justify-between mb-4\">\n              <h3 className=\"text-lg font-medium\">Historial de comunicaciones</h3>\n              <button \n                onClick={onNuevaComunicacion}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-md text-sm\"\n              >\n                Nueva entrada\n              </button>\n            </div>\n            \n            {comunicaciones && comunicaciones.length > 0 ? (\n              <div className=\"space-y-4\">\n                {comunicaciones.map((item, index) => (\n                  <div \n                    key={index}\n                    className=\"bg-gray-50 rounded-lg p-4 border-l-4 border-blue-400\"\n                  >\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <h4 className=\"font-medium text-gray-800\">{item.tipo || 'Comunicación'}</h4>\n                      <span className=\"text-xs text-gray-500\">\n                        {formatearFecha(item.fecha)}\n                      </span>\n                    </div>\n                    <p className=\"text-gray-700 mb-2\">{item.mensaje}</p>\n                    {item.adjuntos && item.adjuntos.length > 0 && (\n                      <div className=\"mt-2 pt-2 border-t border-gray-200\">\n                        <p className=\"text-xs text-gray-500 mb-1\">Adjuntos:</p>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {item.adjuntos.map((adjunto, idx) => (\n                            <a\n                              key={idx}\n                              href={adjunto.url}\n                              className=\"text-blue-600 bg-blue-50 px-2 py-1 rounded text-xs flex items-center\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              {adjunto.nombre}\n                            </a>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <MessageSquare className=\"mx-auto h-12 w-12 text-gray-300 mb-2\" />\n                <p>No hay comunicaciones registradas</p>\n                <p className=\"mt-1 text-sm\">Registra el primer contacto con este proveedor</p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProveedorDetalle;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ProveedorFiltro.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Search, Filter, SlidersHorizontal } from 'lucide-react';\n\n/**\n * Componente para filtrar y buscar proveedores con pestañas para diferentes categorías\n * \n * @param {Object} props - Propiedades del componente\n * @param {string} props.filtroActivo - El filtro actualmente seleccionado\n * @param {Function} props.onCambioFiltro - Función a ejecutar cuando se cambia el filtro\n * @param {Function} props.onBuscar - Función a ejecutar cuando se busca\n * @param {string} props.textoBusqueda - Texto de búsqueda actual\n * @param {Function} props.onCambioTexto - Función a ejecutar cuando cambia el texto de búsqueda\n * @returns {React.ReactElement} Componente de filtro de proveedores\n */\nconst ProveedorFiltro = ({ \n  filtroActivo = 'todos', \n  onCambioFiltro,\n  onBuscar,\n  textoBusqueda = '',\n  onCambioTexto\n}) => {\n  // Opciones de filtro disponibles\n  const filtros = [\n    { id: 'todos', label: 'Todos' },\n    { id: 'contratados', label: 'Contratados' },\n    { id: 'contactados', label: 'Contactados' },\n    { id: 'favoritos', label: 'Favoritos' },\n  ];\n\n  // Manejar la búsqueda con Enter\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      onBuscar(textoBusqueda);\n    }\n  };\n\n  return (\n    <div className=\"mb-6\">\n      {/* Pestañas de filtro */}\n      <div className=\"border-b border-gray-200 mb-4\">\n        <nav className=\"-mb-px flex space-x-6\" aria-label=\"Pestañas\">\n          {filtros.map((filtro) => (\n            <button\n              key={filtro.id}\n              onClick={() => onCambioFiltro(filtro.id)}\n              className={`\n                whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm\n                ${filtroActivo === filtro.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}\n              `}\n            >\n              {filtro.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n      \n      {/* Barra de búsqueda */}\n      <div className=\"flex gap-2\">\n        <div className=\"flex-1 relative\">\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <Search size={18} className=\"text-gray-400\" />\n          </div>\n          <input\n            type=\"text\"\n            value={textoBusqueda}\n            onChange={(e) => onCambioTexto(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Buscar proveedores...\"\n            className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n          />\n        </div>\n        \n        <button\n          onClick={() => onBuscar(textoBusqueda)}\n          className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n        >\n          Buscar\n        </button>\n        \n        <button\n          className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n        >\n          <SlidersHorizontal size={16} className=\"mr-2\" />\n          Filtros\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProveedorFiltro;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ProveedorForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ProveedorFormModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ProveedorList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ReservationModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ai\\AIEmailModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ai\\AIResultList.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":32,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1480,1516],"text":"\n          Analizando tu consulta: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1480,1516],"text":"\n          Analizando tu consulta: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1480,1516],"text":"\n          Analizando tu consulta: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1480,1516],"text":"\n          Analizando tu consulta: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":32,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1523,1533],"text":"&quot;\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1523,1533],"text":"&ldquo;\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1523,1533],"text":"&#34;\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1523,1533],"text":"&rdquo;\n        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'X' is not defined.","line":42,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":42,"endColumn":13},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Search' is not defined.","line":70,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":70,"endColumn":18},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":127,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5727,5728],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5727,5728],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5727,5728],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5727,5728],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":127,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5735,5736],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5735,5736],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5735,5736],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5735,5736],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Check, Plus, ArrowRight, Loader2, Mail } from 'lucide-react';\nimport Button from '../../../components/Button';\nimport Card from '../../../components/Card';\n\n/**\n * @typedef {import('../../../hooks/useAISearch').AISearchResult} AISearchResult\n */\n\n/**\n * Componente que muestra los resultados de búsqueda con IA de proveedores.\n * Presenta una lista de resultados con porcentaje de coincidencia, acciones rápidas\n * y estados de carga. También muestra mensajes de error si los hubiera.\n * \n * @param {Object} props - Propiedades del componente\n * @param {AISearchResult[]} [props.results=[]] - Resultados de la búsqueda con IA\n * @param {boolean} props.isLoading - Indica si la búsqueda está en progreso\n * @param {Function} props.onSelect - Función para seleccionar un resultado\n * @param {string} props.query - Término de búsqueda original\n * @param {string} [props.error] - Mensaje de error, si existe\n * @returns {React.ReactElement} Componente de lista de resultados de búsqueda con IA\n */\nconst AIResultList = ({ results = [], isLoading, onSelect, query, error }) => {\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12\">\n        <div className=\"animate-spin mb-4\">\n          <Loader2 size={40} className=\"text-blue-500\" />\n        </div>\n        <p className=\"text-lg font-medium text-gray-700\">Buscando proveedores...</p>\n        <p className=\"text-sm text-gray-500 mt-2\">\n          Analizando tu consulta: \"{query}\"\n        </p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12\">\n        <div className=\"p-3 rounded-full bg-red-100 mb-4\">\n          <X size={24} className=\"text-red-500\" />\n        </div>\n        <p className=\"text-lg font-medium text-gray-700\">Error al buscar</p>\n        <p className=\"text-sm text-gray-500 mt-2 text-center max-w-md\">\n          {error}\n        </p>\n        <Button className=\"mt-4\" size=\"sm\" variant=\"outline\">\n          Intentar de nuevo\n        </Button>\n      </div>\n    );\n  }\n\n  if (!results.length && query) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12\">\n        <p className=\"text-lg font-medium text-gray-700\">No se encontraron resultados</p>\n        <p className=\"text-sm text-gray-500 mt-2 text-center max-w-md\">\n          Intenta reformular tu búsqueda o utilizar términos más generales\n        </p>\n      </div>\n    );\n  }\n\n  if (!query) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12\">\n        <div className=\"p-3 rounded-full bg-blue-100 mb-4\">\n          <Search size={24} className=\"text-blue-500\" />\n        </div>\n        <p className=\"text-lg font-medium text-gray-700\">Busca proveedores con IA</p>\n        <p className=\"text-sm text-gray-500 mt-2 text-center max-w-md\">\n          Describe lo que buscas en lenguaje natural y la IA encontrará los proveedores más adecuados\n        </p>\n      </div>\n    );\n  }\n\n  // Ejemplo de datos para mostrar en modo de demostración\n  const demoResults = [\n    {\n      id: 1,\n      name: 'Fotografía Naturaleza Viva',\n      service: 'Fotografía',\n      snippet: 'Estudio especializado en fotografía de bodas con estilo natural y documental. Captamos los momentos más emotivos y espontáneos de tu boda.',\n      match: 95,\n      image: 'https://images.unsplash.com/photo-1537633552985-df8429e8048b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTB8fHdlZGRpbmclMjBwaG90b2dyYXBoeXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60',\n      location: 'Madrid',\n      price: '1200€ - 2500€',\n      aiSummary: 'Este fotógrafo tiene un estilo natural y documental perfecto para bodas en exteriores. Sus imágenes capturen momentos espontáneos con iluminación natural, ideal para lo que buscas.'\n    },\n    {\n      id: 2,\n      name: 'Lente Azul Fotografía',\n      service: 'Fotografía',\n      snippet: 'Más de 10 años de experiencia en fotografía de bodas en playa y espacios naturales. Ofrecemos paquetes personalizados para cada pareja.',\n      match: 87,\n      image: 'https://images.unsplash.com/photo-1508435234994-67cfd7690508?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8d2VkZGluZyUyMHBob3RvZ3JhcGh5fGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60',\n      location: 'Barcelona',\n      price: '1500€ - 3000€',\n      aiSummary: 'Especialistas en bodas en la playa con un estilo luminoso y natural. Su portfolio muestra una gran experiencia en entornos costeros y saben aprovechar la luz natural.'\n    },\n    {\n      id: 3,\n      name: 'Momentos Eternos',\n      service: 'Fotografía',\n      snippet: 'Fotografía de autor para bodas con estilo único. Combinamos fotografía documental con retratos artísticos para crear un álbum inolvidable.',\n      match: 79,\n      image: 'https://images.unsplash.com/photo-1511285560929-80b456fea0bc?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTR8fHdlZGRpbmclMjBwaG90b2dyYXBoeXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60',\n      location: 'Valencia',\n      price: '1000€ - 2000€',\n      aiSummary: 'Ofrece un enfoque artístico con elementos documentales. Aunque su estilo es más estilizado que puramente natural, tiene experiencia en bodas al aire libre.'\n    }\n  ];\n\n  // Usar datos reales si están disponibles, o los datos de demostración\n  const displayResults = results.length > 0 ? results : demoResults;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Resumen de la búsqueda */}\n      <div className=\"mb-4\">\n        <p className=\"text-sm text-gray-500\">\n          Se encontraron <span className=\"font-medium\">{displayResults.length}</span> proveedores para tu búsqueda:\n        </p>\n        <p className=\"text-lg font-medium\">\"{query}\"</p>\n      </div>\n\n      {/* Lista de resultados */}\n      {displayResults.map((result) => (\n        <Card key={result.id} className=\"relative overflow-hidden\">\n          {/* Indicador de porcentaje de coincidencia */}\n          <div className=\"absolute top-2 right-2 bg-blue-600 text-white text-xs font-bold px-2 py-1 rounded-full\">\n            {result.match}% match\n          </div>\n\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            {/* Imagen */}\n            {result.image && (\n              <div className=\"w-full md:w-32 h-32 flex-shrink-0 overflow-hidden rounded-md\">\n                <img\n                  src={result.image}\n                  alt={result.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            )}\n\n            {/* Contenido principal */}\n            <div className=\"flex-1\">\n              <div className=\"flex flex-wrap justify-between items-start mb-2\">\n                <div>\n                  <h3 className=\"text-lg font-semibold\">{result.name}</h3>\n                  <p className=\"text-sm text-gray-600\">{result.service}</p>\n                </div>\n                {result.price && (\n                  <span className=\"text-sm font-medium bg-gray-100 px-2 py-1 rounded\">\n                    {result.price}\n                  </span>\n                )}\n              </div>\n\n              {result.location && (\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  <span className=\"font-medium\">Ubicación:</span> {result.location}\n                </p>\n              )}\n\n              <p className=\"text-sm text-gray-700 mb-3\">{result.snippet}</p>\n\n              {/* Análisis de IA */}\n              {result.aiSummary && (\n                <div className=\"bg-blue-50 p-3 rounded-md mb-3\">\n                  <p className=\"text-xs font-semibold text-blue-600 mb-1\">Análisis de IA</p>\n                  <p className=\"text-sm text-gray-700\">{result.aiSummary}</p>\n                </div>\n              )}\n\n              {/* Acciones */}\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                <Button\n                  onClick={() => onSelect(result, 'view')}\n                  variant=\"outline\"\n                  size=\"sm\"\n                >\n                  <ArrowRight size={16} className=\"mr-1\" /> Ver detalles\n                </Button>\n                <Button\n                  onClick={() => onSelect(result, 'add')}\n                  size=\"sm\"\n                >\n                  <Plus size={16} className=\"mr-1\" /> Añadir\n                </Button>\n                <Button\n                  onClick={() => onSelect(result, 'email')}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n                  data-testid=\"email-provider-btn\"\n                >\n                  <Mail size={16} className=\"mr-1\" /> Enviar email\n                </Button>\n                <Button\n                  onClick={() => onSelect(result, 'select')}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"border-green-600 text-green-600 hover:bg-green-50\"\n                >\n                  <Check size={16} className=\"mr-1\" /> Seleccionar\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\n// Optimizar renderizado con React.memo\nexport default React.memo(AIResultList, (prevProps, nextProps) => {\n  // Solo re-renderizar si cambia alguno de estos valores\n  return (\n    prevProps.results?.length === nextProps.results?.length &&\n    JSON.stringify(prevProps.results) === JSON.stringify(nextProps.results) &&\n    prevProps.onSelect === nextProps.onSelect\n  );\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\ai\\AISearchModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":1,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":58},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":143,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5367,5468],"text":"\n              Ejemplo: &quot;Busco un fotógrafo de estilo natural para una boda en la playa\"\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5367,5468],"text":"\n              Ejemplo: &ldquo;Busco un fotógrafo de estilo natural para una boda en la playa\"\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5367,5468],"text":"\n              Ejemplo: &#34;Busco un fotógrafo de estilo natural para una boda en la playa\"\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5367,5468],"text":"\n              Ejemplo: &rdquo;Busco un fotógrafo de estilo natural para una boda en la playa\"\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":143,"column":87,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5367,5468],"text":"\n              Ejemplo: \"Busco un fotógrafo de estilo natural para una boda en la playa&quot;\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5367,5468],"text":"\n              Ejemplo: \"Busco un fotógrafo de estilo natural para una boda en la playa&ldquo;\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5367,5468],"text":"\n              Ejemplo: \"Busco un fotógrafo de estilo natural para una boda en la playa&#34;\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5367,5468],"text":"\n              Ejemplo: \"Busco un fotógrafo de estilo natural para una boda en la playa&rdquo;\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Search, X, Sparkles } from 'lucide-react';\nimport Button from '../../../components/Button';\nimport AIResultList from './AIResultList';\n\n/**\n * @typedef {import('../../../hooks/useAISearch').AISearchResult} AISearchResult\n */\n\n/**\n * Modal de búsqueda inteligente de proveedores con IA.\n * Permite realizar búsquedas en lenguaje natural, muestra sugerencias,\n * guarda historial de búsquedas y presenta los resultados en forma de lista.\n * \n * @param {Object} props - Propiedades del componente\n * @param {boolean} props.isOpen - Indica si el modal está abierto\n * @param {Function} props.onClose - Función para cerrar el modal\n * @param {Function} props.onSearch - Función para realizar la búsqueda (recibe el query)\n * @param {Function} props.onSelect - Función para seleccionar un resultado\n * @param {boolean} props.isLoading - Indica si la búsqueda está en progreso\n * @returns {React.ReactElement|null} Modal de búsqueda con IA o null si no está abierto\n */\nconst AISearchModal = ({ isOpen, onClose, onSearch, onSelect, isLoading }) => {\n  const [query, setQuery] = useState('');\n  const [searchHistory, setSearchHistory] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [searchTimeout, setSearchTimeout] = useState(null);\n  \n  useEffect(() => {\n    // Cargar historial de búsqueda previo si existe en localStorage\n    const savedHistory = localStorage.getItem('ai_search_history');\n    if (savedHistory) {\n      try {\n        setSearchHistory(JSON.parse(savedHistory));\n      } catch (e) {\n        console.error('Error parsing search history', e);\n      }\n    }\n    \n    // Ejemplos de sugerencias de búsqueda predefinidas\n    setSuggestions([\n      'Fotógrafo de bodas estilo documental',\n      'Catering para evento de 100 personas con opciones vegetarianas',\n      'DJ con experiencia en bodas y disponible para agosto',\n      'Floristería especializada en decoración vintage',\n      'Lugar para ceremonia al aire libre cerca de Madrid'\n    ]);\n    \n    return () => {\n      if (searchTimeout) {\n        clearTimeout(searchTimeout);\n      }\n    };\n  }, []);\n  \n  // Guardar historial de búsqueda en localStorage\n  const saveSearchToHistory = useCallback((searchTerm) => {\n    const updatedHistory = [\n      searchTerm,\n      ...searchHistory.filter(item => item !== searchTerm).slice(0, 9)\n    ];\n    setSearchHistory(updatedHistory);\n    localStorage.setItem('ai_search_history', JSON.stringify(updatedHistory));\n  }, [searchHistory]);\n  \n  // Manejar envío de búsqueda\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault();\n    if (query.trim()) {\n      saveSearchToHistory(query);\n      onSearch(query);\n    }\n  }, [query, saveSearchToHistory, onSearch]);\n  \n  // Realizar búsqueda con retraso para evitar consultas excesivas mientras el usuario escribe\n  const handleQueryChange = useCallback((e) => {\n    const value = e.target.value;\n    setQuery(value);\n    \n    if (searchTimeout) {\n      clearTimeout(searchTimeout);\n    }\n    \n    if (value.trim() && value.length > 2) {\n      const timeout = setTimeout(() => {\n        onSearch(value);\n      }, 500); // Esperar 500ms antes de buscar\n      setSearchTimeout(timeout);\n    }\n  }, [searchTimeout, onSearch]);\n  \n  // Seleccionar una búsqueda del historial o sugerencias\n  const selectQuery = (selectedQuery) => {\n    setQuery(selectedQuery);\n    saveSearchToHistory(selectedQuery);\n    onSearch(selectedQuery);\n  };\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\" onClick={onClose}>\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\" onClick={(e) => e.stopPropagation()}>\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-4 border-b\">\n          <h2 className=\"text-xl font-semibold flex items-center\">\n            <Sparkles size={20} className=\"mr-2 text-blue-500\" />\n            Búsqueda inteligente de proveedores\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700\"\n            aria-label=\"Cerrar\"\n          >\n            <X size={24} />\n          </button>\n        </div>\n        \n        {/* Formulario de búsqueda */}\n        <div className=\"p-4 border-b\">\n          <form onSubmit={handleSubmit} className=\"relative\">\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                value={query}\n                onChange={handleQueryChange}\n                placeholder=\"Describe lo que estás buscando en lenguaje natural...\"\n                className=\"w-full p-3 pl-10 pr-24 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                autoFocus\n              />\n              <Search className=\"absolute left-3 top-3 text-gray-400\" size={20} />\n              <Button\n                type=\"submit\"\n                className=\"absolute right-2 top-1.5\"\n                size=\"sm\"\n                disabled={isLoading || !query.trim()}\n              >\n                {isLoading ? 'Buscando...' : 'Buscar'}\n              </Button>\n            </div>\n            \n            <p className=\"mt-2 text-sm text-gray-500\">\n              Ejemplo: \"Busco un fotógrafo de estilo natural para una boda en la playa\"\n            </p>\n          </form>\n        </div>\n        \n        {/* Contenido principal */}\n        <div className=\"flex flex-1 overflow-hidden\">\n          {/* Panel lateral con historial y sugerencias */}\n          <div className=\"w-64 p-4 border-r overflow-y-auto\">\n            {/* Historial de búsqueda */}\n            {searchHistory.length > 0 && (\n              <div className=\"mb-6\">\n                <h3 className=\"text-sm font-semibold text-gray-700 mb-2\">\n                  Búsquedas recientes\n                </h3>\n                <ul className=\"space-y-1\">\n                  {searchHistory.map((item, index) => (\n                    <li key={index}>\n                      <button\n                        onClick={() => selectQuery(item)}\n                        className=\"text-sm text-left w-full p-1.5 hover:bg-gray-100 rounded-md truncate\"\n                      >\n                        {item}\n                      </button>\n                    </li>\n                  ))}\n                  <li>\n                    <button\n                      onClick={() => {\n                        setSearchHistory([]);\n                        localStorage.removeItem('ai_search_history');\n                      }}\n                      className=\"text-xs text-blue-600 hover:text-blue-800 mt-1\"\n                    >\n                      Borrar historial\n                    </button>\n                  </li>\n                </ul>\n              </div>\n            )}\n            \n            {/* Sugerencias de búsqueda */}\n            <div>\n              <h3 className=\"text-sm font-semibold text-gray-700 mb-2\">\n                Sugerencias\n              </h3>\n              <ul className=\"space-y-1\">\n                {suggestions.map((suggestion, index) => (\n                  <li key={index}>\n                    <button\n                      onClick={() => selectQuery(suggestion)}\n                      className=\"text-sm text-left w-full p-1.5 hover:bg-gray-100 rounded-md truncate\"\n                    >\n                      {suggestion}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          \n          {/* Área de resultados */}\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            <AIResultList \n              isLoading={isLoading}\n              onSelect={onSelect}\n              query={query}\n            />\n          </div>\n        </div>\n        \n        {/* Footer */}\n        <div className=\"border-t p-4 bg-gray-50 flex justify-between items-center\">\n          <div className=\"text-sm text-gray-500\">\n            Powered by IA - Resultados basados en tu consulta\n          </div>\n          <Button variant=\"outline\" onClick={onClose}>\n            Cerrar\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AISearchModal;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\tracking\\EmailTrackingList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\proveedores\\tracking\\TrackingModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ExternalLink' is defined but never used.","line":2,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":65}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { X, Mail, Clock, CheckCircle, Eye, XCircle, ExternalLink, Calendar } from 'lucide-react';\nimport Button from '../../../components/Button';\nimport Card from '../../../components/Card';\n\n/**\n * @typedef {import('./EmailTrackingList').EmailTrackingItem} EmailTrackingItem\n */\n\n/**\n * Modal que muestra los detalles completos del seguimiento de un email enviado a un proveedor.\n * Incluye información detallada sobre el estado del email, historial de interacciones,\n * contenido del mensaje, acciones realizadas y estadísticas de apertura.\n * \n * @param {Object} props - Propiedades del componente\n * @param {boolean} props.isOpen - Indica si el modal está abierto\n * @param {Function} props.onClose - Función para cerrar el modal\n * @param {EmailTrackingItem} props.trackingItem - Elemento de seguimiento a mostrar en detalle\n * @returns {React.ReactElement|null} Modal de detalles de seguimiento o null si no está abierto\n */\nconst TrackingModal = ({ isOpen, onClose, trackingItem }) => {\n  if (!isOpen || !trackingItem) return null;\n\n  // Función para obtener el color y texto según el estado del email\n  const getStatusInfo = (status) => {\n    switch (status) {\n      case 'enviado':\n        return {\n          color: 'text-blue-600',\n          bgColor: 'bg-blue-100',\n          icon: <Mail size={20} className=\"text-blue-600\" />,\n          text: 'Enviado'\n        };\n      case 'entregado':\n        return {\n          color: 'text-green-600',\n          bgColor: 'bg-green-100',\n          icon: <CheckCircle size={20} className=\"text-green-600\" />,\n          text: 'Entregado'\n        };\n      case 'leido':\n        return {\n          color: 'text-purple-600',\n          bgColor: 'bg-purple-100',\n          icon: <Eye size={20} className=\"text-purple-600\" />,\n          text: 'Leído'\n        };\n      case 'error':\n        return {\n          color: 'text-red-600',\n          bgColor: 'bg-red-100',\n          icon: <XCircle size={20} className=\"text-red-600\" />,\n          text: 'Error'\n        };\n      case 'pendiente':\n        return {\n          color: 'text-amber-600',\n          bgColor: 'bg-amber-100',\n          icon: <Clock size={20} className=\"text-amber-600\" />,\n          text: 'Pendiente'\n        };\n      default:\n        return {\n          color: 'text-gray-600',\n          bgColor: 'bg-gray-100',\n          icon: <Clock size={20} className=\"text-gray-600\" />,\n          text: 'Desconocido'\n        };\n    }\n  };\n\n  // Formatear fecha y hora\n  const formatDateTime = (dateStr) => {\n    if (!dateStr) return '';\n    try {\n      const date = new Date(dateStr);\n      return date.toLocaleString('es-ES', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    } catch (e) {\n      return dateStr;\n    }\n  };\n\n  // Datos de ejemplo para la visualización\n  const statusInfo = getStatusInfo(trackingItem.status);\n\n  // Historial de actividad de ejemplo\n  const activities = [\n    {\n      type: 'send',\n      date: trackingItem.sentAt,\n      detail: `Email enviado a ${trackingItem.recipientEmail || 'destinatario'}`\n    }\n  ];\n\n  // Añadir eventos adicionales basados en el estado\n  if (trackingItem.status !== 'enviado' && trackingItem.status !== 'error') {\n    activities.push({\n      type: 'deliver',\n      date: trackingItem.deliveredAt || new Date(new Date(trackingItem.sentAt).getTime() + 60000).toISOString(),\n      detail: 'Email entregado al servidor de destino'\n    });\n  }\n\n  if (trackingItem.status === 'leido') {\n    // Añadir eventos de apertura\n    const openCount = trackingItem.openCount || 1;\n    for (let i = 0; i < openCount; i++) {\n      activities.push({\n        type: 'open',\n        date: i === 0 \n          ? trackingItem.firstOpenedAt || new Date(new Date(trackingItem.sentAt).getTime() + 300000).toISOString()\n          : new Date(new Date(trackingItem.sentAt).getTime() + (300000 * (i + 1))).toISOString(),\n        detail: `Email abierto ${i === 0 ? 'por primera vez' : `(apertura #${i + 1})`}`\n      });\n    }\n  }\n\n  if (trackingItem.status === 'error') {\n    activities.push({\n      type: 'error',\n      date: trackingItem.errorAt || new Date(new Date(trackingItem.sentAt).getTime() + 120000).toISOString(),\n      detail: trackingItem.errorMessage || 'Error en la entrega del email'\n    });\n  }\n\n  // Ordenar actividades por fecha\n  activities.sort((a, b) => new Date(a.date) - new Date(b.date));\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-hidden flex flex-col\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-4 border-b\">\n          <h2 className=\"text-xl font-semibold\">Seguimiento de Email</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700\"\n            aria-label=\"Cerrar\"\n          >\n            <X size={24} />\n          </button>\n        </div>\n\n        {/* Contenido principal con scroll */}\n        <div className=\"overflow-y-auto p-4 flex-1\">\n          {/* Información del email */}\n          <Card className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-medium\">Información del email</h3>\n              <span className={`flex items-center gap-1 px-3 py-1 rounded-full ${statusInfo.bgColor} ${statusInfo.color}`}>\n                {statusInfo.icon}\n                <span className=\"ml-1 font-medium\">{statusInfo.text}</span>\n              </span>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div>\n                <p className=\"text-sm text-gray-500\">Asunto</p>\n                <p className=\"font-medium\">{trackingItem.subject}</p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-gray-500\">Proveedor</p>\n                  <p className=\"font-medium\">{trackingItem.providerName}</p>\n                </div>\n                \n                <div>\n                  <p className=\"text-sm text-gray-500\">Destinatario</p>\n                  <p className=\"font-medium\">{trackingItem.recipientEmail || 'No disponible'}</p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-gray-500\">Enviado</p>\n                  <p className=\"font-medium\">{formatDateTime(trackingItem.sentAt)}</p>\n                </div>\n                \n                <div>\n                  <p className=\"text-sm text-gray-500\">Última actualización</p>\n                  <p className=\"font-medium\">{formatDateTime(trackingItem.lastUpdated || trackingItem.sentAt)}</p>\n                </div>\n              </div>\n\n              {trackingItem.openCount > 0 && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Aperturas</p>\n                  <p className=\"font-medium text-green-600\">{trackingItem.openCount} {trackingItem.openCount === 1 ? 'vez' : 'veces'}</p>\n                </div>\n              )}\n              \n              {trackingItem.errorMessage && (\n                <div className=\"bg-red-50 p-3 rounded-md border border-red-200 text-red-700\">\n                  <p className=\"font-medium mb-1\">Error</p>\n                  <p className=\"text-sm\">{trackingItem.errorMessage}</p>\n                </div>\n              )}\n            </div>\n          </Card>\n\n          {/* Historial de actividad */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-medium mb-4\">Historial de actividad</h3>\n            \n            <div className=\"relative\">\n              {/* Línea de tiempo vertical */}\n              <div className=\"absolute left-6 top-0 h-full w-0.5 bg-gray-200\"></div>\n              \n              {/* Eventos */}\n              <div className=\"space-y-6\">\n                {activities.map((activity, index) => {\n                  let icon;\n                  let iconBg;\n                  \n                  switch(activity.type) {\n                    case 'send':\n                      icon = <Mail size={16} className=\"text-white\" />;\n                      iconBg = 'bg-blue-500';\n                      break;\n                    case 'deliver':\n                      icon = <CheckCircle size={16} className=\"text-white\" />;\n                      iconBg = 'bg-green-500';\n                      break;\n                    case 'open':\n                      icon = <Eye size={16} className=\"text-white\" />;\n                      iconBg = 'bg-purple-500';\n                      break;\n                    case 'error':\n                      icon = <XCircle size={16} className=\"text-white\" />;\n                      iconBg = 'bg-red-500';\n                      break;\n                    default:\n                      icon = <Clock size={16} className=\"text-white\" />;\n                      iconBg = 'bg-gray-500';\n                  }\n                  \n                  return (\n                    <div key={index} className=\"flex\">\n                      <div className=\"relative flex items-center justify-center\">\n                        <div className={`w-12 h-12 rounded-full ${iconBg} flex items-center justify-center z-10`}>\n                          {icon}\n                        </div>\n                      </div>\n                      <div className=\"ml-4 flex-1\">\n                        <div className=\"bg-white p-4 rounded-lg border border-gray-200 shadow-sm\">\n                          <p className=\"text-sm text-gray-500 mb-1\">\n                            {formatDateTime(activity.date)}\n                          </p>\n                          <p className=\"font-medium\">{activity.detail}</p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n\n          {/* Contenido del email (ejemplo) */}\n          <Card>\n            <h3 className=\"text-lg font-medium mb-4\">Contenido del email</h3>\n            <div className=\"bg-gray-50 p-4 rounded-md border border-gray-200\">\n              <div className=\"mb-4\">\n                <p><strong>De:</strong> Tu Correo de Lovenda</p>\n                <p><strong>Para:</strong> {trackingItem.recipientEmail || 'proveedor@ejemplo.com'}</p>\n                <p><strong>Asunto:</strong> {trackingItem.subject}</p>\n              </div>\n              <div className=\"border-t border-gray-200 pt-4\">\n                <p>Estimado proveedor,</p>\n                <br/>\n                <p>Este es un ejemplo del contenido del email que se envió al proveedor.</p>\n                <p>En una implementación real, aquí se mostraría el contenido real del email enviado.</p>\n                <br/>\n                <p>Saludos cordiales,</p>\n                <p>Tu Nombre</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n        \n        {/* Footer con botones */}\n        <div className=\"border-t p-4 bg-gray-50 flex justify-between\">\n          <div>\n            <Button variant=\"outline\" size=\"sm\" className=\"flex items-center\">\n              <Calendar size={16} className=\"mr-1\" /> Programar seguimiento\n            </Button>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cerrar\n            </Button>\n            <Button\n              variant=\"outline\" \n              className=\"flex items-center\"\n              onClick={() => window.open(`mailto:${trackingItem.recipientEmail || ''}`)}\n            >\n              <Mail size={16} className=\"mr-1\" /> Responder\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TrackingModal;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\seating\\SeatingToolbar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\settings\\WeddingAccountLink.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'handleAcceptInvite' is assigned a value but never used.","line":70,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Check, AlertTriangle, Send as SendIcon, Users } from 'lucide-react';\nimport Button from '../Button';\nimport { useAuth } from '../../hooks/useAuth';\nimport {\n  createWedding,\n  invitePartner,\n  invitePlanner,\n  acceptInvitation,\n} from '../../services/WeddingService';\n\n/**\n * Componente para vincular cuentas de boda y gestionar invitaciones.\n */\nconst WeddingAccountLink = () => {\n  const { currentUser, userProfile, reloadUserProfile } = useAuth();\n  const [weddingId, setWeddingId] = useState('');\n\n  const [emailInvite, setEmailInvite] = useState('');\n  const [role, setRole] = useState('partner');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [inviteCode, setInviteCode] = useState('');\n  const [success, setSuccess] = useState('');\n\n  useEffect(() => {\n    if (userProfile) {\n      setWeddingId(userProfile.weddingId || '');\n    }\n  }, [userProfile]);\n\n  const handleCreateWedding = async () => {\n    try {\n      setLoading(true);\n      const wid = await createWedding(currentUser.uid);\n      setWeddingId(wid);\n      setSuccess('Boda creada correctamente.');\n      await reloadUserProfile();\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSendInvite = async () => {\n    if (!emailInvite) {\n      setError('Introduce un correo.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError('');\n      let code;\n      if (role === 'partner') {\n        code = await invitePartner(weddingId, emailInvite);\n      } else {\n        code = await invitePlanner(weddingId, emailInvite);\n      }\n      setSuccess(`Invitación enviada. Código: ${code}`);\n      setEmailInvite('');\n    } catch (err) {\n      console.error(err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAcceptInvite = async () => {\n    if (!inviteCode) {\n      setError('Introduce el código de invitación.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError('');\n      await acceptInvitation(inviteCode);\n      setSuccess('Invitación aceptada correctamente.');\n      setInviteCode('');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h3 className=\"text-md font-medium mb-2 flex items-center\">\n        <Users className=\"w-4 h-4 mr-2\" /> Vincular cuentas de boda\n      </h3>\n\n      {!weddingId ? (\n        <div>\n          <p className=\"text-gray-600 mb-3\">Crea tu boda para poder invitar a tu pareja o wedding planner.</p>\n          <Button onClick={handleCreateWedding} disabled={loading}>\n            {loading ? 'Creando...' : 'Crear mi boda'}\n          </Button>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          <div className=\"bg-gray-50 p-3 rounded-md border text-sm\">\n            <span className=\"font-medium\">ID de tu boda:</span> {weddingId}\n          </div>\n\n          <div>\n            <label htmlFor=\"invite-email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Correo de la persona a invitar\n            </label>\n            <input\n              type=\"email\"\n              id=\"invite-email\"\n              value={emailInvite}\n              onChange={(e) => setEmailInvite(e.target.value)}\n              className=\"w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"correo@ejemplo.com\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Rol</label>\n            <select\n              value={role}\n              onChange={(e) => setRole(e.target.value)}\n              className=\"w-full p-2 border rounded-md\">\n              <option value=\"partner\">Pareja (copropietario)</option>\n              <option value=\"planner\">Wedding Planner</option>\n            </select>\n          </div>\n\n          {error && (\n            <div className=\"p-3 bg-red-50 border border-red-200 text-red-700 rounded-md flex items-start text-sm\">\n              <AlertTriangle size={16} className=\"mr-2 mt-0.5\" />\n              {error}\n            </div>\n          )}\n          {success && (\n            <div className=\"p-3 bg-green-50 border border-green-200 text-green-700 rounded-md flex items-start text-sm\">\n              <Check size={16} className=\"mr-2 mt-0.5\" />\n              {success}\n            </div>\n          )}\n\n          <Button\n            onClick={handleSendInvite}\n            disabled={loading || !emailInvite}\n            variant=\"default\"\n          >\n            {loading ? 'Enviando...' : (\n              <span className=\"flex items-center\"><SendIcon size={16} className=\"mr-1\" /> Enviar invitación</span>\n            )}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WeddingAccountLink;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\tasks\\CalendarComponents.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\nimport format from 'date-fns/format';\nimport parse from 'date-fns/parse';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport getDay from 'date-fns/getDay';\n\n// Estilos por defecto y personalizados del calendario\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport '../../styles/calendarOverrides.css';\n\n// Importar locale de español\nimport es from 'date-fns/locale/es';\n\n// Configuración del localizador para el calendario\nconst locales = {\n  'es': es\n};\n\nexport const localizer = dateFnsLocalizer({\n  format,\n  parse,\n  startOfWeek: () => startOfWeek(new Date(), { weekStartsOn: 1 }), // Semana comienza el lunes\n  getDay,\n  locales,\n});\n\n// Categorías de tareas con sus colores\nexport const categories = {\n  LUGAR: { name: 'Lugar', color: '#ef4444', bgColor: '#fee2e2', borderColor: '#fca5a5' },\n  INVITADOS: { name: 'Invitados', color: '#f97316', bgColor: '#ffedd5', borderColor: '#fdba74' },\n  COMIDA: { name: 'Catering', color: '#eab308', bgColor: '#fef9c3', borderColor: '#fde047' },\n  DECORACION: { name: 'Decoración', color: '#22c55e', bgColor: '#dcfce7', borderColor: '#86efac' },\n  PAPELERIA: { name: 'Papelería', color: '#06b6d4', bgColor: '#cffafe', borderColor: '#67e8f9' },\n  MUSICA: { name: 'Música', color: '#6366f1', bgColor: '#e0e7ff', borderColor: '#a5b4fc' },\n  FOTOGRAFO: { name: 'Fotografía', color: '#8b5cf6', bgColor: '#ede9fe', borderColor: '#c4b5fd' },\n  VESTUARIO: { name: 'Vestuario', color: '#d946ef', bgColor: '#fae8ff', borderColor: '#e879f9' },\n  OTROS: { name: 'Otros', color: '#6b7280', bgColor: '#f3f4f6', borderColor: '#d1d5db' },\n};\n\n// Estilos para eventos del calendario (estilo Google Calendar)\nexport function eventStyleGetter(event) {\n  const cat = categories[event.category || 'OTROS'];\n  return {\n    style: {\n      backgroundColor: cat.color,\n      color: '#ffffff',\n      border: 'none',\n      borderRadius: '0',\n      padding: '0px 5px',\n      fontSize: '14px',\n      opacity: 0.8\n    }\n  };\n}\n\n// Componente para renderizar cada evento en el calendario (estilo Google Calendar)\nexport const Event = ({ event }) => {\n  return (\n    <div className=\"rbc-event-content\">\n      <div style={{\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        color: '#fff',\n        fontSize: '0.85em',\n        fontWeight: '500',\n        padding: '2px 5px',\n        width: '100%',\n        lineHeight: '1.4',\n        letterSpacing: '0.2px',\n        textShadow: '0 1px 1px rgba(0,0,0,0.2)' // Mejora legibilidad del texto blanco\n      }}>\n        {event.title || event.name || \"Sin título\"}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\tasks\\CalendarSync.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'importEventsFromGoogle' is assigned a value but never used.","line":20,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'exportEventsToGoogle' is assigned a value but never used.","line":21,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useCalendarSync } from '../../hooks/useCalendarSync';\nimport { Button, Spinner, Alert, Badge } from '../../components/ui';\nimport { Calendar, RefreshCw, Link2, Check, AlertTriangle, Clock } from 'lucide-react';\n\n/**\n * Componente para sincronización bidireccional de calendarios\n */\nconst CalendarSync = ({ onEventsImported }) => {\n  const { \n    isLoading, \n    isAuthenticated, \n    syncedCalendars, \n    lastSync,\n    error, \n    authenticate, \n    logout, \n    getAvailableCalendars,\n    saveCalendarSyncConfig,\n    importEventsFromGoogle,\n    exportEventsToGoogle,\n    syncBidirectional \n  } = useCalendarSync();\n  \n  const [availableCalendars, setAvailableCalendars] = useState([]);\n  const [selectedCalendars, setSelectedCalendars] = useState([]);\n  const [syncStatus, setSyncStatus] = useState({ imported: 0, exported: 0 });\n  const [showConfig, setShowConfig] = useState(false);\n  \n  // Cargar calendarios cuando el usuario se autentique\n  useEffect(() => {\n    const loadCalendars = async () => {\n      if (isAuthenticated) {\n        const calendars = await getAvailableCalendars();\n        setAvailableCalendars(calendars);\n        setSelectedCalendars(syncedCalendars.map(cal => cal.id));\n      }\n    };\n    \n    loadCalendars();\n  }, [isAuthenticated, syncedCalendars]);\n  \n  // Manejar cambio de selección de calendario\n  const handleCalendarToggle = (calendar) => {\n    setSelectedCalendars(prev => {\n      if (prev.includes(calendar.id)) {\n        return prev.filter(id => id !== calendar.id);\n      } else {\n        return [...prev, calendar.id];\n      }\n    });\n  };\n  \n  // Guardar configuración de calendarios seleccionados\n  const handleSaveConfig = async () => {\n    const selected = availableCalendars.filter(cal => selectedCalendars.includes(cal.id));\n    await saveCalendarSyncConfig(selected);\n    setShowConfig(false);\n  };\n  \n  // Sincronizar eventos bidireccionales\n  const handleSync = async () => {\n    if (syncedCalendars.length === 0) {\n      setShowConfig(true);\n      return;\n    }\n    \n    setSyncStatus({ imported: 0, exported: 0 });\n    \n    for (const calendar of syncedCalendars) {\n      const result = await syncBidirectional(calendar.id);\n      setSyncStatus(prev => ({\n        imported: prev.imported + result.imported.length,\n        exported: prev.exported + result.exported.length\n      }));\n      \n      if (result.imported.length > 0 && onEventsImported) {\n        onEventsImported(result.imported);\n      }\n    }\n  };\n  \n  // Formatear fecha para mostrar\n  const formatDate = (date) => {\n    if (!date) return '';\n    return new Intl.DateTimeFormat('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-4 my-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold flex items-center\">\n          <Calendar size={20} className=\"mr-2 text-blue-500\" />\n          Sincronización de Calendario\n        </h3>\n        \n        {lastSync && (\n          <div className=\"flex items-center text-sm text-gray-500\">\n            <Clock size={14} className=\"mr-1\" />\n            Última sincronización: {formatDate(lastSync)}\n          </div>\n        )}\n      </div>\n      \n      {error && (\n        <Alert type=\"error\" className=\"mb-4\">\n          <AlertTriangle size={16} className=\"mr-2\" />\n          {error}\n        </Alert>\n      )}\n      \n      {/* Estado de conexión */}\n      <div className=\"flex items-center mb-4\">\n        <div className=\"mr-4\">\n          {isAuthenticated ? (\n            <Badge type=\"success\" className=\"flex items-center\">\n              <Check size={14} className=\"mr-1\" /> Conectado\n            </Badge>\n          ) : (\n            <Badge type=\"warning\" className=\"flex items-center\">\n              <Link2 size={14} className=\"mr-1\" /> No conectado\n            </Badge>\n          )}\n        </div>\n        \n        <div className=\"ml-auto\">\n          {isAuthenticated ? (\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={logout} \n              disabled={isLoading}\n            >\n              Desconectar\n            </Button>\n          ) : (\n            <Button \n              size=\"sm\" \n              variant=\"primary\" \n              onClick={authenticate} \n              disabled={isLoading}\n            >\n              Conectar con Google Calendar\n              {isLoading && <Spinner size=\"sm\" className=\"ml-2\" />}\n            </Button>\n          )}\n        </div>\n      </div>\n      \n      {/* Panel de calendarios */}\n      {isAuthenticated && (\n        <div className=\"mb-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h4 className=\"text-md font-medium\">\n              Calendarios ({syncedCalendars.length})\n            </h4>\n            \n            <Button \n              size=\"xs\" \n              variant=\"secondary\" \n              onClick={() => setShowConfig(!showConfig)}\n            >\n              {showConfig ? 'Ocultar' : 'Configurar'}\n            </Button>\n          </div>\n          \n          {/* Lista de calendarios configurados */}\n          {!showConfig && syncedCalendars.length > 0 && (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n              {syncedCalendars.map(calendar => (\n                <div \n                  key={calendar.id} \n                  className=\"flex items-center p-2 rounded border text-sm\"\n                  style={{ \n                    borderColor: calendar.backgroundColor || '#ccc',\n                    backgroundColor: `${calendar.backgroundColor}10` || '#f9f9f9'\n                  }}\n                >\n                  <div \n                    className=\"w-3 h-3 rounded-full mr-2\" \n                    style={{ backgroundColor: calendar.backgroundColor || '#ccc' }}\n                  />\n                  <span className=\"truncate\">{calendar.summary}</span>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          {/* Panel de configuración de calendarios */}\n          {showConfig && (\n            <div className=\"border rounded p-3 bg-gray-50\">\n              <p className=\"text-sm text-gray-600 mb-2\">\n                Selecciona los calendarios que deseas sincronizar:\n              </p>\n              \n              {isLoading ? (\n                <div className=\"flex justify-center p-4\">\n                  <Spinner />\n                </div>\n              ) : (\n                <>\n                  <div className=\"max-h-48 overflow-y-auto mb-3\">\n                    {availableCalendars.length > 0 ? (\n                      availableCalendars.map(calendar => (\n                        <div key={calendar.id} className=\"flex items-center mb-2\">\n                          <input\n                            type=\"checkbox\"\n                            id={calendar.id}\n                            checked={selectedCalendars.includes(calendar.id)}\n                            onChange={() => handleCalendarToggle(calendar)}\n                            className=\"mr-2\"\n                          />\n                          <label \n                            htmlFor={calendar.id} \n                            className=\"flex items-center cursor-pointer\"\n                          >\n                            <div \n                              className=\"w-3 h-3 rounded-full mr-2\" \n                              style={{ backgroundColor: calendar.backgroundColor || '#ccc' }}\n                            />\n                            <span>{calendar.summary}</span>\n                            {calendar.primary && (\n                              <Badge type=\"info\" className=\"ml-2 text-xs\">Principal</Badge>\n                            )}\n                          </label>\n                        </div>\n                      ))\n                    ) : (\n                      <p className=\"text-gray-500 text-sm italic\">\n                        No se encontraron calendarios\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex justify-end\">\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\" \n                      onClick={() => setShowConfig(false)}\n                      className=\"mr-2\"\n                    >\n                      Cancelar\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      variant=\"primary\" \n                      onClick={handleSaveConfig}\n                      disabled={selectedCalendars.length === 0}\n                    >\n                      Guardar configuración\n                    </Button>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n          \n          {/* Botón de sincronización y estado */}\n          <div className=\"mt-4 flex justify-between items-center\">\n            <div>\n              {(syncStatus.imported > 0 || syncStatus.exported > 0) && (\n                <div className=\"text-sm\">\n                  <Badge type=\"success\" className=\"mr-2\">\n                    {syncStatus.imported} eventos importados\n                  </Badge>\n                  <Badge type=\"info\">\n                    {syncStatus.exported} eventos exportados\n                  </Badge>\n                </div>\n              )}\n            </div>\n            \n            <Button\n              variant=\"primary\"\n              onClick={handleSync}\n              disabled={isLoading || syncedCalendars.length === 0}\n              className=\"flex items-center\"\n            >\n              <RefreshCw size={16} className={`mr-1 ${isLoading ? 'animate-spin' : ''}`} />\n              Sincronizar ahora\n              {isLoading && <Spinner size=\"sm\" className=\"ml-2\" />}\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CalendarSync;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\tasks\\CalendarUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\tasks\\ErrorBoundary.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\tasks\\GanttTasks.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\tasks\\TaskForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\tasks\\TaskList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\tasks\\TasksRefactored.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":4,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'useFirestoreCollectionSafe' is assigned a value but never used.","line":19,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { ViewMode } from 'gantt-task-react';\nimport { saveData, loadData, subscribeSyncState, getSyncState } from '../../services/SyncService';\nimport { Cloud, CloudOff, RefreshCw, Download } from 'lucide-react';\n\n// Importar componentes separados\nimport ErrorBoundary from './ErrorBoundary';\nimport { downloadAllICS } from './CalendarUtils';\nimport { localizer, categories, eventStyleGetter, Event } from './CalendarComponents';\nimport { GanttChart } from './GanttTasks';\nimport TaskForm from './TaskForm';\nimport TaskList from './TaskList';\nimport { Calendar } from 'react-big-calendar';\n\n// Importar useFirestoreCollection\nimport { useFirestoreCollection } from '../../hooks/useFirestoreCollection';\n\n// Definir un fallback en caso de error\nconst useFirestoreCollectionSafe = (params) => {\n  try {\n    return useFirestoreCollection(params);\n  } catch (error) {\n    console.error('Error al usar useFirestoreCollection:', error);\n    return { data: [], isLoading: false, error: error };\n  }\n}\n\n// Componente principal Tasks refactorizado\nexport default function Tasks() {\n  // Estados - Inicialización segura con manejo de errores\n\n  // Array vacío para inicialización segura\n  const initialTasksDefault = [];\n  \n  // Inicializar tasksState como array vacío\n  const [tasksState, setTasksState] = useState(initialTasksDefault);\n  \n  // Inicializar meetingsState como array vacío\n  const [meetingsState, setMeetingsState] = useState([]);\n  \n  // --- Ref para saber cuándo se completó la carga inicial ---\n  const dataLoadedRef = useRef(false);\n\n  // Cargar datos de manera segura con useEffect\n  useEffect(() => {\n    try {\n      // Intentar cargar las tareas\n      const tasksData = loadData('tasks', { defaultValue: initialTasksDefault, collection: 'userTasks' });\n      \n      // Verificar si es una promesa\n      if (tasksData && typeof tasksData.then === 'function') {\n        // Es una promesa, esperar a que se resuelva\n        tasksData.then(resolvedData => {\n          console.log('tasksState resuelto:', resolvedData);\n          setTasksState(Array.isArray(resolvedData) ? resolvedData : initialTasksDefault);\n          dataLoadedRef.current = true;\n        }).catch(err => {\n          console.error('Error al resolver promesa de tareas:', err);\n          setTasksState(initialTasksDefault);\n        });\n      } else {\n        // No es una promesa, usar directamente\n        console.log('tasksState cargado directamente:', tasksData);\n        setTasksState(Array.isArray(tasksData) ? tasksData : initialTasksDefault);\n        dataLoadedRef.current = true;\n      }\n      \n      // Intentar cargar las reuniones\n      const meetingsData = loadData('meetings', { defaultValue: [], collection: 'userMeetings' });\n      \n      // Verificar si es una promesa\n      if (meetingsData && typeof meetingsData.then === 'function') {\n        // Es una promesa, esperar a que se resuelva\n        meetingsData.then(resolvedData => {\n          setMeetingsState(Array.isArray(resolvedData) ? resolvedData : []);\n          dataLoadedRef.current = true;\n        }).catch(err => {\n          console.error('Error al resolver promesa de reuniones:', err);\n          setMeetingsState([]);\n        });\n      } else {\n        // No es una promesa, usar directamente\n        setMeetingsState(Array.isArray(meetingsData) ? meetingsData : []);\n        dataLoadedRef.current = true;\n      }\n    } catch (error) {\n      console.error('Error al cargar datos:', error);\n      setTasksState(initialTasksDefault);\n      setMeetingsState([]);\n    }\n  }, []);\n  \n  const [showNewTask, setShowNewTask] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [formData, setFormData] = useState({\n    title: '',\n    desc: '',\n    category: 'OTROS',\n    startDate: new Date().toISOString().slice(0, 10),\n    startTime: '10:00',\n    endDate: new Date().toISOString().slice(0, 10),\n    endTime: '11:00',\n    long: false,\n  });\n  \n  const [currentView, setCurrentView] = useState('month');\n  const [calendarDate, setCalendarDate] = useState(new Date());\n  \n  const [syncStatus, setSyncStatus] = useState(() => {\n    try {\n      return getSyncState();\n    } catch (error) {\n      console.error('Error al obtener estado de sincronización:', error);\n      return { isOnline: navigator.onLine, isSyncing: false };\n    }\n  });\n  \n  const [columnWidthState] = useState(65);\n  const listCellWidth = '155px';\n\n  // Manejar eventos de calendario externos\n  useEffect(() => {\n    const handler = (evt) => {\n      const meeting = evt?.detail?.meeting;\n      if (meeting && meeting.start && meeting.end && meeting.title) {\n        addMeeting(meeting);\n      }\n    };\n    window.addEventListener('lovenda-tasks', handler);\n    return () => window.removeEventListener('lovenda-tasks', handler);\n  }, [meetingsState]);\n\n  // Función para añadir una reunión\n  const addMeeting = useCallback((meeting) => {\n    const newMeeting = {\n      ...meeting,\n      id: `meeting-${Date.now()}`,\n      title: meeting.title || 'Nueva reunión',\n      start: new Date(meeting.start),\n      end: new Date(meeting.end)\n    };\n    setMeetingsState(prev => [...prev, newMeeting]);\n  }, []);\n\n  // Estado para tareas completadas (inicial vacío, se cargará asíncronamente)\n  const [completed, setCompleted] = useState({});\n\n  // Cargar tareas completadas de Firestore/Storage sin bloquear render\n  useEffect(() => {\n    let isMounted = true;\n    (async () => {\n      try {\n        const data = await loadData('tasksCompleted', { defaultValue: {}, collection: 'userTasksCompleted' });\n        if (isMounted && data && typeof data === 'object' && !Array.isArray(data)) {\n          setCompleted(data);\n        }\n      } catch (error) {\n        console.error('Error cargando tasksCompleted:', error);\n      }\n    })();\n    return () => { isMounted = false; };\n  }, []);\n\n  // Suscribirse al estado de sincronización\n  useEffect(() => {\n    return subscribeSyncState(setSyncStatus);\n  }, []);\n\n  // Guardar cambios cuando cambie el estado (evitando sobrescribir con datos vacíos al inicio)\n  useEffect(() => {\n    if (dataLoadedRef.current) {\n      saveData('tasks', tasksState);\n    }\n  }, [tasksState]);\n\n  useEffect(() => {\n    if (dataLoadedRef.current) {\n      saveData('meetings', meetingsState);\n    }\n  }, [meetingsState]);\n\n  useEffect(() => {\n    if (dataLoadedRef.current) {\n      saveData('tasksCompleted', completed);\n    }\n  }, [completed]);\n\n  // Sugerencia automática de categoría\n  const sugerirCategoria = (titulo, descripcion) => {\n    const texto = (titulo + ' ' + (descripcion || '')).toLowerCase();\n    if (texto.includes('lugar') || texto.includes('venue') || texto.includes('salon') || texto.includes('espacio')) {\n      return 'LUGAR';\n    } else if (texto.includes('invita') || texto.includes('guest') || texto.includes('persona')) {\n      return 'INVITADOS';\n    } else if (texto.includes('comida') || texto.includes('catering') || texto.includes('menu') || texto.includes('bebida')) {\n      return 'COMIDA';\n    } else if (texto.includes('decora') || texto.includes('adorno') || texto.includes('flor')) {\n      return 'DECORACION';\n    } else if (texto.includes('invitacion') || texto.includes('papel') || texto.includes('tarjeta')) {\n      return 'PAPELERIA';\n    } else if (texto.includes('música') || texto.includes('music') || texto.includes('dj') || texto.includes('band')) {\n      return 'MUSICA';\n    } else if (texto.includes('foto') || texto.includes('video') || texto.includes('grafia')) {\n      return 'FOTOGRAFO';\n    } else if (texto.includes('vestido') || texto.includes('traje') || texto.includes('ropa')) {\n      return 'VESTUARIO';\n    }\n    return 'OTROS';\n  };\n\n  // Manejador de cambios en el formulario\n  // Maneja los cambios del formulario y aplica reglas adicionales de negocio\n  const handleChange = (e) => {\n    const field = e.target.name;\n    const rawValue = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n\n    setFormData((prevForm) => {\n      let updated = { ...prevForm, [field]: rawValue };\n\n      // 1. Sugerir categoría si se cambia el título y la categoría es OTROS\n      if (field === 'title' && (!prevForm.category || prevForm.category === 'OTROS')) {\n        const sugerida = sugerirCategoria(rawValue, prevForm.desc);\n        if (sugerida !== 'OTROS') {\n          updated.category = sugerida;\n        }\n      }\n\n      // 2. Si cambia la fecha de inicio, asegurarnos de que la fecha de fin no sea anterior\n      if (field === 'startDate') {\n        const start = new Date(rawValue);\n        const end = new Date(prevForm.endDate);\n        if (!prevForm.endDate || end < start) {\n          updated.endDate = rawValue; // Ajustar fin al mismo día por defecto\n        }\n      }\n\n      // 3. Si cambia la fecha de fin y resulta ser anterior a la de inicio, corrige inicio\n      if (field === 'endDate') {\n        const start = new Date(prevForm.startDate);\n        const end = new Date(rawValue);\n        if (end < start) {\n          updated.startDate = rawValue;\n        }\n      }\n\n      return updated;\n    });\n  };\n\n  // Resetear formulario\n  const resetForm = () => {\n    setFormData({\n      title: '', desc: '', category: 'OTROS', \n      startDate: new Date().toISOString().slice(0, 10), \n      startTime: '10:00', endDate: new Date().toISOString().slice(0, 10), \n      endTime: '11:00', long: false\n    });\n  };\n\n  // Cerrar modal\n  const closeModal = () => {\n    setShowNewTask(false);\n    setEditingId(null);\n    resetForm();\n  };\n  \n  // Asignación automática de categoría con IA\n  const asignarCategoriaConIA = async (titulo, descripcion) => {\n    try {\n      const texto = (titulo + ' ' + (descripcion || '')).toLowerCase();\n      // Primero intentamos con reglas simples\n      const sugerida = sugerirCategoria(titulo, descripcion);\n      if (sugerida !== 'OTROS') return sugerida;\n      \n      // Si las reglas simples no funcionan, usamos IA\n      const palabrasClave = {\n        LUGAR: ['venue', 'location', 'lugar', 'sitio', 'espacio', 'salón', 'jardín', 'terraza'],\n        INVITADOS: ['guests', 'invitados', 'personas', 'asistentes', 'confirmaciones', 'lista', 'rsvp'],\n        COMIDA: ['catering', 'food', 'comida', 'bebida', 'menu', 'bocadillos', 'pastel', 'torta'],\n        DECORACION: ['decoración', 'flores', 'arreglos', 'centros de mesa', 'iluminación', 'ambientación'],\n        PAPELERIA: ['invitaciones', 'papelería', 'save the date', 'tarjetas', 'programa', 'seating plan'],\n        MUSICA: ['música', 'dj', 'banda', 'playlist', 'sonido', 'baile', 'entretenimiento'],\n        FOTOGRAFO: ['fotografía', 'video', 'recuerdos', 'álbum', 'sesión'],\n        VESTUARIO: ['vestido', 'traje', 'accesorios', 'zapatos', 'maquillaje', 'peluquería'],\n      };\n      \n      // Contar coincidencias por categoría\n      const scores = {};\n      Object.entries(palabrasClave).forEach(([cat, palabras]) => {\n        scores[cat] = palabras.filter(palabra => texto.includes(palabra)).length;\n      });\n      \n      // Encontrar la categoría con mayor puntuación\n      let maxScore = 0;\n      let maxCat = 'OTROS';\n      Object.entries(scores).forEach(([cat, score]) => {\n        if (score > maxScore) {\n          maxScore = score;\n          maxCat = cat;\n        }\n      });\n      \n      return maxScore > 0 ? maxCat : 'OTROS';\n    } catch (error) {\n      console.error('Error al asignar categoría:', error);\n      return 'OTROS';\n    }\n  };\n\n  // Guardar una tarea\n  const handleSaveTask = async () => {\n    try {\n      // Validar formulario básico\n      if (!formData.title.trim()) {\n        alert('Por favor ingresa un título');\n        return;\n      }\n      \n      if (!formData.startDate) {\n        alert('Por favor selecciona una fecha de inicio');\n        return;\n      }\n      \n      if (!formData.endDate) {\n        alert('Por favor selecciona una fecha de fin');\n        return;\n      }\n      \n      // Construir fechas completas\n      const startDateStr = formData.startDate;\n      const startTimeStr = formData.startTime || '00:00';\n      const endDateStr = formData.endDate;\n      const endTimeStr = formData.endTime || '23:59';\n      \n      const startDate = new Date(`${startDateStr}T${startTimeStr}`);\n      const endDate = new Date(`${endDateStr}T${endTimeStr}`);\n      \n      // Validar fechas\n      if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n        alert('Fechas no válidas');\n        return;\n      }\n      \n      if (endDate < startDate) {\n        alert('La fecha de fin debe ser posterior a la de inicio');\n        return;\n      }\n      \n      // Asignar categoría con IA si no se especificó\n      let category = formData.category;\n      if (category === 'OTROS') {\n        category = await asignarCategoriaConIA(formData.title, formData.desc);\n      }\n      \n      // Crear objeto de tarea/evento\n      const taskData = {\n        id: editingId || `task-${Date.now()}`,\n        title: formData.title,\n        desc: formData.desc,\n        start: startDate,\n        end: endDate,\n        category: category\n      };\n      \n      // Añadir/actualizar según sea una tarea de largo plazo o una reunión\n      if (formData.long) {\n        // Para el diagrama Gantt\n        const ganttTask = {\n          ...taskData,\n          name: taskData.title,\n          progress: 0,\n          type: 'task',\n          isDisabled: false,\n          dependencies: []\n        };\n        \n        if (editingId) {\n          setTasksState(prev => prev.map(t => t.id === editingId ? ganttTask : t));\n        } else {\n          setTasksState(prev => [...prev, ganttTask]);\n        }\n      } else {\n        // Para el calendario\n        if (editingId) {\n          // Buscar primero en tareas Gantt\n          const taskIndex = Array.isArray(tasksState) ? tasksState.findIndex(t => t.id === editingId) : -1;\n          if (taskIndex >= 0) {\n            setTasksState(prev => prev.filter(t => t.id !== editingId));\n          } else {\n            // Si no está en tareas, buscar en reuniones\n            setMeetingsState(prev => prev.map(m => m.id === editingId ? taskData : m));\n          }\n        } else {\n          setMeetingsState(prev => [...prev, taskData]);\n        }\n      }\n      \n      // Cerrar modal y limpiar\n      closeModal();\n    } catch (error) {\n      console.error('Error al guardar tarea:', error);\n      alert('Hubo un error al guardar la tarea');\n    }\n  };\n\n  // Eliminar una tarea\n  const handleDeleteTask = () => {\n    if (confirm('¿Estás seguro de querer eliminar esta tarea?')) {\n      // Buscar en ambas colecciones - con verificación de tipo\n      const inTasks = Array.isArray(tasksState) && tasksState.some(t => t.id === editingId);\n      if (inTasks) {\n        setTasksState(prev => prev.filter(t => t.id !== editingId));\n      } else {\n        setMeetingsState(prev => prev.filter(m => m.id !== editingId));\n      }\n      closeModal();\n    }\n  };\n\n  // Marcar tarea como completada\n  const toggleCompleted = id => {\n    setCompleted(prev => ({ ...prev, [id]: !prev[id] }));\n  };\n\n  // Procesar eventos para despliegue seguro - asegurando que tasksState sea un array\n  const allEvents = [\n    ...(Array.isArray(tasksState) ? tasksState.map(t => ({ ...t, title: t.name || t.title })) : []),\n    ...(Array.isArray(meetingsState) ? meetingsState : [])\n  ];\n\n  // Función auxiliar para validar y normalizar fechas\n  const validateAndNormalizeDate = (date) => {\n    if (!date) return null;\n    \n    let validDate = date;\n    if (!(date instanceof Date)) {\n      try {\n        validDate = new Date(date);\n      } catch (e) {\n        return null;\n      }\n    }\n    \n    return isNaN(validDate.getTime()) ? null : validDate;\n  };\n\n  // Asegurar que todos los eventos tengan los campos necesarios\n  const safeEvents = allEvents\n    .filter(event => event !== null && event !== undefined)\n    .map(event => {\n      // Verificar que start y end existan\n      if (!event.start || !event.end) {\n        return null;\n      }\n      \n      // Asegurar que start y end sean objetos Date válidos\n      const start = validateAndNormalizeDate(event.start);\n      const end = validateAndNormalizeDate(event.end);\n      \n      // Si alguna fecha no es válida, descartar evento\n      if (!start || !end) {\n        return null;\n      }\n      \n      // Devolver evento normalizado\n      return {\n        ...event,\n        start,\n        end,\n        title: event.title || event.name || \"Sin título\"\n      };\n    })\n    .filter(Boolean); // Eliminar eventos nulos\n\n    // Ordenar eventos por fecha para uso posterior (listas, etc.)\n    const sortedTasks = [...safeEvents].sort((a, b) => a.start - b.start);\n\n  // Filtro específico para tareas del componente Gantt\n  const taskIdSet = new Set(Array.isArray(tasksState) ? tasksState.filter(Boolean).map(t => t?.id).filter(Boolean) : []);\n\n  const safeGanttTasks = Array.isArray(tasksState) \n    ? tasksState\n        .filter(task => task !== null && task !== undefined)\n        .map(task => {\n          // Verificar que start y end existan\n          if (!task.start || !task.end) {\n            return null;\n          }\n          \n          // Validar fechas\n          const start = validateAndNormalizeDate(task.start);\n          const end = validateAndNormalizeDate(task.end);\n          \n          // Si alguna fecha no es válida, descartar tarea\n          if (!start || !end) {\n            return null;\n          }\n          \n          // Sanear dependencias para que solo contengan IDs de tareas existentes\n          const deps = Array.isArray(task.dependencies)\n            ? task.dependencies.filter(dep => taskIdSet.has(dep))\n            : [];\n\n          // Devolver tarea normalizada para formato Gantt\n          return {\n            ...task,\n            start,\n            end,\n            name: task.name || task.title || \"Sin título\",\n            type: task.type || \"task\",\n            id: task.id,\n            progress: task.progress || 0,\n            isDisabled: task.isDisabled || false,\n            dependencies: deps\n          };\n        })\n        .filter(Boolean) // Eliminar tareas nulas\n    : [];\n\n  // Cálculo de progreso - asegurando que los estados sean arrays\n  const allTaskIds = [\n    ...(Array.isArray(tasksState) ? tasksState.map(t => t.id) : []),\n    ...(Array.isArray(meetingsState) ? meetingsState.map(m => m.id) : [])\n  ];\n  const totalTasks = allTaskIds.length;\n  const completedCount = allTaskIds.filter(id => completed[id]).length;\n  const percent = totalTasks === 0 ? 0 : Math.round((completedCount / totalTasks) * 100);\n  let barColor = 'bg-red-500';\n  if (percent >= 80) barColor = 'bg-green-500';\n  else if (percent >= 40) barColor = 'bg-blue-500';\n\n  return (\n    <div className=\"max-w-5xl mx-auto p-4 md:p-6 space-y-6 pb-32\">\n      <style>{` \n        ._1nBOt > *:nth-child(n+2),\n        ._34SS0 > *:nth-child(n+2) {\n          display: none !important;\n        }\n        /* Se eliminan las reglas de flex personalizadas que afectaban al grid del calendario */\n      `}</style>\n      \n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"page-title\">Gestión de Tareas</h1>\n        <div className=\"flex items-center space-x-4\">\n          {/* Indicador de sincronización */}\n          <div className=\"flex items-center\">\n            {syncStatus.isSyncing ? (\n              <RefreshCw className=\"w-4 h-4 animate-spin text-yellow-500 mr-2\" />\n            ) : syncStatus.isOnline ? (\n              syncStatus.pendingChanges ? (\n                <Cloud className=\"w-4 h-4 text-orange-500 mr-2\" />\n              ) : (\n                <Cloud className=\"w-4 h-4 text-green-500 mr-2\" />\n              )\n            ) : (\n              <CloudOff className=\"w-4 h-4 text-red-500 mr-2\" />\n            )}\n            <div className=\"text-sm text-gray-500\">\n              {syncStatus.isOnline\n                ? syncStatus.isSyncing\n                  ? \"Sincronizando...\"\n                  : syncStatus.pendingChanges\n                  ? \"Cambios pendientes\"\n                  : \"Sincronizado\"\n                : \"Sin conexión\"}\n            </div>\n          </div>\n          {/* Botones de acción */}\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => {\n                resetForm();\n                setShowNewTask(true);\n              }}\n              className=\"bg-pink-500 text-white px-4 py-2 rounded-md transition-colors hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:ring-opacity-50\"\n            >\n              Nueva Tarea\n            </button>\n            <button\n              onClick={() => downloadAllICS(safeEvents)}\n              className=\"bg-gray-200 text-gray-700 px-4 py-2 rounded-md transition-colors hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50\"\n            >\n              Vincular Calendario\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Componente para el diagrama Gantt */}\n      <div className=\"bg-[var(--color-surface)] rounded-xl shadow-md p-6 transition-all hover:shadow-lg\">\n        <h2 className=\"text-xl font-semibold mb-4\">Tareas a Largo Plazo</h2>\n        <div className=\"h-96 overflow-x-auto overflow-y-hidden mb-4 border border-gray-100 rounded-lg min-w-[600px]\">\n          {safeGanttTasks && safeGanttTasks.length > 0 ? (\n            <GanttChart \n              tasks={safeGanttTasks} \n              viewMode={ViewMode.Month}\n              listCellWidth={listCellWidth}\n              columnWidth={columnWidthState}\n              onTaskClick={(task) => {\n                // Abrir modal de edición para tareas de largo plazo\n                setEditingId(task.id);\n                setFormData({\n                  title: task.title,\n                  desc: task.desc || '',\n                  category: task.category || 'OTROS',\n                  startDate: task.start.toISOString().slice(0, 10),\n                  startTime: task.start.toTimeString().slice(0,5),\n                  endDate: task.end.toISOString().slice(0, 10),\n                  endTime: task.end.toTimeString().slice(0,5),\n                  long: true,\n                });\n                setShowNewTask(true);\n              }}\n            />\n          ) : (\n            <div className=\"flex items-center justify-center h-full text-[color:var(--color-text)]/70\">\n              No hay tareas de largo plazo que mostrar\n            </div>\n          )}\n        </div>\n        <div className=\"mb-4\">\n          <div className=\"flex justify-between mb-1 text-sm\">\n            <span>Progreso general:</span>\n            <span className=\"font-medium\">{percent.toFixed(1)}%</span>\n          </div>\n          <div className=\"w-full bg-[color:var(--color-surface)]/50 rounded-full h-2.5\">\n            <div \n              className={`h-2.5 rounded-full ${barColor}`} \n              style={{ width: `${percent}%` }}\n            ></div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Contenedor responsivo para Calendario y Lista */}\n      <div className=\"flex flex-col lg:flex-row gap-6\">\n      {/* Calendario de eventos */}\n      <div className=\"flex-1 bg-[var(--color-surface)] rounded-xl shadow-md p-6 mt-4 overflow-x-auto\">\n        <h2 className=\"text-xl font-semibold mb-4\">Calendario de Eventos</h2>\n        \n        {/* Controles de navegación del calendario */}\n        <div className=\"flex justify-between items-center mb-4\">\n          <div className=\"space-x-2\">\n            <button \n              className={`px-3 py-1 rounded ${currentView === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n              onClick={() => setCurrentView('month')}\n            >\n              Mes\n            </button>\n            <button \n              className={`px-3 py-1 rounded ${currentView === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n              onClick={() => setCurrentView('week')}\n            >\n              Semana\n            </button>\n            <button \n              className={`px-3 py-1 rounded ${currentView === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n              onClick={() => setCurrentView('day')}\n            >\n              Día\n            </button>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <button \n              className=\"px-2 py-1 rounded bg-gray-200 hover:bg-gray-300\"\n              onClick={() => {\n                const newDate = new Date(calendarDate);\n                if (currentView === 'month') {\n                  newDate.setMonth(newDate.getMonth() - 1);\n                } else if (currentView === 'week') {\n                  newDate.setDate(newDate.getDate() - 7);\n                } else {\n                  newDate.setDate(newDate.getDate() - 1);\n                }\n                setCalendarDate(newDate);\n              }}\n            >\n              &#8592; Anterior\n            </button>\n            <button \n              className=\"px-3 py-1 rounded bg-blue-100 hover:bg-blue-200\"\n              onClick={() => setCalendarDate(new Date())}\n            >\n              Hoy\n            </button>\n            <button \n              className=\"px-2 py-1 rounded bg-gray-200 hover:bg-gray-300\"\n              onClick={() => {\n                const newDate = new Date(calendarDate);\n                if (currentView === 'month') {\n                  newDate.setMonth(newDate.getMonth() + 1);\n                } else if (currentView === 'week') {\n                  newDate.setDate(newDate.getDate() + 7);\n                } else {\n                  newDate.setDate(newDate.getDate() + 1);\n                }\n                setCalendarDate(newDate);\n              }}\n            >\n              Siguiente &#8594;\n            </button>\n          </div>\n        </div>\n        \n        \n        <div className=\"rbc-calendar-container\">\n          {/* Componente Calendar con protección de errores */}\n          <ErrorBoundary\n            fallback={(\n              <div>\n                <div className=\"text-center mb-6\">\n                  <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Error al cargar el calendario</h3>\n                  <p className=\"text-gray-600\">Hubo un problema al cargar el calendario. Puedes gestionar tus eventos a través de la lista inferior.</p>\n                </div>\n                <div className=\"space-y-4 max-h-[300px] overflow-y-auto p-2\">\n                  {safeEvents && safeEvents.length > 0 ? (\n                    sortedTasks\n                      .map(event => {\n                        const eventId = event.id || '';\n                        const eventTitle = event.title || event.name || \"Evento sin título\";\n                        const eventStart = event.start instanceof Date ? event.start : new Date();\n                        const formattedDate = eventStart.toLocaleDateString('es-ES', {\n                          weekday: 'short',\n                          day: 'numeric', \n                          month: 'short',\n                          hour: '2-digit',\n                          minute: '2-digit'\n                        });\n                        \n                        return (\n                          <div \n                            key={eventId} \n                            className=\"flex items-center p-3 border rounded-md hover:shadow-md transition-shadow cursor-pointer\"\n                            onClick={() => {\n                              setEditingId(eventId);\n                              setFormData({\n                                title: eventTitle,\n                                desc: event.desc || '',\n                                category: event.category || 'OTROS',\n                                startDate: eventStart.toISOString().slice(0, 10),\n                                startTime: eventStart.toTimeString().slice(0, 5),\n                                endDate: event.end instanceof Date ? event.end.toISOString().slice(0, 10) : eventStart.toISOString().slice(0, 10),\n                                endTime: event.end instanceof Date ? event.end.toTimeString().slice(0, 5) : '',\n                                long: false,\n                              });\n                              setShowNewTask(true);\n                            }}\n                          >\n                            <div className=\"mr-3\">\n                              <input \n                                type=\"checkbox\" \n                                checked={completed[eventId] || false} \n                                onChange={(e) => {\n                                  e.stopPropagation();\n                                  toggleCompleted(eventId);\n                                }} \n                              />\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className={`font-medium ${completed[eventId] ? 'line-through text-gray-400' : ''}`}>{eventTitle}</div>\n                              <div className=\"text-xs text-gray-500\">{formattedDate}</div>\n                            </div>\n                            <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: categories[event.category || 'OTROS']?.color || '#ccc' }} />\n                          </div>\n                        );\n                      })\n                  ) : (\n                    <div className=\"text-center text-gray-500\">No hay tareas disponibles</div>\n                  )}\n                </div>\n              </div>\n            )}\n          >\n            <div className=\"calendar-container\" style={{ height: '500px' }}>\n              <style>{`\n                /* Estilos para el contenedor del calendario */\n                .calendar-container .rbc-calendar {\n                  width: 100%;\n                  height: 100%;\n                  border: 1px solid #ddd;\n                  border-radius: 4px;\n                }\n                \n                /* Ocultamos la barra de herramientas nativa ya que usamos nuestros botones */\n                .calendar-container .rbc-toolbar {\n                  display: none;\n                }\n                \n                /* Estilos para la vista de mes */\n                .calendar-container .rbc-month-view {\n                  flex: 1;\n                  height: 100%;\n                  min-height: 400px;\n                  display: flex;\n                  flex-direction: column;\n                  flex: 1 0 0;\n                }\n                \n                /* Cabecera del mes */\n                .calendar-container .rbc-month-header {\n                  display: flex;\n                  flex-direction: row;\n                  font-weight: bold;\n                  background-color: #f8f9fa;\n                  border-bottom: 1px solid #ddd;\n                }\n                \n                .calendar-container .rbc-header {\n                  padding: 8px 3px;\n                  text-align: center;\n                  border-bottom: 1px solid #ddd;\n                  flex: 1 0;\n                }\n                \n                /* Filas del mes */\n                .calendar-container .rbc-month-row {\n                  display: flex;\n                  flex-direction: column;\n                  overflow: hidden;\n                  flex: 1;\n                  min-height: 0;\n                }\n                \n                /* Celdas de días */\n                .calendar-container .rbc-day-bg {\n                  flex: 1 0;\n                  border-bottom: 1px solid #eee;\n                  border-left: 1px solid #eee;\n                  cursor: pointer;\n                }\n                \n                .calendar-container .rbc-date-cell {\n                  padding: 4px 5px 0 0;\n                  text-align: right;\n                  font-size: 0.9em;\n                }\n                \n                .calendar-container .rbc-row-segment {\n                  padding: 0 1px 1px 1px;\n                }\n                \n                /* Eventos en el calendario */\n                .calendar-container .rbc-event {\n                  border-radius: 3px;\n                  font-size: 0.85em;\n                  padding: 2px 5px;\n                  margin: 1px 2px;\n                }\n\n                /* Estilos para corregir la altura de las filas */\n                .calendar-container .rbc-month-view .rbc-month-row {\n                  height: 100% !important;\n                  display: flex !important;\n                  flex: 1 1 0 !important;\n                  flex-flow: column !important;\n                }\n                \n                .calendar-container .rbc-row-content {\n                  flex: 1 1 0;\n                  display: flex;\n                  flex-direction: column;\n                  width: 100%;\n                }\n                \n                .calendar-container .rbc-row {\n                  display: flex;\n                  flex: 1 1 0;\n                  width: 100%;\n                }\n              `}</style>\n              <Calendar\n                localizer={localizer}\n                events={safeEvents}\n                date={calendarDate}\n                onNavigate={date => setCalendarDate(date)}\n                startAccessor=\"start\"\n                endAccessor=\"end\"\n                views={{\n                  month: true,\n                  week: true,\n                  day: true\n                }}\n                view={currentView}\n                onView={setCurrentView}\n                toolbar={false}\n                popup={true}\n                eventPropGetter={eventStyleGetter}\n                components={{ event: Event }}\n                onDoubleClickEvent={(event) => {\n                  setEditingId(event.id);\n                  setFormData({\n                    title: event.title,\n                    desc: event.desc || '',\n                    category: event.category || 'OTROS',\n                    startDate: event.start.toISOString().slice(0, 10),\n                    startTime: event.start.toTimeString().slice(0, 5),\n                    endDate: event.end.toISOString().slice(0, 10),\n                    endTime: event.end.toTimeString().slice(0, 5),\n                    long: false,\n                  });\n                  setShowNewTask(true);\n                }}\n                messages={{\n                  next: \"Siguiente\",\n                  previous: \"Anterior\",\n                  today: \"Hoy\",\n                  month: \"Mes\",\n                  week: \"Semana\",\n                  day: \"Día\"\n                }}\n              />\n            </div>\n          </ErrorBoundary>\n        </div>\n\n      </div>\n\n      {false && (\n        <div className=\"w-full\">\n          <div className=\"calendar-container\" style={{ height: '500px' }}>\n            <style>{`\n              /* Estilos para el contenedor del calendario */\n              .calendar-container .rbc-calendar {\n                width: 100%;\n                height: 100%;\n                border: 1px solid #ddd;\n                border-radius: 4px;\n              }\n              \n              /* Ocultamos la barra de herramientas nativa ya que usamos nuestros botones */\n              .calendar-container .rbc-toolbar {\n                display: none;\n              }\n              \n              /* Estilos para la vista de mes */\n              .calendar-container .rbc-month-view {\n                flex: 1;\n                height: 100%;\n                min-height: 400px;\n                display: flex;\n                flex-direction: column;\n                flex: 1 0 0;\n              }\n              \n              /* Cabecera del mes */\n              .calendar-container .rbc-month-header {\n                display: flex;\n                flex-direction: row;\n                font-weight: bold;\n                background-color: #f8f9fa;\n                border-bottom: 1px solid #ddd;\n              }\n              \n              .calendar-container .rbc-header {\n                padding: 8px 3px;\n                text-align: center;\n                border-bottom: 1px solid #ddd;\n                flex: 1 0;\n              }\n              \n              /* Filas del mes */\n              .calendar-container .rbc-month-row {\n                display: flex;\n                flex-direction: column;\n                overflow: hidden;\n                flex: 1;\n                min-height: 0;\n              }\n              \n              /* Celdas de días */\n              .calendar-container .rbc-day-bg {\n                flex: 1 0;\n                border-bottom: 1px solid #eee;\n                border-left: 1px solid #eee;\n                cursor: pointer;\n              }\n              \n              .calendar-container .rbc-date-cell {\n                padding: 4px 5px 0 0;\n                text-align: right;\n                font-size: 0.9em;\n              }\n              \n              .calendar-container .rbc-row-segment {\n                padding: 0 1px 1px 1px;\n              }\n              \n              /* Eventos en el calendario */\n              .calendar-container .rbc-event {\n                border-radius: 3px;\n                font-size: 0.85em;\n                padding: 2px 5px;\n                margin: 1px 2px;\n              }\n\n              /* Estilos para corregir la altura de las filas */\n              .calendar-container .rbc-month-view .rbc-month-row {\n                height: 100% !important;\n                display: flex !important;\n                flex: 1 1 0 !important;\n                flex-flow: column !important;\n              }\n              \n              .calendar-container .rbc-row-content {\n                flex: 1 1 0;\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n              }\n              \n              .calendar-container .rbc-row {\n                display: flex;\n                flex: 1 1 0;\n                width: 100%;\n              }\n            `}</style>\n            <Calendar\n              localizer={localizer}\n              events={safeEvents}\n              date={calendarDate}\n              onNavigate={date => setCalendarDate(date)}\n              startAccessor=\"start\"\n              endAccessor=\"end\"\n              views={{\n                month: true,\n                week: true,\n                day: true\n              }}\n              view={currentView}\n              onView={setCurrentView}\n              toolbar={false}\n              popup={true}\n              eventPropGetter={eventStyleGetter}\n              components={{ event: Event }}\n              onDoubleClickEvent={(event) => {\n                setEditingId(event.id);\n                setFormData({\n                  title: event.title,\n                  desc: event.desc || '',\n                  category: event.category || 'OTROS',\n                  startDate: event.start.toISOString().slice(0, 10),\n                  startTime: event.start.toTimeString().slice(0, 5),\n                  endDate: event.end.toISOString().slice(0, 10),\n                  endTime: event.end.toTimeString().slice(0, 5),\n                  long: false,\n                });\n                setShowNewTask(true);\n              }}\n              messages={{\n                next: \"Siguiente\",\n                previous: \"Anterior\",\n                today: \"Hoy\",\n                month: \"Mes\",\n                week: \"Semana\",\n                day: \"Día\"\n              }}\n            />\n          </div>\n        </div>\n      )}\n       <div className=\"bg-white rounded-xl shadow-md p-6 mt-4 lg:mt-0 lg:w-80 flex-none transition-all hover:shadow-lg\">\n        <h2 className=\"text-xl font-semibold mb-4\">Listado de Tareas</h2>\n        <div className=\"w-full\">\n          <TaskList \n            tasks={safeEvents} \n            onTaskClick={(event) => {\n              setEditingId(event.id);\n              setFormData({\n                title: event.title,\n                desc: event.desc || '',\n                category: event.category || 'OTROS',\n                startDate: event.start.toISOString().slice(0, 10),\n                startTime: event.start.toTimeString().slice(0,5),\n                endDate: event.end.toISOString().slice(0, 10),\n                endTime: event.end.toTimeString().slice(0,5),\n                long: false\n              });\n              setShowNewTask(true);\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal para nueva tarea */}\n      {showNewTask && (\n        <TaskForm \n          formData={formData} \n          editingId={editingId} \n          handleChange={handleChange}\n          handleSaveTask={handleSaveTask}\n          handleDeleteTask={handleDeleteTask}\n          closeModal={closeModal}\n          setFormData={setFormData}\n        />\n      )}\n\n      </div>\n     </div>\n   );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\tasks\\__tests__\\TaskForm.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\timeline\\TimelineInteractive.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { Check, GripVertical, Plus } from 'lucide-react';\r\n\r\nconst defaultEvents = [\r\n  { id: '1', title: 'Ceremonia', time: '17:00', location: 'Iglesia' },\r\n  { id: '2', title: 'Cóctel', time: '18:30', location: 'Jardines' },\r\n  { id: '3', title: 'Banquete', time: '20:30', location: 'Salón' },\r\n  { id: '4', title: 'Baile', time: '23:00', location: 'Pista' },\r\n];\r\n\r\nexport default function TimelineInteractive({ events = defaultEvents, onChange }) {\r\n  const [items, setItems] = useState(events);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [newEvent, setNewEvent] = useState({ title: '', time: '', location: '' });\r\n\r\n  const reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n    return result;\r\n  };\r\n\r\n  const onDragEnd = result => {\r\n    if (!result.destination) return;\r\n    const ordered = reorder(items, result.source.index, result.destination.index);\r\n    setItems(ordered);\r\n    onChange && onChange(ordered);\r\n  };\r\n\r\n  const saveEdit = (id, field, value) => {\r\n    const updated = items.map(ev => (ev.id === id ? { ...ev, [field]: value } : ev));\r\n    setItems(updated);\r\n    onChange && onChange(updated);\r\n  };\r\n\r\n  const addEvent = () => {\r\n    if (!newEvent.title) return;\r\n    const newItem = { ...newEvent, id: Date.now().toString() };\r\n    const updated = [...items, newItem];\r\n    setItems(updated);\r\n    setNewEvent({ title: '', time: '', location: '' });\r\n    onChange && onChange(updated);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <h3 className=\"text-lg font-semibold\">Cronograma</h3>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"timeline\">\r\n          {provided => (\r\n            <ul {...provided.droppableProps} ref={provided.innerRef} className=\"space-y-2\">\r\n              {items.map((ev, index) => (\r\n                <Draggable key={ev.id} draggableId={ev.id} index={index}>\r\n                  {prov => (\r\n                    <li\r\n                      ref={prov.innerRef}\r\n                      {...prov.draggableProps}\r\n                      className=\"bg-white border p-3 rounded flex items-center gap-2\"\r\n                    >\r\n                      <span {...prov.dragHandleProps} className=\"text-gray-400 cursor-grab\"><GripVertical size={14}/></span>\r\n                      {/* Title */}\r\n                      {editingId===ev.id ? (\r\n                        <input\r\n                          autoFocus\r\n                          value={ev.title}\r\n                          onChange={e=>saveEdit(ev.id,'title',e.target.value)}\r\n                          onBlur={()=>setEditingId(null)}\r\n                          className=\"border-b flex-1 focus:outline-none text-sm\"\r\n                        />\r\n                      ) : (\r\n                        <span className=\"flex-1 cursor-pointer\" onDoubleClick={()=>setEditingId(ev.id)}>{ev.title}</span>\r\n                      )}\r\n                      {/* Time */}\r\n                      <input\r\n                        type=\"time\"\r\n                        value={ev.time}\r\n                        onChange={e=>saveEdit(ev.id,'time',e.target.value)}\r\n                        className=\"border rounded px-1 text-xs\"\r\n                      />\r\n                      {/* Location */}\r\n                      <input\r\n                        value={ev.location}\r\n                        onChange={e=>saveEdit(ev.id,'location',e.target.value)}\r\n                        placeholder=\"Lugar\"\r\n                        className=\"border rounded px-1 text-xs\"\r\n                      />\r\n                    </li>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </ul>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n      {/* Add new event */}\r\n      <div className=\"flex gap-2 items-center\">\r\n        <input\r\n          value={newEvent.title}\r\n          onChange={e=>setNewEvent({...newEvent,title:e.target.value})}\r\n          placeholder=\"Nuevo evento\"\r\n          className=\"border rounded px-2 text-xs flex-1\"\r\n        />\r\n        <input\r\n          type=\"time\"\r\n          value={newEvent.time}\r\n          onChange={e=>setNewEvent({...newEvent,time:e.target.value})}\r\n          className=\"border rounded px-1 text-xs\"\r\n        />\r\n        <input\r\n          value={newEvent.location}\r\n          onChange={e=>setNewEvent({...newEvent,location:e.target.value})}\r\n          placeholder=\"Lugar\"\r\n          className=\"border rounded px-2 text-xs\"\r\n        />\r\n        <button onClick={addEvent} className=\"bg-blue-600 text-white rounded p-1\"><Plus size={14}/></button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ui\\Alert.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ui\\Badge.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ui\\Button.jsx","messages":[{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":71,"column":2,"nodeType":"EmptyStatement","messageId":"unexpected","endLine":71,"endColumn":3,"fix":{"range":[1959,1961],"text":"}"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Componente Button personalizado \n * Ofrece diferentes variantes y tamaños\n * \n * @component\n * @example\n * ```jsx\n * <Button variant=\"primary\" size=\"md\" onClick={handleClick}>Click me</Button>\n * ```\n */\nexport default function Button({\n  children,\n  variant = \"primary\",\n  size = \"md\",\n  className = \"\",\n  disabled = false,\n  onClick,\n  type = \"button\",\n  startIcon,\n  leftIcon,\n  ...props\n}) {\n  // Clases base\n  const baseClasses = \"inline-flex items-center justify-center font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\";\n  \n  // Variantes\n  const variantClasses = {\n    primary: \"bg-blue-600 hover:bg-blue-700 text-white\",\n    secondary: \"bg-gray-100 hover:bg-gray-200 text-gray-900\",\n    outline: \"bg-transparent border border-gray-300 hover:bg-gray-50 text-gray-700\",\n    ghost: \"bg-transparent hover:bg-gray-100 text-gray-700\",\n    destructive: \"bg-red-600 hover:bg-red-700 text-white\",\n    link: \"bg-transparent underline-offset-4 hover:underline text-blue-600 hover:text-blue-800\"\n  };\n  \n  // Tamaños\n  const sizeClasses = {\n    xs: \"text-xs px-2 py-1 rounded\",\n    sm: \"text-sm px-3 py-1.5 rounded\",\n    md: \"text-sm px-4 py-2 rounded-md\",\n    lg: \"text-base px-5 py-2.5 rounded-md\",\n    xl: \"text-lg px-6 py-3 rounded-md\"\n  };\n  \n  // Estado deshabilitado\n  const disabledClasses = disabled ? \"opacity-50 cursor-not-allowed pointer-events-none\" : \"cursor-pointer\";\n\n  // Juntar todas las clases\n  const buttonClasses = [\n    baseClasses,\n    variantClasses[variant] || variantClasses.primary,\n    sizeClasses[size] || sizeClasses.md,\n    disabledClasses,\n    className\n  ].join(\" \");\n\n  return (\n    <button\n      type={type}\n      className={buttonClasses}\n      disabled={disabled}\n      onClick={onClick}\n      {...props}\n    >\n      { (startIcon || leftIcon) && <span className=\"mr-2\">{startIcon || leftIcon}</span>}\n      {children}\n    </button>\n  );\n};\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ui\\Card.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ui\\IconComponents.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ui\\Loader.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ui\\Progress.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ui\\Spinner.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\components\\ui\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\context\\AuthContext.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\context\\UserContext.jsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'sendEmailVerification' is not defined.","line":94,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":94,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'sendPasswordResetEmail' is not defined.","line":100,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'updateEmail' is not defined.","line":106,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":106,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'updatePassword' is not defined.","line":113,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":113,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'reauthenticateWithCredential' is not defined.","line":119,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":119,"endColumn":41}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { auth } from '../firebaseConfig';\r\nimport { setPersistence, browserLocalPersistence, browserSessionPersistence } from 'firebase/auth';\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged,\r\n  updateProfile as fbUpdateProfile,\r\n} from 'firebase/auth';\r\nimport { db } from '../firebaseConfig';\r\nimport { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';\r\n\r\nconst UserContext = createContext({\r\n  user: null,\r\n  isAuthenticated: false,\r\n  loading: true,\r\n  signup: async () => {},\r\n  login: async () => {},\r\n  logout: async () => {},\r\n  updateProfile: async () => {},\r\n});\r\n\r\nexport const useUserContext = () => useContext(UserContext);\r\n\r\nexport default function UserProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Bypass login in development phase\r\n    if (process.env.NODE_ENV === 'development') {\r\n      setUser({ uid: 'dev', email: 'dev@local', role: 'particular' });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\r\n      if (firebaseUser) {\r\n        let role = 'particular';\r\n        try {\r\n          const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\r\n          if (userDoc.exists()) {\r\n            role = userDoc.data().role || 'particular';\r\n          } else {\r\n            // Intenta crear el documento si no existe\r\n            await setDoc(\r\n              doc(db, 'users', firebaseUser.uid),\r\n              { role, email: firebaseUser.email, createdAt: serverTimestamp() },\r\n              { merge: true }\r\n            );\r\n          }\r\n        } catch (err) {\r\n          // No interrumpas la sesión por problemas de permisos / offline\r\n          console.warn('No se pudo obtener/crear el doc de usuario:', err?.code || err);\r\n        }\r\n        setUser({ ...firebaseUser, role });\r\n      } else {\r\n        setUser(null);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const signup = async (email, password) => {\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    const newUser = userCredential.user;\r\n    await setDoc(doc(db, 'users', newUser.uid), { role: 'particular', email: newUser.email, createdAt: serverTimestamp() });\r\n    setUser({ ...newUser, role: 'particular' });\r\n    return newUser;\r\n  };\r\n\r\n  const login = async (email, password, remember = true) => {\r\n    await setPersistence(auth, remember ? browserLocalPersistence : browserSessionPersistence);\r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    setUser(userCredential.user);\r\n    return userCredential.user;\r\n  };\r\n\r\n  const logout = async () => {\r\n    await signOut(auth);\r\n    setUser(null);\r\n  };\r\n\r\n  const updateProfile = async (profile) => {\r\n    if (auth.currentUser) {\r\n      await fbUpdateProfile(auth.currentUser, profile);\r\n      setUser({ ...auth.currentUser, ...profile });\r\n    }\r\n  };\r\n\r\n  const sendVerificationEmail = async () => {\r\n    if (auth.currentUser) {\r\n      await sendEmailVerification(auth.currentUser);\r\n    }\r\n  };\r\n\r\n  const sendPasswordReset = async (email) => {\r\n    if (email) {\r\n      await sendPasswordResetEmail(auth, email);\r\n    }\r\n  };\r\n\r\n  const updateUserEmail = async (newEmail) => {\r\n    if (auth.currentUser) {\r\n      await updateEmail(auth.currentUser, newEmail);\r\n      setUser({ ...auth.currentUser, email: newEmail });\r\n    }\r\n  };\r\n\r\n  const updateUserPassword = async (newPassword) => {\r\n    if (auth.currentUser) {\r\n      await updatePassword(auth.currentUser, newPassword);\r\n    }\r\n  };\r\n\r\n  const reauthenticate = async (credential) => {\r\n    if (auth.currentUser) {\r\n      await reauthenticateWithCredential(auth.currentUser, credential);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{\r\n      user,\r\n      isAuthenticated: !!user,\r\n      loading,\r\n      signup,\r\n      login,\r\n      logout,\r\n      updateProfile,\r\n      sendVerificationEmail,\r\n      sendPasswordReset,\r\n      updateUserEmail,\r\n      updateUserPassword,\r\n      reauthenticate,\r\n    }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\contexts\\UserContext.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\data\\templates\\generalTemplates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\data\\templates\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\data\\templates\\invitadosTemplates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\data\\templates\\proveedorTemplates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\data\\templates\\seguimientoTemplates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\debug.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\debug\\setupDebug.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\features\\seating\\GuestPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'forwardRef' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { forwardRef } from 'react';\r\nimport { FixedSizeList } from 'react-window';\r\nimport GuestItem from '../../components/GuestItem';\r\n\r\n/**\r\n * GuestPanel\r\n * Muestra la lista de invitados con búsqueda y virtualización.\r\n * Se extrae desde SeatingPlan para mejorar la legibilidad y reutilización.\r\n */\r\nconst GuestPanel = ({\r\n  guests,\r\n  tables,\r\n  search,\r\n  setSearch,\r\n  guestOpen,\r\n  setGuestOpen,\r\n  guestBtnRef,\r\n  searchRef,\r\n}) => {\r\n  // Filtro de invitados libres según texto y mesas asignadas\r\n  const availableGuests = guests.filter(\r\n    (g) =>\r\n      g.name.toLowerCase().includes(search.toLowerCase()) &&\r\n      !tables.some((t) => t.guestId === g.id)\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {/* Toggle button (mobile) */}\r\n      <button\r\n        ref={guestBtnRef}\r\n        className=\"md:hidden mb-2 px-3 py-1 bg-gray-200 rounded\"\r\n        onClick={() => setGuestOpen((o) => !o)}\r\n        aria-expanded={guestOpen}\r\n        aria-controls=\"guestPanel\"\r\n      >\r\n        {guestOpen ? 'Ocultar invitados' : 'Mostrar invitados'}\r\n      </button>\r\n\r\n      {/* Guest list container */}\r\n      <div\r\n        id=\"guestPanel\"\r\n        className={`md:w-1/4 border rounded p-2 h-96 overflow-y-auto bg-gray-50 ${\r\n          guestOpen ? 'block md:block' : 'hidden md:block'\r\n        } ${\r\n          guestOpen ? 'fixed inset-0 z-50 bg-white md:static md:bg-gray-50' : ''\r\n        }`}\r\n        role=\"dialog\"\r\n        aria-modal={guestOpen}\r\n        aria-label=\"Lista de invitados\"\r\n      >\r\n        {/* Search input */}\r\n        <input\r\n          ref={searchRef}\r\n          type=\"text\"\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n          placeholder=\"Buscar invitado\"\r\n          className=\"mb-2 w-full border rounded px-2 py-1\"\r\n        />\r\n\r\n        {/* Virtualized list */}\r\n        <FixedSizeList\r\n          height={400}\r\n          width={300}\r\n          itemSize={50}\r\n          itemCount={availableGuests.length}\r\n        >\r\n          {({ index, style }) => (\r\n            <div style={style}>\r\n              <GuestItem guest={availableGuests[index]} />\r\n            </div>\r\n          )}\r\n        </FixedSizeList>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GuestPanel;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\features\\seating\\SeatingCanvas.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'online' is defined but never used.","line":28,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { forwardRef } from 'react';\r\n\r\n\r\n\r\nimport FreeDrawCanvas from '../../components/FreeDrawCanvas';\r\nimport TableItem from '../../components/TableItem';\r\nimport ChairItem from '../../components/ChairItem';\r\n\r\n/**\r\n * SeatingCanvas\r\n * Envoltorio del lienzo con soporte de zoom/pan y renderizado de mesas/áreas.\r\n * Extraído desde SeatingPlan.jsx para mejorar la legibilidad.\r\n */\r\nconst SeatingCanvas = forwardRef(function SeatingCanvas(\r\n  {\r\n    tab,\r\n    areas,\r\n    tables,\r\n    seats = [],\r\n    scale,\r\n    offset,\r\n    addArea,\r\n    onDeleteArea,\r\n    moveTable,\r\n    onAssignGuest,\r\n    onToggleEnabled,\r\n    setConfigTable,\r\n    online,\r\n    handleWheel,\r\n    handlePointerDown,\r\n    guests = [],\r\n    onSelectTable,\r\n    drawMode = 'free',\r\n    canPan = true,\r\n    canMoveTables = true,\r\n    onToggleSeat = () => {},\r\n  },\r\n  containerRef,\r\n) {\r\n  return (\r\n\r\n      <div\r\n        className=\"flex-grow border border-gray-300 h-96 relative\"\r\n        onWheel={canPan ? handleWheel : undefined}\r\n        onPointerDown={canPan ? handlePointerDown : undefined}\r\n        role=\"main\"\r\n        aria-label=\"Lienzo de plano\"\r\n        ref={containerRef}\r\n      >\r\n        {/* Canvas libre */}\r\n        <FreeDrawCanvas\r\n          areas={areas}\r\n          scale={scale}\r\n          offset={offset}\r\n          onFinalize={addArea}\r\n          onDeleteArea={onDeleteArea}\r\n          drawMode={drawMode}\r\n        />\r\n\r\n{/* Sillas (solo ceremonia) */}\r\n        {tab==='ceremony' && seats.map(seat=> (\r\n          <ChairItem key={seat.id} seat={seat} scale={scale} offset={offset} onToggleEnabled={onToggleSeat} />\r\n        ))}\r\n\r\n        {/* Mesas (solo banquete) */}\r\n        {tab==='banquet' && tables.map((t) => (\r\n          <TableItem\r\n            key={t.id}\r\n            table={t}\r\n            scale={scale}\r\n            offset={offset}\r\n            onMove={moveTable}\r\n            onAssignGuest={onAssignGuest}\r\n            onToggleEnabled={onToggleEnabled}\r\n            onOpenConfig={setConfigTable}\r\n            onSelect={onSelectTable}\r\n            guests={guests}\r\n            canMove={canMoveTables}\r\n          />\r\n        ))}\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n  );\r\n});\r\n\r\nexport default SeatingCanvas;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\features\\seating\\useSeatingHistory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\firebaseConfig.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'connectFirestoreEmulator' is defined but never used.","line":3,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":55}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { initializeApp, getApps, getApp } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { initializeFirestore, connectFirestoreEmulator, doc, setDoc, enableIndexedDbPersistence } from 'firebase/firestore';\r\nimport { getAnalytics, isSupported } from 'firebase/analytics';\r\nimport { getDatabase, ref, onValue } from 'firebase/database';\r\n\r\n// Configuración de Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyArwjJewGV5j_vzWjqOsQPoJMSFtaCkSZE\",\r\n  authDomain: \"lovenda-98c77.firebaseapp.com\",\r\n  projectId: \"lovenda-98c77\",\r\n  storageBucket: \"lovenda-98c77.appspot.com\",\r\n  messagingSenderId: \"844882125080\",\r\n  appId: \"1:844882125080:web:4015c2e2e6eedf009f7e6d\",\r\n  measurementId: \"G-4QMWEHYPG8\"\r\n};\r\n\r\n// Variables globales de Firebase\r\nlet app;\r\nlet auth;\r\nlet db;\r\nlet analytics;\r\n\r\n// Configuración simplificada sin módulo de diagnóstico visual\r\n\r\n/**\r\n * Prueba la conexión con Firestore con reintentos\r\n */\r\nconst probarConexionFirestore = async (maxReintentos = 2) => {\r\n  for (let intento = 0; intento <= maxReintentos; intento++) {\r\n    try {\r\n      const docPrueba = doc(db, '_conexion_prueba', 'test');\r\n      await setDoc(docPrueba, { \r\n        timestamp: new Date().toISOString(),\r\n        intento: intento + 1\r\n      }, { merge: true });\r\n      console.log('Prueba de conexión exitosa');\r\n      return true;\r\n    } catch (error) {\r\n      console.warn(`Intento ${intento + 1} fallido:`, error);\r\n      if (intento === maxReintentos) {\r\n        console.error('Todos los intentos de conexión fallaron');\r\n        throw error;\r\n      }\r\n      // Esperar antes de reintentar (backoff exponencial)\r\n      await new Promise(resolver => setTimeout(resolver, 1000 * Math.pow(2, intento)));\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Configura el listener de estado de conexión\r\n */\r\n// Configura el listener de estado de conexión (solo si se habilita explícitamente)\r\nconst configurarListenerConexion = () => {\r\n  if (typeof window === 'undefined') return;\r\n\r\n  // Si la variable de entorno VITE_ENABLE_REALTIME_DB no está en 'true', omitimos\r\n  if (import.meta.env.VITE_ENABLE_REALTIME_DB !== 'true') {\r\n    console.log('Realtime Database deshabilitada – no se configurará listener de conexión');\r\n    return;\r\n  }\r\n  if (typeof window === 'undefined') return;\r\n\r\n  try {\r\n        // Se asume que Realtime Database está correctamente configurada en el proyecto\r\n    const dbRealtime = getDatabase();\r\n    const estadoConexion = ref(dbRealtime, '.info/connected');\r\n    \r\n    onValue(estadoConexion, (snapshot) => {\r\n      if (snapshot.val() === true) {\r\n        console.log('Conectado a Firebase');\r\n        window.mostrarErrorUsuario?.(`Conectado a internet`, 3000);\r\n      } else {\r\n        console.log('Desconectado de Firebase');\r\n\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.warn('No se pudo configurar el listener de conexión:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * Inicializa los servicios de Firebase\r\n */\r\nconst inicializarFirebase = async () => {\r\n  try {\r\n    console.log('Iniciando configuración de Firebase...');\r\n    \r\n    // Inicializar la app de Firebase\r\n    try {\r\n      app = getApps().length ? getApp() : initializeApp(firebaseConfig);\r\n      console.log('✅ Firebase inicializado correctamente');\r\n    } catch (initError) {\r\n      console.error('❌ Error al inicializar Firebase App:', initError);\r\n      throw new Error(`Error al inicializar Firebase: ${initError.message}`);\r\n    }\r\n\r\n    // Inicializar autenticación\r\n    try {\r\n      auth = getAuth(app);\r\n      auth.languageCode = 'es';\r\n      console.log('✅ Autenticación de Firebase inicializada');\r\n    } catch (authError) {\r\n      console.error('❌ Error al inicializar Firebase Auth:', authError);\r\n      throw new Error(`Error al inicializar autenticación: ${authError.message}`);\r\n    }\r\n\r\n    // Inicializar Firestore con mejores opciones para estabilidad de conexión\r\n    try {\r\n      db = initializeFirestore(app, { \r\n        experimentalForceLongPolling: true,\r\n        cacheSizeBytes: 50000000, // ~50MB\r\n        ignoreUndefinedProperties: true\r\n      });\r\n      console.log('✅ Firestore inicializado con configuración optimizada');\r\n    } catch (firestoreError) {\r\n      console.error('❌ Error al inicializar Firestore:', firestoreError);\r\n      throw new Error(`Error al inicializar Firestore: ${firestoreError.message}`);\r\n    }\r\n    \r\n    // Habilitar persistencia offline con IndexedDB\r\n    try {\r\n      await enableIndexedDbPersistence(db);\r\n      console.log('Persistencia offline habilitada para Firestore');\r\n      window.mostrarNotificacion?.('Modo offline habilitado: puedes usar la aplicación sin conexión', 'info');\r\n    } catch (err) {\r\n      if (err.code === 'failed-precondition') {\r\n        // Múltiples pestañas abiertas, solo una puede usar persistencia\r\n        console.warn('La persistencia offline no está disponible en múltiples pestañas abiertas');\r\n      } else if (err.code === 'unimplemented') {\r\n        // El navegador actual no soporta todas las características necesarias\r\n        console.warn('Este navegador no soporta persistencia offline');\r\n      } else {\r\n        console.error('Error al habilitar persistencia offline:', err);\r\n      }\r\n    }\r\n    // Conectar al emulador de Firestore en desarrollo si es necesario\r\n    try {\r\n      if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {\r\n        // Comentamos esta línea si no estás utilizando el emulador local\r\n        // connectFirestoreEmulator(db, 'localhost', 8080);\r\n        console.log('Modo desarrollo detectado - usando Firebase cloud');\r\n      }\r\n    } catch (emulatorError) {\r\n      console.warn('No se pudo configurar el emulador:', emulatorError);\r\n    }\r\n\r\n    // Probar la conexión con Firestore\r\n    try {\r\n      console.log('Probando conexión a Firestore...');\r\n      await probarConexionFirestore();\r\n      console.log('✅ Conexión con Firestore verificada');\r\n      \r\n      // Verificar reglas de seguridad\r\n      try {\r\n        const testDoc = doc(db, '_test_connection', 'test');\r\n        await setDoc(testDoc, { test: new Date().toISOString() }, { merge: true });\r\n        console.log('✅ Prueba de escritura en Firestore exitosa');\r\n        window.mostrarErrorUsuario?.(`✅ Conectado a Firebase correctamente`, 3000);\r\n      } catch (writeError) {\r\n        console.error('❌ Error al escribir en Firestore:', writeError);\r\n        let errorMsg = 'Error al escribir en Firestore';\r\n        \r\n        if (writeError.code === 'permission-denied') {\r\n          errorMsg = 'Error de permisos: No tienes acceso a la base de datos. Verifica tu autenticación o las reglas de seguridad.';\r\n          console.error('❌ Error de permisos en Firestore - revisa las reglas de seguridad');\r\n        } else if (writeError.code === 'unavailable') {\r\n          errorMsg = 'Servidor de Firebase no disponible. Verifica tu conexión a internet.';\r\n          console.error('❌ Error de disponibilidad - Firestore no accesible');\r\n        } else {\r\n          errorMsg = `Error al acceder a Firestore: ${writeError.message}`;\r\n        }\r\n        \r\n        window.mostrarErrorUsuario?.(errorMsg, 10000);\r\n      }\r\n    } catch (error) {\r\n      console.warn('❌ No se pudo conectar a Firestore, trabajando en modo fuera de línea:', error);\r\n      let errorMsg = 'Modo sin conexión - Los cambios se sincronizarán cuando se recupere la conexión';\r\n      \r\n      if (error.code === 'unavailable') {\r\n        errorMsg = 'Firebase no disponible. Verifica tu conexión a internet.';\r\n      } else if (error.message && error.message.includes('network')) {\r\n        errorMsg = 'Problemas de red al conectar con Firebase. Verificando conexión...';\r\n      }\r\n      \r\n      window.mostrarErrorUsuario?.(errorMsg, 10000);\r\n    }\r\n\r\n    // Inicializar Analytics solo en producción\r\n    if (typeof window !== 'undefined' && process.env.NODE_ENV === 'production') {\r\n      try {\r\n        const soporteAnalytics = await isSupported();\r\n        if (soporteAnalytics) {\r\n          analytics = getAnalytics(app);\r\n          console.log('Analytics inicializado');\r\n        } else {\r\n          console.log('Analytics no es compatible con este navegador');\r\n        }\r\n      } catch (error) {\r\n        console.warn('Error al inicializar Analytics:', error);\r\n      }\r\n    }\r\n\r\n    // Configurar listener de conexión\r\n    configurarListenerConexion();\r\n\r\n  } catch (error) {\r\n    console.error('Error al inicializar Firebase:', error);\r\n    if (typeof window !== 'undefined') {\r\n      window.mostrarErrorUsuario?.(\r\n        'Error al conectar con el servidor. La aplicación funcionará en modo fuera de línea.',\r\n        0\r\n      );\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Inicializar Firebase cuando se importe el módulo\r\ninicializarFirebase().catch(error => {\r\n  console.error('Error crítico al inicializar Firebase:', error);\r\n});\r\n\r\nexport { auth, db, analytics };\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useAIProviderEmail.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'generateDefaultSubject' is assigned a value but never used.","line":15,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":65},{"ruleId":"no-unused-vars","severity":2,"message":"'generateDefaultEmailBody' is assigned a value but never used.","line":15,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":91}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { useProviderEmail } from './useProviderEmail';\nimport EmailService from '../services/emailService';\nimport EmailTemplateService from '../services/EmailTemplateService';\n\n/**\n * Hook personalizado que integra la funcionalidad de email con la búsqueda AI de proveedores.\n * Permite enviar emails directamente desde los resultados de búsqueda de AI.\n * \n * @returns {Object} Métodos y propiedades para el envío de emails desde la búsqueda AI\n */\nexport const useAIProviderEmail = () => {\n  const [isSending, setIsSending] = useState(false);\n  const [error, setError] = useState(null);\n  const { userEmail, sendEmailToProvider, generateDefaultSubject, generateDefaultEmailBody } = useProviderEmail();\n  \n  /**\n   * Genera un asunto personalizado basado en el resultado de la búsqueda AI\n   * @param {Object} aiResult Resultado de búsqueda AI\n   * @returns {string} Asunto personalizado para el email\n   */\n  const generateAISubject = useCallback((aiResult) => {\n    if (!aiResult) return '';\n    \n    const templateService = new EmailTemplateService();\n    \n    // Datos para la plantilla\n    const templateData = {\n      providerName: aiResult.name,\n      date: new Date().toLocaleDateString('es-ES', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      }),\n      userName: userEmail ? userEmail.split('@')[0] : 'Usuario',\n      guests: '100' // Valor por defecto\n    };\n    \n    // Generar asunto personalizado usando plantilla según categoría\n    return templateService.generateSubjectFromTemplate(\n      aiResult.service,\n      templateData\n    );\n  }, [userEmail]);\n  \n  /**\n   * Genera un cuerpo de email personalizado basado en el resultado de la búsqueda AI\n   * @param {Object} aiResult Resultado de búsqueda AI\n   * @param {string} searchQuery Consulta original realizada por el usuario\n   * @returns {string} Cuerpo de email personalizado con información de la búsqueda\n   */\n  const generateAIEmailBody = useCallback((aiResult, searchQuery) => {\n    if (!aiResult) return '';\n    \n    const templateService = new EmailTemplateService();\n    \n    // Construir el insight de AI si existe\n    const aiInsight = aiResult.aiSummary \n      ? `${aiResult.aiSummary}` \n      : '';\n    \n    // Datos para la plantilla\n    const templateData = {\n      providerName: aiResult.name,\n      searchQuery: searchQuery || 'servicios de calidad',\n      aiInsight,\n      date: new Date().toLocaleDateString('es-ES', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      }),\n      price: aiResult.price || '',\n      location: aiResult.location || '',\n      userName: userEmail ? userEmail.split('@')[0] : 'Usuario',\n      guests: '100' // Valor por defecto\n    };\n    \n    // Generar cuerpo de email utilizando plantilla según categoría\n    return templateService.generateBodyFromTemplate(\n      aiResult.service,\n      templateData\n    );\n  }, [userEmail]);\n  \n  /**\n   * Envía un email al proveedor desde los resultados de la búsqueda AI\n   * @param {Object} aiResult Resultado de búsqueda AI\n   * @param {string} searchQuery Consulta original de búsqueda\n   * @param {Object} options Opciones adicionales (asunto y cuerpo personalizados)\n   * @returns {Promise<boolean>} Promesa que resuelve a true si el envío fue exitoso\n   */\n  const sendEmailFromAIResult = useCallback(async (aiResult, searchQuery, options = {}) => {\n    if (!aiResult || !aiResult.name) {\n      setError('Información de proveedor incompleta');\n      return false;\n    }\n    \n    setIsSending(true);\n    setError(null);\n    \n    try {\n      // Crear un objeto de proveedor compatible con el sistema de email existente\n      const providerObj = {\n        id: aiResult.id,\n        name: aiResult.name,\n        email: aiResult.email || `${aiResult.name.toLowerCase().replace(/\\s+/g, '.')}@proveedor.com`,\n        service: aiResult.service,\n        location: aiResult.location\n      };\n      \n      // Usar asunto y cuerpo personalizados o generarlos\n      const subject = options.subject || generateAISubject(aiResult);\n      const body = options.body || generateAIEmailBody(aiResult, searchQuery);\n      \n      // Registrar actividad de AI para análisis\n      const emailService = new EmailService();\n      emailService.logAIEmailActivity(aiResult.id, searchQuery);\n      \n      // Registrar el uso de la plantilla para análisis\n      const templateService = new EmailTemplateService();\n      const isCustomized = options.subject || options.body;\n      templateService.logTemplateUsage(aiResult.service, aiResult, isCustomized);\n      \n      // Enviar el email usando la función existente\n      const result = await sendEmailToProvider(providerObj, subject, body);\n      \n      return result;\n    } catch (err) {\n      setError(err.message || 'Error al enviar email');\n      return false;\n    } finally {\n      setIsSending(false);\n    }\n  }, [sendEmailToProvider, generateAISubject, generateAIEmailBody]);\n  \n  return {\n    userEmail,\n    isSending,\n    error,\n    sendEmailFromAIResult,\n    generateAISubject,\n    generateAIEmailBody\n  };\n};\n\nexport default useAIProviderEmail;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useAISearch.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useAuth.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'password' is defined but never used.","line":93,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":39}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Hook centralizado para la autenticación en Lovenda\n * Este hook proporciona funcionalidades de autenticación y gestión de perfil de usuario\n */\n\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { initReminderService, stopReminderService } from '../services/reminderService';\n\n// Crear contexto de autenticación\nconst AuthContext = createContext(null);\n\n/**\n * Proveedor del contexto de autenticación\n * @param {Object} props - Propiedades del componente\n * @param {React.ReactNode} props.children - Componentes hijo\n */\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Simular la carga del usuario al iniciar la aplicación\n  useEffect(() => {\n    // En una aplicación real, aquí verificaríamos la sesión actual\n    const loadUserFromStorage = () => {\n      try {\n        // Obtener datos de usuario de localStorage (simulación)\n        const savedUser = localStorage.getItem('lovenda_user');\n        const savedProfile = localStorage.getItem('lovenda_user_profile');\n        \n        if (savedUser) {\n          setCurrentUser(JSON.parse(savedUser));\n          \n          if (savedProfile) {\n          const savedUserObj = JSON.parse(savedUser);\n          let profileObj = JSON.parse(savedProfile);\n          // Si falta myWed360Email, sincronizar\n           if (!profileObj.myWed360Email && savedUserObj.email) {\n            // Generar alias usando los primeros 4 caracteres del email de login\n            const loginPrefix = savedUserObj.email.split('@')[0].slice(0,4).toLowerCase();\n            profileObj.myWed360Email = `${loginPrefix}@mywed360.com`;\n            localStorage.setItem('lovenda_user_profile', JSON.stringify(profileObj));\n          }\n          setUserProfile(profileObj);\n            setUserProfile(JSON.parse(savedProfile));\n          } else {\n            // Perfil por defecto si no existe\n            const defaultProfile = {\n              id: JSON.parse(savedUser).uid || 'user123',\n              name: 'Usuario Lovenda',\n              email: 'usuario@lovenda.app',\n              preferences: {\n                emailNotifications: true,\n                emailSignature: 'Enviado desde Lovenda',\n                theme: 'light',\n                remindersEnabled: true,\n                reminderDays: 3\n              }\n            };\n            setUserProfile(defaultProfile);\n            localStorage.setItem('lovenda_user_profile', JSON.stringify(defaultProfile));\n          }\n        }\n      } catch (error) {\n        console.error('Error al cargar usuario:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadUserFromStorage();\n  }, []);\n\n  // Iniciar o detener el servicio de recordatorios cuando cambie el perfil\n  useEffect(() => {\n    if (loading) return;\n    if (!userProfile) return;\n    const { remindersEnabled = true, reminderDays = 3 } = userProfile.preferences || {};\n    if (remindersEnabled) {\n      initReminderService({ days: reminderDays, enabled: true });\n    } else {\n      stopReminderService();\n    }\n    return () => stopReminderService();\n  }, [loading, userProfile]);\n  \n  /**\n   * Iniciar sesión con email y contraseña\n   * @param {string} email - Email del usuario\n   * @param {string} password - Contraseña\n   * @returns {Promise<Object>} Resultado del inicio de sesión\n   */\n  const login = async (email, password) => {\n    try {\n      // Simulación de login (en implementación real conectaría con backend)\n      const mockUser = { \n        uid: 'user123', \n        email: email,\n        displayName: email.split('@')[0]\n      };\n      \n      // Guardar en localStorage para mantener la sesión\n      localStorage.setItem('lovenda_user', JSON.stringify(mockUser));\n      \n      setCurrentUser(mockUser);\n      \n      // Crear perfil por defecto si no existe\n      if (!userProfile) {\n        const defaultProfile = {\n          id: mockUser.uid,\n          name: mockUser.displayName || 'Usuario Lovenda',\n          email: mockUser.email,\n          preferences: {\n            emailNotifications: true,\n            emailSignature: 'Enviado desde Lovenda',\n            theme: 'light',\n            remindersEnabled: true,\n            reminderDays: 3\n          }\n        };\n        setUserProfile(defaultProfile);\n        localStorage.setItem('lovenda_user_profile', JSON.stringify(defaultProfile));\n      }\n      \n      return { success: true, user: mockUser };\n    } catch (error) {\n      console.error('Error al iniciar sesión:', error);\n      return { success: false, error: error.message };\n    }\n  };\n  \n  /**\n   * Cerrar sesión\n   * @returns {Promise<Object>} Resultado del cierre de sesión\n   */\n  const logout = async () => {\n    try {\n      // Limpiar datos de sesión\n      localStorage.removeItem('lovenda_user');\n      setCurrentUser(null);\n      setUserProfile(null);\n      return { success: true };\n    } catch (error) {\n      console.error('Error al cerrar sesión:', error);\n      return { success: false, error: error.message };\n    }\n  };\n  \n  /**\n   * Actualizar el perfil del usuario\n   * @param {Object} profileData - Datos del perfil a actualizar\n   * @returns {Promise<Object>} Resultado de la actualización\n   */\n  const updateUserProfile = async (profileData) => {\n    try {\n      const updatedProfile = { ...userProfile, ...profileData };\n      setUserProfile(updatedProfile);\n      localStorage.setItem('lovenda_user_profile', JSON.stringify(updatedProfile));\n      return { success: true, profile: updatedProfile };\n    } catch (error) {\n      console.error('Error al actualizar perfil:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Valor del contexto que se proveerá a los componentes\n  const value = {\n    currentUser,\n    userProfile,\n    loading,\n    login,\n    logout,\n    updateUserProfile,\n    // Alias para compatibilidad con código existente\n    user: currentUser,\n    profile: userProfile\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\n/**\n * Hook personalizado para acceder al contexto de autenticación\n * @returns {Object} El contexto de autenticación\n */\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === null) {\n    throw new Error('useAuth debe utilizarse dentro de un AuthProvider');\n  }\n  return context;\n};\n\n// Exportación por defecto para consistencia con las importaciones actuales\nexport default useAuth;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useCalendarSync.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useDarkMode.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useEmailMonitoring.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'measureCachePerformance' is assigned a value but never used.","line":103,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Hook personalizado para monitoreo de operaciones de email y plantillas\n * \n * Este hook facilita la integración del monitoreo de rendimiento con los componentes\n * relacionados con emails y plantillas, proporcionando métodos específicos para\n * diferentes operaciones comunes en el sistema de emails.\n * \n * @module hooks/useEmailMonitoring\n */\n\nimport { useCallback } from 'react';\nimport { performanceMonitor } from '../services/PerformanceMonitor';\n\n/**\n * Hook para monitorear operaciones relacionadas con emails y plantillas\n * @returns {Object} Métodos para monitorear diferentes aspectos del sistema de emails\n */\nexport function useEmailMonitoring() {\n  /**\n   * Medir el rendimiento del renderizado de una plantilla\n   * @param {string} templateId - ID de la plantilla\n   * @param {Object} templateData - Datos para renderizar la plantilla\n   * @param {Function} renderFn - Función de renderizado\n   * @returns {Promise<any>} Resultado del renderizado\n   */\n  const measureTemplateRendering = useCallback(async (templateId, templateData, renderFn) => {\n    // Calcular tamaño aproximado de los datos de plantilla\n    const dataSize = JSON.stringify(templateData).length;\n    \n    return performanceMonitor.monitorTemplateRendering(templateId, dataSize, renderFn);\n  }, []);\n  \n  /**\n   * Registrar uso de una plantilla\n   * @param {string} templateId - ID de la plantilla\n   * @param {string} category - Categoría de la plantilla\n   * @param {string} action - Acción realizada (view, edit, use, create)\n   * @param {Function} fn - Función a ejecutar\n   * @param {Object} metadata - Metadatos adicionales\n   * @returns {Promise<any>} Resultado de la función\n   */\n  const trackTemplateUsage = useCallback(async (templateId, category, action, fn, metadata = {}) => {\n    return performanceMonitor.monitorTemplateUsage(templateId, category, action, fn, metadata);\n  }, []);\n  \n  /**\n   * Monitorear el envío de un email\n   * @param {string} emailId - ID del email\n   * @param {string} recipientType - Tipo de destinatario\n   * @param {string} templateId - ID de la plantilla (si aplica)\n   * @param {Function} sendFn - Función de envío\n   * @returns {Promise<any>} Resultado del envío\n   */\n  const trackEmailSend = useCallback(async (emailId, recipientType, templateId, sendFn) => {\n    return performanceMonitor.monitorEmailDelivery(emailId, recipientType, sendFn, {\n      templateId,\n      operation: 'send'\n    });\n  }, []);\n  \n  /**\n   * Registrar interacción con un email\n   * @param {string} emailId - ID del email\n   * @param {string} interactionType - Tipo de interacción (open, click, etc)\n   * @param {Object} metadata - Metadatos adicionales\n   */\n  const trackInteraction = useCallback((emailId, interactionType, metadata = {}) => {\n    performanceMonitor.trackEmailInteraction(emailId, interactionType, metadata);\n  }, []);\n  \n  /**\n   * Monitorear operación general del sistema de emails\n   * @param {string} operation - Nombre de la operación\n   * @param {Function} fn - Función a monitorear\n   * @param {Object} metadata - Metadatos adicionales\n   * @returns {Promise<any>} Resultado de la operación\n   */\n  const trackEmailOperation = useCallback(async (operation, fn, metadata = {}) => {\n    return performanceMonitor.monitorEmailOperation(operation, fn, metadata);\n  }, []);\n  \n  /**\n   * Monitorear la búsqueda de plantillas\n   * @param {string} query - Consulta de búsqueda\n   * @param {string} category - Categoría de plantilla (opcional)\n   * @param {Function} searchFn - Función de búsqueda\n   * @returns {Promise<any>} Resultados de la búsqueda\n   */\n  const trackTemplateSearch = useCallback(async (query, category, searchFn) => {\n    return performanceMonitor.monitorSearch(query, searchFn, {\n      type: 'template_search',\n      category\n    });\n  }, []);\n  \n  /**\n   * Monitorear el rendimiento de la caché de plantillas\n   * @param {string} operation - Operación realizada (get, set, hit, miss)\n   * @param {number} durationMs - Duración en milisegundos (si aplica)\n   * @param {Object} metadata - Metadatos adicionales (templateId, category, etc.)\n   * @returns {void}\n   */\n  const measureCachePerformance = useCallback((operation, durationMs = 0, metadata = {}) => {\n    performanceMonitor.trackMetric({\n      category: 'cache',\n      action: 'template_cache_' + operation,\n      value: durationMs,\n      ...metadata\n    });\n    \n    // Registrar eventos específicos para análisis de patrón de uso\n    if (operation === 'hit' || operation === 'miss') {\n      performanceMonitor.logEvent('template_cache_access', {\n        result: operation,\n        duration: durationMs,\n        templateId: metadata.templateId || 'unknown',\n        category: metadata.category || 'unknown',\n        source: metadata.source || 'memory',\n        timestamp: Date.now()\n      });\n    }\n  }, []);\n\n  /**\n   * Registrar un error relacionado con emails\n   * @param {string} errorType - Tipo específico de error\n   * @param {Error|string} error - Error ocurrido\n   * @param {Object} context - Contexto adicional\n   */\n  const logEmailError = useCallback((errorType, error, context = {}) => {\n    performanceMonitor.logError(`email_${errorType}`, error, context);\n  }, []);\n\n  return {\n    measureTemplateRendering,\n    trackTemplateUsage,\n    trackEmailSend,\n    trackInteraction,\n    trackEmailOperation,\n    trackTemplateSearch,\n    logEmailError\n  };\n}\n\nexport default useEmailMonitoring;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useEmailUsername.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useEventCache.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useFirestoreCollection.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getAllFS' is defined but never used.","line":13,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":21},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":22,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":22,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[675,675],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useCallback } from 'react';\r\nimport { auth, db } from '../lib/firebase';\r\nimport {\r\n  collection,\r\n  onSnapshot,\r\n  query,\r\n  orderBy,\r\n} from 'firebase/firestore';\r\nimport {\r\n  addItem as addItemFS,\r\n  updateItem as updateItemFS,\r\n  deleteItem as deleteItemFS,\r\n  getAll as getAllFS,\r\n} from '../utils/firestoreCollection';\r\n\r\n// Fallback helpers using localStorage when the user is not authenticated\r\nconst localKey = (name) => `lovenda${name[0].toUpperCase()}${name.slice(1)}`;\r\nconst lsGet = (name, fallback) => {\r\n  try {\r\n    const stored = localStorage.getItem(localKey(name));\r\n    if (stored) return JSON.parse(stored);\r\n  } catch (_) {}\r\n  return fallback;\r\n};\r\nconst lsSet = (name, data) => {\r\n  localStorage.setItem(localKey(name), JSON.stringify(data));\r\n  window.dispatchEvent(new Event(`lovenda-${name}`));\r\n};\r\n\r\n/**\r\n * React hook that subscribes to users/{uid}/{collectionName} in Firestore.\r\n * If the user is not authenticated, it falls back to LocalStorage.\r\n * Returns { data, loading, addItem, updateItem, deleteItem }\r\n */\r\nexport const useFirestoreCollection = (collectionName, fallback = []) => {\r\n  const [data, setData] = useState(() => lsGet(collectionName, fallback));\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const uid = auth.currentUser?.uid;\r\n    if (!uid) {\r\n      // Not logged → keep LocalStorage, listen for manual events\r\n      const handler = () => setData(lsGet(collectionName, fallback));\r\n      window.addEventListener(`lovenda-${collectionName}`, handler);\r\n      setLoading(false);\r\n      return () => window.removeEventListener(`lovenda-${collectionName}`, handler);\r\n    }\r\n\r\n    // Logged → real-time Firestore listener\r\n    const q = query(collection(db, 'users', uid, collectionName), orderBy('createdAt', 'asc'));\r\n    const unsub = onSnapshot(q, (snap) => {\r\n      const arr = snap.docs.map((d) => ({ id: d.id, ...d.data() }));\r\n      setData(arr);\r\n      // cache to LocalStorage for quicker next load\r\n      lsSet(collectionName, arr);\r\n      setLoading(false);\r\n    });\r\n    return () => unsub();\r\n  }, [collectionName, fallback]);\r\n\r\n  const addItem = useCallback(async (item) => {\r\n    if (auth.currentUser?.uid) {\r\n      await addItemFS(collectionName, item);\r\n    } else {\r\n      const next = [...data, { ...item, id: Date.now() }];\r\n      setData(next);\r\n      lsSet(collectionName, next);\r\n    }\r\n  }, [collectionName, data]);\r\n\r\n  const updateItem = useCallback(async (id, changes) => {\r\n    if (auth.currentUser?.uid) {\r\n      await updateItemFS(collectionName, id, changes);\r\n    } else {\r\n      const next = data.map((d) => (d.id === id ? { ...d, ...changes } : d));\r\n      setData(next);\r\n      lsSet(collectionName, next);\r\n    }\r\n  }, [collectionName, data]);\r\n\r\n  const deleteItem = useCallback(async (id) => {\r\n    if (auth.currentUser?.uid) {\r\n      await deleteItemFS(collectionName, id);\r\n    } else {\r\n      const next = data.filter((d) => d.id !== id);\r\n      setData(next);\r\n      lsSet(collectionName, next);\r\n    }\r\n  }, [collectionName, data]);\r\n\r\n  return { data, loading, addItem, updateItem, deleteItem };\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useGlobalSearch.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useHistory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useMediaQuery.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useNotifications.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useOnboarding.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useProveedores.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'where' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'p' is not defined.","line":155,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":155,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'p' is not defined.","line":155,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":155,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'p' is not defined.","line":160,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":160,"endColumn":33}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { db } from '../lib/firebase';\nimport { \n  collection, \n  getDocs, \n  doc, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  orderBy,\n  Timestamp,\n  serverTimestamp\n} from 'firebase/firestore';\nimport { useAuth } from './useAuth';\n\n/**\n * @typedef {Object} Provider\n * @property {string} id - ID único del proveedor\n * @property {string} name - Nombre del proveedor\n * @property {string} service - Tipo de servicio ofrecido\n * @property {string} contact - Nombre de la persona de contacto\n * @property {string} email - Email de contacto\n * @property {string} phone - Teléfono de contacto\n * @property {string} status - Estado actual (Nuevo, Contactado, Seleccionado, Confirmado, etc.)\n * @property {string} date - Fecha de contacto o cita\n * @property {number} rating - Puntuación media (0-5)\n * @property {number} ratingCount - Número de valoraciones\n * @property {string} [snippet] - Descripción corta\n * @property {string} [link] - Enlace a la web del proveedor\n * @property {string} [image] - URL de la imagen del proveedor\n */\n\n/**\n * Hook personalizado para gestionar la lógica de los proveedores.\n * Proporciona funcionalidades para listar, filtrar, añadir, editar y eliminar proveedores,\n * así como para gestionar el estado de selección y filtrado.\n * \n * @returns {Object} Objeto con estados y funciones para gestionar proveedores\n * @property {Provider[]} providers - Lista completa de proveedores\n * @property {Provider[]} filteredProviders - Lista de proveedores filtrada según criterios\n * @property {boolean} loading - Indica si hay una operación en curso\n * @property {string|null} error - Mensaje de error si existe\n * @property {Provider|null} selectedProvider - Proveedor actualmente seleccionado\n * @property {string[]} selectedProviderIds - IDs de proveedores seleccionados\n * @property {string} searchTerm - Término de búsqueda actual\n * @property {string} serviceFilter - Filtro por servicio\n * @property {string} statusFilter - Filtro por estado\n * @property {string} dateFrom - Filtro por fecha desde\n * @property {string} dateTo - Filtro por fecha hasta\n * @property {string} tab - Pestaña actual ('all', 'selected', 'contacted')\n * @property {Function} setSearchTerm - Actualizar término de búsqueda\n * @property {Function} setServiceFilter - Actualizar filtro por servicio\n * @property {Function} setStatusFilter - Actualizar filtro por estado\n * @property {Function} setDateFrom - Actualizar filtro por fecha desde\n * @property {Function} setDateTo - Actualizar filtro por fecha hasta\n * @property {Function} setTab - Cambiar pestaña actual\n * @property {Function} setSelectedProvider - Establecer proveedor seleccionado\n * @property {Function} loadProviders - Cargar proveedores desde la base de datos\n * @property {Function} addProvider - Añadir un nuevo proveedor\n * @property {Function} updateProvider - Actualizar un proveedor existente\n * @property {Function} deleteProvider - Eliminar un proveedor\n * @property {Function} toggleSelectProvider - Seleccionar/deseleccionar un proveedor\n * @property {Function} clearSelection - Limpiar selecciones\n * @property {Function} clearFilters - Limpiar todos los filtros\n */\nexport const useProveedores = () => {\n  const [providers, setProviders] = useState([]);\n  const [filteredProviders, setFilteredProviders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedProvider, setSelectedProvider] = useState(null);\n  const [selectedProviderIds, setSelectedProviderIds] = useState([]);\n  \n  // Filtros\n  const [searchTerm, setSearchTerm] = useState('');\n  const [serviceFilter, setServiceFilter] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [dateFrom, setDateFrom] = useState('');\n  const [dateTo, setDateTo] = useState('');\n  const [tab, setTab] = useState('all'); // 'all', 'reserved', 'favorite'\n  \n  const { user } = useAuth();\n  \n  /**\n   * Cargar proveedores desde Firestore\n   */\n  const loadProviders = useCallback(async () => {\n    if (!user) return;\n    \n    setLoading(true);\n    \n    try {\n      const proveedoresRef = collection(db, `usuarios/${user.uid}/proveedores`);\n      const q = query(proveedoresRef, orderBy('created', 'desc'));\n      const snapshot = await getDocs(q);\n      \n      const loadedProviders = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        date: doc.data().date ? new Date(doc.data().date.toDate()).toISOString().split('T')[0] : ''\n      }));\n      \n      setProviders(loadedProviders);\n      applyFilters(loadedProviders);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error al cargar los proveedores:', err);\n      setError('No se pudieron cargar los proveedores. Inténtalo de nuevo más tarde.');\n      setLoading(false);\n    }\n  }, [user]);\n  \n  /**\n   * Aplicar filtros a los proveedores\n   */\n  const applyFilters = useCallback((providersToFilter = providers) => {\n    let filtered = [...providersToFilter];\n    \n    // Aplicar filtro de búsqueda\n    if (searchTerm) {\n      const searchTermLower = searchTerm.toLowerCase();\n      filtered = filtered.filter(p => \n        p.name?.toLowerCase().includes(searchTermLower) || \n        p.service?.toLowerCase().includes(searchTermLower) || \n        p.contact?.toLowerCase().includes(searchTermLower) ||\n        p.status?.toLowerCase().includes(searchTermLower) ||\n        p.snippet?.toLowerCase().includes(searchTermLower)\n      );\n    }\n    \n    // Aplicar filtro de servicio\n    if (serviceFilter) {\n      filtered = filtered.filter(p => p.service === serviceFilter);\n    }\n    \n    // Aplicar filtro de estado\n    if (statusFilter) {\n      filtered = filtered.filter(p => p.status === statusFilter);\n    }\n    \n    // Aplicar filtro de fecha desde\n    if (dateFrom) {\n      filtered = filtered.filter(p => p.date >= dateFrom);\n    }\n    \n    // Aplicar filtro de fecha hasta\n    if (dateTo) {\n      filtered = filtered.filter(p => p.date <= dateTo);\n    }\n    \n    // Filtrar por pestaña\n    if (tab === 'reserved') {\n      if (!(Array.isArray(p.reservations) && p.reservations.length)) {\n        return false;\n      }\n    }\n\n    if (tab === 'favorite' && !p.favorite) {\n      return false;\n    }\n    if (tab === 'contacted') {\n      filtered = filtered.filter(p => p.status === 'Contactado');\n    }\n    \n    setFilteredProviders(filtered);\n  }, [providers, searchTerm, serviceFilter, statusFilter, dateFrom, dateTo, tab]);\n  \n  /**\n   * Limpiar todos los filtros\n   */\n  const clearFilters = useCallback(() => {\n    setSearchTerm('');\n    setServiceFilter('');\n    setStatusFilter('');\n    setDateFrom('');\n    setDateTo('');\n    setTab('all');\n  }, []);\n  \n  /**\n   * Crear un nuevo proveedor\n   */\n  const addProvider = useCallback(async (providerData) => {\n    if (!user) return null;\n    \n    try {\n      const proveedoresRef = collection(db, `usuarios/${user.uid}/proveedores`);\n      \n      // Añadir campos de timestamp\n      const providerWithTimestamp = {\n        ...providerData,\n        created: serverTimestamp(),\n        updated: serverTimestamp(),\n        date: providerData.date ? Timestamp.fromDate(new Date(providerData.date)) : null\n      };\n      \n      const docRef = await addDoc(proveedoresRef, providerWithTimestamp);\n      \n      // Actualizar estado local\n      const newProvider = {\n        id: docRef.id,\n        ...providerData,\n        date: providerData.date || ''\n      };\n      \n      setProviders(prev => [newProvider, ...prev]);\n      applyFilters([newProvider, ...providers]);\n      \n      return newProvider;\n    } catch (err) {\n      console.error('Error al añadir proveedor:', err);\n      setError('No se pudo añadir el proveedor. Inténtalo de nuevo más tarde.');\n      return null;\n    }\n  }, [user, providers, applyFilters]);\n  \n  /**\n   * Actualizar un proveedor existente\n   */\n  const updateProvider = useCallback(async (providerId, providerData) => {\n    if (!user) return false;\n    \n    try {\n      const providerRef = doc(db, `usuarios/${user.uid}/proveedores`, providerId);\n      \n      // Añadir campo de timestamp de actualización\n      const providerWithTimestamp = {\n        ...providerData,\n        updated: serverTimestamp(),\n        date: providerData.date ? Timestamp.fromDate(new Date(providerData.date)) : null\n      };\n      \n      await updateDoc(providerRef, providerWithTimestamp);\n      \n      setError(null);\n    } catch (err) {\n      console.error('Error al actualizar proveedor:', err);\n      setError('Error al actualizar el proveedor. Inténtalo de nuevo.');\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n  \n  /**\n   * Eliminar un proveedor\n   */\n  /**\n   * Añadir reserva a proveedor\n   */\n  const addReservation = useCallback(async (providerId, reservation) => {\n    const provider = providers.find(p => p.id === providerId);\n    if(!provider) return false;\n    const newReservations = Array.isArray(provider.reservations) ? [...provider.reservations, reservation] : [reservation];\n    // local update\n    const updatedProvider = { ...provider, reservations: newReservations };\n    setProviders(prev => prev.map(p => p.id===providerId ? updatedProvider : p));\n    applyFilters(providers.map(p => p.id===providerId ? updatedProvider : p));\n    // firestore update\n    if(user){\n      try{\n        const providerRef = doc(db, `usuarios/${user.uid}/proveedores`, providerId);\n        await updateDoc(providerRef, { reservations: newReservations, updated: serverTimestamp() });\n      }catch(err){ console.error('Error al guardar reserva', err);}  }\n    return true;\n  }, [providers, user, applyFilters]);\n\n  const deleteProvider = useCallback(async (providerId) => {\n    if (!user) return false;\n    \n    try {\n      const providerRef = doc(db, `usuarios/${user.uid}/proveedores`, providerId);\n      await deleteDoc(providerRef);\n      \n      // Actualizar estado local\n      setProviders(prev => prev.filter(p => p.id !== providerId));\n      applyFilters(providers.filter(p => p.id !== providerId));\n      \n      // Si es el proveedor seleccionado, limpiarlo\n      if (selectedProvider && selectedProvider.id === providerId) {\n        setSelectedProvider(null);\n      }\n      \n      // Eliminar de la lista de seleccionados si estaba allí\n      setSelectedProviderIds(prev => prev.filter(id => id !== providerId));\n      \n      return true;\n    } catch (err) {\n      console.error('Error al eliminar proveedor:', err);\n      setError('No se pudo eliminar el proveedor. Inténtalo de nuevo más tarde.');\n      return false;\n    }\n  }, [user, providers, selectedProvider, applyFilters]);\n  \n  /**\n   * Seleccionar/deseleccionar un proveedor de la lista\n   */\n  const toggleFavoriteProvider = useCallback(async (providerId) => {\n    const provider = providers.find(p => p.id === providerId);\n    if(!provider) return;\n    const newFav = !provider.favorite;\n    // actualizar local\n    setProviders(prev => prev.map(p => p.id===providerId ? {...p, favorite:newFav}:p));\n    applyFilters(providers.map(p => p.id===providerId ? {...p, favorite:newFav}:p));\n    // actualizar firestore\n    if(user){\n      try{\n        const providerRef = doc(db, `usuarios/${user.uid}/proveedores`, providerId);\n        await updateDoc(providerRef, { favorite: newFav, updated: serverTimestamp() });\n      }catch(err){ console.error('Error al marcar favorito', err);}  }\n  }, [providers, user, applyFilters]);\n\n  const toggleSelectProvider = useCallback((providerId) => {\n    setSelectedProviderIds(prev => {\n      if (prev.includes(providerId)) {\n        return prev.filter(id => id !== providerId);\n      } else {\n        return [...prev, providerId];\n      }\n    });\n  }, []);\n  \n  /**\n   * Limpiar todas las selecciones\n   */\n  const clearSelection = useCallback(() => {\n    setSelectedProviderIds([]);\n  }, []);\n  \n  // Cargar proveedores al iniciar\n  useEffect(() => {\n    if (user) {\n      loadProviders();\n    }\n  }, [user, loadProviders]);\n  \n  // Aplicar filtros cuando cambien\n  useEffect(() => {\n    applyFilters();\n  }, [searchTerm, serviceFilter, statusFilter, dateFrom, dateTo, tab, applyFilters]);\n  \n  return {\n    // Estado\n    // Estado\n    providers,\n    filteredProviders,\n    loading,\n    error,\n    selectedProvider,\n    selectedProviderIds,\n    searchTerm,\n    serviceFilter,\n    statusFilter,\n    dateFrom,\n    dateTo,\n    tab,\n    \n    // Setters\n    setSearchTerm,\n    setServiceFilter,\n    setStatusFilter,\n    setDateFrom,\n    setDateTo,\n    setTab,\n    setSelectedProvider,\n    \n    // Acciones\n    loadProviders,\n    addProvider,\n    updateProvider,\n    deleteProvider,\n    addReservation,\n    toggleSelectProvider,\n    toggleFavoriteProvider,\n    clearSelection,\n    clearFilters\n  };\n};\n\nexport default useProveedores;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useProviderEmail.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":13,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\nimport { useAuth } from './useAuth';\nimport * as EmailService from '../services/EmailService';\nimport { createTrackingRecord } from '../services/EmailTrackingService';\n\n/**\n * Hook personalizado que proporciona funcionalidades para enviar y gestionar\n * emails a proveedores utilizando el sistema de correo personalizado de Lovenda.\n * \n * @returns {Object} Funciones y estados para la gestión de emails a proveedores\n */\nexport const useProviderEmail = () => {\n  const { user, profile } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [userEmail, setUserEmail] = useState('');\n  \n  // Inicializar el servicio de email con el perfil del usuario\n  useEffect(() => {\n    if (profile) {\n      const email = EmailService.initEmailService(profile);\n      setUserEmail(email);\n    }\n  }, [profile]);\n\n  /**\n   * Envía un email a un proveedor y crea un registro de seguimiento\n   * \n   * @param {Object} provider - Datos del proveedor\n   * @param {string} provider.id - ID del proveedor\n   * @param {string} provider.name - Nombre del proveedor\n   * @param {string} provider.email - Email del proveedor\n   * @param {string} subject - Asunto del email\n   * @param {string} body - Contenido del email (HTML permitido)\n   * @param {Array} [attachments=[]] - Archivos adjuntos\n   * @returns {Promise<Object>} Resultado del envío\n   */\n  const sendEmailToProvider = useCallback(async (provider, subject, body, attachments = []) => {\n    if (!provider || !provider.email) {\n      setError('El proveedor no tiene email definido');\n      return null;\n    }\n\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Enviar el email\n      const emailData = await EmailService.sendMail({\n        to: provider.email,\n        subject,\n        body,\n        attachments\n      });\n      \n      // Crear registro de seguimiento para este email\n      if (emailData && emailData.id) {\n        const trackingRecord = await createTrackingRecord(emailData, provider);\n        \n        // Devolver información combinada\n        return {\n          email: emailData,\n          tracking: trackingRecord\n        };\n      }\n      \n      return { email: emailData };\n    } catch (err) {\n      console.error('Error al enviar email al proveedor:', err);\n      setError('No se pudo enviar el email. Inténtalo de nuevo más tarde.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  \n  /**\n   * Genera un asunto predeterminado para un proveedor según su servicio\n   * \n   * @param {Object} provider - Datos del proveedor\n   * @returns {string} Asunto predeterminado\n   */\n  const generateDefaultSubject = useCallback((provider) => {\n    if (!provider) return 'Consulta sobre servicios para boda';\n    \n    const servicioNormalizado = provider.service ? \n      provider.service.toLowerCase().trim() : 'servicios';\n    \n    const subjectTemplates = {\n      'fotografía': 'Consulta sobre servicios de fotografía para boda',\n      'fotografia': 'Consulta sobre servicios de fotografía para boda',\n      'fotografo': 'Consulta sobre servicios de fotografía para boda',\n      'catering': 'Consulta sobre servicios de catering para boda',\n      'flores': 'Consulta sobre decoración floral para boda',\n      'música': 'Consulta sobre música y animación para boda',\n      'musica': 'Consulta sobre música y animación para boda',\n      'dj': 'Consulta sobre servicio de DJ para boda',\n      'transporte': 'Consulta sobre servicios de transporte para boda',\n      'vestido': 'Consulta sobre vestido de novia',\n      'traje': 'Consulta sobre traje de novio',\n      'decoración': 'Consulta sobre decoración para boda',\n      'decoracion': 'Consulta sobre decoración para boda',\n      'invitaciones': 'Consulta sobre diseño de invitaciones',\n      'default': `Consulta sobre ${servicioNormalizado} para boda`\n    };\n    \n    const serviceKey = Object.keys(subjectTemplates).find(key => \n      servicioNormalizado.includes(key)\n    );\n    \n    return serviceKey ? \n      subjectTemplates[serviceKey] : \n      subjectTemplates['default'];\n  }, []);\n  \n  /**\n   * Genera un cuerpo predeterminado para un email a un proveedor\n   * \n   * @param {Object} provider - Datos del proveedor\n   * @returns {string} Cuerpo del email en formato HTML\n   */\n  const generateDefaultEmailBody = useCallback((provider) => {\n    if (!profile) return '';\n    \n    const nombreUsuario = profile.brideFirstName ? \n      `${profile.brideFirstName}${profile.brideLastName ? ' ' + profile.brideLastName : ''}` : \n      'Futuros novios';\n    \n    const fechaBoda = profile.weddingDate ? \n      new Date(profile.weddingDate).toLocaleDateString('es-ES', {\n        day: 'numeric',\n        month: 'long',\n        year: 'numeric'\n      }) : \n      'fecha por determinar';\n    \n    return `\n      <p>Estimado/a ${provider?.name || 'Proveedor'}:</p>\n      \n      <p>Mi nombre es ${nombreUsuario} y me pongo en contacto con ustedes porque estoy organizando mi boda para el día <strong>${fechaBoda}</strong>.</p>\n      \n      <p>He visto sus servicios de ${provider?.service || 'para bodas'} y me gustaría obtener más información sobre:</p>\n      \n      <ul>\n        <li>Disponibilidad para la fecha mencionada</li>\n        <li>Paquetes y servicios que ofrecen</li>\n        <li>Precios aproximados</li>\n        <li>Proceso de reserva</li>\n      </ul>\n      \n      <p>Agradecería mucho si pudieran proporcionarme esta información para valorar su propuesta.</p>\n      \n      <p>Quedo a la espera de su respuesta.</p>\n      \n      <p>Saludos cordiales,<br>\n      ${nombreUsuario}</p>\n      \n      <p style=\"color:#888; font-size:12px;\">Email enviado desde Lovenda - Tu plataforma para organización de bodas</p>\n    `;\n  }, [profile]);\n  \n  return {\n    loading,\n    error,\n    userEmail,\n    sendEmailToProvider,\n    generateDefaultSubject,\n    generateDefaultEmailBody\n  };\n};\n\nexport default useProviderEmail;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useRoles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useSpecialMoments.js","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":40,"column":11,"nodeType":"BlockStatement","messageId":"unexpected","endLine":40,"endColumn":13,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1475,1475],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\n\r\n/*\r\n  Hook: useSpecialMoments\r\n  Gestiona los momentos especiales de la boda de forma compartida entre las páginas\r\n  Momentos Especiales y Timing. La información se almacena en localStorage y se\r\n  sincroniza entre pestañas mediante el evento 'moments-updated'.\r\n*/\r\nconst STORAGE_KEY = 'lovendaSpecialMoments';\r\n\r\n// Estructura inicial por defecto\r\nconst defaultData = {\r\n  ceremonia: [\r\n    { id: 1, order: 1, title: 'Entrada Novio', song: 'Canon in D – Pachelbel' },\r\n    { id: 2, order: 2, title: 'Entrada Novia', song: 'Bridal Chorus – Wagner' },\r\n    { id: 3, order: 3, title: 'Lectura 1', song: 'A Thousand Years' },\r\n    { id: 4, order: 4, title: 'Lectura 2', song: '' },\r\n    { id: 5, order: 5, title: 'Intercambio de Anillos', song: '' },\r\n    { id: 6, order: 6, title: 'Salida', song: '' },\r\n  ],\r\n  coctail: [\r\n    { id: 7, order: 1, title: 'Entrada', song: '' },\r\n  ],\r\n  banquete: [\r\n    { id: 8, order: 1, title: 'Entrada Novios', song: '' },\r\n    { id: 9, order: 2, title: 'Corte Pastel', song: '' },\r\n    { id: 10, order: 3, title: 'Discursos', song: '' },\r\n  ],\r\n  disco: [\r\n    { id: 11, order: 1, title: 'Primer Baile', song: '' },\r\n    { id: 12, order: 2, title: 'Animar pista', song: '' },\r\n    { id: 13, order: 3, title: 'Último tema', song: '' },\r\n  ],\r\n};\r\n\r\nfunction load() {\r\n  try {\r\n    const raw = localStorage.getItem(STORAGE_KEY);\r\n    if (raw) return JSON.parse(raw);\r\n  } catch {}\r\n  return defaultData;\r\n}\r\n\r\nexport default function useSpecialMoments() {\r\n  const [moments, setMoments] = useState(load);\r\n\r\n  // Persistir en localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(moments));\r\n    window.dispatchEvent(new Event('moments-updated'));\r\n  }, [moments]);\r\n\r\n  // Escuchar cambios desde otras pestañas/componentes\r\n  useEffect(() => {\r\n    const handler = () => setMoments(load());\r\n    window.addEventListener('moments-updated', handler);\r\n    return () => window.removeEventListener('moments-updated', handler);\r\n  }, []);\r\n\r\n  const addMoment = useCallback((blockId, moment) => {\r\n    setMoments(prev => {\r\n      const next = { ...prev };\r\n      next[blockId] = [...(prev[blockId] || []), { ...moment, id: Date.now() }];\r\n      return next;\r\n    });\r\n  }, []);\r\n\r\n  const removeMoment = useCallback((blockId, momentId) => {\r\n    setMoments(prev => {\r\n      const next = { ...prev };\r\n      next[blockId] = prev[blockId].filter(m => m.id !== momentId);\r\n      return next;\r\n    });\r\n  }, []);\r\n\r\n  const updateMoment = useCallback((blockId, momentId, changes) => {\r\n    setMoments(prev => {\r\n      const next = { ...prev };\r\n      next[blockId] = prev[blockId].map(m => m.id === momentId ? { ...m, ...changes } : m);\r\n      return next;\r\n    });\r\n  }, []);\r\n\r\n  // Reordenar (arriba/abajo) un momento dentro de su bloque\r\n  const reorderMoment = useCallback((blockId, momentId, direction='up') => {\r\n    setMoments(prev => {\r\n      const current = prev[blockId] || [];\r\n      const idx = current.findIndex(m => m.id === momentId);\r\n      if (idx === -1) return prev;\r\n      const newIdx = direction === 'up' ? idx - 1 : idx + 1;\r\n      if (newIdx < 0 || newIdx >= current.length) return prev;\r\n      const swapped = [...current];\r\n      [swapped[idx], swapped[newIdx]] = [swapped[newIdx], swapped[idx]];\r\n      // Recalcular order\r\n      const updatedList = swapped.map((m, i) => ({ ...m, order: i + 1 }));\r\n      return { ...prev, [blockId]: updatedList };\r\n    });\r\n  }, []);\r\n\r\n  \r\n  // Mover un momento a una posición concreta dentro de su mismo bloque\r\n  const moveMoment = useCallback((blockId, momentId, toIndex) => {\r\n    setMoments(prev => {\r\n      const list = prev[blockId] || [];\r\n      const idx = list.findIndex(m => m.id === momentId);\r\n      if (idx === -1 || toIndex < 0 || toIndex >= list.length) return prev;\r\n      const reordered = [...list];\r\n      const [item] = reordered.splice(idx, 1);\r\n      reordered.splice(toIndex, 0, item);\r\n      // Recalcular order\r\n      const updated = reordered.map((m, i) => ({ ...m, order: i + 1 }));\r\n      return { ...prev, [blockId]: updated };\r\n    });\r\n  }, []);\r\n\r\n  const duplicateMoment = useCallback((fromBlock, momentId, toBlock) => {\r\n    if (fromBlock === toBlock) return;\r\n    setMoments(prev => {\r\n      const sourceList = prev[fromBlock] || [];\r\n      const moment = sourceList.find(m => m.id === momentId);\r\n      if (!moment) return prev;\r\n      const destList = prev[toBlock] || [];\r\n      const copy = { ...moment, id: Date.now(), order: destList.length + 1 };\r\n      return { ...prev, [toBlock]: [...destList, copy] };\r\n    });\r\n  }, []);\r\n\r\n  return { moments, addMoment, removeMoment, updateMoment, reorderMoment, moveMoment, duplicateMoment };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useUnifiedInboxMetrics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\hooks\\useWidgets.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\layouts\\AdminLayout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\lib\\firebase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\AyudaCeremonia.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Blog.jsx","messages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":41,"column":21,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":54,"endColumn":3}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { fetchWeddingNews } from '../services/blogService';\nimport Spinner from '../components/Spinner';\n\nexport default function Blog() {\n  const [posts, setPosts] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const observer = useRef();\n\n  const lastRef = useCallback((node) => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver((entries) => {\n      if (entries[0].isIntersecting) setPage((p) => p + 1);\n    });\n    if (node) observer.current.observe(node);\n  }, [loading]);\n\n  useEffect(() => {\n    async function load() {\n      setLoading(true);\n      const data = await fetchWeddingNews(page, 10, 'es');\n      setPosts((prev) => [...prev, ...data]);\n      setLoading(false);\n    }\n    load();\n  }, [page]);\n\n  return (\n    <div className=\"p-4 md:p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold\">Blog</h1>\n      {posts.map((p, idx) => (\n        <ArticleCard key={p.id} post={p} ref={idx === posts.length - 1 ? lastRef : null} />\n      ))}\n      {loading && <div className=\"flex justify-center my-6\"><Spinner /></div>}\n    </div>\n  );\n}\n\nconst ArticleCard = React.forwardRef(({ post }, ref) => (\n  <div ref={ref} className=\"border rounded-lg overflow-hidden shadow hover:shadow-md transition\">\n    {post.image && <img src={post.image} alt={post.title} className=\"w-full h-48 object-cover\" />}\n    <div className=\"p-4 space-y-2\">\n      <h2 className=\"text-lg font-semibold\">{post.title}</h2>\n      <p className=\"text-sm text-gray-700 line-clamp-3\">{post.description}</p>\n      <div className=\"text-xs text-gray-500 flex justify-between\">\n        <span>{post.source}</span>\n        <span>{new Date(post.published).toLocaleDateString()}</span>\n      </div>\n      <a href={post.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 text-sm\">Leer más</a>\n    </div>\n  </div>\n));\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Buzon_fixed_final.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Checklist.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Edit2' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":2,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'setView' is assigned a value but never used.","line":8,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'toggleSelect' is assigned a value but never used.","line":43,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":21}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Plus, Edit2, Download, Filter, CheckCircle, Circle } from 'lucide-react';\r\nimport PageWrapper from '../components/PageWrapper';\r\nimport Card from '../components/Card';\r\nimport Button from '../components/Button';\r\n\r\nexport default function Checklist() {\r\n  const [view, setView] = useState('list');\r\n  const [search, setSearch] = useState('');\r\n  const [typeFilter, setTypeFilter] = useState('');\r\n  const [responsibleFilter, setResponsibleFilter] = useState('');\r\n  const [dateFilter, setDateFilter] = useState({ from: '', to: '' });\r\n  const [selected, setSelected] = useState([]);\r\n  const [showNewModal, setShowNewModal] = useState(false);\r\n  const [completed, setCompleted] = useState(() => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('checklistCompleted') || '{}');\r\n    } catch {\r\n      return {};\r\n    }\r\n  });\r\n\r\n  // Actualizar localStorage cuando cambie el estado de completadas\r\n  useEffect(() => {\r\n    localStorage.setItem('checklistCompleted', JSON.stringify(completed));\r\n  }, [completed]);\r\n\r\n  const blocks = [\r\n    {\r\n      name: 'Día Previo a la Boda',\r\n      tasks: [\r\n        { id: 1, title: 'Ensayo general', type: 'ensayo', responsible: 'Equipo', due: '2025-06-17', status: 'Pendiente' }\r\n      ]\r\n    },\r\n    {\r\n      name: 'Antes de empezar la boda',\r\n      tasks: [\r\n        { id: 2, title: 'Alinear decoraciones', type: 'montaje', responsible: 'Rollout', due: '2025-06-18', status: 'En progreso' }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const toggleSelect = id => {\r\n    setSelected(prev => prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]);\r\n  };\r\n\r\n  const toggleCompleted = id => {\r\n    setCompleted(prev => ({ ...prev, [id]: !prev[id] }));\r\n  };\r\n\r\n  return (\r\n    <PageWrapper title=\"Checklist\">\r\n      <div className=\"space-y-8\">\r\n      \r\n\r\n      {/* Controles */}\r\n      <div className=\"flex flex-wrap gap-2 items-center\">\r\n        <input type=\"text\" placeholder=\"Buscar tarea\" value={search} onChange={e => setSearch(e.target.value)} className=\"border rounded px-2 py-1\" />\r\n        <select value={typeFilter} onChange={e => setTypeFilter(e.target.value)} className=\"border rounded px-2 py-1\">\r\n          <option value=\"\">Tipo</option>\r\n          <option value=\"ensayo\">Ensayo</option>\r\n          <option value=\"montaje\">Montaje</option>\r\n          <option value=\"audio/vídeo\">Audio/Vídeo</option>\r\n        </select>\r\n        <select value={responsibleFilter} onChange={e => setResponsibleFilter(e.target.value)} className=\"border rounded px-2 py-1\">\r\n          <option value=\"\">Responsable</option>\r\n          <option value=\"Equipo\">Equipo</option>\r\n          <option value=\"Rollout\">Rollout</option>\r\n        </select>\r\n        <input type=\"date\" value={dateFilter.from} onChange={e => setDateFilter(prev => ({...prev, from: e.target.value}))} className=\"border rounded px-2 py-1\" />\r\n        <input type=\"date\" value={dateFilter.to} onChange={e => setDateFilter(prev => ({...prev, to: e.target.value}))} className=\"border rounded px-2 py-1\" />\r\n\r\n        <button onClick={() => setShowNewModal(true)} className=\"bg-blue-600 text-white px-3 py-1 rounded flex items-center\">\r\n          <Plus size={16} className=\"mr-1\" /> Nueva Tarea\r\n        </button>\r\n      </div>\r\n\r\n      {/* Bulk Actions */}\r\n      {selected.length > 0 && (\r\n        <div className=\"bg-gray-100 p-2 rounded flex gap-2\">\r\n          <button className=\"bg-green-600 text-white px-2 py-1 rounded\">Cambiar estado ({selected.length})</button>\r\n          <button className=\"bg-purple-600 text-white px-2 py-1 rounded flex items-center\">\r\n            <Download size={16} className=\"mr-1\" /> Exportar CSV\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Vista Lista */}\r\n      {view === 'list' && (\r\n        <table className=\"w-full table-auto\">\r\n          <thead className=\"bg-gray-50\">\r\n            <tr>\r\n              <th></th>\r\n              <th>Tarea</th>\r\n              <th>Tipo</th>\r\n              <th>Responsable</th>\r\n              <th>Fecha límite</th>\r\n              <th>Estado</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {blocks.flatMap(block =>\r\n              block.tasks.map(t => (\r\n                <tr key={t.id} className={completed[t.id] ? 'opacity-60 line-through' : ''}>\r\n                  <td>\r\n                    <button aria-label=\"Marcar completada\" onClick={() => toggleCompleted(t.id)} className=\"focus:outline-none\">\r\n                      {completed[t.id] ? <CheckCircle className=\"text-green-600\" size={20} /> : <Circle className=\"text-gray-400\" size={20} />}\r\n                    </button>\r\n                  </td>\r\n                  <td>{t.title}</td>\r\n                  <td>{t.type}</td>\r\n                  <td>{t.responsible}</td>\r\n                  <td>{t.due}</td>\r\n                  <td>{completed[t.id] ? 'Completada' : t.status}</td>\r\n                </tr>\r\n              ))\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n\r\n\r\n\r\n      {/* Modal Nueva Tarea */}\r\n      {showNewModal && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\r\n          <Card className=\"p-4 shadow w-80\">\r\n            <h3 className=\"font-semibold mb-2\">Nueva Tarea</h3>\r\n            {/* TODO: formulario */}\r\n            <Button variant=\"danger\" onClick={() => setShowNewModal(false)} className=\"mt-2\">Cerrar</Button>\r\n          </Card>\r\n        </div>\r\n      )}\r\n      </div>\r\n    </PageWrapper>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Contratos.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'updateContract' is assigned a value but never used.","line":13,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":76},{"ruleId":"no-unused-vars","severity":2,"message":"'deleteContract' is assigned a value but never used.","line":13,"column":90,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":104}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { useFirestoreCollection } from '../hooks/useFirestoreCollection';\r\nimport { Plus, Download, Eye, ChevronDown, ChevronUp } from 'lucide-react';\r\nimport Toast from '../components/Toast';\r\nimport PageWrapper from '../components/PageWrapper';\r\nimport Card from '../components/Card';\r\n\r\nexport default function Contratos() {\r\n  const sampleContracts = [\r\n    { id: 1, provider: 'Eventos Catering', type: 'Catering', signedDate: '2025-04-01', serviceDate: '2025-06-10', status: 'Vigente', docUrl: '#' },\r\n    { id: 2, provider: 'Flores y Diseño', type: 'Flores', signedDate: '2025-03-15', serviceDate: '2025-06-12', status: 'Vigente', docUrl: '#' },\r\n  ];\r\n  const { data: contracts, addItem: addContract, updateItem: updateContract, deleteItem: deleteContract } = useFirestoreCollection('contracts', sampleContracts);\r\n  // selected state keeps ids locally\r\n  const [selected, setSelected] = useState([]);\r\n  const [showAddModal, setShowAddModal] = useState(false);\r\n  const [toast, setToast] = useState(null);\r\n  const initialContract = { provider: '', type: '', signedDate: '', serviceDate: '', status: '', docUrl: '' };\r\n  const [newContract, setNewContract] = useState(initialContract);\r\n\r\n  const handleAddContract = async e => {\r\n    e.preventDefault();\r\n    const contractObj = { id: `ct${Date.now()}`, ...newContract, docUrl: newContract.docUrl || '#' };\r\n    await addContract(contractObj);\r\n    setNewContract(initialContract);\r\n    setShowAddModal(false);\r\n    setToast({ message: 'Contrato agregado', type: 'success' });\r\n  };\r\n\r\n  const isNearExpiry = date => {\r\n    const today = new Date();\r\n    const svc = new Date(date);\r\n    const diff = (svc - today) / (1000 * 60 * 60 * 24);\r\n    return diff >= 0 && diff <= 7;\r\n  };\r\n\r\n  const toggleSelect = id => {\r\n    setSelected(prev =>\r\n      prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]\r\n    );\r\n  };\r\n\r\n  const exportSelected = () => {\r\n    console.log('Export contracts:', selected);\r\n  };\r\n\r\n  const actionButtons = (\r\n    <>\r\n      <button\r\n        onClick={() => setShowAddModal(true)}\r\n        className=\"bg-blue-600 text-white px-4 py-2 rounded flex items-center\"\r\n      >\r\n        <Plus size={16} className=\"mr-2\" /> Añadir Contrato\r\n      </button>\r\n      <button\r\n        onClick={exportSelected}\r\n        className=\"bg-gray-200 px-4 py-2 rounded flex items-center\"\r\n      >\r\n        <Download size={16} className=\"mr-2\" /> Exportar Seleccionados\r\n      </button>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <PageWrapper title=\"Contratos\" actions={actionButtons}>\r\n      <Card className=\"p-6 space-y-6\">\r\n        {toast && (\r\n          <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />\r\n        )}\r\n        \r\n          \r\n          <div className=\"flex gap-2\">\r\n            <button\r\n              onClick={() => setShowAddModal(true)}\r\n              className=\"bg-blue-600 text-white px-4 py-2 rounded flex items-center\"\r\n            >\r\n              <Plus size={16} className=\"mr-2\" /> Añadir Contrato\r\n            </button>\r\n            <button\r\n              onClick={exportSelected}\r\n              className=\"bg-gray-200 px-4 py-2 rounded flex items-center\"\r\n            >\r\n              <Download size={16} className=\"mr-2\" /> Exportar Seleccionados\r\n            </button>\r\n          </div>\r\n        {/* Escritorio */}\r\n        <div className=\"hidden md:block overflow-auto\">\r\n          <table className=\"w-full table-auto\">\r\n            <thead>\r\n              <tr className=\"bg-gray-50\">\r\n                <th className=\"p-2\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    onChange={e => setSelected(\r\n                      e.target.checked ? contracts.map(c => c.id) : []\r\n                    )}\r\n                  />\r\n                </th>\r\n                <th className=\"p-2\">Proveedor</th>\r\n                <th className=\"p-2\">Tipo de contrato</th>\r\n                <th className=\"p-2\">Fecha de firma</th>\r\n                <th className=\"p-2\">Fecha de servicio</th>\r\n                <th className=\"p-2\">Estado</th>\r\n                <th className=\"p-2\">Documento</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {contracts.map(c => (\r\n                <tr\r\n                  key={c.id}\r\n                  className={`${isNearExpiry(c.serviceDate) ? 'bg-yellow-100' : ''} border-b`}\r\n                >\r\n                  <td className=\"p-2\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selected.includes(c.id)}\r\n                      onChange={() => toggleSelect(c.id)}\r\n                    />\r\n                  </td>\r\n                  <td className=\"p-2\">{c.provider}</td>\r\n                  <td className=\"p-2\">{c.type}</td>\r\n                  <td className=\"p-2\">{c.signedDate}</td>\r\n                  <td className=\"p-2\">{c.serviceDate}</td>\r\n                  <td className=\"p-2\">{c.status}</td>\r\n                  <td className=\"p-2\">\r\n                    <a\r\n                      href={c.docUrl}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      className=\"flex items-center text-blue-600\"\r\n                    >\r\n                      <Eye size={16} className=\"mr-1\" /> Ver\r\n                    </a>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {/* Móvil */}\r\n        <div className=\"block md:hidden space-y-4\">\r\n          {contracts.map(c => (\r\n            <ContractItem\r\n              key={c.id}\r\n              contract={c}\r\n              isSelected={selected.includes(c.id)}\r\n              onToggle={() => toggleSelect(c.id)}\r\n            />\r\n          ))}\r\n        </div>\r\n      </Card>\r\n\r\n      {showAddModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\r\n          <div className=\"bg-white p-6 rounded shadow w-96\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">Añadir Contrato</h2>\r\n            <form onSubmit={handleAddContract} className=\"space-y-3\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Proveedor\"\r\n                value={newContract.provider}\r\n                onChange={e => setNewContract({ ...newContract, provider: e.target.value })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n                required\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Tipo de contrato\"\r\n                value={newContract.type}\r\n                onChange={e => setNewContract({ ...newContract, type: e.target.value })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n                required\r\n              />\r\n              <input\r\n                type=\"date\"\r\n                value={newContract.signedDate}\r\n                onChange={e => setNewContract({ ...newContract, signedDate: e.target.value })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n                required\r\n              />\r\n              <input\r\n                type=\"date\"\r\n                value={newContract.serviceDate}\r\n                onChange={e => setNewContract({ ...newContract, serviceDate: e.target.value })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n                required\r\n              />\r\n              <select\r\n                value={newContract.status}\r\n                onChange={e => setNewContract({ ...newContract, status: e.target.value })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n              >\r\n                <option value=\"\">Seleccionar estado</option>\r\n                <option value=\"Vigente\">Vigente</option>\r\n                <option value=\"Expirado\">Expirado</option>\r\n              </select>\r\n              <div>\r\n                <label className=\"block mb-1\">Documento</label>\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\".pdf,.doc,.docx\"\r\n                  onChange={e => {\r\n                    const file = e.target.files[0];\r\n                    setNewContract({ ...newContract, docUrl: URL.createObjectURL(file) });\r\n                  }}\r\n                  className=\"w-full\"\r\n                />\r\n              </div>\r\n              <div className=\"flex justify-end gap-2\">\r\n                <button type=\"button\" onClick={() => setShowAddModal(false)} className=\"px-4 py-2 bg-gray-200 rounded\">Cancelar</button>\r\n                <button type=\"submit\" className=\"px-4 py-2 bg-blue-600 text-white rounded\">Guardar</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </PageWrapper>\r\n  );\r\n}\r\n\r\nfunction ContractItem({ contract, isSelected, onToggle }) {\r\n  const [open, setOpen] = useState(false);\r\n  return (\r\n    <div className=\"border rounded p-4\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <p className=\"font-semibold\">{contract.provider}</p>\r\n          <p className=\"text-sm text-gray-600\">{contract.type} - {contract.status}</p>\r\n        </div>\r\n        <button onClick={() => setOpen(v => !v)}>\r\n          {open ? <ChevronUp /> : <ChevronDown />}\r\n        </button>\r\n      </div>\r\n      {open && (\r\n        <div className=\"mt-2 space-y-2\">\r\n          <p>Fecha de firma: {contract.signedDate}</p>\r\n          <p>Fecha de servicio: {contract.serviceDate}</p>\r\n          <a href={contract.docUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"flex items-center text-blue-600\">\r\n            <Eye size={16} className=\"mr-1\" /> Ver documento\r\n          </a>\r\n          <div>\r\n            <input type=\"checkbox\" checked={isSelected} onChange={onToggle} /> Seleccionar\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Dashboard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\DisenoWeb.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":366,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":366,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { doc, getDoc, setDoc, collection, addDoc, getDocs, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../lib/firebase';\nimport { useUserContext } from '../context/UserContext';\n\nexport default function DisenoWeb() {\n  const { user } = useUserContext();\n  const uid = user?.uid || 'dev';\n  const [prompt, setPrompt] = useState('');\n  const [html, setHtml] = useState('');\n  const [profile, setProfile] = useState(null);\n  const [versions, setVersions] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState('personalizada');\n  \n  // Plantillas predefinidas\n  const templates = {\n    personalizada: { \n      name: 'Personalizada', \n      desc: 'Crea una página web totalmente personalizada según tus indicaciones',\n      prompt: ''\n    },\n    clasica: { \n      name: 'Clásica', \n      desc: 'Diseño elegante con tonos dorados y blancos, ideal para bodas tradicionales',\n      prompt: 'Diseño clásico con tonos dorados y blancos. Usa tipografía elegante serif y elementos decorativos clásicos. Enfoque en elegancia tradicional.'\n    },\n    moderna: { \n      name: 'Moderna', \n      desc: 'Estilo minimalista con colores neutros y diseño limpio',\n      prompt: 'Diseño moderno minimalista con colores neutros. Usa tipografía sans-serif limpia, mucho espacio en blanco y animaciones sutiles. Enfoque en elegancia contemporánea.'\n    },\n    rustica: { \n      name: 'Rústica', \n      desc: 'Inspirada en bodas campestres con elementos naturales y paleta de colores tierra',\n      prompt: 'Diseño rústico campestre con elementos de madera y naturales. Usa colores tierra, verde y detalles florales. Aspecto cálido y acogedor tipo boda en el campo.'\n    },\n    playa: { \n      name: 'Playa', \n      desc: 'Perfecta para bodas en la costa con tonos azules y turquesa',\n      prompt: 'Diseño temática de playa con tonos azules, turquesa y arena. Incluye elementos marinos sutiles, olas y textura de arena. Sensación fresca y relajada de boda costera.'\n    }\n  };\n\n  // Cargar datos de perfil y versiones al montar\n  useEffect(()=>{\n    if(!uid) return;\n    (async ()=>{\n      try {\n        const snap = await getDoc(doc(db,'users',uid));\n        if(snap.exists()) setProfile(snap.data().weddingInfo || {});\n        // cargar versiones\n        const colSnap = await getDocs(collection(db,'users',uid,'generatedPages'));\n        setVersions(colSnap.docs.map(d=>({id:d.id,...d.data()})).sort((a,b)=>b.createdAt?.seconds - a.createdAt?.seconds));\n      } catch(e){ console.error(e);} \n    })();\n  },[uid]);\n\n  const generateWeb = async () => {\n    if (!prompt.trim()) return;\n    setLoading(true);\n    setError('');\n    // Llamar a OpenAI para generar la web\n    try {\n      if(!import.meta.env.VITE_OPENAI_KEY){\n        // Fallback de demo si no hay clave\n        const demo = `<html><head><style>body{font-family:sans-serif;padding:2rem}</style></head><body><h1>${prompt}</h1><p>Ejemplo de web generada (sin IA).</p></body></html>`;\n        setHtml(demo);\n        return;\n      }\n      \n      // Extraer datos relevantes del perfil\n      const {\n        brideInfo = {},\n        groomInfo = {},\n        ceremonyInfo = {},\n        receptionInfo = {},\n        transportationInfo = {},\n        rsvpInfo = {}\n      } = profile || {};\n      \n      // Preparar información estructurada para la IA\n      const weddingInfo = {\n        bride: brideInfo.nombre || 'Nombre de la novia',\n        groom: groomInfo.nombre || 'Nombre del novio',\n        date: ceremonyInfo.fecha || 'Fecha por determinar',\n        ceremonyTime: ceremonyInfo.hora || 'Hora por determinar',\n        ceremonyLocation: ceremonyInfo.lugar || 'Lugar por determinar',\n        ceremonyAddress: ceremonyInfo.direccion || '',\n        receptionVenue: receptionInfo.lugar || 'Lugar por determinar',\n        receptionAddress: receptionInfo.direccion || '',\n        receptionTime: receptionInfo.hora || 'Hora por determinar',\n        transportation: transportationInfo.detalles || '',\n        rsvpDeadline: rsvpInfo.fecha || '',\n        contactPhone: profile?.contactPhone || '',\n        contactEmail: profile?.contactEmail || '',\n        weddingStyle: profile?.weddingStyle || 'Clásico',\n        colorScheme: profile?.colorScheme || 'Blanco y dorado',\n        additionalInfo: profile?.additionalInfo || ''\n      };\n      \n      // Instrucciones detalladas para el sistema\n      const sys = `Eres un experto diseñador web especializado en páginas de bodas. \n      Debes crear un sitio web completo y funcional para una boda con diseño moderno, responsive y elegante.\n      El sitio debe incluir las siguientes secciones, adaptándolas según la información disponible:\n      - Inicio con nombres, fecha y cuenta regresiva\n      - Historia de la pareja\n      - Información de ceremonia y recepción\n      - Galería de fotos (con marcadores para fotos)\n      - Detalles de transporte y alojamiento\n      - RSVP (si aplica)\n      - Regalos/Lista de bodas\n      - Contacto\n      \n      Usa un diseño moderno, tipografía elegante y estética acorde al estilo de boda indicado.\n      Debes devolver ÚNICAMENTE código HTML completo con CSS embebido en el <head> y código JavaScript si es necesario.\n      NO incluyas comentarios explicativos fuera del código.`;\n      \n      // Preparar mensaje para la IA incluyendo datos estructurados\n      const userMessage = `\n      Crea un sitio web completo para esta boda con los siguientes datos:\n      \n      DATOS DE LA BODA:\n      - Novia: ${weddingInfo.bride}\n      - Novio: ${weddingInfo.groom}\n      - Fecha: ${weddingInfo.date}\n      - Ceremonia: ${weddingInfo.ceremonyTime} en ${weddingInfo.ceremonyLocation}\n      - Dirección ceremonia: ${weddingInfo.ceremonyAddress}\n      - Recepción: ${weddingInfo.receptionTime} en ${weddingInfo.receptionVenue}\n      - Dirección recepción: ${weddingInfo.receptionAddress}\n      - Transporte: ${weddingInfo.transportation}\n      - Fecha límite RSVP: ${weddingInfo.rsvpDeadline}\n      - Teléfono de contacto: ${weddingInfo.contactPhone}\n      - Email de contacto: ${weddingInfo.contactEmail}\n      - Estilo de boda: ${weddingInfo.weddingStyle}\n      - Paleta de colores: ${weddingInfo.colorScheme}\n      - Información adicional: ${weddingInfo.additionalInfo}\n      \n      REQUISITOS ESPECÍFICOS DEL USUARIO:\n      ${prompt}\n      `;\n      \n      // Solicitud a la API\n      // Verificar que exista la clave de OpenAI\n      const OPENAI_KEY = import.meta.env.VITE_OPENAI_KEY;\n      if(!OPENAI_KEY){\n        alert('Configura la variable de entorno VITE_OPENAI_KEY con tu clave de OpenAI.');\n        setError('Falta clave OpenAI – define VITE_OPENAI_KEY en tu .env');\n        setLoading(false);\n        return;\n      }\n\n      console.log('DEBUG OpenAI_KEY length:', OPENAI_KEY?.length || 'undefined');\n      const modelName = import.meta.env.VITE_OPENAI_MODEL || 'gpt-4o';\n\n      const messages = [\n        { role: 'system', content: sys },\n        { role: 'user', content: userMessage }\n      ];\n      \n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json', \n          'Authorization': `Bearer ${OPENAI_KEY}` \n        },\n        body: JSON.stringify({ \n          model: modelName, // Modelo configurable vía VITE_OPENAI_MODEL\n          messages, \n          temperature: 0.7 \n        })\n      });\n      \n      if(response.status === 401){\n        throw new Error('Clave OpenAI inválida o no autorizada (401). Comprueba VITE_OPENAI_KEY');\n      }\n\n      const data = await response.json();\n      \n      if (data.error) {\n        throw new Error(data.error.message || 'Error al generar la página web');\n      }\n      \n      let htmlGen = data.choices?.[0]?.message?.content || '';\n      // Quitar posibles fences ```html\n      htmlGen = htmlGen.replace(/```html|```/g, '').trim();\n      setHtml(htmlGen);\n    } catch (err) { \n      console.error('Error en la generación de la página:', err); \n      setError(`Error al generar con IA: ${err.message || 'Revisa la consola para más detalles'}`); \n      alert('Ha ocurrido un error al generar la página web. Por favor, inténtalo de nuevo.'); \n    }\n    \n    setLoading(false);\n  };\n\n  const publishWeb = async () => {\n    if(!html.trim()){ alert('Genera la web primero'); return; }\n    try{\n      await setDoc(doc(db,'users',uid), { generatedHtml: html }, { merge:true });\n      await addDoc(collection(db,'users',uid,'generatedPages'), { html, createdAt: serverTimestamp(), prompt });\n      alert('¡Página publicada! Se mostrará en la URL pública en unos minutos.');\n      // recargar versiones\n      const colSnap = await getDocs(collection(db,'users',uid,'generatedPages'));\n      setVersions(colSnap.docs.map(d=>({id:d.id,...d.data()})).sort((a,b)=>b.createdAt?.seconds - a.createdAt?.seconds));\n    }catch(e){ console.error(e); alert('Error al publicar'); }\n  };\n\n  const handleTemplateSelect = (templateKey) => {\n    setSelectedTemplate(templateKey);\n    if (templateKey !== 'personalizada') {\n      // Si selecciona una plantilla predefinida, usar su prompt como base\n      setPrompt(templates[templateKey].prompt);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Diseño Web de Boda</h1>\n      \n      {/* Selección de plantillas */}\n      <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">Selecciona un estilo para tu web</h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {Object.entries(templates).map(([key, template]) => (\n            <div \n              key={key}\n              onClick={() => handleTemplateSelect(key)}\n              className={`border rounded-lg p-4 cursor-pointer transition-all ${selectedTemplate === key ? 'border-blue-500 bg-blue-50 shadow-md' : 'border-gray-200 hover:border-blue-300'}`}\n            >\n              <h3 className=\"font-medium text-lg\">{template.name}</h3>\n              <p className=\"text-gray-600 text-sm mt-1\">{template.desc}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Instrucciones personalizadas */}\n      <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">Personaliza tu web</h2>\n        <p className=\"text-gray-600 mb-4\">\n          Describe cómo quieres que sea tu página web, colores, estilos o cualquier requisito específico.\n          {selectedTemplate !== 'personalizada' && (\n            <span className=\"block mt-2 text-blue-600\">\n              Usando plantilla: <strong>{templates[selectedTemplate].name}</strong>. \n              Puedes modificar el texto sugerido o añadir más detalles.\n            </span>\n          )}\n        </p>\n        \n        <textarea\n          className=\"w-full h-40 border rounded-lg p-4\"\n          placeholder=\"Ej: Quiero una web con estilo romántico, muchas fotos y una sección para que los invitados confirmen asistencia...\"\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n        />\n\n        <div className=\"mt-4 flex flex-wrap gap-4\">\n          <button\n            onClick={generateWeb}\n            disabled={loading}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium disabled:opacity-50 flex items-center gap-2 transition-colors\"\n          >\n            {loading ? (\n              <>\n                <svg className=\"animate-spin h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                <span>Generando...</span>\n              </>\n            ) : (\n              <>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                </svg>\n                <span>Generar Página Web</span>\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-50 border-l-4 border-red-500 p-4 mb-8\">\n          <div className=\"flex items-start\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"h-5 w-5 text-red-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-red-700\">{error}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {html && (\n        <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">Vista previa de tu página web</h2>\n          \n          <div className=\"border rounded-lg overflow-hidden shadow-lg\">\n            <div className=\"bg-gray-100 p-2 border-b flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n              <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <div className=\"flex-1 text-center text-sm text-gray-600\">Vista previa - Tu web de boda</div>\n            </div>\n            <iframe\n              title=\"Vista previa\"\n              srcDoc={html}\n              sandbox=\"allow-same-origin allow-scripts\"\n              className=\"w-full h-[600px] border-none\"\n            />\n          </div>\n\n          <div className=\"mt-6 flex gap-4 items-center\">\n            <button\n              onClick={publishWeb}\n              className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium flex items-center gap-2 transition-colors\"\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n              <span>Publicar página</span>\n            </button>\n            <button \n              onClick={() => {\n                const blob = new Blob([html], { type: 'text/html' });\n                const url = URL.createObjectURL(blob);\n                window.open(url, '_blank');\n              }}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium flex items-center gap-2 transition-colors\"\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path d=\"M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z\" />\n                <path d=\"M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z\" />\n              </svg>\n              <span>Abrir en nueva pestaña</span>\n            </button>\n          </div>\n        </div>\n      )}\n\n      {versions.length > 0 && (\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Versiones publicadas</h2>\n          \n          <div className=\"overflow-hidden rounded-lg border border-gray-200\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Fecha</th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Plantilla</th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Indicaciones</th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {versions.map(v => {\n                  // Detectar qué plantilla se usó basado en el prompt\n                  let templateUsed = 'Personalizada';\n                  Object.entries(templates).forEach(([key, template]) => {\n                    if (v.prompt && v.prompt.includes(template.prompt) && template.prompt) {\n                      templateUsed = template.name;\n                    }\n                  });\n                  \n                  return (\n                    <tr key={v.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                        {new Date(v.createdAt?.seconds * 1000).toLocaleString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                        {templateUsed}\n                      </td>\n                      <td className=\"px-6 py-4 text-sm text-gray-600 truncate max-w-xs\">\r\n                        {v.prompt || 'Sin indicaciones'}\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                        <button \r\n                          onClick={() => setHtml(v.html)}\r\n                          className=\"text-blue-600 hover:text-blue-800 mr-4\"\r\n                        >\r\n                          Ver\r\n                        </button>\r\n                        <button \r\n                          onClick={() => {\r\n                            setPrompt(v.prompt || '');\r\n                            setHtml(v.html);\r\n                            // Detectar plantilla\r\n                            let detectedTemplate = 'personalizada';\r\n                            Object.entries(templates).forEach(([key, template]) => {\r\n                              if (v.prompt && v.prompt.includes(template.prompt) && template.prompt) {\r\n                                detectedTemplate = key;\r\n                              }\r\n                            });\r\n                            setSelectedTemplate(detectedTemplate);\r\n                          }}\r\n                          className=\"text-green-600 hover:text-green-800\"\r\n                        >\r\n                          Editar\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\EmailSetup.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":16,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":55},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":16,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":62}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport MainLayout from '../components/layout/MainLayout';\nimport EmailSetupForm from '../components/email/EmailSetupForm';\nimport useEmailUsername from '../hooks/useEmailUsername';\nimport { auth } from '../lib/firebase';\nimport { Mail, CheckCircle, AlertCircle, ArrowLeft } from 'lucide-react';\nimport Button from '../components/ui/Button';\n\n/**\n * Página de configuración de correo electrónico myWed360\n * Permite a los usuarios crear su dirección personalizada\n */\nconst EmailSetup = () => {\n  const navigate = useNavigate();\n  const { getCurrentUsername, reserveUsername, loading, error } = useEmailUsername();\n  const [currentUsername, setCurrentUsername] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [generalError, setGeneralError] = useState('');\n\n  // Cargar nombre de usuario actual si existe\n  useEffect(() => {\n    const loadUsername = async () => {\n      try {\n        const username = await getCurrentUsername();\n        setCurrentUsername(username);\n      } catch (err) {\n        console.error('Error al cargar el nombre de usuario:', err);\n        setGeneralError('Error al cargar tus datos de correo electrónico');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (auth.currentUser) {\n      loadUsername();\n    } else {\n      // Si no hay usuario logueado, redirigir al login\n      navigate('/login', { \n        state: { \n          returnUrl: '/email-setup',\n          message: 'Debes iniciar sesión para configurar tu correo myWed360' \n        } \n      });\n    }\n  }, [getCurrentUsername, navigate]);\n\n  const handleSaveUsername = async (username) => {\n    try {\n      const success = await reserveUsername(username);\n      if (success) {\n        setCurrentUsername(username);\n        setSaveSuccess(true);\n        // Ocultar mensaje de éxito después de 5 segundos\n        setTimeout(() => {\n          setSaveSuccess(false);\n        }, 5000);\n      }\n    } catch (err) {\n      console.error('Error al guardar el nombre de usuario:', err);\n      setGeneralError('Ha ocurrido un error al guardar tu dirección de correo.');\n    }\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"max-w-3xl mx-auto px-4 py-8\">\n        <div className=\"flex items-center mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate(-1)}\n            className=\"mr-2\"\n          >\n            <ArrowLeft size={16} />\n          </Button>\n          <h1 className=\"text-2xl font-bold\">Configuración de tu correo myWed360</h1>\n        </div>\n\n        <div className=\"bg-blue-50 border-l-4 border-blue-400 p-4 mb-6\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <Mail className=\"h-5 w-5 text-blue-400\" />\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-blue-700\">\n                Configura tu dirección de correo personalizada para comunicarte con proveedores \n                y otros usuarios desde la plataforma myWed360.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {generalError && (\n          <div className=\"mb-6 bg-red-50 border-l-4 border-red-400 p-4\">\n            <div className=\"flex\">\n              <AlertCircle className=\"h-5 w-5 text-red-400\" />\n              <p className=\"ml-3 text-red-700\">{generalError}</p>\n            </div>\n          </div>\n        )}\n\n        {saveSuccess && (\n          <div className=\"mb-6 bg-green-50 border-l-4 border-green-400 p-4\">\n            <div className=\"flex\">\n              <CheckCircle className=\"h-5 w-5 text-green-400\" />\n              <p className=\"ml-3 text-green-700\">\n                ¡Tu dirección de correo <strong>{currentUsername}@mywed360</strong> ha sido guardada con éxito!\n              </p>\n            </div>\n          </div>\n        )}\n\n        {isLoading ? (\n          <div className=\"flex justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n          </div>\n        ) : (\n          <>\n            {currentUsername ? (\n              <div className=\"mb-6\">\n                <p className=\"mb-4\">\n                  Ya tienes configurada tu dirección de correo myWed360: \n                  <strong className=\"ml-2 text-lg\">{currentUsername}@mywed360</strong>\n                </p>\n                <p className=\"text-gray-600\">\n                  Puedes cambiarla a continuación si deseas una dirección diferente:\n                </p>\n              </div>\n            ) : null}\n            \n            <EmailSetupForm \n              onSave={handleSaveUsername} \n              defaultUsername={currentUsername || ''}\n            />\n            \n            {currentUsername && (\n              <div className=\"mt-8 border-t pt-6\">\n                <h2 className=\"text-lg font-semibold mb-3\">¿Qué puedo hacer con mi correo myWed360?</h2>\n                <ul className=\"list-disc pl-5 space-y-2\">\n                  <li>Enviar y recibir emails desde la plataforma</li>\n                  <li>Comunicarte directamente con proveedores sin exponer tu correo personal</li>\n                  <li>Recibir notificaciones importantes sobre tu boda</li>\n                  <li>Centralizar todas las comunicaciones relacionadas con tu evento</li>\n                </ul>\n                \n                <div className=\"mt-6\">\n                  <Button\n                    onClick={() => navigate('/email/inbox')}\n                    className=\"mr-4\"\n                  >\n                    Ir a mi bandeja de entrada\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => navigate('/email/compose')}\n                  >\n                    Escribir nuevo correo\n                  </Button>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </MainLayout>\n  );\n};\n\nexport default EmailSetup;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Finance.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'Pagination' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Toast' is defined but never used.","line":5,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'saveAs' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":8,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":8,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":8,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":61},{"ruleId":"no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used.","line":8,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":76},{"ruleId":"no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":8,"column":78,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":86},{"ruleId":"no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":8,"column":88,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":94},{"ruleId":"no-unused-vars","severity":2,"message":"'Cloud' is defined but never used.","line":8,"column":96,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":101},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudOff' is defined but never used.","line":8,"column":103,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":111},{"ruleId":"no-unused-vars","severity":2,"message":"'RefreshCw' is defined but never used.","line":8,"column":113,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":122},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":10,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":10,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":10,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'XAxis' is defined but never used.","line":10,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'YAxis' is defined but never used.","line":10,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":54},{"ruleId":"no-unused-vars","severity":2,"message":"'CartesianGrid' is defined but never used.","line":10,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":69},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":10,"column":71,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":78},{"ruleId":"no-unused-vars","severity":2,"message":"'Legend' is defined but never used.","line":10,"column":80,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":86},{"ruleId":"no-unused-vars","severity":2,"message":"'ResponsiveContainer' is defined but never used.","line":10,"column":88,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":107},{"ruleId":"no-unused-vars","severity":2,"message":"'CategoryBreakdown' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'syncStatus' is assigned a value but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'loadStoredMovements' is assigned a value but never used.","line":92,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'updateMovement' is assigned a value but never used.","line":110,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":79},{"ruleId":"no-unused-vars","severity":2,"message":"'deleteMovement' is assigned a value but never used.","line":110,"column":93,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":107},{"ruleId":"no-unused-vars","severity":2,"message":"'loadingBank' is assigned a value but never used.","line":132,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":132,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'setNewTransaction' is not defined.","line":543,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":543,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'stored' is not defined.","line":544,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":544,"endColumn":52}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useFirestoreCollection } from '../hooks/useFirestoreCollection';\r\nimport { Spinner } from '../components/ui';\r\nimport Pagination from '../components/Pagination';\r\nimport Toast from '../components/Toast';\r\nimport { saveAs } from 'file-saver';\r\nimport { getTransactions } from '../services/bankService';\r\nimport { Plus, Link2, Edit3, AlertCircle, Clock, CheckCircle, AlertTriangle, Download, Upload, Cloud, CloudOff, RefreshCw } from 'lucide-react';\r\nimport { saveData, loadData, subscribeSyncState, getSyncState } from '../services/SyncService';\r\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { Card } from '../components/ui';\r\nimport { Button } from '../components/ui';\r\nimport { CategoryBreakdown } from '../components/finance/CategoryBreakdown';\r\nimport { BudgetAlerts } from '../components/finance/BudgetAlerts';\r\n\r\nimport Modal from '../components/Modal';\r\n\r\n// -------------------------- NUEVA PÁGINA FINANZAS --------------------------\r\nfunction Finance() {\r\n  const locationHash = typeof window !== 'undefined' ? window.location.hash : '';\r\n  const [tab, setTab] = useState('contabilidad');\r\n\r\n  const [configOpen, setConfigOpen] = React.useState(false);\r\n  // Estado para aportaciones y regalos\r\n  const [initA, setInitA] = React.useState(0);\r\n  const [initB, setInitB] = React.useState(0);\r\n  const [monthlyA, setMonthlyA] = React.useState(0);\r\n  const [monthlyB, setMonthlyB] = React.useState(0);\r\n  const [extras, setExtras] = React.useState(0);\r\n  const [giftPerGuest, setGiftPerGuest] = React.useState(0);\r\n  const [guestCount, setGuestCount] = React.useState(0);\r\n  const monthlyContrib = monthlyA + monthlyB;\r\n\r\n  const expectedIncome = giftPerGuest * guestCount + extras + initA + initB + monthlyContrib;\r\n\r\n  // Balance se calcula dinámicamente a partir de todas las transacciones (movimientos manuales + IA + banco)\r\n  const [manualOpen, setManualOpen] = useState(false);\r\n\r\n  // Estado de sincronización\r\n  const [syncStatus, setSyncStatus] = useState(getSyncState());\r\n\r\n  // Suscribirse a cambios en el estado de sincronización\r\n  useEffect(() => {\r\n    const unsubscribe = subscribeSyncState(setSyncStatus);\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Al abrir/mostrar configuracion intentar cargar número de invitados desde perfil\r\n  React.useEffect(() => {\r\n    if (configOpen) {\r\n      try {\r\n        const profile = loadData('lovendaProfile', { defaultValue: {}, collection: 'userProfile' });\r\n        if (profile?.weddingInfo?.numGuests) {\r\n          setGuestCount(Number(profile.weddingInfo.numGuests));\r\n        }\r\n      } catch (e) { console.error('Error leyendo perfil', e); }\r\n    }\r\n  }, [configOpen]);\r\n\r\n  // Abrir modal de nuevo movimiento si la URL contiene #nuevo\r\n  React.useEffect(() => {\r\n    if (locationHash === '#nuevo') {\r\n      setManualOpen(true);\r\n      window.history.replaceState(null, '', window.location.pathname);\r\n    }\r\n  }, []);\r\n  const [newMovement, setNewMovement] = useState({ concept: '', amount: 0, date: '', type: 'expense' });\r\n  // Presupuesto total y categorías\r\n  const [totalBudget, setTotalBudget] = useState(30000);\r\n  const [categories, setCategories] = useState([\r\n    { name: 'Catering', amount: 8000 },\r\n    { name: 'Música', amount: 2000 },\r\n    { name: 'Flores', amount: 1500 },\r\n    { name: 'Luna de miel', amount: 5000 },\r\n  ]);\r\n  const emergencyAmount = Math.round(totalBudget * 0.1);\r\n\r\n\r\n  const addCategory = () => {\r\n    const name = prompt('Nombre de la categoría');\r\n    if (name && !categories.find(c => c.name === name)) {\r\n      setCategories([...categories, { name, amount: 0 }]);\r\n    }\r\n  };\r\n  const updateCategory = (idx, value) => {\r\n    const next = [...categories];\r\n    next[idx].amount = Number(value);\r\n    setCategories(next);\r\n  };\r\n\r\n  // --- Cargar movimientos IA/externos con SyncService ---\r\nconst loadStoredMovements = () => {\r\n  try {\r\n    return loadData('lovendaMovements', { \r\n      defaultValue: [], \r\n      collection: 'userFinanceMovements' \r\n    });\r\n  } catch(error) { \r\n    console.error('Error al cargar movimientos:', error);\r\n    return []; \r\n  }\r\n};\r\n\r\n/* upcomingExpenses, upcomingIncomes y pendingExpenses se calculan dinámicamente más abajo */\r\n  const initialHistory = [\r\n    { id: 1, name: 'Reserva finca', amount: 3000, date: '2025-06-01', type: 'expense' },\r\n    { id: 2, name: 'Aportación Persona A', amount: 5000, date: '2025-05-30', type: 'income' },\r\n  ];\r\n\r\n  const { data: historyState, addItem: addMovement, updateItem: updateMovement, deleteItem: deleteMovement } = useFirestoreCollection('movements', initialHistory);\r\n\r\n  // Compatibilidad con flujo IA antiguo (evento 'lovenda-movements')\r\n  useEffect(() => {\r\n    const handler = async () => {\r\n      try {\r\n        const stored = await loadData('lovendaMovements', { defaultValue: [], collection: 'userFinanceMovements' }) || [];\r\n        for (const m of stored) {\r\n          if (!historyState.some(e => e.id === m.id)) {\r\n            await addMovement(m);\r\n          }\r\n        }\r\n      } catch(error){\r\n        console.error('Error al procesar movimientos:', error);\r\n      }\r\n    };\r\n    window.addEventListener('lovenda-movements', handler);\r\n    return () => window.removeEventListener('lovenda-movements', handler);\r\n  }, [historyState, addMovement]);\r\n\r\n  // --- Transacciones de banco (si están configuradas las credenciales) ---\r\n  const [bankTransactions, setBankTransactions] = useState([]);\r\n  const [loadingBank, setLoadingBank] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchTx () {\r\n      try {\r\n        setLoadingBank(true);\r\n        const data = await getTransactions({});\r\n        setBankTransactions(Array.isArray(data) ? data : []);\r\n      } catch (err) {\r\n        console.error('Error fetching bank transactions', err);\r\n      } finally {\r\n        setLoadingBank(false);\r\n      }\r\n    }\r\n    fetchTx();\r\n  }, []);\r\n\r\n  // Unificar transacciones locales (historial + IA) y del banco\r\n  const transactions = useMemo(() => {\r\n    const merged = [...historyState, ...bankTransactions];\r\n    return merged.map(t => ({\r\n      ...t,\r\n      realCost: t.realCost ?? t.amount,\r\n      category: t.category || 'General',\r\n    }));\n  }, [historyState, bankTransactions]);\n\n  // Balance disponible = ingresos - gastos\n  const balance = useMemo(() => {\n    return transactions.reduce((acc, t) => {\n      const amount = Number(t.amount ?? t.realCost ?? 0);\n      return acc + (t.type === 'income' ? amount : -amount);\n    }, 0);\n  }, [transactions]);\n\n  // Cálculos de próximos y pendientes\n  const today = new Date();\n  const upcomingExpenses = useMemo(() => transactions.filter(t => t.type==='expense' && t.date && new Date(t.date) > today).sort((a,b)=>new Date(a.date)-new Date(b.date)).slice(0,5), [transactions]);\n  const upcomingIncomes = useMemo(() => transactions.filter(t => t.type==='income' && t.date && new Date(t.date) > today).sort((a,b)=>new Date(a.date)-new Date(b.date)).slice(0,5), [transactions]);\n  const pendingExpenses = useMemo(() => transactions.filter(t => t.type==='expense' && t.date && new Date(t.date) >= today).sort((a,b)=>new Date(a.date)-new Date(b.date)), [transactions]);\n\n  // Calcular gastos totales y porcentaje gastado del presupuesto\n  const totalExpenses = React.useMemo(() => transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + Number(t.amount ?? t.realCost ?? 0), 0), [transactions]);\n  const percentSpent = totalBudget ? (totalExpenses / totalBudget) * 100 : 0;\n\n  const fmt = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });\n\n  return (\n    <div className=\"p-4 md:p-6 space-y-8 pb-36\">\n      <h1 className=\"text-2xl font-semibold\">Finanzas</h1>\n      <div className=\"flex gap-2 mt-2\">\n        {['contabilidad','planificacion'].map(t => (\n          <button\n            key={t}\n            className={`px-3 py-1 rounded ${tab===t? 'bg-blue-600 text-white' : 'bg-gray-200'}`}\n            onClick={() => setTab(t)}\n          >\n            {t==='contabilidad' ? 'Contabilidad' : 'Planificación'}\n          </button>\n        ))}\n      </div>\n      <div className=\"flex flex-wrap gap-2 my-4\">\n        <Button leftIcon={<Link2 size={18} />} onClick={() => alert('Función de vincular banco próximamente')}>Vincular banco</Button>\n        <Button leftIcon={<Edit3 size={18} />} onClick={() => setManualOpen(true)}>Añadir movimiento</Button>\n        {/* Botón de configuración eliminado */}\n        \n        \n      </div>\n      <div className={`flex flex-wrap md:flex-nowrap gap-4 w-full ${tab!=='contabilidad' ? 'hidden' : ''}`}>\n        <Card className=\"p-4 flex-1 md:basis-1/2 min-w-[260px] text-center\">\n        <h2 className=\"text-lg font-medium mb-2\">Saldo disponible</h2>\n        <p className=\"text-4xl font-bold text-green-600\">{fmt.format(balance)}</p>\n      </Card>\n\n        \n          <Card className=\"flex-1 md:basis-1/4 min-w-[220px]\">\n            <h3 className=\"font-medium mb-2\">Próximos gastos</h3>\n            <ul className=\"text-sm space-y-1\">\n              {upcomingExpenses.map(e => (\n                <li key={e.id} className=\"flex justify-between\">\n                  <span>{e.name}</span>\n                  <span className=\"text-red-600\">{fmt.format(e.amount)}</span>\n                </li>\n              ))}\n            </ul>\n          </Card>\n          <Card className=\"flex-1 md:basis-1/4 min-w-[220px]\">\n            <h3 className=\"font-medium mb-2\">Próximos ingresos</h3>\n            <ul className=\"text-sm space-y-1\">\n              {upcomingIncomes.map(i => (\n                <li key={i.id} className=\"flex justify-between\">\n                  <span>{i.name}</span>\n                  <span className=\"text-green-600\">{fmt.format(i.amount)}</span>\n                </li>\n              ))}\n            </ul>\n          </Card>\n        \n\n        \n\n        \n      \n\n      </div>\n\n      {/* Sección de gastos pendientes y alertas de presupuesto (solo contabilidad) */}\n      <div className={`grid md:grid-cols-2 gap-4 ${tab!=='contabilidad' ? 'hidden' : ''}`}>\n        <Card className=\"p-4\">\n          <h3 className=\"font-medium mb-2\">Gastos pendientes</h3>\n          <table className=\"w-full text-sm divide-y\">\n            <thead>\n              <tr className=\"text-left\">\n                <th>Concepto</th>\n                <th>Fecha</th>\n                <th>Importe</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y\">\n              {pendingExpenses.map(e => (\n                <tr key={e.id} className=\"border-t\">\n                  <td>{e.name}</td>\n                  <td>{e.date}</td>\n                  <td className=\"text-red-600\">{fmt.format(e.amount)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </Card>\n        \n        {/* Alertas de presupuesto */}\n        <BudgetAlerts transactions={transactions} budgetLimits={categories.reduce((acc,c)=>{acc[c.name]=c.amount;return acc;},{})} />\n      </div>\n\n      {/* Planificación de presupuesto */}\n      <Card className=\"hidden\">\n        <h3 className=\"font-medium text-lg\">Planificación de presupuesto</h3>\n        <div className=\"flex items-center space-x-2\">\n          <span>Presupuesto total:</span>\n          <input\n            type=\"number\"\n            className=\"border rounded px-2 py-1 w-32\"\n            value={totalBudget}\n            onChange={e => setTotalBudget(Number(e.target.value))}\n          />\n        </div>\n        \n        <table className=\"w-full text-sm divide-y\">\n          <thead>\n            <tr className=\"text-left\">\n              <th>Categoría</th>\n              <th>Importe</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y\">\n            {categories.map((cat, idx) => (\n              <tr key={cat.name} className=\"border-t\">\n                <td className=\"py-1\">{cat.name}</td>\n                <td className=\"py-1\">\n                  <input\n                    type=\"number\"\n                    className=\"border rounded px-1 w-24\"\n                    value={cat.amount}\n                    onChange={e => updateCategory(idx, e.target.value)}\n                  />\n                </td>\n              </tr>\n            ))}\n            <tr className=\"border-t font-medium\">\n              <td className=\"py-1\">Fondo de emergencia (10%)</td>\n              <td className=\"py-1\">{fmt.format(emergencyAmount)}</td>\n            </tr>\n          </tbody>\n        </table>\n        <div className=\"mt-4\">\n            <div className=\"w-full bg-gray-200 rounded h-4 overflow-hidden\">\n              <div className={`h-4 ${percentSpent>100?'bg-red-600':percentSpent>=90?'bg-yellow-500':'bg-green-600'}`} style={{ width: `${Math.min(percentSpent,100)}%` }}></div>\n            </div>\n            <p className=\"text-xs text-right mt-1\">{percentSpent.toFixed(0)}% del presupuesto gastado</p>\n          </div>\n          <Button variant=\"secondary\" onClick={addCategory}>+ Añadir categoría</Button>\n\n          {/* Configuración de aportaciones y regalos */}\n          <div className=\"space-y-4 mt-6 hidden\">\n            <h4 className=\"font-medium\">Aportaciones iniciales</h4>\n            <label className=\"block\">\n              Persona A (€)\n              <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={initA} onChange={e=>setInitA(+e.target.value||0)} />\n            </label>\n            <label className=\"block\">\n              Persona B (€)\n              <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={initB} onChange={e=>setInitB(+e.target.value||0)} />\n            </label>\n\n            <h4 className=\"font-medium mt-3\">Aportaciones mensuales</h4>\n            <label className=\"block\">\n              Persona A (€ / mes)\n              <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={monthlyA} onChange={e=>setMonthlyA(+e.target.value||0)} />\n            </label>\n            <label className=\"block\">\n              Persona B (€ / mes)\n              <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={monthlyB} onChange={e=>setMonthlyB(+e.target.value||0)} />\n            </label>\n\n            <h4 className=\"font-medium mt-3\">Aportaciones extras</h4>\n            <label className=\"block\">\n              Total extras (€)\n              <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={extras} onChange={e=>setExtras(+e.target.value||0)} />\n            </label>\n\n            <h4 className=\"font-medium mt-3\">Regalos estimados</h4>\n            <label className=\"block\">\n              Regalo estimado por invitado (€)\n              <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={giftPerGuest} onChange={e=>setGiftPerGuest(+e.target.value||0)} />\n            </label>\n            <label className=\"block\">\n              Número de invitados\n              <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={guestCount} onChange={e=>setGuestCount(+e.target.value||0)} />\n            </label>\n          </div>\n      </Card>\n\n       {/* Panel eliminado - las alertas ya están arriba */}\n\n       {/* === PLANIFICACIÓN === */}\n      {tab==='planificacion' && (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {/* Ingresos esperados */}\n          <Card className=\"p-4 col-span-full lg:col-span-1 text-center\">\n            <h3 className=\"text-lg font-medium mb-2\">Ingresos esperados</h3>\n            <p className=\"text-3xl font-bold text-green-600\">{fmt.format(expectedIncome)}</p>\n            <p className=\"text-sm text-gray-500 mt-1\">Aportaciones + regalos</p>\n          </Card>\n\n          {/* Aportaciones y extras */}\n          <Card className=\"p-4 space-y-3 lg:col-span-2\">\n            <h3 className=\"text-lg font-medium\">Aportaciones y regalos</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              <label className=\"block\">\n                Persona A (inicial €)\n                <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={initA} onChange={e=>setInitA(+e.target.value||0)} />\n              </label>\n              <label className=\"block\">\n                Persona B (inicial €)\n                <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={initB} onChange={e=>setInitB(+e.target.value||0)} />\n              </label>\n              <label className=\"block\">\n                Persona A (mensual €)\n                <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={monthlyA} onChange={e=>setMonthlyA(+e.target.value||0)} />\n              </label>\n              <label className=\"block\">\n                Persona B (mensual €)\n                <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={monthlyB} onChange={e=>setMonthlyB(+e.target.value||0)} />\n              </label>\n              <label className=\"block\">\n                Extras (€)\n                <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={extras} onChange={e=>setExtras(+e.target.value||0)} />\n              </label>\n              <label className=\"block\">\n                Regalo por invitado (€)\n                <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={giftPerGuest} onChange={e=>setGiftPerGuest(+e.target.value||0)} />\n              </label>\n              <label className=\"block\">\n                Número de invitados\n                <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={guestCount} onChange={e=>setGuestCount(+e.target.value||0)} />\n              </label>\n            </div>\n          </Card>\n\n          {/* Planificación de presupuesto */}\n          <Card className=\"p-4 space-y-4 col-span-full\">\n            <h3 className=\"font-medium text-lg\">Planificación de presupuesto</h3>\n            <div className=\"flex items-center space-x-2\">\n              <span>Presupuesto total:</span>\n              <input\n                type=\"number\"\n                className=\"border rounded px-2 py-1 w-32\"\n                value={totalBudget}\n                onChange={e => setTotalBudget(Number(e.target.value))}\n              />\n            </div>\n            <table className=\"w-full text-sm divide-y\">\n              <thead>\n                <tr className=\"text-left\">\n                  <th>Categoría</th>\n                  <th>Importe</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y\">\n                {categories.map((cat, idx) => (\n                  <tr key={cat.name} className=\"border-t\">\n                    <td className=\"py-1\">{cat.name}</td>\n                    <td className=\"py-1\">\n                      <input\n                        type=\"number\"\n                        className=\"border rounded px-1 w-24\"\n                        value={cat.amount}\n                        onChange={e => updateCategory(idx, e.target.value)}\n                      />\n                    </td>\n                  </tr>\n                ))}\n                <tr className=\"border-t font-medium\">\n                  <td className=\"py-1\">Fondo de emergencia (10%)</td>\n                  <td className=\"py-1\">{fmt.format(emergencyAmount)}</td>\n                </tr>\n              </tbody>\n            </table>\n            <Button variant=\"secondary\" onClick={addCategory}>+ Añadir categoría</Button>\n          </Card>\n        </div>\n      )}\n\n      {/* Historial */}\n      <Card className={`p-4 overflow-x-auto ${tab!=='contabilidad' ? 'hidden' : ''}`}>\n        <h3 className=\"font-medium mb-2\">Histórico de gastos e ingresos</h3>\n        <table className=\"w-full text-sm divide-y\">\n          <thead>\n            <tr className=\"text-left\">\n              <th>Concepto</th>\n              <th>Fecha</th>\n              <th>Importe</th>\n              <th>Tipo</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y\">\n            {historyState.map(r => (\n              <tr key={r.id} className=\"border-t\">\n                <td>{r.name}</td>\n                <td>{r.date}</td>\n                <td className={r.type === 'expense' ? 'text-red-600' : 'text-green-600'}>{fmt.format(r.amount)}</td>\n                <td>{r.type === 'expense' ? 'Gasto' : 'Ingreso'}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </Card>\n\n      \n      \n        <Modal open={configOpen} onClose={() => setConfigOpen(false)} title=\"Configuración\">\n        <div className=\"space-y-3 max-h-[70vh] overflow-y-auto pr-2\">\n          <h4 className=\"font-medium\">Aportaciones iniciales</h4>\n          <label className=\"block\">\n            Persona A (€)\n            <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={initA} onChange={e=>setInitA(+e.target.value||0)} />\n          </label>\n          <label className=\"block\">\n            Persona B (€)\n            <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={initB} onChange={e=>setInitB(+e.target.value||0)} />\n          </label>\n\n          <h4 className=\"font-medium mt-3\">Aportaciones mensuales</h4>\n          <label className=\"block\">\n            Persona A (€ / mes)\n            <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={monthlyA} onChange={e=>setMonthlyA(+e.target.value||0)} />\n          </label>\n          <label className=\"block\">\n            Persona B (€ / mes)\n            <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={monthlyB} onChange={e=>setMonthlyB(+e.target.value||0)} />\n          </label>\n\n          <h4 className=\"font-medium mt-3\">Aportaciones extras (familia u otros ingresos)</h4>\n          <label className=\"block\">\n            Total extras (€)\n            <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={extras} onChange={e=>setExtras(+e.target.value||0)} />\n          </label>\n\n          <h4 className=\"font-medium mt-3\">Regalos estimados</h4>\n          <label className=\"block\">\n            Regalo estimado por invitado (€)\n            <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={giftPerGuest} onChange={e=>setGiftPerGuest(+e.target.value||0)} />\n          </label>\n          <label className=\"block\">\n            Número de invitados\n            <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={guestCount} onChange={e=>setGuestCount(+e.target.value||0)} />\n          </label>\n\n          <div className=\"text-right mt-4\">\n            <Button >Guardar</Button>\n          </div>\n        </div>\n      </Modal>\n\n      {/* Modal movimiento manual */}\n      <Modal open={manualOpen} onClose={() => setManualOpen(false)} title=\"Nuevo movimiento\">\n        <div className=\"space-y-3\">\n          <label className=\"block\">\n            Concepto\n            <input type=\"text\" className=\"border rounded px-2 py-1 w-full\" value={newMovement.concept} onChange={e=>setNewMovement({...newMovement, concept:e.target.value})} />\n          </label>\n          <label className=\"block\">\n            Monto (€)\n            <input type=\"number\" className=\"border rounded px-2 py-1 w-full\" value={newMovement.amount} onChange={e=>setNewMovement({...newMovement, amount:+e.target.value||0})} />\n          </label>\n          <label className=\"block\">\n            Fecha\n            <input type=\"date\" className=\"border rounded px-2 py-1 w-full\" value={newMovement.date} onChange={e=>setNewMovement({...newMovement, date:e.target.value})} />\n          </label>\n          <label className=\"block\">\n            Tipo\n            <select className=\"border rounded px-2 py-1 w-full\" value={newMovement.type} onChange={e=>setNewMovement({...newMovement, type:e.target.value})}>\n              <option value=\"expense\">Gasto</option>\n              <option value=\"income\">Ingreso</option>\n            </select>\n          </label>\n          <div className=\"text-right space-x-2\">\n            <Button variant=\"outline\" onClick={()=>setManualOpen(false)}>Cancelar</Button>\n            <Button onClick={()=>{const id = `mov-${Date.now()}`;\n                const movObj = { ...newMovement, id };\n                // Actualizar estados y sincronizar datos\n                setNewTransaction({ type: 'expense', date: today, name: '', amount: '', category: 'OTROS' });\n                const updatedMovements = [...stored, movObj];\n                saveData('lovendaMovements', updatedMovements, {\n                  collection: 'userFinanceMovements',\n                  showNotification: false\n                });\n                window.dispatchEvent(new Event('lovenda-movements'));\n                setManualOpen(false);}}>Guardar</Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\r\n}\r\nexport default Finance;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\GestionProveedores.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":3,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'where' is defined but never used.","line":6,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'getFirestore' is defined but never used.","line":6,"column":80,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":92},{"ruleId":"no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":24,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is assigned a value but never used.","line":147,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Sparkles, Plus, Settings } from 'lucide-react';\n\n// Firebase\nimport { collection, query, where, getDocs, addDoc, updateDoc, doc, deleteDoc, getFirestore } from 'firebase/firestore';\nimport { useAuth } from '../hooks/useAuth';\nimport { db } from '../lib/firebase';\n\n// Componentes\nimport ProveedorCardNuevo from '../components/proveedores/ProveedorCardNuevo';\nimport ProveedorDetalle from '../components/proveedores/ProveedorDetalle';\nimport ProveedorFiltro from '../components/proveedores/ProveedorFiltro';\nimport ProveedorFormModal from '../components/proveedores/ProveedorFormModal';\nimport AIBusquedaModal from '../components/proveedores/AIBusquedaModal';\n\n/**\n * Página de gestión de proveedores\n * Muestra proveedores en tarjetas, permite filtrar, buscar con IA y añadir manualmente\n */\nconst GestionProveedores = () => {\n  // Contextos\n  const { currentUser } = useAuth();\n  const navigate = useNavigate();\n  \n  // Estados para proveedores\n  const [proveedores, setProveedores] = useState([]);\n  const [proveedoresFiltrados, setProveedoresFiltrados] = useState([]);\n  const [proveedorSeleccionado, setProveedorSeleccionado] = useState(null);\n  const [cargando, setCargando] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Estados para filtros y búsqueda\n  const [filtroActivo, setFiltroActivo] = useState('todos');\n  const [textoBusqueda, setTextoBusqueda] = useState('');\n  \n  // Estados para modales\n  const [modalFormularioVisible, setModalFormularioVisible] = useState(false);\n  const [modalAIVisible, setModalAIVisible] = useState(false);\n  const [proveedorEditar, setProveedorEditar] = useState(null);\n  \n  // Estados para búsqueda IA\n  const [resultadoBusquedaIA, setResultadoBusquedaIA] = useState(null);\n  const [cargandoBusquedaIA, setCargandoBusquedaIA] = useState(false);\n  \n  // Estado para comunicaciones\n  const [comunicaciones, setComunicaciones] = useState([]);\n  \n  // Cargar proveedores desde Firestore\n  const cargarProveedores = useCallback(async () => {\n    // Usar ID de usuario por defecto si no hay usuario autenticado (solo para desarrollo)\n    const userId = currentUser?.uid || 'user123';\n    console.log('cargarProveedores: usando ID de usuario:', userId);\n    \n    setCargando(true);\n    setError(null);\n    \n    try {\n      const proveedoresRef = collection(db, `users/${userId}/proveedores`);\n      const q = query(proveedoresRef);\n      const snapshot = await getDocs(q);\n      \n      const nuevosProveedores = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      \n      setProveedores(nuevosProveedores);\n      aplicarFiltros(nuevosProveedores, filtroActivo, textoBusqueda);\n      \n      setCargando(false);\n    } catch (err) {\n      console.error('Error al cargar proveedores:', err);\n      setError('Error al cargar los proveedores. Inténtalo de nuevo más tarde.');\n      setCargando(false);\n    }\n  }, [currentUser, filtroActivo, textoBusqueda]);\n  \n  // Cargar al iniciar\n  useEffect(() => {\n    cargarProveedores();\n  }, [cargarProveedores]);\n  \n  // Aplicar filtros a los proveedores\n  const aplicarFiltros = (listaProveedores, filtro, texto) => {\n    let resultado = [...listaProveedores];\n    \n    // Aplicar filtro por categoría\n    switch (filtro) {\n      case 'contratados':\n        resultado = resultado.filter(p => p.estado === 'Contratado');\n        break;\n      case 'contactados':\n        resultado = resultado.filter(p => p.estado === 'Contactado');\n        break;\n      case 'favoritos':\n        resultado = resultado.filter(p => p.favorito === true);\n        break;\n      default:\n        // Todos los proveedores\n        break;\n    }\n    \n    // Aplicar filtro de texto si existe\n    if (texto) {\n      const textoLower = texto.toLowerCase();\n      resultado = resultado.filter(p => \n        (p.nombre && p.nombre.toLowerCase().includes(textoLower)) ||\n        (p.servicio && p.servicio.toLowerCase().includes(textoLower)) ||\n        (p.ubicacion && p.ubicacion.toLowerCase().includes(textoLower))\n      );\n    }\n    \n    setProveedoresFiltrados(resultado);\n  };\n  \n  // Cambiar filtro activo\n  const cambiarFiltro = (nuevoFiltro) => {\n    setFiltroActivo(nuevoFiltro);\n    aplicarFiltros(proveedores, nuevoFiltro, textoBusqueda);\n  };\n  \n  // Cambiar texto de búsqueda\n  const cambiarTextoBusqueda = (nuevoTexto) => {\n    setTextoBusqueda(nuevoTexto);\n  };\n  \n  // Realizar búsqueda\n  const buscar = () => {\n    aplicarFiltros(proveedores, filtroActivo, textoBusqueda);\n  };\n  \n  // Guardar nuevo proveedor\n  const guardarProveedor = async (datosProveedor) => {\n    console.log('guardarProveedor llamado con datos:', datosProveedor);\n    \n    // Usar ID de usuario por defecto si no hay usuario autenticado (solo para desarrollo)\n    const userId = currentUser?.uid || 'user123';\n    console.log('Usando ID de usuario:', userId);\n    \n    try {\n      console.log('Intentando guardar proveedor en Firestore...');\n      // Si tiene ID, actualizar\n      if (datosProveedor.id) {\n        console.log('Actualizando proveedor existente con ID:', datosProveedor.id);\n        const proveedorRef = doc(db, `users/${userId}/proveedores`, datosProveedor.id);\n        const { id, ...datosActualizar } = datosProveedor;\n        await updateDoc(proveedorRef, datosActualizar);\n        console.log('Proveedor actualizado correctamente');\n      } else {\n        // Si no tiene ID, crear nuevo\n        console.log('Creando nuevo proveedor para usuario:', userId);\n        const proveedoresRef = collection(db, `users/${userId}/proveedores`);\n        const docRef = await addDoc(proveedoresRef, {\n          ...datosProveedor,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        });\n        console.log('Proveedor creado con ID:', docRef.id);\n      }\n      \n      // Recargar proveedores\n      console.log('Recargando lista de proveedores...');\n      await cargarProveedores();\n      console.log('Lista de proveedores recargada');\n      \n      return true;\n    } catch (error) {\n      console.error('Error al guardar proveedor:', error);\n      throw error;\n    }\n  };\n  \n  // Eliminar proveedor\n  const eliminarProveedor = async (proveedorId) => {\n    if (!currentUser?.uid || !proveedorId) return;\n    \n    if (!window.confirm('¿Estás seguro de que quieres eliminar este proveedor?')) {\n      return;\n    }\n    \n    try {\n      const proveedorRef = doc(db, `users/${currentUser.uid}/proveedores`, proveedorId);\n      await deleteDoc(proveedorRef);\n      \n      // Actualizar estado local\n      setProveedores(prev => prev.filter(p => p.id !== proveedorId));\n      setProveedoresFiltrados(prev => prev.filter(p => p.id !== proveedorId));\n      \n      // Si era el proveedor seleccionado, deseleccionar\n      if (proveedorSeleccionado?.id === proveedorId) {\n        setProveedorSeleccionado(null);\n      }\n    } catch (error) {\n      console.error('Error al eliminar proveedor:', error);\n      alert('Error al eliminar el proveedor');\n    }\n  };\n  \n  // Marcar/desmarcar favorito\n  const toggleFavorito = async (proveedorId) => {\n    if (!currentUser?.uid || !proveedorId) return;\n    \n    try {\n      // Encontrar el proveedor en la lista\n      const proveedor = proveedores.find(p => p.id === proveedorId);\n      if (!proveedor) return;\n      \n      // Actualizar en Firestore\n      const proveedorRef = doc(db, `users/${currentUser.uid}/proveedores`, proveedorId);\n      await updateDoc(proveedorRef, {\n        favorito: !proveedor.favorito,\n        updatedAt: new Date().toISOString()\n      });\n      \n      // Actualizar estado local\n      setProveedores(prev => \n        prev.map(p => \n          p.id === proveedorId ? { ...p, favorito: !p.favorito } : p\n        )\n      );\n      \n      // Actualizar filtrados también\n      setProveedoresFiltrados(prev => \n        prev.map(p => \n          p.id === proveedorId ? { ...p, favorito: !p.favorito } : p\n        )\n      );\n      \n      // Si es el proveedor seleccionado, actualizar\n      if (proveedorSeleccionado?.id === proveedorId) {\n        setProveedorSeleccionado(prev => ({ ...prev, favorito: !prev.favorito }));\n      }\n    } catch (error) {\n      console.error('Error al marcar favorito:', error);\n    }\n  };\n  \n  // Editar proveedor\n  const editarProveedor = (proveedor) => {\n    setProveedorEditar(proveedor);\n    setModalFormularioVisible(true);\n  };\n  \n  // Ver detalle del proveedor\n  const verDetalleProveedor = async (proveedor) => {\n    setProveedorSeleccionado(proveedor);\n    \n    // Cargar comunicaciones para este proveedor\n    try {\n      if (currentUser?.uid && proveedor?.id) {\n        const comunicacionesRef = collection(db, `users/${currentUser.uid}/proveedores/${proveedor.id}/comunicaciones`);\n        const snapshot = await getDocs(comunicacionesRef);\n        \n        const nuevasComunicaciones = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        })).sort((a, b) => {\n          // Ordenar por fecha descendente\n          return new Date(b.fecha) - new Date(a.fecha);\n        });\n        \n        setComunicaciones(nuevasComunicaciones);\n      }\n    } catch (error) {\n      console.error('Error al cargar comunicaciones:', error);\n      setComunicaciones([]);\n    }\n  };\n  \n  // Cerrar detalle\n  const cerrarDetalle = () => {\n    setProveedorSeleccionado(null);\n    setComunicaciones([]);\n  };\n  \n  // Añadir nueva comunicación\n  const nuevaComunicacion = async () => {\n    // Aquí iría un modal para añadir comunicación\n    alert('Funcionalidad de añadir comunicación en desarrollo');\n  };\n  \n  // Buscar con IA\n  const buscarConIA = async (consulta) => {\n    if (!consulta) return;\n    \n    setCargandoBusquedaIA(true);\n    setResultadoBusquedaIA(null);\n    \n    try {\n      // Simular búsqueda con IA (reemplazar con llamada real a API)\n      setTimeout(() => {\n        // Resultado simulado\n        const resultado = {\n          nombre: `Proveedor para: ${consulta}`,\n          servicio: consulta.split(' ')[0] || 'Servicio',\n          descripcion: `Este es un proveedor encontrado para tu búsqueda: \"${consulta}\". Aquí iría una descripción generada por IA con información relevante sobre el proveedor.`,\n          web: 'https://ejemplo.com',\n          ubicacion: 'Madrid, España',\n          contacto: 'Persona de contacto',\n          email: 'contacto@ejemplo.com',\n          telefono: '+34 123 456 789'\n        };\n        \n        setResultadoBusquedaIA(resultado);\n        setCargandoBusquedaIA(false);\n      }, 2000);\n    } catch (error) {\n      console.error('Error en búsqueda IA:', error);\n      setCargandoBusquedaIA(false);\n    }\n  };\n  \n  // Guardar proveedor de IA\n  const guardarProveedorIA = (resultado) => {\n    if (!resultado) return;\n    \n    // Pasar al formulario para completar\n    setProveedorEditar({\n      nombre: resultado.nombre,\n      servicio: resultado.servicio,\n      ubicacion: resultado.ubicacion,\n      contacto: resultado.contacto,\n      email: resultado.email,\n      telefono: resultado.telefono,\n      web: resultado.web,\n      notas: resultado.descripcion,\n      estado: 'Nuevo',\n      favorito: false\n    });\n    \n    // Cerrar modal IA y abrir formulario\n    setModalAIVisible(false);\n    setModalFormularioVisible(true);\n  };\n  \n  // Determinar contenido principal\n  let contenidoPrincipal;\n  \n  if (error) {\n    contenidoPrincipal = (\n      <div className=\"bg-red-50 border-l-4 border-red-400 p-4 mt-4\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm text-red-700\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  } else if (cargando) {\n    contenidoPrincipal = (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  } else if (proveedorSeleccionado) {\n    // Vista detalle del proveedor\n    contenidoPrincipal = (\n      <ProveedorDetalle\n        proveedor={proveedorSeleccionado}\n        comunicaciones={comunicaciones}\n        onCerrar={cerrarDetalle}\n        onEditar={editarProveedor}\n        onNuevaComunicacion={nuevaComunicacion}\n      />\n    );\n  } else {\n    // Lista de proveedores\n    contenidoPrincipal = (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {proveedoresFiltrados.length > 0 ? (\n          proveedoresFiltrados.map(proveedor => (\n            <ProveedorCardNuevo\n              key={proveedor.id}\n              proveedor={proveedor}\n              onClick={verDetalleProveedor}\n              onToggleFavorito={toggleFavorito}\n              onEditar={() => editarProveedor(proveedor)}\n              onEliminar={eliminarProveedor}\n            />\n          ))\n        ) : (\n          <div className=\"col-span-full flex flex-col items-center justify-center py-16\">\n            <svg className=\"h-12 w-12 text-gray-300\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\n            </svg>\n            <h3 className=\"mt-2 text-lg font-medium text-gray-900\">No hay proveedores</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              {textoBusqueda ? 'No se encontraron resultados para tu búsqueda.' : 'Comienza añadiendo un nuevo proveedor.'}\n            </p>\n            <div className=\"mt-6\">\n              <button\n                onClick={() => setModalFormularioVisible(true)}\n                className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              >\n                <Plus className=\"-ml-1 mr-2 h-5 w-5\" aria-hidden=\"true\" />\n                Añadir proveedor\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"sm:flex sm:items-center sm:justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Gestión de Proveedores</h1>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Administra todos los proveedores para tu boda\n          </p>\n        </div>\n        \n        {!proveedorSeleccionado && (\n          <div className=\"mt-4 sm:mt-0 sm:ml-16 flex space-x-3\">\n            <button\n              onClick={() => setModalAIVisible(true)}\n              className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500\"\n            >\n              <Sparkles className=\"-ml-1 mr-2 h-5 w-5\" aria-hidden=\"true\" />\n              Buscar con IA\n            </button>\n            <button\n              onClick={() => setModalFormularioVisible(true)}\n              className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              <Plus className=\"-ml-1 mr-2 h-5 w-5\" aria-hidden=\"true\" />\n              Añadir proveedor\n            </button>\n          </div>\n        )}\n      </div>\n      \n      {/* Filtros solo visibles si no hay proveedor seleccionado */}\n      {!proveedorSeleccionado && (\n        <ProveedorFiltro \n          filtroActivo={filtroActivo}\n          onCambioFiltro={cambiarFiltro}\n          textoBusqueda={textoBusqueda}\n          onCambioTexto={cambiarTextoBusqueda}\n          onBuscar={buscar}\n        />\n      )}\n      \n      {/* Contenido principal */}\n      {contenidoPrincipal}\n      \n      {/* Modales */}\n      <ProveedorFormModal\n        visible={modalFormularioVisible}\n        onClose={() => {\n          setModalFormularioVisible(false);\n          setProveedorEditar(null);\n        }}\n        onGuardar={guardarProveedor}\n        proveedorEditar={proveedorEditar}\n      />\n      \n      <AIBusquedaModal\n        visible={modalAIVisible}\n        onClose={() => {\n          setModalAIVisible(false);\n          setResultadoBusquedaIA(null);\n        }}\n        onBuscar={buscarConIA}\n        onGuardar={guardarProveedorIA}\n        resultado={resultadoBusquedaIA}\n        cargando={cargandoBusquedaIA}\n      />\n    </div>\n  );\n};\n\nexport default GestionProveedores;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Home.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Ideas.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Inspiration.jsx","messages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":68,"column":25,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":98,"endColumn":3}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { fetchInspiration, trackInteraction } from '../services/inspirationService';\nimport { saveData } from '../services/SyncService';\nimport { useUserContext } from '../context/UserContext';\nimport Spinner from '../components/Spinner';\n\nexport default function Inspiration() {\n  const { user } = useUserContext();\n  const userId = user?.id || 'anon';\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const observer = useRef();\n  const lastItemRef = useCallback((node) => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver((entries) => {\n      if (entries[0].isIntersecting) {\n        setPage((prev) => prev + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading]);\n\n  useEffect(() => {\n    async function load() {\n      setLoading(true);\n      const newItems = await fetchInspiration('', page);\n      setItems((prev) => [...prev, ...newItems]);\n      setLoading(false);\n    }\n    load();\n  }, [page]);\n\n  const handleSave = (item) => {\n    saveData('ideasPhotos', (prev) => {\n      const arr = Array.isArray(prev) ? prev : [];\n      if (!arr.some((p) => p.id === item.id)) arr.push(item);\n      return arr;\n    }, { collection: 'userIdeas', showNotification: true });\n    trackInteraction(userId, item, 0, true);\n  };\n\n  const handleView = (item, dwellStart) => {\n    const dwellTime = Date.now() - dwellStart;\n    trackInteraction(userId, item, dwellTime, false);\n  };\n\n  return (\n    <div className=\"p-4 md:p-6\">\n      <h1 className=\"text-2xl font-bold mb-4\">Inspiración</h1>\n      <div className=\"columns-1 sm:columns-2 md:columns-3 gap-4 space-y-4\">\n        {items.map((item, idx) => (\n          <InspirationCard\n            key={item.id}\n            item={item}\n            onSave={handleSave}\n            ref={idx === items.length - 1 ? lastItemRef : null}\n            onView={handleView}\n          />\n        ))}\n      </div>\n      {loading && <div className=\"flex justify-center my-6\"><Spinner /></div>}\n    </div>\n  );\n}\n\nconst InspirationCard = React.forwardRef(({ item, onSave, onView }, ref) => {\n  const [startTime, setStartTime] = useState(Date.now());\n  useEffect(() => {\n    setStartTime(Date.now());\n    return () => {\n      onView(item, startTime);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <div ref={ref} className=\"relative break-inside-avoid\" onDoubleClick={() => onSave(item)}>\n      {item.type === 'image' ? (\n        <img src={item.url} alt=\"insp\" className=\"w-full rounded-lg\" />\n      ) : (\n        <iframe\n          src={`https://www.youtube.com/embed/${item.url.split('v=')[1]}`}\n          title=\"video\"\n          className=\"w-full aspect-video rounded-lg\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n        />\n      )}\n      <button\n        onClick={() => onSave(item)}\n        className=\"absolute bottom-2 right-2 bg-white/70 backdrop-blur px-2 py-1 text-xs rounded\"\n      >\n        Guardar\n      </button>\n    </div>\n  );\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Invitaciones.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Search' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSaveDraft' is assigned a value but never used.","line":53,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDuplicateDesign' is assigned a value but never used.","line":61,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'SyncIndicator' is assigned a value but never used.","line":103,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":22}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Search, Eye, Download, Save, Copy, Zap, Cloud, CloudOff, RefreshCw } from 'lucide-react';\r\nimport Spinner from '../components/Spinner';\r\nimport Toast from '../components/Toast';\r\nimport Card from '../components/Card';\r\nimport { saveData, loadData, subscribeSyncState, getSyncState } from '../services/SyncService';\r\n\r\nexport default function Invitaciones() {\r\n  // Estado de sincronización\r\n  const [syncStatus, setSyncStatus] = useState(getSyncState());\r\n\r\n  // Suscribirse a cambios en el estado de sincronización\r\n  useEffect(() => {\r\n    const unsubscribe = subscribeSyncState(setSyncStatus);\r\n    return () => unsubscribe();\r\n  }, []);\r\n  \r\n  const [aiPrompt, setAiPrompt] = useState(() => loadData('invitationAiPrompt', { defaultValue: '', collection: 'userInvitations' }));\r\n  const [loading, setLoading] = useState(false);\r\n  const [generatedText, setGeneratedText] = useState('');\r\n  const [toast, setToast] = useState(null);\r\n  const [showPreview, setShowPreview] = useState(() => loadData('invitationShowPreview', { defaultValue: false, collection: 'userInvitations' }));\r\n  const handleAiGenerate = async () => {\r\n    if (!aiPrompt) return;\r\n    setLoading(true);\r\n    setToast(null);\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_KEY}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-3.5-turbo',\r\n          messages: [\r\n            { role: 'system', content: 'You are a helpful assistant specialized in generating invitation texts.' },\r\n            { role: 'user', content: aiPrompt }\r\n          ]\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      const text = data.choices?.[0]?.message?.content || '';\r\n      setGeneratedText(text);\r\n      setToast({ message: 'Invitación generada', type: 'success' });\r\n    } catch (err) {\r\n      console.error(err);\r\n      setToast({ message: 'Error generando invitación', type: 'error' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };  \r\n  const handleSaveDraft = () => {\r\n    const draft = { aiPrompt, panel, filterCategory, filterColor, filterFont, step, generatedText };\r\n    saveData('invitationDraft', draft, {\r\n      collection: 'userInvitations',\r\n      showNotification: true\r\n    });\r\n    setToast({ message: 'Borrador guardado', type: 'success' });\r\n  };\r\n  const handleDuplicateDesign = () => {\r\n    const draftKey = `invitationDraft_${Date.now()}`;\r\n    const data = { aiPrompt, panel, filterCategory, filterColor, filterFont, step, generatedText };\r\n    saveData(draftKey, data, {\r\n      collection: 'userInvitations',\r\n      showNotification: false\r\n    });\r\n    setToast({ message: 'Diseño duplicado', type: 'success' });\r\n  };\r\n  const [panel, setPanel] = useState(() => loadData('invitationPanel', { defaultValue: 'invitation', collection: 'userInvitations' })); // 'invitation' o 'envelope'\r\n  const [filterCategory, setFilterCategory] = useState(() => loadData('invitationFilterCategory', { defaultValue: '', collection: 'userInvitations' }));\r\n  const [filterColor, setFilterColor] = useState(() => loadData('invitationFilterColor', { defaultValue: '', collection: 'userInvitations' }));\r\n  const [filterFont, setFilterFont] = useState(() => loadData('invitationFilterFont', { defaultValue: '', collection: 'userInvitations' }));\r\n  const [step, setStep] = useState(() => {\r\n    const savedStep = loadData('invitationStep', { defaultValue: '1', collection: 'userInvitations' });\r\n    return parseInt(savedStep) || 1;\r\n  });\r\n\r\n  // Ejemplo de plantillas\r\n  const templates = [\r\n    { id: 1, name: 'Clásico', category: 'clásico', color: 'pastel', font: 'Serif' },\r\n    { id: 2, name: 'Moderno', category: 'moderno', color: 'vibrante', font: 'Sans' },\r\n    { id: 3, name: 'Rústico', category: 'rústico', color: 'tierra', font: 'Handwriting' },\r\n    { id: 4, name: 'Minimalista', category: 'minimalista', color: 'monocromo', font: 'Sans' },\r\n  ];\r\n  const filtered = templates.filter(t =>\r\n    (filterCategory ? t.category === filterCategory : true) &&\r\n    (filterColor ? t.color === filterColor : true) &&\r\n    (filterFont ? t.font === filterFont : true)\r\n  );\r\n  useEffect(() => {\r\n    saveData('invitationAiPrompt', aiPrompt, { collection: 'userInvitations', showNotification: false });\r\n    saveData('invitationPanel', panel, { collection: 'userInvitations', showNotification: false });\r\n    saveData('invitationFilterCategory', filterCategory, { collection: 'userInvitations', showNotification: false });\r\n    saveData('invitationFilterColor', filterColor, { collection: 'userInvitations', showNotification: false });\r\n    saveData('invitationFilterFont', filterFont, { collection: 'userInvitations', showNotification: false });\r\n    saveData('invitationStep', step.toString(), { collection: 'userInvitations', showNotification: false });\r\n    saveData('invitationGeneratedText', generatedText, { collection: 'userInvitations', showNotification: false });\r\n    saveData('invitationShowPreview', showPreview, { collection: 'userInvitations', showNotification: false });\r\n  }, [aiPrompt, panel, filterCategory, filterColor, filterFont, step, generatedText, showPreview]);\r\n\r\n  // Indicador de sincronización\r\n  const SyncIndicator = () => (\r\n    <div className=\"fixed bottom-4 right-4 z-50 flex items-center space-x-2 bg-white px-3 py-2 rounded-full shadow-md\">\r\n      {syncStatus === 'online' ? (\r\n        <>\r\n          <Cloud size={18} className=\"text-green-500\" />\r\n          <span className=\"text-sm\">Sincronizado</span>\r\n        </>\r\n      ) : syncStatus === 'offline' ? (\r\n        <>\r\n          <CloudOff size={18} className=\"text-yellow-500\" />\r\n          <span className=\"text-sm\">Guardado localmente</span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <RefreshCw size={18} className=\"text-blue-500 animate-spin\" />\r\n          <span className=\"text-sm\">Sincronizando...</span>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Card className=\"p-6 space-y-6\">\r\n\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}  \r\n      <h1 className=\"text-2xl font-semibold\">Diseño de Invitaciones</h1>\r\n      <div className=\"flex justify-between mb-4\">  \r\n        {step > 1 && <button onClick={() => setStep(step - 1)} className=\"bg-gray-200 px-3 py-1 rounded\">Anterior</button>}  \r\n        {step < 4 && <button onClick={() => setStep(step + 1)} className=\"bg-blue-600 text-white px-3 py-1 rounded\">Siguiente</button>}  \r\n        {step === 4 && <button onClick={() => alert('Wizard completado')} className=\"bg-green-600 text-white px-3 py-1 rounded\">Finalizar</button>}  \r\n      </div>\r\n\r\n      {/* Asistente de IA */}\r\n      {step === 1 && (\r\n        <section className=\"border rounded p-4 space-y-4\">\r\n          <h2 className=\"text-lg font-semibold\">Asistente de IA</h2>\r\n          <textarea\r\n            rows={3}\r\n            placeholder=\"Describe cómo quieres tu invitación...\"\r\n            value={aiPrompt}\r\n            onChange={e => setAiPrompt(e.target.value)}\r\n            className=\"w-full border rounded p-2\"\r\n          />\r\n          <button\r\n            onClick={handleAiGenerate}\r\n            disabled={loading}\r\n            className=\"bg-indigo-600 text-white px-4 py-2 rounded flex items-center\"\r\n          >\r\n            {loading ? <Spinner size={16} className=\"mr-2\" /> : <Zap size={16} className=\"mr-2\" />} {loading ? 'Generando...' : 'Generar invitación'}\r\n          </button>\r\n        </section>\r\n      )}\r\n\r\n      {/* Selección de Plantilla */}\r\n      {step === 2 && (\r\n        <section className=\"border rounded p-4 space-y-4\">\r\n          <h2 className=\"text-lg font-semibold\">Selección de Plantilla</h2>\r\n          <div className=\"flex gap-4 flex-wrap\">\r\n            <select value={filterCategory} onChange={e => setFilterCategory(e.target.value)} className=\"border rounded px-2 py-1\">\r\n              <option value=\"\">Todos los estilos</option>\r\n              <option value=\"clásico\">Clásico</option>\r\n              <option value=\"moderno\">Moderno</option>\r\n              <option value=\"rústico\">Rústico</option>\r\n              <option value=\"minimalista\">Minimalista</option>\r\n            </select>\r\n            <select value={filterColor} onChange={e => setFilterColor(e.target.value)} className=\"border rounded px-2 py-1\">\r\n              <option value=\"\">Todas las paletas</option>\r\n              <option value=\"pastel\">Pastel</option>\r\n              <option value=\"vibrante\">Vibrante</option>\r\n              <option value=\"tierra\">Tierra</option>\r\n              <option value=\"monocromo\">Monocromo</option>\r\n            </select>\r\n            <select value={filterFont} onChange={e => setFilterFont(e.target.value)} className=\"border rounded px-2 py-1\">\r\n              <option value=\"\">Todas las tipografías</option>\r\n              <option value=\"Serif\">Serif</option>\r\n              <option value=\"Sans\">Sans</option>\r\n              <option value=\"Handwriting\">Handwriting</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\r\n            {filtered.map(t => (\r\n              <div key={t.id} className=\"border rounded overflow-hidden cursor-pointer hover:shadow-lg\">\r\n                <div className=\"h-32 bg-gray-100 flex items-center justify-center\">\r\n                  <span className=\"text-sm font-medium\">{t.name}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </section>\r\n      )}\r\n\r\n      {/* Editor Invitación/Sobre */}\r\n      {step === 3 && (\r\n        <section className=\"border rounded p-4 space-y-4\">\r\n          <div className=\"flex gap-4\">\r\n            <button onClick={() => setPanel('invitation')} className={`px-4 py-2 rounded ${panel==='invitation'?'bg-blue-600 text-white':'bg-gray-200'}`}>Invitación</button>\r\n            <button onClick={() => setPanel('envelope')} className={`px-4 py-2 rounded ${panel==='envelope'?'bg-blue-600 text-white':'bg-gray-200'}`}>Sobre</button>\r\n          </div>\r\n          <div className=\"border bg-white h-[400px] flex items-center justify-center text-gray-400\">\r\n            {panel === 'invitation'\r\n              ? 'Canvas de invitación: arrastra componentes aquí'\r\n              : 'Canvas de sobre: frontal / trasero'}\r\n          </div>\r\n        </section>\r\n      )}\r\n\r\n      {/* Preview y Exportación */}\r\n      {step === 4 && (\r\n        <section className=\"flex flex-wrap gap-2\">\r\n          <button\r\n            onClick={() => setShowPreview(prev => !prev)}\r\n            className=\"bg-blue-600 text-white px-4 py-2 rounded flex items-center\"\r\n          >\r\n            <Eye size={16} className=\"mr-2\" />{showPreview ? 'Ocultar preview' : 'Previsualizar'}\r\n          </button>\r\n          <button className=\"bg-green-600 text-white px-4 py-2 rounded flex items-center\">\r\n            <Download size={16} className=\"mr-2\" />Exportar PDF\r\n          </button>\r\n          <button className=\"bg-gray-200 text-gray-800 px-4 py-2 rounded flex items-center\">\r\n            <Download size={16} className=\"mr-2\" />Exportar PNG\r\n          </button>\r\n          <button className=\"bg-purple-600 text-white px-4 py-2 rounded\">\r\n            Compartir\r\n          </button>\r\n        </section>\r\n      )}\r\n      {showPreview && generatedText && (\r\n        <section className=\"border rounded p-4 bg-gray-50 mt-4\">\r\n          <h3 className=\"text-lg font-semibold\">Preview de Invitación</h3>\r\n          <p className=\"whitespace-pre-wrap\">{generatedText}</p>\r\n        </section>\r\n      )}\r\n      {/* Opciones Avanzadas */}\r\n      {step === 4 && (\r\n        <section className=\"border rounded p-4\">\r\n          <h2 className=\"text-lg font-semibold\">Opciones Avanzadas</h2>\r\n          <div className=\"flex gap-2 mt-2\">\r\n            <button className=\"bg-gray-200 px-3 py-1 rounded flex items-center\">\r\n              <Save size={16} className=\"mr-2\" />Guardar Borrador\r\n            </button>\r\n            <button className=\"bg-gray-200 px-3 py-1 rounded flex items-center\">\r\n              <Copy size={16} className=\"mr-2\" />Duplicar Diseño\r\n            </button>\r\n          </div>\r\n        </section>\r\n      )}\r\n\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Invitados.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Edit2' is defined but never used.","line":2,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'Trash2' is defined but never used.","line":2,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'Cloud' is defined but never used.","line":2,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":75},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudOff' is defined but never used.","line":2,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":85},{"ruleId":"no-unused-vars","severity":2,"message":"'RefreshCw' is defined but never used.","line":2,"column":87,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":96},{"ruleId":"no-unused-vars","severity":2,"message":"'loadData' is defined but never used.","line":7,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'inviteWhatsApp' is assigned a value but never used.","line":48,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'inviteEmail' is assigned a value but never used.","line":54,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'syncStatus' is assigned a value but never used.","line":64,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDelete' is assigned a value but never used.","line":170,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":170,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'setGuests' is not defined.","line":292,"column":148,"nodeType":"Identifier","messageId":"undef","endLine":292,"endColumn":157},{"ruleId":"no-unused-vars","severity":2,"message":"'InvitadosOld' is defined but never used.","line":309,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":309,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDelete' is assigned a value but never used.","line":354,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":354,"endColumn":21}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Search, Mail, Edit2, Trash2, RefreshCcw, Plus, User, Phone, Cloud, CloudOff, RefreshCw } from 'lucide-react';\nimport { Card } from '../components/ui';\nimport { Button } from '../components/ui';\nimport { Input } from '../components/ui';\nimport { useFirestoreCollection } from '../hooks/useFirestoreCollection';\nimport { saveData, loadData, subscribeSyncState, getSyncState } from '../services/SyncService';\n\n// ---------------- NUEVO COMPONENTE INVITADOS ----------------\nfunction Invitados() {\n  const locationHash = typeof window !== 'undefined' ? window.location.hash : '';\n\n  const sampleGuests = [\n    { id: 1, name: 'Ana García', phone: '123456789', address: 'Calle Sol 1', companion: 1, table: '5', response: 'Sí' },\n    { id: 2, name: 'Luis Martínez', phone: '987654321', address: 'Av. Luna 3', companion: 0, table: '', response: 'Pendiente' },\n  ];\n  const { data: guests, addItem, updateItem, deleteItem } = useFirestoreCollection('guests', sampleGuests);\n\n  // --- Utilidades duplicados ---\n  const getStatusLabel = (guest) => {\n    if (guest.status) {\n      if (guest.status === 'accepted') return 'Sí';\n      if (guest.status === 'rejected') return 'No';\n      return 'Pendiente';\n    }\n    return guest.response || 'Pendiente';\n  };\n  const normalize = (str = '') => str.trim().toLowerCase();\n  const phoneClean = (str = '') => str.replace(/\\s+/g, '').replace(/[^0-9+]/g, '');\n\n  // --- Enviar invitaciones vía WhatsApp con enlace RSVP ---\n  const bulkInvite = async () => {\n    if (!window.confirm('Se abrirá WhatsApp en una pestaña por invitado con número. ¿Continuar?')) return;\n    for (const guest of guests) {\n      const phone = phoneClean(guest.phone);\n      if (!phone) continue; // saltar invitados sin teléfono\n      try {\n        const resp = await fetch(`/api/guests/id/${guest.id}/rsvp-link`, { method: 'POST' });\n        const { link } = await resp.json();\n        const txt = encodeURIComponent(`¡Hola ${guest.name}! Estamos encantados de invitarte a nuestra boda. Por favor confirma tu asistencia y alérgenos aquí: ${link}`);\n        window.open(`https://wa.me/${phone}?text=${txt}`, '_blank');\n      } catch (err) {\n        console.error('Error generando enlace RSVP', err);\n      }\n    }\n  };\n\n  const inviteWhatsApp = (guest) => {\n    const phone = phoneClean(guest.phone);\n    if(!phone){ alert('Invitado sin teléfono'); return; }\n    const txt = encodeURIComponent(`¡Hola ${guest.name}! Nos encantaría contar contigo en nuestra boda. ¿Puedes confirmar tu asistencia?`);\n    window.open(`https://wa.me/${phone}?text=${txt}`, '_blank');\n  };\n  const inviteEmail = (guest) => {\n    const email = guest.email || '';\n    if(!email){ alert('Invitado sin email'); return; }\n    const subject = encodeURIComponent('Invitación a nuestra boda');\n    const body = encodeURIComponent(`Hola ${guest.name},\\n\\nNos complace invitarte a nuestra boda. Esperamos contar contigo. Por favor confirma tu asistencia.\\n\\n¡Gracias!`);\n    window.open(`mailto:${email}?subject=${subject}&body=${body}`, '_blank');\n  };\n\n  // ---- Sincronización híbrida ----\n  // Estado de sincronización\n  const [syncStatus, setSyncStatus] = useState(getSyncState());\n  \n  // Cada vez que cambie la colección de invitados, actualizamos localStorage + Firestore\n  // y emitimos un evento para que SeatingPlan u otros escuchadores reaccionen.\n  useEffect(() => {\n    try {\n      // Usar SyncService para persistencia híbrida\n      saveData('lovendaGuests', guests, {\n        collection: 'userGuests',\n        showNotification: false // No mostrar notificación cada vez\n      });\n      \n      // Mantener compatibilidad con componentes que usan localStorage directamente\n      window.dispatchEvent(new Event('lovenda-guests'));\n    } catch (error) {\n      console.error('Error al sincronizar invitados:', error);\n    }\n  }, [guests]);\n  \n  // Suscribirse a cambios en el estado de sincronización\n  useEffect(() => {\n    const unsubscribe = subscribeSyncState(setSyncStatus);\n    return () => unsubscribe();\n  }, []);\n\n  \n\n  const [search, setSearch] = React.useState('');\n  const [filterResponse, setFilterResponse] = React.useState('');\n  const [filterTable, setFilterTable] = React.useState('');\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [editingGuest, setEditingGuest] = React.useState(null);\n  const [tablesOpen, setTablesOpen] = React.useState(false);\n  const groupedTables = React.useMemo(() => {\n    const map = {};\n    guests.filter(g => g.table).forEach(g => {\n      const key = g.table;\n      map[key] = map[key] || [];\n      map[key].push(g);\n    });\n    return map;\n  }, [guests]);\n\n  const emptyGuest = { name: '', phone: '', email: '', address: '', companion: 0, table: '', response: 'Pendiente' };\n\n  // Abrir modal automáticamente si la URL incluye #nuevo\n  React.useEffect(() => {\n    if (locationHash === '#nuevo') {\n      setEditingGuest({ ...emptyGuest });\n      setModalOpen(true);\n      // limpia el hash para evitar reabrir al navegar\n      window.history.replaceState(null, '', window.location.pathname);\n    }\n  }, []);\n\n  // Importar invitados usando la Contact Picker API\n  const importFromContacts = async () => {\n    if (navigator.contacts && navigator.contacts.select) {\n      try {\n        const picked = await navigator.contacts.select(['name', 'tel'], { multiple: true });\n        if (picked && picked.length) {\n          const mapped = picked.map(c => ({\n              name: Array.isArray(c.name) ? c.name[0] : c.name || 'Invitado',\n              phone: Array.isArray(c.tel) ? c.tel[0] : c.tel || '',\n              address: '',\n              companion: 0,\n              table: '',\n              response: 'Pendiente'\n            })).filter(m => !guests.some(g =>\n              normalize(g.name) === normalize(m.name) ||\n              (g.phone && m.phone && phoneClean(g.phone) === phoneClean(m.phone))\n            ));\n            for (const m of mapped) {\n              await addItem(m);\n            }\n        }\n      } catch (err) {\n        console.error('Error importando contactos', err);\n      }\n    } else {\n      alert('La API de Contactos no está disponible en este dispositivo.');\n    }\n  };\n\n  const handleSave = async () => {\n    if (!editingGuest.name.trim()) return;\n    const exists = editingGuest.id && guests.some(g => g.id === editingGuest.id);\n    if (exists) {\n      // Actualiza invitado existente\n      await updateItem(editingGuest.id, editingGuest);\n    } else {\n      // Nuevo invitado: comprobamos duplicados\n      const duplicate = guests.some(g =>\n        normalize(g.name) === normalize(editingGuest.name) ||\n        (g.phone && editingGuest.phone && phoneClean(g.phone) === phoneClean(editingGuest.phone))\n      );\n      if (duplicate) {\n        alert('Ese invitado ya existe');\n        return;\n      }\n      await addItem(editingGuest);\n    }\n    setModalOpen(false);\n    setEditingGuest(null);\n  };\n\n  const handleDelete = async (id) => {\n    if (window.confirm('¿Eliminar invitado?')) {\n      await deleteItem(id);\n    }\n  };\n\n  const filtered = guests.filter(g => {\n    return (\n      g.name.toLowerCase().includes(search.toLowerCase()) &&\n      (filterResponse ? getStatusLabel(g) === filterResponse : true) &&\n      (filterTable ? String(g.table) === filterTable : true)\n    );\n  });\n\n  const getTooltipForTable = tableId => {\n    if (!tableId) return '';\n    const names = guests.filter(g => g.table === tableId).map(g => g.name);\n    return `Mesa de ${names.slice(0, 3).join(', ')}${names.length > 3 ? '…' : ''}`;\n  };\n\n  return (\n    <div className=\"p-4 md:p-6 space-y-8\">\n      <div className=\"flex items-center justify-between flex-wrap gap-2\">\n        <h1 className=\"text-2xl font-bold text-gray-800 mr-auto\">Gestión de Invitados</h1>\n        <div className=\"flex gap-2\">\n          <Button leftIcon={<Mail size={16}/>} onClick={bulkInvite}>Enviar invitaciones</Button>\n          <Button leftIcon={<Plus size={16}/>} onClick={() => { setEditingGuest({ ...emptyGuest }); setModalOpen(true); }}>Añadir Invitado</Button>\n          <Button variant=\"outline\" onClick={() => setTablesOpen(true)}>Ver mesas</Button>\n        </div>\n      </div>\n\n      {/* Filtros */}\n      <Card className=\"space-y-6 p-6\">\n        <div className=\"flex flex-wrap gap-2 items-center\">\n        <div className=\"flex items-center border rounded px-2 py-1\">\n          <Search size={16} className=\"mr-2 text-gray-600\" />\n          <input type=\"text\" placeholder=\"Buscar por nombre\" value={search} onChange={e => setSearch(e.target.value)} className=\"outline-none\" />\n        </div>\n        <select value={filterResponse} onChange={e => setFilterResponse(e.target.value)} className=\"border rounded px-2 py-1 pr-8 appearance-none\">\n          <option value=\"\">Todas las respuestas</option>\n          <option value=\"Sí\">Sí</option>\n          <option value=\"No\">No</option>\n          <option value=\"Pendiente\">Pendiente</option>\n        </select>\n        <input type=\"text\" placeholder=\"Mesa\" value={filterTable} onChange={e => setFilterTable(e.target.value)} className=\"border rounded px-2 py-1 w-24\" />\n      </div>\n\n      {/* Tabla */}\n      <div className=\"overflow-auto\">\n        <table className=\"w-full table-auto text-sm\">\n          <thead>\n            <tr className=\"bg-gray-50 text-left\">\n              <th className=\"p-2\">Nombre</th>\n              <th className=\"p-2\">Teléfono</th>\n              <th className=\"p-2\">Respuesta</th>\n              <th className=\"p-2\">Acompañante(s)</th>\n              <th className=\"p-2\">Mesa</th>\n            </tr>\n            </thead>\n            <tbody>\n              {filtered.map(g => (\n                <tr key={g.id} className=\"border-b hover:bg-gray-50 cursor-pointer\" onClick={() => { setEditingGuest({ ...g }); setModalOpen(true); }}>\n                  <td className=\"p-2 flex items-center\"><User size={16} className=\"mr-2 text-gray-600\" />{g.name}</td>\n                  <td className=\"p-2\">{g.phone}</td>\n                  <td className=\"p-2\">{getStatusLabel(g)}</td>\n                  <td className=\"p-2\">{g.companion}</td>\n                  <td className=\"p-2\" title={getTooltipForTable(g.table)}>{g.table || '-'}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      {/* Modal Ver Mesas */}\n      {tablesOpen && (\n        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\" onClick={()=>setTablesOpen(false)}>\n          <div className=\"bg-white p-6 rounded shadow max-w-4xl w-full max-h-[85vh] overflow-auto\" onClick={e=>e.stopPropagation()}>\r\n            <h2 className=\"text-lg font-semibold mb-4\">Mesas e invitados</h2>\r\n            {Object.keys(groupedTables).length===0 ? (\r\n              <p>No hay mesas asignadas</p>\r\n            ) : (\r\n              <div className=\"grid gap-4 md:grid-cols-2\">\r\n                {Object.entries(groupedTables).map(([table, list]) => (\r\n                  <div key={table} className=\"border rounded p-3\">\r\n                    <h3 className=\"font-medium mb-2\">Mesa {table}</h3>\r\n                    <ul className=\"list-disc list-inside space-y-1\">\r\n                      {list.map(g => (\r\n                        <li key={g.id}>{g.name}{g.companion ? ` (+${g.companion})` : ''}</li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            <div className=\"text-right mt-4\">\r\n              <Button onClick={()=>setTablesOpen(false)}>Cerrar</Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Modal Añadir/Editar */}\r\n      {modalOpen && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\">\r\n          <div className=\"bg-white p-6 rounded shadow w-96 space-y-4\">\r\n            <h2 className=\"text-lg font-semibold\">{editingGuest?.id ? 'Editar Invitado' : 'Añadir Invitado'}</h2>\r\n            <div className=\"space-y-3\">\r\n              {/* Import from contacts (only when adding new guest) */}\r\n              {!editingGuest?.id && (\r\n                <Button variant=\"outline\" leftIcon={<Phone size={16}/>} onClick={importFromContacts}>\r\n                  Importar desde contactos\r\n                </Button>\r\n              )}\r\n              <Input label=\"Nombre\" value={editingGuest.name} onChange={e => setEditingGuest({ ...editingGuest, name: e.target.value })} />\r\n              <Input label=\"Teléfono\" value={editingGuest.phone} onChange={e => setEditingGuest({ ...editingGuest, phone: e.target.value })} />\r\n               <Input label=\"Email\" value={editingGuest.email} onChange={e => setEditingGuest({ ...editingGuest, email: e.target.value })} />\r\n              <Input label=\"Dirección postal\" value={editingGuest.address} onChange={e => setEditingGuest({ ...editingGuest, address: e.target.value })} />\r\n              <Input label=\"Acompañantes\" type=\"number\" min=\"0\" value={editingGuest.companion} onChange={e => setEditingGuest({ ...editingGuest, companion: parseInt(e.target.value,10)||0 })} />\r\n              <Input label=\"Mesa (número o apodo)\" value={editingGuest.table} onChange={e => setEditingGuest({ ...editingGuest, table: e.target.value })} />\r\n            </div>\r\n            <div className=\"flex justify-between gap-2 pt-2\">\r\n              {editingGuest?.id && <Button variant=\"outline\" className=\"text-red-600\" onClick={() => { if(window.confirm('¿Eliminar invitado?')) { setGuests(prev=>prev.filter(g=>g.id!==editingGuest.id)); setModalOpen(false); } }}>Eliminar</Button>}\r\n              <Button variant=\"outline\" onClick={() => { setModalOpen(false); setEditingGuest(null); }}>Cancelar</Button>\r\n              <Button onClick={handleSave}>Guardar</Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// -----------------------------------------------------------\r\n\r\nexport default Invitados;\r\n\r\n// -----------------------------------------------------------\r\n\r\nfunction InvitadosOld() {\r\n  const sampleGuests = [\r\n    { id: 1, name: 'Ana García', email: 'ana@example.com', phone: '123456789', rsvp: 'Sí', guests: 1, table: 5 },\r\n    { id: 2, name: 'Luis Martínez', email: 'luis@example.com', phone: '987654321', rsvp: 'Pendiente', guests: 2, table: '' },\r\n  ];\r\n  const [guests, setGuests] = useState(sampleGuests);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [rsvpFilter, setRsvpFilter] = useState('');\r\n  const [tableFilter, setTableFilter] = useState('');\r\n  const statuses = ['Pendiente', 'Sí', 'No'];\r\n  const [selected, setSelected] = useState([]);\r\n  const toggleSelectAll = () => {\r\n    if (selected.length === filtered.length) {\r\n      setSelected([]);\r\n    } else {\r\n      setSelected(filtered.map(g => g.id));\r\n    }\r\n  };\r\n\r\n  // Importar invitados desde la API de Contactos del navegador móvil\r\n  const importFromContacts = async () => {\r\n    if (navigator.contacts && navigator.contacts.select) {\r\n      try {\r\n        const picked = await navigator.contacts.select(['name', 'tel', 'email'], { multiple: true });\r\n        if (picked && picked.length) {\r\n          setGuests(prev => {\r\n            let nextId = prev.length ? Math.max(...prev.map(g => g.id)) + 1 : 1;\r\n            const mapped = picked.map(c => ({\r\n              id: nextId++,\r\n              name: Array.isArray(c.name) ? c.name[0] : c.name || 'Invitado',\r\n              email: Array.isArray(c.email) ? c.email[0] : c.email || '',\r\n              phone: Array.isArray(c.tel) ? c.tel[0] : c.tel || '',\r\n              rsvp: 'Pendiente',\r\n              guests: 1,\r\n              table: ''\r\n            }));\r\n            return [...prev, ...mapped];\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error importing contacts:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDelete = id => {\r\n    setGuests(guests.filter(guest => guest.id !== id));\r\n    setSelected(selected.filter(selectedId => selectedId !== id));\r\n    if (window.confirm('¿Eliminar invitado?')) {\r\n      setGuests(prev => prev.filter(g => g.id !== id));\r\n      setSelected(prev => prev.filter(x => x !== id));\r\n    }\r\n  };\r\nconst getNextStatus = curr => {\r\n  const idx = statuses.indexOf(curr);\r\n  return statuses[(idx + 1) % statuses.length];\r\n};\r\nconst sendBulkEmails = () => {\r\n  const recipients = selected\r\n    .map(id => guests.find(g => g.id === id)?.email)\r\n    .filter(Boolean)\r\n    .join(',');\r\n  if (recipients) {\r\n    window.open('mailto:' + recipients + '?subject=Recordatorio boda&body=¡Hola! Te esperamos en nuestra boda.');\r\n  }\r\n};\r\n  const [showModal, setShowModal] = useState(false);\r\nconst initialGuest = { name: '', email: '', phone: '', rsvp: 'Pendiente', guests: 1, table: '' };\r\nconst [newGuest, setNewGuest] = useState(initialGuest);\r\nconst handleSaveGuest = () => {\r\n  const newId = guests.length ? Math.max(...guests.map(g => g.id)) + 1 : 1;\r\n  setGuests(prev => [...prev, { ...newGuest, id: newId }]);\r\n  setNewGuest(initialGuest);\r\n  setShowModal(false);\r\n};\r\n\r\n  const filtered = guests.filter(g => {\r\n    return (\r\n      (g.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        g.email.toLowerCase().includes(searchTerm.toLowerCase())) &&\r\n      (rsvpFilter ? g.rsvp === rsvpFilter : true) &&\r\n      (tableFilter ? String(g.table) === tableFilter : true)\r\n    );\r\n  });\r\n\r\n  const toggleSelect = id => {\r\n    setSelected(prev =>\r\n      prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 md:p-6 space-y-8\">\r\n      <div className=\"flex items-center justify-between flex-wrap gap-2\">\r\n        <h1 className=\"text-2xl font-bold text-gray-800 mr-auto\">Gestión de Invitados</h1>\r\n        <div className=\"flex gap-2\">\r\n          <button onClick={importFromContacts} className=\"bg-green-600 text-white px-4 py-2 rounded flex items-center\">\r\n            <Phone size={16} className=\"mr-2\" />Importar contactos\r\n          </button>\r\n          <button onClick={() => setShowModal(true)} className=\"bg-blue-600 text-white px-4 py-2 rounded flex items-center\">\r\n            <Plus size={16} className=\"mr-2\" />Añadir Invitado\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filtros */}\r\n      <div className=\"flex flex-wrap gap-2\">\r\n        <div className=\"flex items-center border rounded px-2 py-1\">\r\n          <Search size={16} className=\"mr-2 text-gray-600\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Buscar por nombre o email\"\r\n            value={searchTerm}\r\n            onChange={e => setSearchTerm(e.target.value)}\r\n            className=\"outline-none\"\r\n          />\r\n        </div>\r\n        <select value={rsvpFilter} onChange={e => setRsvpFilter(e.target.value)} className=\"border rounded px-2 py-1\">\r\n          <option value=\"\">RSVP Todos</option>\r\n          <option value=\"Sí\">Sí</option>\r\n          <option value=\"No\">No</option>\r\n          <option value=\"Pendiente\">Pendiente</option>\r\n        </select>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Mesa\"\r\n          value={tableFilter}\r\n          onChange={e => setTableFilter(e.target.value)}\r\n          className=\"border rounded px-2 py-1\"\r\n        />\r\n        <button className=\"bg-gray-200 px-3 py-1 rounded flex items-center\">\r\n          <RefreshCcw size={16} className=\"mr-1\" />Limpiar\r\n        </button>\r\n      </div>\r\n\r\n      {/* Bulk Actions */}\r\n      {selected.length > 0 && (\r\n        <div className=\"bg-gray-100 p-2 rounded flex gap-2\">\r\n          <button onClick={sendBulkEmails} className=\"bg-green-600 text-white px-3 py-1 rounded\">Enviar recordatorio ({selected.length})</button>\r\n          <select className=\"border rounded px-2 py-1\">\r\n            <option>Asignar mesa</option>\r\n            {[...new Set(filtered.map(g => g.table))].map(table => (\r\n              <option key={table} value={table}>\r\n                Mesa {table}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      )}\r\n\r\n      {/* Tabla Escritorio */}\r\n      <div className=\"hidden md:block overflow-auto\">\r\n        <table className=\"w-full table-auto\">\r\n          <thead>\r\n            <tr className=\"bg-gray-50\">\r\n              <th className=\"p-2\"><input type=\"checkbox\" aria-label=\"Seleccionar todos\" onChange={toggleSelectAll} checked={filtered.length > 0 && selected.length === filtered.length} /></th>\r\n              <th className=\"p-2\">Nombre completo</th>\r\n              <th className=\"p-2\">Email</th>\r\n              <th className=\"p-2\">Teléfono</th>\r\n              <th className=\"p-2\">Estado RSVP</th>\r\n              <th className=\"p-2\">Nº acompañantes</th>\r\n              <th className=\"p-2\">Mesa</th>\r\n               <th className=\"p-2\">Invitar</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filtered.map(g => (\r\n              <tr key={g.id} className=\"border-b\">\r\n                <td className=\"p-2\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={selected.includes(g.id)}\r\n                    onChange={() => toggleSelect(g.id)}\r\n                  />\r\n                </td>\r\n                <td className=\"p-2 flex items-center\">\r\n                  <User size={20} className=\"mr-2 text-gray-600\" />\r\n                  {g.name}\r\n                </td>\r\n                <td className=\"p-2\">{g.email}</td>\r\n                <td className=\"p-2\">{g.phone}</td>\r\n                <td className=\"p-2 cursor-pointer\" onClick={() => setGuests(prev => prev.map(x => x.id === g.id ? { ...x, rsvp: getNextStatus(x.rsvp) } : x))}>{g.rsvp}</td>\r\n                <td className=\"p-2 cursor-pointer\">{g.guests}</td>\r\n                <td className=\"p-2\">{g.table || '-'}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      {/* Vista móvil */}\r\n      <div className=\"block md:hidden space-y-4\">\r\n        {filtered.map(g => (\r\n          <div key={g.id} className=\"bg-white p-4 rounded shadow\">\r\n            <div className=\"flex justify-between items-center mb-2\">\r\n              <div className=\"flex items-center\">\r\n                <User size={20} className=\"mr-2 text-gray-600\" />\r\n                <div>\r\n                  <p className=\"font-semibold\">{g.name}</p>\r\n                  <p className=\"text-sm text-gray-600\">{g.email}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {/* Modal */}\r\n      {showModal && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\r\n          <div className=\"bg-white p-4 rounded shadow w-96\">\r\n            <h2 className=\"text-lg font-semibold mb-4\">Añadir Invitado</h2>\r\n            {/* Formulario Añadir Invitado */}\r\n            <form onSubmit={e => { e.preventDefault(); handleSaveGuest(); }} className=\"space-y-3\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Nombre completo\"\r\n                value={newGuest.name}\r\n                onChange={e => setNewGuest({ ...newGuest, name: e.target.value })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                value={newGuest.email}\r\n                onChange={e => setNewGuest({ ...newGuest, email: e.target.value })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n                required\r\n              />\r\n              <input\r\n                type=\"tel\"\r\n                placeholder=\"Teléfono\"\r\n                value={newGuest.phone}\r\n                onChange={e => setNewGuest({ ...newGuest, phone: e.target.value })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n              />\r\n              <select\r\n                value={newGuest.rsvp}\r\n                onChange={e => setNewGuest({ ...newGuest, rsvp: e.target.value })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n              >\r\n                <option value=\"Pendiente\">Pendiente</option>\r\n                <option value=\"Sí\">Sí</option>\r\n                <option value=\"No\">No</option>\r\n              </select>\r\n              <input\r\n                type=\"number\"\r\n                min=\"1\"\r\n                placeholder=\"Acompañantes\"\r\n                value={newGuest.guests}\r\n                onChange={e => setNewGuest({ ...newGuest, guests: parseInt(e.target.value, 10) || 0 })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Mesa\"\r\n                value={newGuest.table}\r\n                onChange={e => setNewGuest({ ...newGuest, table: e.target.value })}\r\n                className=\"w-full border rounded px-2 py-1\"\r\n              />\r\n              <div className=\"flex justify-end space-x-2 mt-2\">\r\n                <button type=\"button\" onClick={() => setShowModal(false)} className=\"px-4 py-2 bg-gray-300 rounded\">Cancelar</button>\r\n                <button type=\"submit\" className=\"px-4 py-2 bg-blue-600 text-white rounded\">Guardar</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\InvitationDesigner.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Login.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\MailboxPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'FUNCTION_ENDPOINT' is assigned a value but never used.","line":30,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useCallback } from \"react\";\nimport UsernameWizard from \"../components/UsernameWizard\";\nimport useEmailUsername from \"../hooks/useEmailUsername\";\nimport Button from \"../components/ui/Button\";\nimport { auth } from \"../lib/firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport Spinner from \"../components/ui/Spinner\";\nimport Alert from \"../components/ui/Alert\";\nimport { getMails, initEmailService, markAsRead, deleteMail } from \"../services/emailService\";\nimport EmailInsights from \"../components/EmailInsights\";\n\n/**\n * Página principal de Buzón (correo interno @mywed360.com)\n * Incluye: Sidebar de carpetas, lista de correos, visor del correo y modal para redactar.\n * Email backend:\n *  - GET  /getMailgunEvents  -> lista de eventos (función Cloud)\n *  - POST /sendEmail        -> envía correo (función Cloud)\n */\nconst MailboxPage = () => {\n  const { getCurrentUsername } = useEmailUsername();\n  const [myEmail, setMyEmail] = useState(null);\n  const [emails, setEmails] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showCompose, setShowCompose] = useState(false);\n  const [folder, setFolder] = useState(\"inbox\"); // inbox | sent\n\n  // Endpoint de función; podría venir de env\n  const FUNCTION_ENDPOINT =\n    \"https://us-central1-lovenda-98c77.cloudfunctions.net/getMailgunEvents\";\n\n  const fetchEmails = useCallback(async () => {\n    if (!myEmail) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const mails = await getMails(folder === \"sent\" ? \"sent\" : \"inbox\");\n      if (Array.isArray(mails)) {\n        setEmails(mails);\n      } else {\n        console.warn(\"Respuesta inesperada de getMails\", mails);\n        setEmails([]);\n      }\n    } catch (err) {\n      console.error(\"Error cargando correos:\", err);\n      setError(\"No se pudieron cargar los correos\");\n    } finally {\n      setLoading(false);\n    }\n  }, [myEmail, folder]);\n\n  // Obtener email del usuario en cuanto Firebase esté listo\n  useEffect(() => {\n    const unsub = onAuthStateChanged(auth, async (user) => {\n      if (!user) return;\n      const username = await getCurrentUsername();\n      if (username) {\n        const email = `${username}@mywed360.com`;\n        setMyEmail(email);\n        await initEmailService({ uid: user.uid, emailUsername: username, myWed360Email: email });\n      }\n    });\n    return () => unsub();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Carga inicial + polling (se reinicia al cambiar carpeta)\n  useEffect(() => {\n    if (!myEmail) return;\n    fetchEmails();\n    const id = setInterval(fetchEmails, 60000);\n    return () => clearInterval(id);\n  }, [fetchEmails, myEmail, folder]);\n\n  const handleMarkRead = async (mail) => {\n    try {\n      await markAsRead(mail.id);\n      // Actualizar lista localmente\n      setEmails(prev => prev.map(m => m.id === mail.id ? { ...m, read: true } : m));\n      setSelected(prev => prev ? { ...prev, read: true } : prev);\n    } catch (err) {\n      console.error('Error marcando leído:', err);\n      alert('No se pudo marcar como leído');\n    }\n  };\n\n  const handleDelete = async (mail) => {\n    try {\n      await deleteMail(mail.id);\n      // Quitar de lista local\n      setEmails(prev => prev.filter(m => m.id !== mail.id));\n      setSelected(null);\n    } catch (err) {\n      console.error('Error eliminando correo:', err);\n      alert('No se pudo eliminar el correo');\n    }\n  };\n\n  return (\n    <div className=\"flex h-full w-full flex-col\">\n      {/* Wizard para elegir nombre si es la primera vez */}\n      <UsernameWizard />\n\n      {/* Barra superior */}\n      <header className=\"flex items-center justify-between border-b p-4\">\n        <h1 className=\"text-lg font-semibold\">Buzón</h1>\n        <Button variant=\"primary\" onClick={() => setShowCompose(true)}>\n          Redactar\n        </Button>\n      </header>\n\n      {/* Cuerpo */}\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Sidebar carpetas */}\n        <aside className=\"w-60 border-r p-4\">\n          <p className=\"mb-2 font-medium\">Carpetas</p>\n          <ul className=\"space-y-1 text-sm\">\n            <li\n              className={`cursor-pointer ${folder === \"inbox\" ? \"font-semibold text-indigo-600\" : \"text-gray-700\"}`}\n              onClick={() => {\n                setFolder(\"inbox\");\n                setSelected(null);\n              }}\n            >\n              Bandeja de entrada\n            </li>\n            <li\n              className={`cursor-pointer ${folder === \"sent\" ? \"font-semibold text-indigo-600\" : \"text-gray-700\"}`}\n              onClick={() => {\n                setFolder(\"sent\");\n                setSelected(null);\n              }}\n            >\n              Enviados\n            </li>\n            {/* Futuras carpetas → Spam, Papelera */}\n          </ul>\n        </aside>\n\n        {/* Lista de correos */}\n        <section className=\"w-96 border-r overflow-y-auto\">\n          {loading && (\n            <div className=\"flex justify-center p-4\">\n              <Spinner />\n            </div>\n          )}\n          {error && (\n            <Alert variant=\"error\" className=\"m-4 text-sm\">\n              {error}\n            </Alert>\n          )}\n          {!loading && !error && (\n            <MailList emails={emails} onSelect={setSelected} selected={selected} />\n          )}\n        </section>\n\n        {/* Visor de correo */}\n        <section className=\"flex-1 overflow-y-auto p-4\">\n          {selected ? (\n            <MailViewer mail={selected} onMarkRead={handleMarkRead} onDelete={handleDelete} />\n          ) : (\n            <p>Selecciona un correo…</p>\n          )}\n        </section>\n      </div>\n\n      {showCompose && (\n        <ComposeModal onClose={() => setShowCompose(false)} from={myEmail} />\n      )}\n    </div>\n  );\n};\n\n/**\n * Lista lateral de correos sencillos.\n */\nconst MailList = ({ emails, onSelect, selected }) => {\n  if (!emails.length) return <p className=\"p-4 text-sm\">No hay correos.</p>;\n\n  return (\n    <ul>\n      {emails.map((mail) => (\n        <li\n          key={mail.id || mail.event || Math.random()}\n          onClick={() => onSelect(mail)}\n          className={\n            \"cursor-pointer border-b px-4 py-3 hover:bg-gray-50 \" +\n            (selected === mail ? \"bg-indigo-50\" : \"\")\n          }\n        >\n          <p className=\"text-sm font-medium\">{mail.recipient || mail.to}</p>\n          <p className=\"truncate text-xs text-gray-600\">\n            {mail.subject || mail.event || \"(Sin asunto)\"}\n          </p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n/**\n * Visor del correo seleccionado\n */\nconst MailViewer = ({ mail, onMarkRead, onDelete }) => {\n  if (!mail) return null;\n\n  const handleMark = () => {\n    if (onMarkRead) onMarkRead(mail);\n  };\n\n  const handleDelete = () => {\n    if (onDelete && window.confirm(\"¿Borrar este correo?\")) {\n      onDelete(mail);\n    }\n  };\n\n  return (\n    <div className=\"prose max-w-none\">\n      {/* Encabezado con acciones */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"m-0\">{mail.subject || \"(Sin asunto)\"}</h2>\n        <div className=\"flex gap-2\">\n          {!mail.read && (\n            <Button size=\"sm\" onClick={handleMark}>\n              Marcar leído\n            </Button>\n          )}\n          <Button size=\"sm\" variant=\"danger\" onClick={handleDelete}>\n            Borrar\n          </Button>\n        </div>\n      </div>\n\n      <p className=\"text-sm text-gray-500 mb-4\">\n        De: {mail.sender || mail.from} — Para: {mail.recipient || mail.to}\n      </p>\n\n      <div\n        dangerouslySetInnerHTML={{ __html: mail.body || \"Sin contenido.\" }}\n      />\n\n      <EmailInsights mailId={mail.id} />\n    </div>\n  );\n};\n\n/**\n * Modal para redactar y enviar correos\n */\nconst ComposeModal = ({ onClose, from }) => {\n  const [to, setTo] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [sending, setSending] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleSend = async () => {\n    setSending(true);\n    setError(null);\n    try {\n      const resp = await fetch(\n        \"https://us-central1-lovenda-98c77.cloudfunctions.net/sendEmail\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ from, to, subject, body }),\n        }\n      );\n      if (!resp.ok) throw new Error(`HTTP ${resp.status}`);\n      onClose();\n    } catch (err) {\n      console.error(\"Error enviando correo:\", err);\n      setError(\"No se pudo enviar el correo\");\n    } finally {\n      setSending(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40\">\n      <div className=\"w-full max-w-xl rounded-lg bg-white p-6 shadow-lg\">\n        <h2 className=\"mb-4 text-lg font-semibold\">Nuevo correo</h2>\n\n        <div className=\"space-y-4\">\n          <input\n            type=\"email\"\n            placeholder=\"Para\"\n            className=\"w-full rounded border px-3 py-2 text-sm\"\n            value={to}\n            onChange={(e) => setTo(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Asunto\"\n            className=\"w-full rounded border px-3 py-2 text-sm\"\n            value={subject}\n            onChange={(e) => setSubject(e.target.value)}\n          />\n          <textarea\n            rows=\"8\"\n            placeholder=\"Escribe tu mensaje…\"\n            className=\"w-full rounded border px-3 py-2 text-sm\"\n            value={body}\n            onChange={(e) => setBody(e.target.value)}\n          />\n          {error && (\n            <Alert variant=\"error\" className=\"text-sm\">\n              {error}\n            </Alert>\n          )}\n        </div>\n\n        <div className=\"mt-6 flex justify-end gap-2\">\n          <Button onClick={onClose} disabled={sending} variant=\"ghost\">\n            Cancelar\n          </Button>\n          <Button onClick={handleSend} disabled={sending || !to} variant=\"primary\">\n            {sending ? <Spinner size=\"sm\" /> : \"Enviar\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MailboxPage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\More.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":3,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":39}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Link, Outlet } from 'react-router-dom';\r\nimport { Users, Briefcase, Clock, User, Layers } from 'lucide-react';\r\n\r\nexport default function More() {\r\n  const [openMenu, setOpenMenu] = useState(null);\r\n  return (\r\n    <div className=\"p-4 md:p-6 space-y-8\">\r\n      {/* Header */}\r\n      <div className=\"mb-6\">\r\n        <h1 className=\"text-2xl font-bold text-gray-800\">Más</h1>\r\n      </div>\r\n\r\n      {/* Tiles */}\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n        <div className=\"relative\">\r\n        <button onClick={() => setOpenMenu(openMenu==='invitados'?null:'invitados')} className=\"bg-white p-4 rounded shadow hover:shadow-md flex flex-col text-left w-full\">\r\n          <Users size={32} className=\"text-blue-600 mb-2\" />\r\n          <h2 className=\"font-semibold mb-1\">Invitados</h2>\r\n          <p className=\"text-sm text-gray-600\">Gestiona invitados y seating plan.</p>\r\n        </button>\r\n        {openMenu==='invitados' && (\r\n          <div className=\"absolute bg-white border border-gray-200 rounded shadow mt-2 w-full z-10\">\r\n            <Link to=\"/invitados\" className=\"block px-4 py-2 hover:bg-gray-100\">Gestión de invitados</Link>\r\n            <Link to=\"/invitados/seating\" className=\"block px-4 py-2 hover:bg-gray-100\">Seating plan</Link>\r\n\r\n          </div>\r\n        )}\r\n      </div>\r\n        <div className=\"relative\">\r\n        <button onClick={() => setOpenMenu(openMenu==='proveedores'?null:'proveedores')} className=\"bg-white p-4 rounded shadow hover:shadow-md flex flex-col text-left w-full\">\r\n          <Briefcase size={32} className=\"text-blue-600 mb-2\" />\r\n          <h2 className=\"font-semibold mb-1\">Proveedores</h2>\r\n          <p className=\"text-sm text-gray-600\">Gestiona proveedores y contratos.</p>\r\n        </button>\r\n        {openMenu==='proveedores' && (\r\n          <div className=\"absolute bg-white border border-gray-200 rounded shadow mt-2 w-full z-10\">\r\n            <Link to=\"/proveedores\" className=\"block px-4 py-2 hover:bg-gray-100\">Gestión de proveedores</Link>\r\n              <Link to=\"/proveedores/contratos\" className=\"block px-4 py-2 hover:bg-gray-100\">Contratos</Link>\r\n            \r\n          </div>\r\n        )}\r\n      </div>\r\n        <div className=\"relative\">\r\n          <button onClick={() => setOpenMenu(openMenu==='protocolo'?null:'protocolo')} className=\"bg-white p-4 rounded shadow hover:shadow-md flex flex-col text-left w-full\">\r\n            <Clock size={32} className=\"text-blue-600 mb-2\" />\r\n            <h2 className=\"font-semibold mb-1\">Protocolo</h2>\r\n            <p className=\"text-sm text-gray-600\">Momentos especiales, Timing y Checklist</p>\r\n          </button>\r\n          {openMenu==='protocolo' && (\r\n            <div className=\"absolute bg-white border border-gray-200 rounded shadow mt-2 w-full z-10\">\r\n              <Link to=\"/protocolo/momentos-especiales\" className=\"block px-4 py-2 hover:bg-gray-100\">Momentos especiales</Link>\r\n              <Link to=\"/protocolo/timing\" className=\"block px-4 py-2 hover:bg-gray-100\">Timing</Link>\r\n              <Link to=\"/protocolo/checklist\" className=\"block px-4 py-2 hover:bg-gray-100\">Checklist</Link>\r\n              <Link to=\"/protocolo/ayuda-ceremonia\" className=\"block px-4 py-2 hover:bg-gray-100\">Ayuda Ceremonia</Link>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"relative\">\r\n          <button onClick={() => setOpenMenu(openMenu==='extras'?null:'extras')} className=\"bg-white p-4 rounded shadow hover:shadow-md flex flex-col text-left w-full\">\r\n            <Layers size={32} className=\"text-blue-600 mb-2\" />\r\n            <h2 className=\"font-semibold mb-1\">Extras</h2>\r\n            <p className=\"text-sm text-gray-600\">Diseño web e ideas</p>\r\n          </button>\r\n          {openMenu==='extras' && (\r\n            <div className=\"absolute bg-white border border-gray-200 rounded shadow mt-2 w-full z-10\">\r\n              <Link to=\"/diseno-web\" className=\"block px-4 py-2 hover:bg-gray-100\">Diseño Web</Link>\r\n              <Link to=\"/disenos\" className=\"block px-4 py-2 hover:bg-gray-100\">Diseños</Link>\r\n              <Link to=\"/ideas\" className=\"block px-4 py-2 hover:bg-gray-100\">Ideas</Link>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Content */}\r\n      <div className=\"mt-6\">\r\n        <Outlet />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Notificaciones.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Perfil.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'authUser' is assigned a value but never used.","line":79,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'LegacyPerfil' is defined but never used.","line":280,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":280,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'updateUserEmail' is assigned a value but never used.","line":287,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":287,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'reauthenticate' is assigned a value but never used.","line":289,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":289,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'isEditing' is assigned a value but never used.","line":306,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":306,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'setIsEditing' is assigned a value but never used.","line":306,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":306,"endColumn":33}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Card } from '../components/ui';\r\nimport { Button } from '../components/ui';\r\nimport { Input } from '../components/ui';\r\nimport { useUserContext } from '../context/UserContext';\r\nimport { toast } from 'react-toastify';\r\nimport useRoles from '../hooks/useRoles';\r\nimport { Users, X } from 'lucide-react';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { saveData, loadData, subscribeSyncState, getSyncState } from '../services/SyncService';\r\n\r\n// ---------------------- NUEVO PERFIL -----------------------\r\nfunction Perfil() {\r\n  const [subscription, setSubscription] = useState('free');\r\n  const [account, setAccount] = useState({\r\n    name: '',\r\n    linkedAccount: '',\r\n    planner: '',\r\n    helpers: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n  const [weddingInfo, setWeddingInfo] = useState({\r\n    coupleName: '',\r\n    celebrationPlace: '',\r\n    banquetPlace: '',\r\n    schedule: '',\r\n    giftAccount: '',\r\n    numGuests: '',\r\n  });\r\n  // Campo de texto amplio para notas importantes de la boda\r\n  const [importantInfo, setImportantInfo] = useState('');\r\n  const [syncStatus, setSyncStatus] = useState(getSyncState());\r\n\r\n  // Sincronizar número de invitados automáticamente\r\n  // Escucha cambios en la lista de invitados en tiempo real\r\n  useEffect(() => {\r\n    function updateGuestCount() {\r\n      let guests = [];\r\n      try {\r\n        guests = JSON.parse(localStorage.getItem('lovendaGuests'));\r\n        if (!Array.isArray(guests)) guests = null;\r\n      } catch { guests = null; }\r\n      if (!guests) {\r\n        guests = [\r\n          { id: 1, name: 'Ana García', phone: '123456789', address: 'Calle Sol 1', companion: 1, table: '5', response: 'Sí' },\r\n          { id: 2, name: 'Luis Martínez', phone: '987654321', address: 'Av. Luna 3', companion: 0, table: '', response: 'Pendiente' },\r\n        ];\r\n      }\r\n      const total = guests.reduce((acc, g) => acc + 1 + (parseInt(g.companion)||0), 0);\r\n      setWeddingInfo(w => ({ ...w, numGuests: total }));\r\n    }\r\n    updateGuestCount(); // inicial\r\n    window.addEventListener('lovenda-guests', updateGuestCount);\r\n    return () => window.removeEventListener('lovenda-guests', updateGuestCount);\r\n   }, []);\r\n\r\n  // Escucha notas importantes agregadas desde el chat\r\n  useEffect(() => {\r\n    function updateNotes() {\r\n      setImportantInfo(loadData('importantNotes'));\r\n    }\r\n    window.addEventListener('lovenda-important-note', updateNotes);\r\n    return () => window.removeEventListener('lovenda-important-note', updateNotes);\r\n  }, []);\r\n\r\n  const [billing, setBilling] = useState({\r\n    fullName: '',\r\n    address: '',\r\n    zip: '',\r\n    city: '',\r\n    state: '',\r\n    country: '',\r\n    dni: '',\r\n  });\r\n\r\n  const { userProfile, user: authUser } = useAuth();\r\n  const weddingId = userProfile?.weddingId || '';\r\n  const { roles: collaborators, loading: rolesLoading, assignRole, removeRole } = useRoles(weddingId);\r\n\r\n  const handleAccountChange = (e) => setAccount({ ...account, [e.target.name]: e.target.value });\r\n  const handleWeddingChange = (e) => setWeddingInfo({ ...weddingInfo, [e.target.name]: e.target.value });\r\n  const handleBillingChange = (e) => setBilling({ ...billing, [e.target.name]: e.target.value });\r\n\r\n  const saveProfile = async () => {\r\n    const data = {subscription, account, weddingInfo, billing, importantInfo};\r\n    \r\n    try {\r\n      // Usar el nuevo servicio de sincronización híbrida\r\n      const success = await saveData('lovendaProfile', data, {\r\n        collection: 'userProfiles',\r\n        showNotification: false // Manejamos las notificaciones aquí\r\n      });\r\n      \r\n      if (success) {\r\n        toast.success('Perfil guardado');\r\n      } else {\r\n        toast.warning('Perfil guardado localmente. Se sincronizará cuando haya conexión');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error guardando perfil:', error);\r\n      toast.error('Error al guardar el perfil');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Suscribirse a cambios en el estado de sincronización\r\n    const unsubscribe = subscribeSyncState(setSyncStatus);\r\n    \r\n    // Cargar datos con la nueva estrategia híbrida\r\n    const loadProfileData = async () => {\r\n      try {\r\n        const profileData = await loadData('lovendaProfile', {\r\n          collection: 'userProfiles',\r\n          fallbackToLocal: true\r\n        });\r\n        \r\n        if (profileData) {\r\n          if (profileData.weddingInfo) setWeddingInfo(profileData.weddingInfo);\r\n          if (profileData.account) setAccount(profileData.account);\r\n          if (profileData.billing) setBilling(profileData.billing);\r\n          if (profileData.subscription) setSubscription(profileData.subscription);\r\n          if (profileData.importantInfo) setImportantInfo(profileData.importantInfo);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error cargando datos del perfil:', error);\r\n        toast.error('Error al cargar el perfil');\r\n      }\r\n    };\r\n    \r\n    loadProfileData();\r\n    \r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-4 max-w-3xl mx-auto\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-2xl font-semibold\">Perfil</h1>\r\n        \r\n        {/* Indicador de estado de sincronización */}\r\n        <div className=\"flex items-center text-sm\">\r\n          <div className={`w-3 h-3 rounded-full mr-2 ${\r\n            !syncStatus.isOnline ? 'bg-red-500' : \r\n            syncStatus.isSyncing ? 'bg-yellow-500' :\r\n            syncStatus.pendingChanges ? 'bg-orange-500' : 'bg-green-500'\r\n          }`}></div>\r\n          <span>\r\n            {!syncStatus.isOnline ? 'Sin conexión (modo offline)' : \r\n             syncStatus.isSyncing ? 'Sincronizando...' : \r\n             syncStatus.pendingChanges ? 'Cambios pendientes' : 'Sincronizado'}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Suscripción */}\r\n      <Card className=\"space-y-4\">\r\n        <h2 className=\"text-lg font-medium\">Tipo de suscripción</h2>\r\n        <div className=\"flex gap-4\">\r\n          <Button variant={subscription === 'free' ? 'primary' : 'outline'} onClick={() => setSubscription('free')}>Gratis</Button>\r\n          <Button variant={subscription === 'premium' ? 'primary' : 'outline'} onClick={() => setSubscription('premium')}>Premium</Button>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Información de la cuenta */}\r\n      <Card className=\"space-y-4\">\r\n        <h2 className=\"text-lg font-medium\">Información de la cuenta</h2>\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n          <Input label=\"Nombre\" name=\"name\" value={account.name} onChange={handleAccountChange} />\r\n          <Input label=\"Cuenta vinculada\" name=\"linkedAccount\" value={account.linkedAccount} onChange={handleAccountChange} />\r\n          <Input label=\"Wedding planner vinculada\" name=\"planner\" value={account.planner} onChange={handleAccountChange} />\r\n          <Input label=\"Ayudantes vinculados\" name=\"helpers\" value={account.helpers} onChange={handleAccountChange} />\r\n          <Input label=\"Correo electrónico\" name=\"email\" type=\"email\" value={account.email} onChange={handleAccountChange} />\r\n          <Input label=\"Reestablecer contraseña\" name=\"password\" type=\"password\" value={account.password} onChange={handleAccountChange} />\r\n        </div>\r\n        <div className=\"text-right\">\r\n          <Button onClick={saveProfile}>Guardar</Button>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Información de la boda */}\r\n      <Card className=\"space-y-4\">\r\n        <h2 className=\"text-lg font-medium\">Información de la boda</h2>\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n          <Input label=\"Nombre de la pareja\" name=\"coupleName\" value={weddingInfo.coupleName} onChange={handleWeddingChange} />\r\n          <Input label=\"Lugar de la celebración\" name=\"celebrationPlace\" value={weddingInfo.celebrationPlace} onChange={handleWeddingChange} />\r\n          <Input label=\"Lugar del banquete\" name=\"banquetPlace\" value={weddingInfo.banquetPlace} onChange={handleWeddingChange} />\r\n          <Input label=\"Horario\" name=\"schedule\" value={weddingInfo.schedule} onChange={handleWeddingChange} />\r\n          <Input label=\"Cuenta de regalos\" name=\"giftAccount\" value={weddingInfo.giftAccount} onChange={handleWeddingChange} />\r\n          <Input label=\"Número de invitados\" name=\"numGuests\" type=\"number\" value={weddingInfo.numGuests} readOnly />\r\n        </div>\r\n        <div className=\"text-right\">\r\n          <Button onClick={saveProfile}>Guardar</Button>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Información importante de la boda */}\r\n      <Card className=\"space-y-4\">\r\n        <h2 className=\"text-lg font-medium\">Información importante de la boda</h2>\r\n        <textarea\r\n          className=\"w-full min-h-[150px] border rounded-md p-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n          placeholder=\"Datos o detalles clave que la IA o el usuario quieran guardar (ej.: alergias, proveedores críticos, horarios especiales, etc.)\"\r\n          value={importantInfo}\r\n          onChange={(e)=>setImportantInfo(e.target.value)}\r\n        />\r\n        <div className=\"text-right\">\r\n          <Button onClick={saveProfile}>Guardar</Button>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Colaboradores */}\r\n      <Card className=\"space-y-4\">\r\n        <h2 className=\"text-lg font-medium flex items-center\"><Users className=\"w-5 h-5 mr-2\" />Colaboradores</h2>\r\n        {rolesLoading ? (\r\n          <p>Cargando...</p>\r\n        ) : (\r\n          <table className=\"w-full text-sm\">\r\n            <thead>\r\n              <tr className=\"border-b\">\r\n                <th className=\"text-left p-2\">Usuario</th>\r\n                <th className=\"text-left p-2\">Rol</th>\r\n                <th className=\"p-2 text-center\">Acciones</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {collaborators.map(c => (\r\n                <tr key={c.uid} className=\"border-b\">\r\n                  <td className=\"p-2\">{c.email || c.uid}</td>\r\n                  <td className=\"p-2\">\r\n                    <select\r\n                      value={c.role}\r\n                      onChange={(e)=>assignRole(c.uid, e.target.value)}\r\n                      disabled={c.role==='owner'}\r\n                      className=\"border rounded px-2 py-1 text-sm\">\r\n                      <option value=\"owner\">Pareja</option>\r\n                      <option value=\"planner\">Wedding Planner</option>\r\n                      <option value=\"helper\">Ayudante</option>\r\n                    </select>\r\n                  </td>\r\n                  <td className=\"p-2 text-center\">\r\n                    {c.role!=='owner' && (\r\n                      <button onClick={()=>removeRole(c.uid)} className=\"text-red-500 hover:text-red-700\">\r\n                        <X size={16} />\r\n                      </button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </Card>\r\n\r\n      {/* Datos de facturación */}\r\n      <Card className=\"space-y-4\">\r\n        <h2 className=\"text-lg font-medium\">Datos de facturación</h2>\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n          <Input label=\"Nombre completo\" name=\"fullName\" value={billing.fullName} onChange={handleBillingChange} />\r\n          <Input label=\"Dirección\" name=\"address\" value={billing.address} onChange={handleBillingChange} />\r\n          <Input label=\"CP\" name=\"zip\" value={billing.zip} onChange={handleBillingChange} />\r\n          <Input label=\"Localidad\" name=\"city\" value={billing.city} onChange={handleBillingChange} />\r\n          <Input label=\"Provincia\" name=\"state\" value={billing.state} onChange={handleBillingChange} />\r\n          <Input label=\"País\" name=\"country\" value={billing.country} onChange={handleBillingChange} />\r\n          <Input label=\"DNI\" name=\"dni\" value={billing.dni} onChange={handleBillingChange} />\r\n        </div>\r\n        <div className=\"text-right\">\r\n          <Button onClick={saveProfile}>Guardar</Button>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Perfil;\r\n\r\n// -----------------------------------------------------------\r\n\r\nfunction LegacyPerfil() {\r\n  const navigate = useNavigate();\r\n  const { \r\n    user, \r\n    updateProfile, \r\n    sendVerificationEmail, \r\n    sendPasswordReset, \r\n    updateUserEmail,\r\n    updateUserPassword,\r\n    reauthenticate\r\n  } = useUserContext();\r\n  \r\n  const [activeTab, setActiveTab] = useState('profile');\r\n  // Estado para mostrar/ocultar menú lateral en pantallas pequeñas\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n  const [form, setForm] = useState({ \r\n    displayName: '', \r\n    email: '', \r\n    weddingName: '', \r\n    logoUrl: '', \r\n    partnerName: '', \r\n    partnerEmail: '',\r\n    currentPassword: '',\r\n    newPassword: '',\r\n    confirmPassword: ''\r\n  });\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setForm(prev => ({\r\n        ...prev,\r\n        displayName: user.displayName || '',\r\n        email: user.email || '',\r\n        weddingName: user.weddingName || '',\r\n        logoUrl: user.logoUrl || '',\r\n        partnerName: user.partnerName || '',\r\n        partnerEmail: user.partnerEmail || ''\r\n      }));\r\n    }\r\n  }, [user]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setForm(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleProfileSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    try {\r\n      await updateProfile({\r\n        displayName: form.displayName,\r\n        weddingName: form.weddingName,\r\n        logoUrl: form.logoUrl,\r\n        partnerName: form.partnerName,\r\n        partnerEmail: form.partnerEmail\r\n      });\r\n      toast.success('Perfil actualizado correctamente');\r\n    } catch (error) {\r\n      toast.error(`Error al actualizar el perfil: ${error.message}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (form.newPassword !== form.confirmPassword) {\r\n      toast.error('Las contraseñas no coinciden');\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      await updateUserPassword(form.newPassword);\r\n      toast.success('Contraseña actualizada correctamente');\r\n      setForm(prev => ({ ...prev, currentPassword: '', newPassword: '', confirmPassword: '' }));\r\n    } catch (error) {\r\n      toast.error(`Error al actualizar la contraseña: ${error.message}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSendVerification = async () => {\r\n    try {\r\n      await sendVerificationEmail();\r\n      toast.success('Correo de verificación enviado. Por favor revisa tu bandeja de entrada.');\r\n    } catch (error) {\r\n      toast.error(`Error al enviar el correo de verificación: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handlePasswordReset = async () => {\r\n    if (!form.email) {\r\n      toast.error('Por favor ingresa tu correo electrónico');\r\n      return;\r\n    }\r\n    try {\r\n      await sendPasswordReset(form.email);\r\n      toast.success('Se ha enviado un enlace para restablecer tu contraseña a tu correo electrónico');\r\n    } catch (error) {\r\n      toast.error(`Error al enviar el enlace de restablecimiento: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    navigate('/login');\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <h1 className=\"text-3xl font-bold text-center mb-8\">Configuración de Cuenta</h1>\r\n      \r\n      {/* Botón hamburguesa para móviles */}\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => setMenuOpen(prev => !prev)}\r\n        className=\"md:hidden mb-4 px-4 py-2 bg-blue-600 text-white rounded\"\r\n        aria-expanded={menuOpen}\r\n        aria-controls=\"sidebar-menu\"\r\n      >\r\n        {menuOpen ? 'Cerrar menú' : 'Menú'}\r\n      </button>\r\n\r\n      <div className=\"flex flex-col md:flex-row gap-8\">\r\n        {/* Sidebar */}\r\n        <div id=\"sidebar-menu\" className={`${menuOpen ? 'block' : 'hidden'} md:block w-full md:w-64 flex-shrink-0`}>\r\n          <Card className=\"p-4\">\r\n            <div className=\"space-y-1\">\r\n              <button\r\n                onClick={() => { setActiveTab('profile'); setMenuOpen(false); }}\r\n                className={`w-full text-left px-4 py-2 rounded-md ${\r\n                  activeTab === 'profile' \r\n                    ? 'bg-blue-100 text-blue-700' \r\n                    : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Perfil\r\n              </button>\r\n              <button\r\n                onClick={() => { setActiveTab('password'); setMenuOpen(false); }}\r\n                className={`w-full text-left px-4 py-2 rounded-md ${\r\n                  activeTab === 'password' \r\n                    ? 'bg-blue-100 text-blue-700' \r\n                    : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Contraseña\r\n              </button>\r\n              <button\r\n                onClick={() => { setActiveTab('email'); setMenuOpen(false); }}\r\n                className={`w-full text-left px-4 py-2 rounded-md ${\r\n                  activeTab === 'email' \r\n                    ? 'bg-blue-100 text-blue-700' \r\n                    : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Correo Electrónico\r\n              </button>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <div className=\"flex-1\">\r\n          {/* Profile Tab */}\r\n          {activeTab === 'profile' && (\r\n            <Card className=\"p-6\">\r\n              <h2 className=\"text-2xl font-semibold mb-6\">Información del Perfil</h2>\r\n              <form onSubmit={handleProfileSubmit}>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Nombre de Usuario\r\n                    </label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"displayName\"\r\n                      value={form.displayName}\r\n                      onChange={handleChange}\r\n                      required\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Nombre de la Boda\r\n                    </label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"weddingName\"\r\n                      value={form.weddingName}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      URL del Logo\r\n                    </label>\r\n                    <Input\r\n                      type=\"url\"\r\n                      name=\"logoUrl\"\r\n                      value={form.logoUrl}\r\n                      onChange={handleChange}\r\n                      placeholder=\"https://ejemplo.com/logo.png\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Nombre de la Pareja\r\n                    </label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"partnerName\"\r\n                      value={form.partnerName}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Correo de la Pareja\r\n                    </label>\r\n                    <Input\r\n                      type=\"email\"\r\n                      name=\"partnerEmail\"\r\n                      value={form.partnerEmail}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"pt-4\">\r\n                    <Button type=\"submit\" disabled={isLoading}>\r\n                      {isLoading ? 'Guardando...' : 'Guardar Cambios'}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </Card>\r\n          )}\r\n\r\n          {/* Password Tab */}\r\n          {activeTab === 'password' && (\r\n            <Card className=\"p-6\">\r\n              <h2 className=\"text-2xl font-semibold mb-6\">Cambiar Contraseña</h2>\r\n              <form onSubmit={handlePasswordSubmit}>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Contraseña Actual\r\n                    </label>\r\n                    <Input\r\n                      type=\"password\"\r\n                      name=\"currentPassword\"\r\n                      value={form.currentPassword}\r\n                      onChange={handleChange}\r\n                      required\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Nueva Contraseña\r\n                    </label>\r\n                    <Input\r\n                      type=\"password\"\r\n                      name=\"newPassword\"\r\n                      value={form.newPassword}\r\n                      onChange={handleChange}\r\n                      required\r\n                      minLength={6}\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Confirmar Nueva Contraseña\r\n                    </label>\r\n                    <Input\r\n                      type=\"password\"\r\n                      name=\"confirmPassword\"\r\n                      value={form.confirmPassword}\r\n                      onChange={handleChange}\r\n                      required\r\n                      minLength={6}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"pt-4\">\r\n                    <Button type=\"submit\" disabled={isLoading}>\r\n                      {isLoading ? 'Actualizando...' : 'Actualizar Contraseña'}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </Card>\r\n          )}\r\n\r\n          {/* Email Tab */}\r\n          {activeTab === 'email' && (\r\n            <Card className=\"p-6\">\r\n              <h2 className=\"text-2xl font-semibold mb-6\">Correo Electrónico</h2>\r\n              \r\n              <div className=\"space-y-6\">\r\n                <div className=\"p-4 bg-blue-50 rounded-lg\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <p className=\"font-medium\">Estado de Verificación</p>\r\n                      <p className=\"text-sm text-gray-600\">\r\n                        {user.emailVerified \r\n                          ? 'Tu correo electrónico ha sido verificado.' \r\n                          : 'Tu correo electrónico no ha sido verificado.'}\r\n                      </p>\r\n                    </div>\r\n                    {!user.emailVerified && (\r\n                      <Button \r\n                        onClick={handleSendVerification}\r\n                        variant=\"outline\"\r\n                        disabled={isLoading}\r\n                      >\r\n                        Verificar Correo\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"p-4 bg-yellow-50 rounded-lg\">\r\n                  <h3 className=\"font-medium mb-2\">Restablecer Contraseña</h3>\r\n                  <p className=\"text-sm text-gray-600 mb-3\">\r\n                    ¿Olvidaste tu contraseña? Te enviaremos un enlace para restablecerla a tu correo electrónico.\r\n                  </p>\r\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\r\n                    <Input\r\n                      type=\"email\"\r\n                      value={form.email}\r\n                      onChange={(e) => setForm(prev => ({ ...prev, email: e.target.value }))}\r\n                      placeholder=\"tu@email.com\"\r\n                      className=\"flex-1\"\r\n                    />\r\n                    <Button \r\n                      onClick={handlePasswordReset}\r\n                      variant=\"outline\"\r\n                      disabled={isLoading}\r\n                    >\r\n                      Enviar Enlace\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Protocolo.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":3,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'Music' is defined but never used.","line":3,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":3,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":38}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Outlet, Link } from 'react-router-dom';\r\nimport { Clock, List, Music, FileText } from 'lucide-react';\r\n\r\nexport default function Protocolo() {\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h1 className=\"text-2xl font-semibold mb-4\">Protocolo</h1>\r\n      <nav className=\"flex space-x-4 mb-6 border-b pb-2\">\r\n        <Link to=\"momentos\" className=\"text-blue-600 hover:underline\">Momentos Especiales</Link>\r\n        <Link to=\"timing\" className=\"text-blue-600 hover:underline\">Timing</Link>\r\n        <Link to=\"checklist\" className=\"text-blue-600 hover:underline\">Checklist</Link>\r\n        <Link to=\"ayuda-ceremonia\" className=\"text-blue-600 hover:underline\">Ayuda Ceremonia</Link>\r\n      </nav>\r\n      <Outlet />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Proveedores.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'MainLayout' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":31,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'useNavigate' is not defined.","line":31,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'syncStatus' is assigned a value but never used.","line":45,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'getSyncState' is not defined.","line":45,"column":48,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":60},{"ruleId":"no-undef","severity":2,"message":"'subscribeSyncState' is not defined.","line":49,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":49,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'loadTrackingRecords' is not defined.","line":56,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'loadData' is not defined.","line":67,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":32},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":92,"column":19,"nodeType":"BlockStatement","messageId":"unexpected","endLine":92,"endColumn":21,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[4035,4035],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-undef","severity":2,"message":"'loadData' is not defined.","line":177,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":177,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'loadData' is not defined.","line":192,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":192,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'verifyProviderLinks' is not defined.","line":268,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":268,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'saveData' is not defined.","line":271,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":271,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'loadData' is not defined.","line":345,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":345,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'loadData' is not defined.","line":357,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":357,"endColumn":54},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":605,"column":17,"nodeType":"BlockStatement","messageId":"unexpected","endLine":605,"endColumn":19,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[24753,24753],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-undef","severity":2,"message":"'mainLocation' is not defined.","line":817,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":817,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'region' is not defined.","line":817,"column":59,"nodeType":"Identifier","messageId":"undef","endLine":817,"endColumn":65},{"ruleId":"no-undef","severity":2,"message":"'country' is not defined.","line":817,"column":97,"nodeType":"Identifier","messageId":"undef","endLine":817,"endColumn":104},{"ruleId":"no-undef","severity":2,"message":"'mainLocation' is not defined.","line":822,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":822,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'region' is not defined.","line":823,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":823,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'region' is not defined.","line":823,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":823,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'country' is not defined.","line":824,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":824,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'region' is not defined.","line":825,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":825,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'region' is not defined.","line":825,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":825,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'mainLocation' is not defined.","line":847,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":847,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'region' is not defined.","line":848,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":848,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'region' is not defined.","line":848,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":848,"endColumn":55},{"ruleId":"no-undef","severity":2,"message":"'country' is not defined.","line":849,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":849,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'mainLocation' is not defined.","line":852,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":852,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'mainLocation' is not defined.","line":856,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":856,"endColumn":52},{"ruleId":"no-undef","severity":2,"message":"'mainLocation' is not defined.","line":885,"column":73,"nodeType":"Identifier","messageId":"undef","endLine":885,"endColumn":85},{"ruleId":"no-undef","severity":2,"message":"'mainLocation' is not defined.","line":887,"column":72,"nodeType":"Identifier","messageId":"undef","endLine":887,"endColumn":84},{"ruleId":"no-undef","severity":2,"message":"'mainLocation' is not defined.","line":897,"column":62,"nodeType":"Identifier","messageId":"undef","endLine":897,"endColumn":74},{"ruleId":"no-undef","severity":2,"message":"'saveData' is not defined.","line":979,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":979,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'loadData' is not defined.","line":1047,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":1047,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'saveData' is not defined.","line":1107,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":1107,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'createTrackingRecord' is not defined.","line":1130,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":1130,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'loadTrackingRecords' is not defined.","line":1131,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":1131,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'createTrackingRecord' is not defined.","line":1161,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":1161,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'loadTrackingRecords' is not defined.","line":1163,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":1163,"endColumn":45},{"ruleId":"no-undef","severity":2,"message":"'updateTrackingStatus' is not defined.","line":1170,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":1170,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'loadTrackingRecords' is not defined.","line":1171,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":1171,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'loadData' is not defined.","line":1195,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":1195,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'saveData' is not defined.","line":1261,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":1261,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'PageWrapper' is not defined.","line":1285,"column":6,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1285,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Plus' is not defined.","line":1288,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1288,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Toast' is not defined.","line":1293,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1293,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Search' is not defined.","line":1308,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1308,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'RefreshCcw' is not defined.","line":1336,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1336,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Spinner' is not defined.","line":1473,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1473,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'RefreshCcw' is not defined.","line":1478,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1478,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1517,"column":98,"nodeType":"Identifier","messageId":"undef","endLine":1517,"endColumn":113},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1518,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":1518,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1519,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":1519,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1520,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":1520,"endColumn":62},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":1547,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1547,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":1581,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1581,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":1593,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1593,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'loadData' is not defined.","line":1612,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":1612,"endColumn":54},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Star' is not defined.","line":1688,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1688,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":1693,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1693,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit2' is not defined.","line":1694,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1694,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":1695,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1695,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":1696,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1696,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":1698,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1698,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Search' is not defined.","line":1748,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1748,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":1766,"column":85,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1766,"endColumn":91},{"ruleId":"no-undef","severity":2,"message":"'servicioSeleccionado' is not defined.","line":1776,"column":55,"nodeType":"Identifier","messageId":"undef","endLine":1776,"endColumn":75},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1934,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":1934,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1939,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":1939,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1940,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":1940,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1941,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":1941,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1942,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":1942,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1946,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1946,"endColumn":48},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertTriangle' is not defined.","line":1946,"column":60,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1946,"endColumn":73},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1947,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1947,"endColumn":48},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":1947,"column":61,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1947,"endColumn":66},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1948,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1948,"endColumn":48},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":1948,"column":63,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1948,"endColumn":66},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1949,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1949,"endColumn":48},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'RefreshCcw' is not defined.","line":1949,"column":62,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":1949,"endColumn":72},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1950,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1950,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1953,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1953,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1954,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1954,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1955,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1955,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1956,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1956,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'TRACKING_STATUS' is not defined.","line":1957,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1957,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'updateTrackingStatus' is not defined.","line":2006,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":2006,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'updateTrackingStatus' is not defined.","line":2035,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":2035,"endColumn":41},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":2040,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":2040,"endColumn":28}],"suppressedMessages":[],"errorCount":91,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport MainLayout from '../components/layout/MainLayout';\nimport Card from '../components/Card';\nimport Button from '../components/Button';\n\nexport default function Proveedores() {\n  // Proveedores de ejemplo iniciales\n  const sampleProviders = [\n    { id: 1, name: 'Eventos Catering', service: 'Catering', contact: 'Luis Pérez', email: 'luis@catering.com', phone: '555-1234', status: 'Contactado', date: '2025-06-10', rating: 0, ratingCount: 0 },\n    { id: 2, name: 'Flores y Diseño', service: 'Flores', contact: 'Ana Gómez', email: 'ana@flores.com', phone: '555-5678', status: 'Confirmado', date: '2025-06-12', rating: 0, ratingCount: 0 },\n  ];\n  const [providers, setProviders] = useState(sampleProviders);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [serviceFilter, setServiceFilter] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [dateFrom, setDateFrom] = useState('');\n  const [dateTo, setDateTo] = useState('');\n  const [aiQuery, setAiQuery] = useState('');\n  const [aiLoading, setAiLoading] = useState(false);\n  const [toast, setToast] = useState(null);\n  // pestaña actual: selected | contacted\n  const [tab, setTab] = useState('selected');\n  const [selected, setSelected] = useState([]);\n  const [showAiModal, setShowAiModal] = useState(false);\n  const [aiResults, setAiResults] = useState([]);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [budgetRange, setBudgetRange] = useState('');\n  const [showDetail, setShowDetail] = useState(false);\n  const [detailProvider, setDetailProvider] = useState(null);\n  const [activeDetailTab, setActiveDetailTab] = useState('info'); // 'info', 'communications', 'tracking'\n  const navigate = useNavigate();\n  const [reservations, setReservations] = useState([]);\n  const [showResModal, setShowResModal] = useState(false);\n  const [providerToReserve, setProviderToReserve] = useState(null);\n  const [resDate, setResDate] = useState('');\n  const [resTime, setResTime] = useState('');\n  const initialProvider = { name: '', service: '', contact: '', email: '', phone: '', status: 'Nuevo', date: '' };\n  const [trackingRecords, setTrackingRecords] = useState([]);\n  const [showTrackingModal, setShowTrackingModal] = useState(false);\n  const [currentTracking, setCurrentTracking] = useState(null);\n  const [syncedEmails, setSyncedEmails] = useState([]);\n  const [isSyncingEmails, setIsSyncingEmails] = useState(false);\n  \n  // Estado de sincronización\n  const [syncStatus, setSyncStatus] = useState(getSyncState());\n\n  // Suscribirse a cambios en el estado de sincronización\n  useEffect(() => {\n    const unsubscribe = subscribeSyncState(setSyncStatus);\n    return () => unsubscribe();\n  }, []);\n  \n  // Cargar registros de seguimiento al iniciar\n  useEffect(() => {\n    const loadTracking = () => {\n      const records = loadTrackingRecords();\n      setTrackingRecords(records);\n    };\n    \n    loadTracking();\n  }, []);\n\n  // Cargar proveedores encontrados por la IA (usando SyncService) y escuchar cambios\n  useEffect(() => {\n    const loadSuppliers = () => {\n      try {\n        const stored = loadData('lovendaSuppliers', { \n          defaultValue: [], \n          collection: 'userSuppliers' \n        });\n        if (!Array.isArray(stored) || !stored.length) return;\n        setProviders(prev => {\n          const existingLinks = new Set(prev.map(p => p.link));\n          const mapped = stored\n            .filter(s => !existingLinks.has(s.link))\n            .map((s, idx) => ({\n              id: `web-${Date.now()}-${idx}`,\n              name: s.title,\n              service: 'Proveedor',\n              contact: '',\n              email: '',\n              phone: '',\n              link: s.link,\n              status: 'Nuevo',\n              date: new Date().toISOString().slice(0, 10),\n              rating: 0,\n              ratingCount: 0,\n              snippet: s.snippet || '',\n            }));\n          return [...prev, ...mapped];\n        });\n      } catch (_) {}\n    };\n    loadSuppliers();\n    window.addEventListener('lovenda-suppliers', loadSuppliers);\n    return () => window.removeEventListener('lovenda-suppliers', loadSuppliers);\n  }, []);\n  const [newProvider, setNewProvider] = useState(initialProvider);\n  const handleAddProvider = e => {\n    e.preventDefault();\n    const newId = providers.length ? Math.max(...providers.map(p => p.id)) + 1 : 1;\n    setProviders(prev => [...prev, { id: newId, ...newProvider, rating: 0, ratingCount: 0 }]);\n    setNewProvider(initialProvider);\n    setShowAddModal(false);\n    setToast({ message: 'Proveedor agregado', type: 'success' });\n  };\n\n  const openResModal = (p) => {\n    setProviderToReserve(p);\n    setResDate('');\n    setResTime('');\n    setShowResModal(true);\n  };\n\n  const confirmReservation = () => {\n    if (providerToReserve && resDate && resTime) {\n      const dt = new Date(resDate + 'T' + resTime);\n      setReservations(prev => [...prev, { providerId: providerToReserve.id, datetime: dt }]);\n      setShowResModal(false);\n    }\n  };\n\n  const selectProvider = (item) => {\n    const newProv = {\n      id: `web-${Date.now()}`,\n      name: item.title || item.name || 'Proveedor',\n      service: serviceFilter || 'Proveedor',\n      contact: '',\n      email: '',\n      phone: '',\n      link: item.link,\n      status: 'Nuevo',\n      date: new Date().toISOString().slice(0, 10),\n      rating: 0,\n      ratingCount: 0,\n      snippet: item.snippet || '',\n      priceRange: item.priceRange || budgetRange,\n      image: item.image || '',\n    };\n    setProviders(prev => [...prev, newProv]);\n    setDetailProvider(newProv);\n    setShowDetail(true);\n    setShowAiModal(false);\n  };\n\n  const rateProvider = (id, ratingValue) => {\n    setProviders(prev => prev.map(p =>\n      p.id === id ? { ...p,\n        ratingCount: p.ratingCount + 1,\n        rating: (p.rating * p.ratingCount + ratingValue) / (p.ratingCount + 1)\n      } : p\n    ));\n  };\n\n  const handleAiSearch = async (e) => {\n    e.preventDefault();\n    if (!aiQuery.trim() && !serviceFilter) {\n      setToast({ message: 'Por favor, introduce una búsqueda o selecciona un tipo de servicio', type: 'warning' });\n      return;\n    }\n    \n    setAiLoading(true);\n    \n    try {\n      // Función para cargar y unificar TODOS los datos disponibles del perfil\n      // Esta función es similar a la que hay en fetchOpenAi para mantener coherencia\n      const loadAllProfileData = () => {\n        try {\n          // Lista de claves a buscar en almacenamiento local y en Firestore\n          const storageKeys = ['lovendaProfile', 'weddingInfo', 'account', 'important', \n                               'ceremonyInfo', 'weddingConfig'];\n          \n          // Objeto unificado para almacenar todos los datos\n          let unifiedData = {};\n          \n          // Cargar primero el perfil principal que contiene la información de la boda\n          const profile = loadData('lovendaProfile', { defaultValue: {}, collection: 'userProfiles' });\n          console.log('Perfil cargado para búsqueda de proveedores:', profile);\n          \n          // Copiar datos del perfil al objeto unificado\n          Object.assign(unifiedData, profile);\n          \n          // Asegurarse de que weddingInfo esté disponible\n          if (profile && profile.weddingInfo) {\n            unifiedData.weddingInfo = profile.weddingInfo;\n            Object.assign(unifiedData, profile.weddingInfo);\n          }\n          \n          // Procesamos cada clave e intentamos extraer información válida\n          storageKeys.forEach(key => {\n            try {\n              const data = loadData(key, { defaultValue: {}, collection: 'userData' });\n              if (typeof data === 'object' && data !== null) {\n                unifiedData[key] = data;\n                // También aplanamos los datos para facilitar el acceso\n                Object.assign(unifiedData, data);\n              }\n            } catch (err) {\r\n              console.warn(`Error al cargar datos de ${key}:`, err);\r\n            }\r\n          });\r\n          \r\n          return unifiedData;\r\n        } catch (err) {\r\n          console.error('Error al cargar datos del perfil:', err);\r\n          return {};\r\n        }\r\n      };\r\n      \r\n      // Cargar perfil de usuario completo\r\n      const profileData = loadAllProfileData();\r\n      \r\n      // Extraer información importante del perfil para la búsqueda\r\n      const extractWeddingLocation = (data) => {\r\n        const possibleKeys = [\r\n          'celebrationPlace',\r\n          'ceremonyLocation',\r\n          'weddingInfo.celebrationPlace',\r\n          'weddingInfo.ceremonyLocation',\r\n          'ceremonyInfo.location',\r\n          'location'\r\n        ];\r\n        \r\n        for (const key of possibleKeys) {\r\n          const parts = key.split('.');\r\n          let value;\r\n          \r\n          if (parts.length === 1) {\r\n            value = data[parts[0]];\r\n          } else if (parts.length === 2) {\r\n            value = data[parts[0]] && data[parts[0]][parts[1]];\r\n          }\r\n          \r\n          if (value && typeof value === 'string' && value.trim() !== '') {\r\n            console.log(`Ubicación de boda encontrada en '${key}':`, value);\r\n            return value;\r\n          }\r\n        }\r\n        \r\n        return '';\r\n      };\r\n      \r\n      // Extraer ubicación de la boda\r\n      const weddingLocation = extractWeddingLocation(profileData);\r\n      \r\n      // Si tenemos API de backend, intentamos usarla primero\r\n      const res = await fetch('/api/ai-suppliers', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: aiQuery,\r\n          service: serviceFilter,\r\n          budget: budgetRange,\r\n          profile: profileData,\r\n          location: weddingLocation // Añadir explícitamente la ubicación\r\n        })\r\n      });\r\n      \r\n      let data = [];\r\n      if (res.ok) {\r\n        try {\r\n          data = await res.json();\r\n        } catch (_) { /* cuerpo vacío */ }\r\n      }\r\n      \r\n      if (Array.isArray(data) && data.length) {\r\n        // Verificar operatividad de los enlaces antes de mostrarlos\r\n        verifyProviderLinks(data).then(verifiedResults => {\r\n          setAiResults(verifiedResults);\r\n          setShowAiModal(true);\r\n          saveData('lovendaSuppliers', verifiedResults, {\r\n            collection: 'userSuppliers',\r\n            showNotification: false\r\n          });\r\n          window.dispatchEvent(new Event('lovenda-suppliers'));\r\n        });\r\n      } else {\r\n        // Si la ruta no existe o responde vacío, usar OpenAI directamente\r\n        await fetchOpenAi();\r\n        return;\r\n      }\r\n    } catch (err) {\r\n      console.error('Error en la búsqueda de proveedores:', err);\r\n      setToast({ message: 'Error al buscar proveedores. Intentando búsqueda directa...', type: 'error' });\r\n      await fetchOpenAi();\r\n    } finally {\r\n      setAiLoading(false);\r\n    }\r\n  };\r\n\r\n  const displayed = providers\r\n    .filter(p =>\r\n      (p.name.toLowerCase().includes(searchTerm.toLowerCase()) || p.service.toLowerCase().includes(searchTerm.toLowerCase())) &&\r\n      (serviceFilter ? p.service === serviceFilter : true) &&\r\n      (statusFilter ? p.status === statusFilter : true) &&\r\n      (dateFrom ? p.date >= dateFrom : true) &&\r\n      (dateTo ? p.date <= dateTo : true)\r\n    )\r\n    .filter(p => {\r\n      if (tab === 'contacted') return p.status === 'Contactado';\r\n      if (tab === 'selected') return p.status === 'Confirmado' || p.status === 'Seleccionado';\r\n      return true; // all\r\n    });\r\n\r\n  const toggleSelect = id => {\r\n    setSelected(prev => (prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]));\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchTerm(''); setAiQuery(''); setServiceFilter(''); setStatusFilter(''); setDateFrom(''); setDateTo('');\r\n  };\r\n\r\n  // Búsqueda directa usando OpenAI cuando la API backend no responde\r\n  const fetchOpenAi = async () => {\r\n    // VALIDACIÓN MEJORADA: Garantizar que tenemos al menos un criterio de búsqueda\r\n    if (!aiQuery && !serviceFilter) {\r\n      setToast({ message: 'Por favor, introduce una búsqueda o selecciona un tipo de servicio', type: 'warning' });\r\n      setAiLoading(false);\r\n      return;\r\n    }\r\n    \r\n    // IMPORTANTE: Siempre garantizar que tenemos un tipo de servicio definido\r\n    const servicioSeleccionado = serviceFilter || \r\n                               (aiQuery.toLowerCase().includes('fotograf') ? 'Fotografía' : \r\n                                aiQuery.toLowerCase().includes('flor') ? 'Flores' : \r\n                                aiQuery.toLowerCase().includes('cater') ? 'Catering' : \r\n                                aiQuery.toLowerCase().includes('música') || aiQuery.toLowerCase().includes('music') ? 'Música' : \r\n                                'proveedores de boda');\r\n    \r\n    setAiLoading(true);\r\n    \r\n    try {\r\n      // Función mejorada para cargar y unificar TODOS los datos disponibles del perfil\r\n      const loadAllProfileData = () => {\r\n        try {\r\n          // Lista de claves a buscar en almacenamiento local y en Firestore\r\n          const storageKeys = ['lovendaProfile', 'weddingInfo', 'account', 'important', \r\n                               'ceremonyInfo', 'weddingConfig', 'invitados', 'finanzas', \r\n                               'transporte', 'eventSchedule', 'rsvp', 'proveedores'];\r\n          \r\n          // Objeto unificado para almacenar todos los datos\r\n          let unifiedData = {};\r\n          \r\n          // Cargar primero el perfil principal que contiene la información de la boda\r\n          const profile = loadData('lovendaProfile', { defaultValue: {}, collection: 'userProfiles' });\r\n          console.log('Perfil principal cargado:', profile);\r\n          \r\n          // Asegurarse de que weddingInfo esté disponible\r\n          if (profile && profile.weddingInfo) {\r\n            unifiedData.weddingInfo = profile.weddingInfo;\r\n            Object.assign(unifiedData, profile.weddingInfo);\r\n          }\r\n          \r\n          // Procesamos cada clave e intentamos extraer información válida\r\n          storageKeys.forEach(key => {\r\n            try {\r\n              const rawData = JSON.stringify(loadData(key, { defaultValue: {}, collection: 'userData' }));\r\n              // Intentamos parsearlo como JSON si es posible\r\n              try {\r\n                const parsedData = JSON.parse(rawData);\r\n                if (typeof parsedData === 'object' && parsedData !== null) {\r\n                  unifiedData[key] = parsedData;\r\n                  // También aplanamos los datos para facilitar el acceso\r\n                  Object.assign(unifiedData, parsedData);\r\n                }\r\n              } catch {\r\n                // Si no es JSON, lo guardamos como string\r\n                unifiedData[key] = rawData;\r\n              }\r\n            } catch (err) {\r\n              console.warn(`Error al cargar datos de ${key}:`, err);\r\n            }\r\n          });\r\n          \r\n          // Añadir ubicación fija de Valencia como respaldo si no se encuentra\r\n          if (!unifiedData.celebrationPlace && !unifiedData.ceremonyLocation && !unifiedData.location) {\r\n            unifiedData.celebrationPlace = 'Valencia, Comunidad Valenciana, España';\r\n            console.log('Usando ubicación predeterminada: Valencia');\r\n          }\r\n          \r\n          return unifiedData;\r\n        } catch (err) {\r\n          console.error('Error crítico al cargar datos del perfil:', err);\r\n          // Proporcionar datos mínimos con ubicación Valencia como respaldo\r\n          return { celebrationPlace: 'Valencia, Comunidad Valenciana, España' };\r\n        }\r\n      };\r\n      \r\n      // MEJORA: Cargamos datos con estructura más robusta\r\n      const allProfileData = loadAllProfileData();\r\n      console.log('Datos completos del perfil cargados:', allProfileData);\r\n      \r\n      // EXTRACCIÓN DE DATOS MEJORADA: Buscamos en profundidad y múltiples fuentes\r\n      const extractDataFromMultipleSources = (sources, keys) => {\r\n        for (const source of sources) {\r\n          for (const key of keys) {\r\n            // Comprobar si la fuente existe y tiene la clave\r\n            if (source && source[key] && source[key] !== 'undefined' && source[key] !== '') {\r\n              return source[key];\r\n            }\r\n          }\r\n        }\r\n        return '';\r\n      };\r\n      \r\n      // Fuentes de datos priorizadas\r\n      const dataSources = [\r\n        allProfileData,\r\n        allProfileData.lovendaProfile,\r\n        allProfileData.weddingInfo,\r\n        allProfileData.ceremonyInfo,\r\n        allProfileData.weddingConfig\r\n      ];\r\n      \r\n      // MEJORA: Extracción más completa de ubicaciones con prioridad al perfil\r\n      // Intentar obtener directamente desde weddingInfo que es donde se guarda en el formulario del perfil\r\n      let locationInfo = '';\r\n      \r\n      // Verificar si tenemos datos directos del perfil\r\n      if (allProfileData.weddingInfo && allProfileData.weddingInfo.celebrationPlace) {\r\n        locationInfo = allProfileData.weddingInfo.celebrationPlace;\r\n        console.log('Ubicación encontrada directamente en weddingInfo:', locationInfo);\r\n      } else {\r\n        // Buscar en otras fuentes si no está directamente disponible\r\n        locationInfo = extractDataFromMultipleSources(\r\n          dataSources, \r\n          ['ceremonyLocation', 'ceremonyPlace', 'location', 'celebrationPlace', 'lugar', 'ciudad', 'province']\r\n        );\r\n        console.log('Ubicación encontrada en fuentes alternativas:', locationInfo);\r\n      }\r\n      \r\n      // Si aún no tenemos ubicación, usar Valencia como respaldo\r\n      if (!locationInfo) {\r\n        locationInfo = 'Valencia, Comunidad Valenciana';\r\n        console.log('Usando ubicación predeterminada (fallback): Valencia');\r\n      }\r\n      \r\n      // Si la ubicación es un objeto, intentamos extraer el nombre\r\n      const getLocationName = (location) => {\r\n        if (typeof location === 'object' && location !== null) {\r\n          return location.name || location.ciudad || location.province || \r\n                 location.address || location.texto || JSON.stringify(location);\r\n        }\r\n        return location;\r\n      };\r\n      \r\n      // Procesamos la información de ubicación\r\n      const formattedLocation = getLocationName(locationInfo) || 'Valencia';  // Usar Valencia como respaldo final\r\n      \r\n      // MEJORA: Extracción más detallada del resto de datos\r\n      const receptionInfo = getLocationName(\r\n        extractDataFromMultipleSources(dataSources, \r\n          ['receptionLocation', 'banquetPlace', 'banquete', 'lugarBanquete', 'salonBanquete']\r\n        )\r\n      ) || '';\r\n      \r\n      const weddingDate = extractDataFromMultipleSources(dataSources, \r\n        ['weddingDate', 'date', 'fecha', 'fechaBoda', 'ceremonyDate']\r\n      ) || '';\r\n      \r\n      const weddingStyle = extractDataFromMultipleSources(dataSources, \r\n        ['style', 'estilo', 'themeStyle', 'temaBoda', 'estiloDecoracion']\r\n      ) || '';\r\n      \r\n      const numGuests = extractDataFromMultipleSources(dataSources, \r\n        ['numGuests', 'guests', 'invitados', 'numeroInvitados', 'totalInvitados']\r\n      ) || '';\r\n      \r\n      // Mejor extracción de nombres\r\n      const brideName = extractDataFromMultipleSources(dataSources, \r\n        ['brideName', 'novia', 'brideInfo.name', 'bride.name']\r\n      ) || '';\r\n      \r\n      const groomName = extractDataFromMultipleSources(dataSources, \r\n        ['groomName', 'novio', 'groomInfo.name', 'groom.name']\r\n      ) || '';\r\n      \r\n      const coupleName = extractDataFromMultipleSources(dataSources, ['coupleName']) || \r\n                       (brideName && groomName ? `${brideName} y ${groomName}` : \r\n                        brideName || groomName || '');\r\n      \r\n      // MEJORA: Categorías para bodas.net más detalladas y precisas\r\n      const bodasNetCategories = {\r\n        'Catering': 'banquetes',\r\n        'Fotografía': 'fotografia',\r\n        'Música': 'musica-y-entretenimiento',\r\n        'Flores': 'decoracion-y-flores',\r\n        'Decoración': 'decoracion-y-flores',\r\n        'Vestidos': 'vestidos-de-novia',\r\n        'Trajes': 'trajes-de-novio',\r\n        'Transporte': 'coche-para-bodas',\r\n        'Invitaciones': 'invitaciones-de-boda',\r\n        'Pasteles': 'tartas-y-dulces-de-boda',\r\n        'Joyería': 'joyeria',\r\n        'Detalles': 'detalles-de-boda',\r\n        'Animación': 'musica-y-entretenimiento',\r\n        // Categorías adicionales\r\n        'Fincas': 'fincas-bodas',\r\n        'Hoteles': 'hoteles-bodas',\r\n        'Wedding Planner': 'wedding-planners',\r\n        'Belleza': 'belleza-para-novias',\r\n        'Maquillaje': 'belleza-para-novias',\r\n        'Peluquería': 'belleza-para-novias',\r\n        'Luna de miel': 'viajes-de-novios',\r\n        'Video': 'video-de-boda'\r\n      };\r\n      \r\n      // MEJORA: Determinar categoría para bodas.net de forma más precisa\r\n      const getBodasNetCategory = (service) => {\r\n        if (!service) return '';\r\n        \r\n        // Normalizar el servicio para comparar (sin tildes, en minúsculas)\r\n        const normalizedService = service.toLowerCase()\r\n          .normalize(\"NFD\")\r\n          .replace(/[\\u0300-\\u036f]/g, \"\");\r\n        \r\n        // Buscar coincidencias parciales si no hay exactas\r\n        for (const [key, value] of Object.entries(bodasNetCategories)) {\r\n          const normalizedKey = key.toLowerCase()\r\n            .normalize(\"NFD\")\r\n            .replace(/[\\u0300-\\u036f]/g, \"\");\r\n            \r\n          if (normalizedService === normalizedKey || \r\n              normalizedService.includes(normalizedKey) || \r\n              normalizedKey.includes(normalizedService)) {\r\n            return value;\r\n          }\r\n        }\r\n        \r\n        // Si no hay coincidencia, devolver el servicio original normalizado\r\n        return service.toLowerCase().replace(/ /g, '-');\r\n      };\r\n      \r\n      // Construir búsqueda para bodas.net con lugar si está disponible\r\n      const bodasNetCategory = getBodasNetCategory(servicioSeleccionado);\r\n      \r\n      // MEJORA: Consulta más optimizada para bodas.net\r\n      let bodasNetQuery = `bodas.net ${bodasNetCategory}`;\r\n      \r\n      // Añadir ubicación si está disponible\r\n      if (formattedLocation) {\r\n        // Extraer solo la ciudad o provincia para búsqueda más precisa\r\n        const locationParts = formattedLocation.split(',');\r\n        const searchLocation = locationParts[0].trim();\r\n        bodasNetQuery += ` en ${searchLocation}`;\r\n      }\r\n      \r\n      // Añadir términos de búsqueda si hay\r\n      if (aiQuery) {\r\n        bodasNetQuery += ` ${aiQuery}`;\r\n      }\r\n      \r\n      // Siempre priorizar ubicación como requisito clave\r\n      if (formattedLocation) {\r\n        // Reforzar que la búsqueda es específicamente en esa ubicación\r\n        const locationParts = formattedLocation.split(',');\r\n        const mainLocation = locationParts[0]; // Ciudad principal (ej: Valencia)\r\n        \r\n        // Añadir al final para enfatizarlo\r\n        bodasNetQuery += ` ubicados en ${mainLocation}`;\r\n      }\r\n      \r\n      // MEJORA: Contextualización del presupuesto más precisa\r\n      const getBudgetContext = () => {\r\n        if (!budgetRange) return '';\r\n        \r\n        if (budgetRange.includes('<') || budgetRange.includes('menos')) {\r\n          return 'económico y de bajo coste';\r\n        } else if (budgetRange.includes('>') || budgetRange.includes('más')) {\r\n          return 'premium y de alta gama';\r\n        } else if (budgetRange.includes('–') || budgetRange.includes('-')) {\r\n          // Extraer números del rango para ser más específico\r\n          const numbers = budgetRange.match(/\\d+(\\.\\d+)?/g);\r\n          if (numbers && numbers.length >= 2) {\r\n            return `con precio medio entre ${numbers[0]}€ y ${numbers[1]}€`;\r\n          }\r\n          return 'con precio medio';\r\n        }\r\n        return budgetRange;\r\n      };\r\n      \r\n      const budgetContext = getBudgetContext();\r\n      \r\n      // MEJORA: Información adicional para enriquecer la búsqueda\r\n      const additionalInfo = [];\r\n      \r\n      // Añadir estilo si está disponible\r\n      if (weddingStyle) {\r\n        additionalInfo.push(`Estilo de boda: ${weddingStyle}`);\r\n      }\r\n      \r\n      // Añadir temporada basada en la fecha\r\n      if (weddingDate) {\r\n        try {\r\n          const date = new Date(weddingDate);\r\n          const month = date.getMonth() + 1;\r\n          let season = '';\r\n          \r\n          if (month >= 3 && month <= 5) season = 'primavera';\r\n          else if (month >= 6 && month <= 8) season = 'verano';\r\n          else if (month >= 9 && month <= 11) season = 'otoño';\r\n          else season = 'invierno';\r\n          \r\n          additionalInfo.push(`Temporada: ${season}`);\r\n        } catch {}\r\n      }\r\n      \r\n      // Añadir tamaño de evento basado en invitados\r\n      if (numGuests) {\r\n        let size = '';\r\n        const guests = parseInt(numGuests);\r\n        \r\n        if (!isNaN(guests)) {\r\n          if (guests <= 50) size = 'pequeña';\r\n          else if (guests <= 120) size = 'mediana';\r\n          else size = 'grande';\r\n          \r\n          additionalInfo.push(`Tamaño del evento: boda ${size} (${guests} invitados)`);\r\n        }\r\n      }\r\n      \r\n      // MEJORA: Prompt muchísimo más estructurado y enfocado con ÉNFASIS EN UBICACIÓN\r\n      const prompt = `Como experto en planificación de bodas en España, necesito que busques específicamente ${servicioSeleccionado.toUpperCase()} EXCLUSIVAMENTE EN LA ZONA DE ${formattedLocation ? formattedLocation.toUpperCase() : 'ESPAÑA'} para una boda${aiQuery ? ': ' + aiQuery : '.'}\r\n\r\n  ========== UBICACIÓN PRIORITARIA ==========\r\n  LA UBICACIÓN ES EL CRITERIO MÁS IMPORTANTE. TODOS LOS PROVEEDORES DEBEN:\r\n  - Operar directamente en ${formattedLocation || 'la ubicación indicada'}, O\r\n  - Ofrecer servicio de desplazamiento EXPLÍCITAMENTE a ${formattedLocation ? formattedLocation.split(',')[0] : 'la ubicación'}\r\n  Los proveedores deben poder GARANTIZAR cobertura en ${formattedLocation ? formattedLocation.split(',')[0] : 'la zona'}\r\n  \r\n  ========== DATOS DE LA BODA ==========\r\n  - Ubicación ceremonia: ${formattedLocation || 'Sin especificar'}\r\n  - Ubicación banquete: ${receptionInfo || (formattedLocation ? 'Misma que ceremonia' : 'Sin especificar')}\r\n  - Fecha: ${weddingDate || 'Sin especificar'}\r\n  - Estilo: ${weddingStyle || 'Sin especificar'}\r\n  - Número de invitados: ${numGuests || 'Sin especificar'}\r\n  - Nombre pareja: ${coupleName || 'Sin especificar'}\r\n  - Presupuesto: ${budgetRange || 'Sin especificar'} ${budgetContext ? '(' + budgetContext + ')' : ''}\r\n  ${additionalInfo.length > 0 ? '- ' + additionalInfo.join('\\n  - ') : ''}\r\n\r\n  ========== REQUISITOS ESPECÍFICOS ==========\r\n  1. PRIORIZA ABSOLUTAMENTE RESULTADOS DE BODAS.NET Y WEBS ESPAÑOLAS ESPECIALIZADAS EN BODAS.\r\n  2. La búsqueda principal que debes usar es: \"${bodasNetQuery}\"\r\n  3. CADA RESULTADO DEBE SER ESPECÍFICAMENTE DE ${servicioSeleccionado.toUpperCase()}, no incluyas otros servicios.\r\n  4. CADA RESULTADO DEBE OPERAR O DESPLAZARSE A ${formattedLocation ? formattedLocation.split(',')[0].toUpperCase() : 'LA UBICACIÓN INDICADA'}\r\n  5. Asegúrate de que cada resultado tenga un enlace a la página web oficial del proveedor, donde ofrezca directamente sus servicios.\r\n  6. Si no tiene página web oficial propia, utiliza un enlace donde ofrezca sus servicios directamente (como su perfil en bodas.net o zankyou.es).\r\n  7. Evita enlaces a agregadores genéricos donde el proveedor solo aparece en un listado.\r\n  8. Verifica que el enlace sea actual y operativo.\r\n  9. CADA RESULTADO DEBE INCLUIR LA UBICACIÓN EXACTA DEL PROVEEDOR Y SU POLÍTICA DE DESPLAZAMIENTO a ${formattedLocation || 'la ubicación de la boda'}\r\n  10. El rango de precios debe ser específico o una tarifa aproximada.\r\n  11. Ordena los resultados por relevancia geográfica: primero los que están exactamente en ${formattedLocation ? formattedLocation.split(',')[0] : 'la ubicación'}, luego los que están cerca y ofrecen desplazamiento.\r\n  12. Incluye valoraciones o reseñas si están disponibles.\r\n\r\n  ========== FORMATO DE RESPUESTA ==========\r\n  Proporciona 5-7 resultados de máxima calidad y relevancia. ASEGÚRATE QUE TODOS:\r\n  1. Son ESPECÍFICAMENTE ${servicioSeleccionado.toUpperCase()}\r\n  2. Operan en ${formattedLocation ? formattedLocation.toUpperCase() : 'LA UBICACIÓN'} o se desplazan allí\r\n  3. Tienen enlaces verificables y directos\r\n  4. Incluyen datos de precios y ubicación específicos\r\n  \r\n  Responde en formato JSON con los siguientes campos por proveedor:\r\n  - name: Nombre del proveedor\r\n  - title: Título descriptivo\r\n  - service: Tipo de servicio (${servicioSeleccionado})\r\n  - link: URL oficial directa\r\n  - snippet: Descripción con detalles clave\r\n  - priceRange: Rango de precios\r\n  - location: Ubicación y política de desplazamiento\r\n  - coverage: Área geográfica atendida (INCLUIR EXPLÍCITAMENTE ${formattedLocation ? formattedLocation.split(',')[0] : 'la ubicación requerida'})`;\r\n      \r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_KEY}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4o',\r\n          messages: [\r\n            { \r\n              role: 'system', \r\n              content: `Eres un asistente especializado en búsqueda de proveedores para bodas en España, especialmente de ${servicioSeleccionado}. Tu tarea es encontrar los proveedores más relevantes según las necesidades específicas del usuario. DEBES PRIORIZAR RESULTADOS DE BODAS.NET y asegurarte de que todos los proveedores sean ESPECÍFICAMENTE del servicio solicitado (${servicioSeleccionado}). ÚNICAMENTE DEBES INCLUIR PROVEEDORES QUE OPEREN EN LA UBICACIÓN ESPECIFICADA (${formattedLocation || 'España'}) o que ofrezcan desplazamiento a esta ubicación. Cada resultado debe incluir una URL válida y datos precisos.`\r\n            },\r\n            { role: 'user', content: prompt }\r\n          ],\r\n          temperature: 0.3 // Temperatura más baja para mayor precisión y adherencia al tipo de servicio\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        // Manejo mejorado para diferentes códigos de error HTTP\r\n        if (response.status === 401) {\r\n          throw new Error('Error de autenticación: La clave API de OpenAI no es válida o ha expirado');\r\n        } else if (response.status === 429) {\r\n          throw new Error('Límite de solicitudes excedido: Demasiadas búsquedas en poco tiempo');\r\n        } else if (response.status >= 500) {\r\n          throw new Error('Error en los servidores de OpenAI: Intenta de nuevo más tarde');\r\n        } else {\r\n          throw new Error(`Error en la llamada a OpenAI (${response.status}): ${response.statusText}`);\r\n        }\r\n      }\r\n      \r\n      // Verificar que la respuesta de OpenAI tenga el formato esperado\r\n      const data = await response.json();\r\n      \r\n      if (!data.choices || data.choices.length === 0) {\r\n        throw new Error('No se recibió respuesta válida de OpenAI');\r\n      }\r\n      \r\n      let results = [];\r\n      \r\n      try {\r\n        // Verificar que la respuesta contiene el mensaje esperado\r\n        if (!data.choices[0].message || !data.choices[0].message.content) {\r\n          throw new Error('Formato de respuesta inválido');\r\n        }\r\n        \r\n        // Intentar extraer los resultados del texto de respuesta\r\n        const content = data.choices[0].message.content;\r\n        \r\n        // Detectar si la respuesta contiene un mensaje de error explícito\r\n        if (content.toLowerCase().includes('error') && content.length < 150) {\r\n          throw new Error(`Error reportado por OpenAI: ${content}`);\r\n        }\r\n        \r\n        // Intentar extraer JSON de la respuesta con estrategias múltiples\r\n        console.log('Procesando respuesta de OpenAI para extraer JSON...');\r\n        \r\n        // Estrategia 1: Buscar bloques de código JSON marcados con ```json\r\n        let jsonMatches = content.match(/```json\\s*([\\s\\S]+?)\\s*```/);\r\n        \r\n        // Estrategia 2: Buscar cualquier bloque de código\r\n        if (!jsonMatches) {\r\n          jsonMatches = content.match(/```\\s*([\\s\\S]+?)\\s*```/);\r\n          console.log('Usando estrategia 2: Bloque de código general');\r\n        }\r\n        \r\n        // Estrategia 3: Buscar array directamente en el texto [...]\r\n        if (!jsonMatches) {\r\n          const arrayMatch = content.match(/\\[\\s*\\{[\\s\\S]*\\}\\s*\\]/);\r\n          if (arrayMatch) {\r\n            jsonMatches = [null, arrayMatch[0]];\r\n            console.log('Usando estrategia 3: Encontrado array directo en el texto');\r\n          }\r\n        }\r\n        \r\n        // Estrategia 4: Si todo falla, intentar con el texto completo\r\n        if (!jsonMatches) {\r\n          jsonMatches = [null, content.trim()];\r\n          console.log('Usando estrategia 4: Texto completo');\r\n        }\r\n        \r\n        if (!jsonMatches || !jsonMatches[1]) {\r\n          console.error('No se pudo extraer JSON de la respuesta');\r\n          throw new Error('No se pudo extraer JSON de la respuesta');\r\n        }\r\n        \r\n        // Intentar analizar el JSON con manejo de errores mejorado\r\n        let allResults = [];\r\n        try {\r\n          const jsonText = jsonMatches[1].trim();\r\n          console.log('Texto JSON a parsear (primeros 100 caracteres):', \r\n                     jsonText.length > 100 ? jsonText.substring(0, 100) + '...' : jsonText);\r\n          \r\n          // Intenta parsear directamente\r\n          allResults = JSON.parse(jsonText);\r\n          \r\n        } catch (jsonError) {\r\n          console.error('Error en el primer intento de parseo JSON:', jsonError);\r\n          \r\n          try {\r\n            // Estrategia de respaldo: buscar corchetes de apertura/cierre de un array\r\n            const startIdx = jsonMatches[1].indexOf('[');\r\n            const endIdx = jsonMatches[1].lastIndexOf(']');\r\n            \r\n            if (startIdx !== -1 && endIdx !== -1 && startIdx < endIdx) {\r\n              const arrayText = jsonMatches[1].substring(startIdx, endIdx + 1);\r\n              console.log('Intentando parsear subconjunto como array:', \r\n                         arrayText.length > 100 ? arrayText.substring(0, 100) + '...' : arrayText);\r\n              allResults = JSON.parse(arrayText);\r\n            } else {\r\n              throw new Error('No se encontró estructura de array en la respuesta');\r\n            }\r\n          } catch (subError) {\r\n            // Último intento: crear un resultado manual basado en el texto\r\n            console.warn('Creando resultado manual basado en el texto de respuesta');\r\n            \r\n            // Extraer frases que parezcan nombres de proveedores (primera letra mayúscula, más de 3 palabras)\r\n            const lines = content.split('\\n');\r\n            const providerCandidates = lines.filter(line => \r\n              line.trim().length > 10 && \r\n              /^[A-Z]/.test(line.trim()) && \r\n              line.split(' ').length >= 3 &&\r\n              !line.trim().startsWith('```')\r\n            );\r\n            \r\n            if (providerCandidates.length > 0) {\r\n              allResults = providerCandidates.map((line, index) => ({\r\n                title: line.trim().split(':')[0] || `Proveedor ${index + 1}`,\r\n                name: line.trim().split(':')[0] || `Proveedor ${index + 1}`,\r\n                link: `https://www.bodas.net/busqueda/${servicioSeleccionado.toLowerCase().replace(/\\s+/g, '-')}-${formattedLocation ? formattedLocation.split(',')[0].toLowerCase() : 'espana'}`,\r\n                snippet: line,\r\n                service: servicioSeleccionado,\r\n                location: formattedLocation || 'España',\r\n                priceRange: 'Consultar',\r\n                verified: true\r\n              }));\r\n              console.log(`Creados ${allResults.length} resultados manuales basados en el texto`);\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Verificar que results es un array\r\n        if (!Array.isArray(allResults)) {\r\n          \r\n          console.log(`Ciudad: ${mainLocation}, Región: ${region || 'no especificada'}, País: ${country}`);\r\n          \r\n          // Crear términos de ubicación relevantes basados en los datos del perfil\r\n          // Esto es dinámico según la ubicación real del usuario, no hardcodeado a Valencia\r\n          const locationRelatedTerms = [\r\n            mainLocation,            // Ciudad principal\r\n            region ? region.toLowerCase() : '',  // Región/provincia si está disponible\r\n            country,                 // País\r\n            region ? `provincia de ${region.toLowerCase()}` : '',  // Formato alternativo de provincia\r\n            'nacional',              // Ámbito nacional\r\n            'toda españa',           // Todo el país\r\n            'desplazamiento',        // Indica que se desplazan\r\n            'online',                // Servicios remotos/online\r\n          ].filter(Boolean); // Eliminar valores vacíos\r\n          \r\n          console.log('Términos de ubicación para búsqueda:', locationRelatedTerms);\r\n\r\n          // Función para evaluar la relevancia de ubicación (0-10)\r\n          // Un número más alto indica mejor coincidencia con la ubicación\r\n          const getLocationRelevance = (item) => {\r\n            let relevance = 0;\r\n            let locationText = '';\r\n            \r\n            // Combinar textos relevantes para buscar referencias a la ubicación\r\n            if (item.location) locationText += ' ' + item.location.toLowerCase();\r\n            if (item.snippet) locationText += ' ' + item.snippet.toLowerCase();\r\n            if (item.title) locationText += ' ' + item.title.toLowerCase();\r\n            if (item.description) locationText += ' ' + item.description.toLowerCase();\r\n            \r\n            // Dar puntuación según coincidencia de ubicación\r\n            if (locationText.includes(mainLocation)) relevance += 5; // Coincidencia directa con ciudad\r\n            if (region && locationText.includes(region.toLowerCase())) relevance += 3; // Coincidencia con región\r\n            if (locationText.includes(country)) relevance += 1; // Coincidencia con país\r\n            \r\n            // Bonificación por exactitud\r\n            if (new RegExp(`\\\\b${mainLocation}\\\\b`).test(locationText)) relevance += 2; // Palabra completa\r\n            \r\n            // Desplazamiento explícito a la ubicación\r\n            if ((locationText.includes('desplaza') || locationText.includes('cobertur')) && \r\n                 locationText.includes(mainLocation)) relevance += 4;\r\n            \r\n            // Penalización si no hay ninguna mención de ubicación\r\n            if (!locationRelatedTerms.some(term => locationText.includes(term))) relevance -= 2;\r\n            \r\n            return relevance;\r\n          };\r\n          \r\n          // Clasificar TODOS los resultados por relevancia de ubicación\r\n          const scoredResults = allResults.map(item => ({\r\n            ...item,\r\n            locationRelevance: getLocationRelevance(item)\r\n          }));\r\n          \r\n          // Separar en dos grupos: altamente relevantes y menos relevantes\r\n          const highRelevance = scoredResults.filter(item => item.locationRelevance >= 3);\r\n          const lowRelevance = scoredResults.filter(item => item.locationRelevance < 3);\r\n          \r\n          // Ordenar cada grupo por su relevancia\r\n          highRelevance.sort((a, b) => b.locationRelevance - a.locationRelevance);\r\n          lowRelevance.sort((a, b) => b.locationRelevance - a.locationRelevance);\r\n          \r\n          console.log(`Clasificación por ubicación: ${highRelevance.length} resultados altamente relevantes, ${lowRelevance.length} menos relevantes`);\r\n          \r\n          // Combinar resultados, priorizando los de alta relevancia\r\n          results = [...highRelevance, ...lowRelevance];\r\n          \r\n          // Si no hay resultados de alta relevancia pero sí hay de baja, mostrar un mensaje\r\n          if (highRelevance.length === 0 && lowRelevance.length > 0) {\r\n            console.log(`No se encontraron coincidencias óptimas para ${mainLocation}, mostrando alternativas`);\r\n            setToast({ \r\n              message: `No se encontraron proveedores específicos en ${mainLocation}. Mostrando alternativas que podrían desplazarse.`, \r\n              type: 'info' \r\n            });\r\n          }\r\n          \r\n          // Si no hay resultados en absoluto, usar todos (caso extremo)\r\n          if (results.length === 0) {\r\n            console.log('No se encontraron coincidencias de ubicación, usando todos los resultados');\r\n            results = allResults;\r\n            setToast({ \r\n              message: `No se encontraron proveedores para ${mainLocation}. Mostrando resultados generales.`, \r\n              type: 'warning' \r\n            });\r\n          }\r\n        } else {\r\n          results = allResults;\r\n        }\r\n        \r\n        // Asegurarse de que cada resultado tenga al menos title y link\r\n        let validResults = results.filter(r => r && typeof r === 'object');\r\n        \r\n        // Normalizar y reparar resultados, en vez de descartarlos\r\n        validResults = validResults.map(r => ({\r\n          ...r,\r\n          title: r.title || r.name || 'Proveedor sin nombre',\r\n          link: r.link || `https://www.bodas.net/busqueda/${(r.service || servicioSeleccionado || '').toLowerCase().replace(/\\s+/g, '-')}-${formattedLocation ? formattedLocation.split(',')[0].toLowerCase() : 'espana'}`,\r\n          snippet: r.snippet || 'Sin descripción disponible',\r\n          service: r.service || servicioSeleccionado,\r\n          location: r.location || formattedLocation || 'España',\r\n          priceRange: r.priceRange || 'Consultar',\r\n          verified: true // Marcar todos como verificados para evitar filtrado\r\n        }));\r\n        \r\n        console.log(`Normalización de resultados: ${validResults.length} resultados normalizados`);\r\n        \r\n        if (validResults.length === 0 && results.length > 0) {\r\n          console.warn('No hay resultados válidos después de normalizar, creando respaldo');\r\n          // Crear un resultado de respaldo para evitar que no haya resultados\r\n          validResults = [{\r\n            title: 'Directorio de proveedores para bodas',\r\n            link: `https://www.bodas.net/busqueda/${servicioSeleccionado.toLowerCase().replace(/\\s+/g, '-')}-${formattedLocation ? formattedLocation.split(',')[0].toLowerCase() : 'espana'}`,\r\n            snippet: `Encuentra proveedores de ${servicioSeleccionado} en ${formattedLocation || 'toda España'}`,\r\n            service: servicioSeleccionado,\r\n            location: formattedLocation || 'España',\r\n            priceRange: 'Varios precios disponibles',\r\n            verified: true\r\n          }];\r\n        }\r\n        \r\n        results = validResults;\r\n        \r\n        // Ordenar enlaces por calidad y relevancia (pero ser menos estricto)\r\n        results.sort((a, b) => {\r\n          // Función para puntuar la calidad del enlace\r\n          const getLinkScore = (item) => {\r\n            if (!item || !item.link) return 0;\r\n            const link = item.link.toLowerCase();\r\n            \r\n            // Enlaces probablemente oficiales (dominio propio)\r\n            if (!link.includes('bodas.net') && \r\n                !link.includes('zankyou') && \r\n                !link.includes('matrimonio.com') && \r\n                !link.includes('facebook.com') && \r\n                !link.includes('instagram.com') && \r\n                link.includes('.')) {\r\n              return 5; // Probablemente web oficial\r\n            }\r\n            \r\n            // Perfiles en plataformas de bodas\r\n            else if (link.includes('bodas.net') || \r\n                     link.includes('zankyou.es') || \r\n                     link.includes('matrimonio.com')) {\r\n              return 4; // Plataforma especializada\r\n            }\r\n            \r\n            // Redes sociales\r\n            else if (link.includes('facebook.com') || \r\n                     link.includes('instagram.com')) {\r\n              return 3; // Red social\r\n            }\r\n            \r\n            // Otros enlaces\r\n            return 1;\r\n          };\r\n          \r\n          return getLinkScore(b) - getLinkScore(a); // Mayor puntuación primero\r\n        });\r\n        \r\n        if (results.length > 0) {\r\n          // Mostrar los resultados en el modal solo si hay resultados\r\n          setAiResults(results);\r\n          setShowAiModal(true);\r\n          saveData('lovendaSuppliers', results, {\r\n            collection: 'userSuppliers',\r\n            showNotification: false\r\n          });\r\n          window.dispatchEvent(new Event('lovenda-suppliers'));\r\n        } else {\r\n          setToast({ \r\n            message: 'No se encontraron proveedores que coincidan con tu búsqueda. Intenta con otros términos o servicio.', \r\n            type: 'info' \r\n          });\r\n        }\r\n      } catch (parseError) {\r\n        console.error('Error al procesar la respuesta de OpenAI:', parseError);\r\n        console.log('Contenido recibido:', data.choices[0].message?.content || 'Contenido no disponible');\r\n        \r\n        // Mensaje más específico según el tipo de error\r\n        if (parseError.message.includes('JSON')) {\r\n          setToast({ \r\n            message: 'Error al procesar la respuesta: formato inválido. Intenta de nuevo o con otra búsqueda.', \r\n            type: 'error' \r\n          });\r\n        } else {\r\n          setToast({ \r\n            message: `Error al procesar los resultados: ${parseError.message}`, \r\n            type: 'error' \r\n          });\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error en la búsqueda de proveedores:', err);\r\n      \r\n      // Mensaje de error más específico según el tipo de error\r\n      if (err.message.includes('autenticación') || err.message.includes('API')) {\r\n        setToast({ \r\n          message: 'Error de autenticación en la API. Por favor, contacta con soporte.', \r\n          type: 'error' \r\n        });\r\n      } else if (err.message.includes('Límite')) {\r\n        setToast({ \r\n          message: 'Has excedido el límite de búsquedas. Espera unos minutos e intenta de nuevo.', \r\n          type: 'warning' \r\n        });\r\n      } else if (err.message.includes('red') || err.message.includes('conexión') || err.message.includes('network')) {\r\n        setToast({ \r\n          message: 'Error de conexión. Verifica tu conexión a internet e intenta de nuevo.', \r\n          type: 'error' \r\n        });\r\n      } else {\r\n        setToast({ \r\n          message: 'Error al buscar proveedores con IA. Intenta de nuevo más tarde.', \r\n          type: 'error' \r\n        });\r\n      }\r\n    } finally {\r\n      setAiLoading(false);\r\n    }\r\n  };\r\n\r\n  const openDetail = p => { setDetailProvider(p); setShowDetail(true); };\r\n  const sendMailToProvider = async () => {\r\n    if (!detailProvider?.email) { \r\n      setToast({ message: 'El proveedor no tiene email disponible', type: 'error' }); \r\n      return; \r\n    }\r\n    \r\n    // Obtener información del perfil para personalizar el mensaje\r\n    let profileInfo = {};\r\n    try {\r\n      profileInfo = await loadData('lovendaProfile', {});\r\n    } catch (err) {\r\n      console.warn('No se pudo cargar la información del perfil para el correo:', err);\r\n    }\r\n    \r\n    // Construir los nombres de la pareja\r\n    const bride = profileInfo.bride?.name || profileInfo.nombre1 || 'Novia';\r\n    const groom = profileInfo.groom?.name || profileInfo.nombre2 || 'Novio';\r\n    const weddingDate = profileInfo.date || profileInfo.weddingInfo?.date || 'fecha por determinar';\r\n    \r\n    // Crear plantilla de correo personalizada\r\n    const emailBody = `Hola ${detailProvider.contact || ''}:\r\n\r\nSomos ${bride} y ${groom}, estamos organizando nuestra boda para el ${weddingDate} ${profileInfo.celebrationPlace ? `en ${profileInfo.celebrationPlace}` : ''} y estamos interesados en sus servicios de ${detailProvider.service || 'proveedor'}.\r\n\r\n¿Podría proporcionarnos información sobre sus servicios, disponibilidad para esa fecha y precios aproximados?\r\n\r\nMuchas gracias de antemano.\r\n\r\nSaludos cordiales,\r\n${bride} y ${groom}`;\r\n    \r\n    // Disparar evento global para abrir redacción en Buzón con plantilla\r\n    window.dispatchEvent(new CustomEvent('lovenda-compose', { \r\n      detail: { \r\n        to: detailProvider.email, \r\n        subject: `Consulta sobre servicios de ${detailProvider.service || ''} para boda - ${detailProvider.name}`,\r\n        body: emailBody\r\n      } \r\n    }));\r\n    \r\n    // Registrar este proveedor como contactado y añadir la comunicación al historial\r\n    const currentDate = new Date();\r\n    const dateStr = currentDate.toISOString();\r\n    const formattedDate = dateStr.split('T')[0];\r\n    \r\n    const newCommunication = {\r\n      date: dateStr,\r\n      type: 'Email enviado',\r\n      subject: `Consulta sobre servicios de ${detailProvider.service || ''} para boda`,\r\n      content: emailBody.substring(0, 100) + '...' // Resumen del contenido\r\n    };\r\n    \r\n    const updatedProviders = providers.map(p => {\r\n      if (p.id === detailProvider.id) {\r\n        // Añadir comunicación al historial (crear array si no existe)\r\n        const communications = p.communications ? [...p.communications, newCommunication] : [newCommunication];\r\n        \r\n        return {\r\n          ...p, \r\n          status: 'Contactado', \r\n          lastContactDate: formattedDate,\r\n          communications: communications\r\n        };\r\n      }\r\n      return p;\r\n    });\r\n    \r\n    // Actualizar estado y guardar en localStorage\r\n    setProviders(updatedProviders);\r\n    saveData('providers', updatedProviders);\r\n    \r\n    // Actualizar el proveedor en detalle para mostrar la comunicación inmediatamente\r\n    if (detailProvider) {\r\n      const communications = detailProvider.communications ? [...detailProvider.communications, newCommunication] : [newCommunication];\r\n      setDetailProvider({\r\n        ...detailProvider,\r\n        status: 'Contactado',\r\n        lastContactDate: formattedDate,\r\n        communications: communications\r\n      });\r\n    }\r\n    \r\n    // Crear o actualizar registro de seguimiento para este proveedor\r\n    const emailData = {\r\n      id: `email-${Date.now()}`,\r\n      to: detailProvider.email,\r\n      subject: `Consulta sobre servicios de ${detailProvider.service || ''} para boda - ${detailProvider.name}`,\r\n      body: emailBody,\r\n      date: new Date()\r\n    };\r\n    \r\n    // Crear registro de seguimiento automáticamente al enviar email\r\n    createTrackingRecord(emailData, detailProvider);\r\n    setTrackingRecords(loadTrackingRecords());\r\n    \r\n    // Notificar al usuario que la funcionalidad está temporalmente no disponible\r\n    alert('Funcionalidad de buzón temporalmente no disponible');\r\n    setShowDetail(false);\r\n  };\r\n\r\n  // Gestionar el seguimiento del proveedor\r\n  const handleProviderTracking = () => {\r\n    if (!detailProvider) return;\r\n    \r\n    // Buscar si ya existe un seguimiento para este proveedor\r\n    const existingTracking = trackingRecords.find(record => \r\n      record.providerEmail === detailProvider.email || record.providerId === detailProvider.id\r\n    );\r\n    \r\n    if (existingTracking) {\r\n      // Si ya existe un seguimiento, mostrarlo\r\n      setCurrentTracking(existingTracking);\r\n      setShowTrackingModal(true);\r\n    } else {\r\n      // Si no existe, crear uno nuevo\r\n      const dummyEmail = {\r\n        id: `dummy-${Date.now()}`,\r\n        to: detailProvider.email,\r\n        subject: `Seguimiento de ${detailProvider.service || 'proveedor'} - ${detailProvider.name}`,\r\n        body: `Seguimiento automático creado para ${detailProvider.name}`,\r\n        date: new Date()\r\n      };\r\n      \r\n      const newTracking = createTrackingRecord(dummyEmail, detailProvider);\r\n      setCurrentTracking(newTracking);\r\n      setTrackingRecords(loadTrackingRecords());\r\n      setShowTrackingModal(true);\r\n    }\r\n  };\r\n  \r\n  // Actualizar estado de seguimiento\r\n  const updateTrackingStatusHandler = (recordId, newStatus) => {\r\n    updateTrackingStatus(recordId, newStatus);\r\n    setTrackingRecords(loadTrackingRecords());\r\n    setCurrentTracking(prev => prev && prev.id === recordId ? \r\n      {...prev, status: newStatus} : prev);\r\n    \r\n    setToast({ \r\n      message: `Estado de seguimiento actualizado a \"${newStatus}\"`, \r\n      type: 'success' \r\n    });\r\n  };\r\n  \r\n  // Sincronizar emails del buzón para un proveedor específico\r\n  const syncProviderEmails = (provider) => {\r\n    if (!provider || !provider.email) {\r\n      setToast({ message: 'Este proveedor no tiene email para sincronizar', type: 'warning' });\r\n      return;\r\n    }\r\n    \r\n    setIsSyncingEmails(true);\r\n    setSyncedEmails([]);\r\n    \r\n    // Cargar emails del localStorage (simulación de búsqueda en buzón)\r\n    setTimeout(() => {\r\n      try {\r\n        // En una implementación real, esta función buscaría en el buzón por remitente/destinatario\r\n        const allEmails = loadData('emails', { defaultValue: [] });\r\n        \r\n        // Filtrar por emails que coincidan con el email del proveedor\r\n        const relatedEmails = allEmails.filter(email => {\r\n          const isRelated = (\r\n            // Es el remitente o está entre los destinatarios\r\n            email.from?.includes(provider.email) ||\r\n            email.to?.includes(provider.email) ||\r\n            // O contiene el nombre del proveedor en el asunto\r\n            (email.subject && provider.name && \r\n             email.subject.toLowerCase().includes(provider.name.toLowerCase()))\r\n          );\r\n          return isRelated;\r\n        });\r\n        \r\n        // Formatear emails para mostrar\r\n        const formattedEmails = relatedEmails.map(email => ({\r\n          id: email.id || `email-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n          subject: email.subject || '(Sin asunto)',\r\n          snippet: email.body?.substring(0, 100) || '',\r\n          date: email.date || new Date(),\r\n          direction: email.from?.includes('@midominio.com') ? 'outgoing' : 'incoming',\r\n          from: email.from || '',\r\n          to: email.to || '',\r\n        }));\r\n        \r\n        // Ordenar por fecha más reciente primero\r\n        formattedEmails.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n        \r\n        setSyncedEmails(formattedEmails);\r\n        \r\n        // Actualizar comunicaciones del proveedor con los emails sincronizados\r\n        if (formattedEmails.length > 0) {\r\n          const updatedProvider = {...provider};\r\n          \r\n          // Convertir emails a formato de comunicaciones\r\n          const newCommunications = formattedEmails.map(email => ({\r\n            date: email.date,\r\n            type: email.direction === 'outgoing' ? 'Email enviado' : 'Email recibido',\r\n            subject: email.subject,\r\n            content: email.snippet,\r\n            emailId: email.id\r\n          }));\r\n          \r\n          // Filtrar comunicaciones existentes para no duplicar\r\n          const existingEmailIds = updatedProvider.communications \r\n            ? updatedProvider.communications\r\n                .filter(c => c.emailId)\r\n                .map(c => c.emailId) \r\n            : [];\r\n          \r\n          const newUniqueCommunications = newCommunications.filter(\r\n            nc => !existingEmailIds.includes(nc.emailId)\r\n          );\r\n          \r\n          // Añadir nuevas comunicaciones\r\n          updatedProvider.communications = updatedProvider.communications \r\n            ? [...updatedProvider.communications, ...newUniqueCommunications]\r\n            : newUniqueCommunications;\r\n            \r\n          // Actualizar el proveedor en la lista y en detalle\r\n          const updatedProviders = providers.map(p => \r\n            p.id === provider.id ? updatedProvider : p\r\n          );\r\n          \r\n          setProviders(updatedProviders);\r\n          saveData('providers', updatedProviders);\r\n          \r\n          if (detailProvider && detailProvider.id === provider.id) {\r\n            setDetailProvider(updatedProvider);\r\n          }\r\n        }\r\n        \r\n        setToast({ \r\n          message: `Sincronización completada: ${formattedEmails.length} emails encontrados`, \r\n          type: 'success' \r\n        });\r\n      } catch (error) {\r\n        console.error('Error al sincronizar emails:', error);\r\n        setToast({ \r\n          message: 'Error al sincronizar emails con el buzón', \r\n          type: 'error' \r\n        });\r\n      } finally {\r\n        setIsSyncingEmails(false);\r\n      }\r\n    }, 1500); // Simulamos un retardo para mostrar el estado de carga\r\n  };\r\n\r\n  return (\r\n    <PageWrapper\r\n        title=\"Gestión de Proveedores\"\r\n        actions={\r\n          <Button leftIcon={<Plus size={16} />} onClick={() => setShowAiModal(true)}>\r\n            Buscar proveedor\r\n          </Button>\r\n        }\r\n      >\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n      <Card className=\"space-y-4 p-4\">\r\n        {/* Pestañas */}\r\n        <div className=\"flex gap-2\">\r\n          {[ \r\n            { key: 'selected', label: 'Seleccionados' },\r\n            { key: 'contacted', label: 'Contactados' }\r\n          ].map(t => (\r\n            <button\r\n              key={t.key}\r\n              onClick={() => setTab(t.key)}\r\n              className={`px-3 py-1 rounded-full text-sm transition-colors ${tab === t.key ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>{t.label}</button>\r\n          ))}\r\n        </div>\r\n        <form onSubmit={e => e.preventDefault()} className=\"flex items-center border rounded px-2 py-1\">\r\n          <Search size={16} className=\"mr-2 text-gray-600\" />\r\n          \r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Buscar...\"\r\n            value={searchTerm}\r\n            onChange={e => setSearchTerm(e.target.value)}\r\n            className=\"outline-none\"\r\n          />\r\n          \r\n        </form>\r\n        <div className=\"hidden\">\r\n          <select value={serviceFilter} onChange={e => setServiceFilter(e.target.value)} className=\"border rounded px-2 py-1\">\r\n            <option value=\"\">Todos los servicios</option>\r\n            <option value=\"Catering\">Catering</option>\r\n            <option value=\"Flores\">Flores</option>\r\n            <option value=\"Música\">Música</option>\r\n            <option value=\"Fotografía\">Fotografía</option>\r\n          </select>\r\n          <select value={statusFilter} onChange={e => setStatusFilter(e.target.value)} className=\"border rounded px-2 py-1\">\r\n            <option value=\"\">Todos los estados</option>\r\n            <option value=\"Contactado\">Contactado</option>\r\n            <option value=\"Confirmado\">Confirmado</option>\r\n            <option value=\"Pendiente\">Pendiente</option>\r\n          </select>\r\n          <input type=\"date\" value={dateFrom} onChange={e => setDateFrom(e.target.value)} className=\"border rounded px-2 py-1\" />\r\n          <input type=\"date\" value={dateTo} onChange={e => setDateTo(e.target.value)} className=\"border rounded px-2 py-1\" />\r\n          <button onClick={clearFilters} className=\"bg-gray-200 px-3 py-1 rounded flex items-center\">\r\n            <RefreshCcw size={16} className=\"mr-1\" /> Limpiar\r\n          </button>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Bulk Actions */}\r\n      {selected.length > 0 && (\r\n        <div className=\"bg-gray-100 p-2 rounded flex gap-2\">\r\n          <button className=\"bg-green-600 text-white px-3 py-1 rounded\">Enviar comunicaciones ({selected.length})</button>\r\n          <select className=\"border rounded px-2 py-1\">\r\n            <option value=\"\">Cambiar estado...</option>\r\n            <option value=\"Contactado\">Contactado</option>\r\n            <option value=\"Confirmado\">Confirmado</option>\r\n            <option value=\"Pendiente\">Pendiente</option>\r\n          </select>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"grid gap-4 grid-cols-1 md:grid-cols-2 xl:grid-cols-3\">\r\n        {displayed.length===0 && <p className=\"text-gray-500\">No hay proveedores en esta pestaña.</p>}\r\n        {displayed.map(p=>(\r\n          <div key={p.id} className=\"relative p-4 cursor-pointer bg-white rounded shadow\" onClick={() => openDetail(p)}>\r\n            <span className=\"absolute top-2 right-2 bg-blue-100 text-blue-700 text-xs px-2 py-1 rounded\">{p.service}</span>\r\n            <h3 className=\"text-lg font-semibold mb-2\">{p.name}</h3>\r\n            <p className=\"text-sm text-gray-600\">{p.contact || p.email || p.phone}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Modal Detalle */}\r\n      {showDetail && detailProvider && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" onClick={()=>setShowDetail(false)}>\r\n          <div className=\"bg-white w-full max-w-lg p-6 rounded shadow space-y-4 max-h-[90vh] overflow-auto\" onClick={e=>e.stopPropagation()}>\r\n            <div className=\"flex justify-between items-start mb-2\">\r\n              <h2 className=\"text-xl font-semibold\">{detailProvider.name}</h2>\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className={`px-2 py-0.5 rounded-full text-xs ${detailProvider.status === 'Confirmado' ? 'bg-green-100 text-green-800' : detailProvider.status === 'Contactado' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}`}>\r\n                  {detailProvider.status || 'Pendiente'}\r\n                </span>\r\n                <button className=\"text-gray-500 text-2xl leading-4\" onClick={()=>setShowDetail(false)}>&times;</button>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Pestañas de navegación */}\r\n            <div className=\"flex border-b mb-4\">\r\n              <button\r\n                className={`px-4 py-2 font-medium text-sm ${activeDetailTab === 'info' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`}\r\n                onClick={() => setActiveDetailTab('info')}\r\n              >\r\n                Información\r\n              </button>\r\n              <button\r\n                className={`px-4 py-2 font-medium text-sm ${activeDetailTab === 'communications' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`}\r\n                onClick={() => setActiveDetailTab('communications')}\r\n              >\r\n                Comunicaciones\r\n              </button>\r\n              <button\r\n                className={`px-4 py-2 font-medium text-sm ${activeDetailTab === 'tracking' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`}\r\n                onClick={() => setActiveDetailTab('tracking')}\r\n              >\r\n                Seguimiento\r\n              </button>\r\n            </div>\r\n            \r\n            {/* Pestaña de Información */}\r\n            {activeDetailTab === 'info' && (\r\n              <>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <p><span className=\"font-medium\">Servicio:</span> {detailProvider.service}</p>\r\n                    {detailProvider.contact && <p><span className=\"font-medium\">Contacto:</span> {detailProvider.contact}</p>}\r\n                    {detailProvider.email && <p><span className=\"font-medium\">Email:</span> {detailProvider.email}</p>}\r\n                    {detailProvider.phone && <p><span className=\"font-medium\">Teléfono:</span> {detailProvider.phone}</p>}\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    {detailProvider.priceRange && (\r\n                      <p><span className=\"font-medium\">Precio aproximado:</span> {detailProvider.priceRange}</p>\r\n                    )}\r\n                    {detailProvider.location && (\r\n                      <p><span className=\"font-medium\">Ubicación:</span> {detailProvider.location}</p>\r\n                    )}\r\n                    {detailProvider.link && (\r\n                      <p>\r\n                        <span className=\"font-medium\">Web:</span> \r\n                        <a href={detailProvider.link} target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-600 hover:underline ml-1\">\r\n                          {detailProvider.link.replace(/(https?:\\/\\/|www\\.)/g, '').split('/')[0]}\r\n                        </a>\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                {detailProvider.snippet && (\r\n                  <div className=\"mt-4\">\r\n                    <h3 className=\"text-sm font-medium text-gray-700 mb-1\">Descripción</h3>\r\n                    <p className=\"text-sm text-gray-600 whitespace-pre-line bg-gray-50 p-2 rounded\">{detailProvider.snippet}</p>\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n            \r\n            {/* Pestaña de Comunicaciones */}\r\n            {activeDetailTab === 'communications' && (\r\n              <div className=\"pb-4\">\r\n                <div className=\"mb-4\">\r\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-1\">Historial de comunicaciones</h3>\r\n                  {detailProvider.communications && detailProvider.communications.length > 0 ? (\r\n                    <div className=\"space-y-2 max-h-[300px] overflow-auto\">\r\n                      {detailProvider.communications.map((comm, idx) => (\r\n                        <div key={idx} className=\"border-l-2 border-blue-400 pl-2 py-1\">\r\n                          <p className=\"text-xs text-gray-500\">{new Date(comm.date).toLocaleString()}</p>\r\n                          <p className=\"text-sm font-medium\">{comm.type}</p>\r\n                          <p className=\"text-sm\">{comm.subject}</p>\r\n                          {comm.content && <p className=\"text-xs text-gray-600\">{comm.content}</p>}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <p className=\"text-sm text-gray-500 italic\">No hay comunicaciones registradas</p>\r\n                  )}\r\n                </div>\r\n                \r\n                {/* Correos sincronizados desde el buzón */}\r\n                <div>\r\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-1 flex items-center\">\r\n                    Correos sincronizados\r\n                    <button \r\n                      className=\"ml-2 text-xs text-blue-600 hover:underline flex items-center\" \r\n                      onClick={() => {\r\n                        syncProviderEmails(detailProvider);\r\n                      }}\r\n                      disabled={isSyncingEmails}\r\n                    >\r\n                      {isSyncingEmails ? (\r\n                        <>\r\n                          <Spinner size=\"small\" className=\"mr-1\" />\r\n                          Sincronizando...\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <RefreshCcw size={12} className=\"mr-1\" />\r\n                          Sincronizar\r\n                        </>\r\n                      )}\r\n                    </button>\r\n                  </h3>\r\n                  \r\n                  <div className=\"space-y-2 max-h-[300px] overflow-auto\">\r\n                    {syncedEmails && syncedEmails.length > 0 ? (\r\n                      syncedEmails.map((email, idx) => (\r\n                        <div key={idx} className=\"border-l-2 border-purple-400 pl-2 py-1\">\r\n                          <p className=\"text-xs text-gray-500\">{new Date(email.date).toLocaleString()}</p>\r\n                          <p className=\"text-sm font-medium\">{email.direction === 'outgoing' ? 'Enviado' : 'Recibido'}</p>\r\n                          <p className=\"text-sm\">{email.subject}</p>\r\n                          {email.snippet && <p className=\"text-xs text-gray-600 truncate\">{email.snippet}</p>}\r\n                        </div>\r\n                      ))\r\n                    ) : (\r\n                      <p className=\"text-sm text-gray-500 italic\">Sin datos sincronizados del buzón</p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Pestaña de Seguimiento */}\r\n            {activeDetailTab === 'tracking' && (\r\n              <div>\r\n                {/* Registro de seguimiento activo */}\r\n                {trackingRecords.filter(record => \r\n                  record.providerEmail === detailProvider.email || record.providerId === detailProvider.id\r\n                ).length > 0 ? (\r\n                  <div className=\"space-y-4\">\r\n                    {trackingRecords.filter(record => \r\n                      record.providerEmail === detailProvider.email || record.providerId === detailProvider.id\r\n                    ).map((record, idx) => (\r\n                      <div key={idx} className=\"border rounded-lg p-3\">\r\n                        <div className=\"flex justify-between items-center\">\r\n                          <h3 className=\"font-medium\">{record.subject || 'Seguimiento'}</h3>\r\n                          <span className={`px-2 py-0.5 rounded-full text-xs ${record.status === TRACKING_STATUS.URGENT ? 'bg-red-100 text-red-800' : \r\n                            record.status === TRACKING_STATUS.WAITING ? 'bg-amber-100 text-amber-800' :\r\n                            record.status === TRACKING_STATUS.RESPONDED ? 'bg-green-100 text-green-800' :\r\n                            record.status === TRACKING_STATUS.FOLLOWUP ? 'bg-blue-100 text-blue-800' :\r\n                            'bg-gray-100 text-gray-800'}`}>\r\n                            {record.status || 'Pendiente'}\r\n                          </span>\r\n                        </div>\r\n                        \r\n                        <p className=\"text-xs text-gray-500 mt-1\">Último contacto: {new Date(record.lastEmailDate).toLocaleDateString()}</p>\r\n                        {record.dueDate && <p className=\"text-xs text-gray-500\">Fecha límite: {new Date(record.dueDate).toLocaleDateString()}</p>}\r\n                        \r\n                        {record.notes && <p className=\"text-sm mt-2 bg-gray-50 p-2 rounded\">{record.notes}</p>}\r\n                        \r\n                        <div className=\"mt-2\">\r\n                          <button \r\n                            className=\"text-blue-600 text-sm hover:underline\"\r\n                            onClick={() => {\r\n                              setCurrentTracking(record);\r\n                              setShowTrackingModal(true);\r\n                            }}\r\n                          >\r\n                            Ver detalles\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"text-center py-10\">\r\n                    <Clock className=\"mx-auto h-10 w-10 text-gray-400\" />\r\n                    <p className=\"mt-2 text-sm text-gray-500\">No hay seguimientos activos para este proveedor</p>\r\n                    <button \r\n                      className=\"mt-3 px-4 py-2 bg-amber-500 text-white rounded-full text-sm\"\r\n                      onClick={handleProviderTracking}\r\n                    >\r\n                      Crear seguimiento\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n            \r\n            {/* Panel de acciones rápidas contextuales */}\r\n            <div className=\"border-t border-gray-200 mt-4 pt-4\">\r\n              <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Acciones rápidas</h3>\r\n              \r\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\r\n                {/* Acción rápida: Email */}\r\n                <button \r\n                  className=\"p-2 bg-blue-50 border border-blue-200 rounded-lg hover:bg-blue-100 flex flex-col items-center justify-center\"\r\n                  onClick={sendMailToProvider}\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-blue-600 mb-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\r\n                  </svg>\r\n                  <span className=\"text-xs\">Email</span>\r\n                </button>\r\n                \r\n                {/* Acción rápida: Seguimiento */}\r\n                <button \r\n                  className=\"p-2 bg-amber-50 border border-amber-200 rounded-lg hover:bg-amber-100 flex flex-col items-center justify-center\"\r\n                  onClick={handleProviderTracking}\r\n                >\r\n                  <Clock className=\"h-6 w-6 text-amber-600 mb-1\" />\r\n                  <span className=\"text-xs\">Seguimiento</span>\r\n                </button>\r\n                \r\n                {/* Acción rápida: Reservar cita */}\r\n                <button \r\n                  className=\"p-2 bg-green-50 border border-green-200 rounded-lg hover:bg-green-100 flex flex-col items-center justify-center\"\r\n                  onClick={() => {\r\n                    setProviderToReserve(detailProvider);\r\n                    setShowResModal(true);\r\n                  }}\r\n                >\r\n                  <Calendar className=\"h-6 w-6 text-green-600 mb-1\" />\r\n                  <span className=\"text-xs\">Reservar</span>\r\n                </button>\r\n                \r\n                {/* Acción rápida: Plantillas */}\r\n                <div className=\"relative\">\r\n                  <button \r\n                    className=\"p-2 bg-purple-50 border border-purple-200 rounded-lg hover:bg-purple-100 flex flex-col items-center justify-center w-full\"\r\n                    onClick={() => {\r\n                      // Mostrar menú de plantillas\r\n                      const templates = [\r\n                        { name: 'Consulta inicial', subject: `Consulta de servicios - ${detailProvider.name}` },\r\n                        { name: 'Solicitar presupuesto', subject: `Solicitud de presupuesto - ${detailProvider.name}` },\r\n                        { name: 'Confirmar detalles', subject: `Confirmación de detalles - ${detailProvider.name}` },\r\n                        { name: 'Consulta disponibilidad', subject: `Consulta de disponibilidad - ${detailProvider.name}` }\r\n                      ];\r\n                      \r\n                      // Crear evento para abrir plantilla en buzón\r\n                      const template = templates[0]; // Usar primera plantilla como ejemplo\r\n                      const allProfileData = loadData('lovendaProfile', { defaultValue: {} });\r\n                      const weddingDate = allProfileData.weddingInfo?.date || 'fecha por determinar';\r\n                      const bride = allProfileData.bride?.name || 'Novia';\r\n                      const groom = allProfileData.groom?.name || 'Novio';\r\n                      \r\n                      const emailBody = `Hola ${detailProvider.contact || 'Responsable de ' + detailProvider.name},\r\n\r\nSomos ${bride} y ${groom} y estamos organizando nuestra boda para el ${weddingDate}.\r\n\r\nNos gustaría recibir un presupuesto detallado para vuestros servicios de ${detailProvider.service}.\r\n\r\n¿Podríais proporcionarnos información sobre tarifas, opciones disponibles y qué incluye cada servicio?\r\n\r\nMuchas gracias de antemano.\r\n\r\nSaludos cordiales,\r\n${bride} y ${groom}`;\r\n                      \r\n                      window.dispatchEvent(new CustomEvent('lovenda-compose', { \r\n                        detail: { \r\n                          to: detailProvider.email, \r\n                          subject: template.subject,\r\n                          body: emailBody\r\n                        } \r\n                      }));\r\n                      \r\n                      alert('Funcionalidad de buzón temporalmente no disponible');\r\n                      setShowDetail(false);\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-purple-600 mb-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n                    </svg>\r\n                    <span className=\"text-xs\">Plantilla</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-end gap-2 mt-4\">\r\n              <button className=\"px-4 py-2 bg-gray-200 rounded\" onClick={()=>setShowDetail(false)}>Cerrar</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"hidden\">\r\n        <table className=\"w-full table-auto\">\r\n          <thead>\r\n            <tr className=\"bg-gray-50\">\r\n              <th className=\"p-2\"><input type=\"checkbox\" /></th>\r\n              <th className=\"p-2\">Nombre</th>\r\n              <th className=\"p-2\">Servicio</th>\r\n              <th className=\"p-2\">Contacto</th>\r\n              <th className=\"p-2\">Email</th>\r\n              <th className=\"p-2\">Teléfono</th>\r\n              <th className=\"p-2\">Estado</th>\r\n              <th className=\"p-2\">Fecha</th>\r\n              <th className=\"p-2\">Valoración</th>\r\n              <th className=\"p-2\">Acciones</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {displayed.map(p => (\r\n              <tr key={p.id} className=\"border-b\">\r\n                <td className=\"p-2\">\r\n                  <input type=\"checkbox\" checked={selected.includes(p.id)} onChange={() => toggleSelect(p.id)} />\r\n                </td>\r\n                <td className=\"p-2\">{p.link ? <a href={p.link} target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-600 underline\">{p.name}</a> : p.name}</td>\r\n                <td className=\"p-2\">{p.service}</td>\r\n                <td className=\"p-2\">{p.contact}</td>\r\n                <td className=\"p-2\">{p.email}</td>\r\n                <td className=\"p-2\">{p.phone}</td>\r\n                <td className=\"p-2 cursor-pointer\">{p.status}</td>\r\n                <td className=\"p-2 cursor-pointer\">{p.date}</td>\r\n                <td className=\"p-2\">\r\n                  {[1,2,3,4,5].map(i => (\r\n                    <Star key={i} size={16} className=\"cursor-pointer\" color={i <= Math.round(p.rating) ? '#facc15' : '#e5e7eb'} onClick={() => rateProvider(p.id, i)} />\r\n                  ))}\r\n                  <span className=\"text-sm text-gray-600 ml-1\">({p.ratingCount})</span>\r\n                </td>\r\n                <td className=\"p-2 flex gap-2\">\r\n                  <Eye size={16} className=\"cursor-pointer text-gray-600\" onClick={() => openDetail(p)} />\r\n                  <Edit2 size={16} className=\"cursor-pointer text-blue-600\" />\r\n                  <Trash2 size={16} className=\"cursor-pointer text-red-600\" onClick={() => { setProviders(prev => prev.filter(x => x.id !== p.id)); setToast({ message: 'Proveedor eliminado', type: 'success' }); }} />\r\n                  <Calendar size={16} className=\"cursor-pointer text-green-600\" onClick={() => openResModal(p)} />\r\n                  <span className=\"text-sm text-gray-600 ml-1\">{reservations.filter(r => r.providerId === p.id).length}</span>\r\n                  <Download size={16} className=\"cursor-pointer text-purple-600\" />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* Modal búsqueda proveedor */}\r\n      {showAiModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" onClick={() => setShowAiModal(false)}>\r\n          <div className=\"bg-white w-full max-w-4xl h-[90vh] rounded shadow flex flex-col\" onClick={e => e.stopPropagation()}>\r\n            <div className=\"p-4 border-b flex justify-between items-center\">\r\n              <h2 className=\"text-xl font-semibold\">Buscar proveedor</h2>\r\n              <button className=\"text-gray-500 text-2xl leading-4\" onClick={() => setShowAiModal(false)}>&times;</button>\r\n            </div>\r\n            <div className=\"p-4 bg-gray-100\">\r\n              <form onSubmit={handleAiSearch} className=\"flex flex-wrap gap-2 items-center mb-4\">\r\n                <input type=\"text\" placeholder=\"Describe lo que buscas...\" value={aiQuery} onChange={e=>setAiQuery(e.target.value)} className=\"flex-1 border rounded px-2 py-1\" />\r\n                <select value={serviceFilter} onChange={e=>setServiceFilter(e.target.value)} className=\"border rounded px-2 py-1\">\r\n                  <option value=\"\">Servicio...</option>\r\n                  <option>Catering</option>\r\n                  <option>Flores</option>\r\n                  <option>Fotografía</option>\r\n                  <option>Música</option>\r\n                  <option>Decoración</option>\r\n                  <option>Vestidos</option>\r\n                  <option>Trajes</option>\r\n                  <option>Transporte</option>\r\n                  <option>Invitaciones</option>\r\n                  <option>Pasteles</option>\r\n                  <option>Joyería</option>\r\n                  <option>Detalles</option>\r\n                  <option>Animación</option>\r\n                </select>\r\n                <select value={budgetRange} onChange={e=>setBudgetRange(e.target.value)} className=\"border rounded px-2 py-1\">\r\n                  <option value=\"\">Presupuesto...</option>\r\n                  <option>&lt; 1.000€</option>\r\n                  <option>1.000€ – 3.000€</option>\r\n                  <option>3.000€ – 6.000€</option>\r\n                  <option>&gt; 6.000€</option>\r\n                </select>\r\n                <button type=\"submit\" className=\"bg-blue-600 text-white px-3 py-1 rounded flex items-center\">\r\n                  {aiLoading ? (\r\n                    <>\r\n                      <span className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-1\"></span>\r\n                      Buscando...\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Search size={16} className=\"mr-1\"/>\r\n                      Buscar\r\n                    </>\r\n                  )}\r\n                </button>\r\n              </form>\r\n              \r\n              {/* Resultados de la búsqueda IA */}\r\n              {aiResults.length > 0 && (\r\n                <div className=\"pt-3 border-t border-gray-200\">\r\n                  <h3 className=\"font-semibold text-lg mb-3\">Resultados de búsqueda AI</h3>\r\n                  <div className=\"grid gap-4 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\">\r\n                    {aiResults.map((r, idx) => (\r\n                      <div key={idx} className=\"bg-white border rounded overflow-hidden shadow-sm hover:shadow-md transition-shadow cursor-pointer\" onClick={() => selectProvider(r)}>\r\n                        {r.image && <img src={r.image} alt={r.title} className=\"w-full h-32 object-cover\"/>}\r\n                        <div className=\"p-3\">\r\n                          <h4 className=\"font-medium text-blue-700 mb-1\">{r.title}</h4>\r\n                          {r.service && <p className=\"text-xs uppercase tracking-wide text-gray-500 mb-1\">{r.service}</p>}\r\n                          {r.location && <p className=\"text-xs text-gray-500 mb-1\"><MapPin size={12} className=\"inline mr-1\"/>{r.location}</p>}\r\n                          {r.priceRange && <p className=\"text-sm font-medium text-gray-700 mb-2\">{r.priceRange}</p>}\r\n                          {r.snippet && <p className=\"text-sm text-gray-600 line-clamp-3\">{r.snippet}</p>}\r\n                          <div className=\"mt-3 pt-2 border-t border-gray-100 flex justify-between\">\r\n                            {r.link && <a href={r.link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-xs text-blue-600 hover:underline\" onClick={(e) => e.stopPropagation()}>Ver detalles</a>}\r\n                            <button onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              setProviders(prev => [...prev, { \r\n                                id: `web-${Date.now()}`, \r\n                                name: r.title, \r\n                                service: r.service || servicioSeleccionado,\r\n                                contact: '',\r\n                                email: '',\r\n                                phone: '',\r\n                                link: r.link, \r\n                                status: 'Nuevo',\r\n                                location: r.location || '',\r\n                                date: new Date().toISOString().slice(0,10), \r\n                                rating: 0, \r\n                                ratingCount: 0, \r\n                                snippet: r.snippet || '',\r\n                                priceRange: r.priceRange || ''\r\n                              }]);\r\n                              setToast({ message: 'Proveedor añadido a la lista', type: 'success' });\r\n                            }} className=\"text-xs bg-green-50 hover:bg-green-100 text-green-600 px-2 py-1 rounded\">\r\n                              Añadir\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {/* Estado de carga y mensajes */}\r\n              {aiLoading && aiResults.length === 0 && (\r\n                <div className=\"flex flex-col items-center justify-center py-8\">\r\n                  <div className=\"animate-spin h-8 w-8 border-4 border-blue-600 border-t-transparent rounded-full mb-3\"></div>\r\n                  <p className=\"text-gray-600\">Buscando los mejores proveedores para ti...</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Vista móvil eliminada en nuevo diseño */}\r\n      <div className=\"block md:hidden space-y-4\">\r\n        {displayed.map(p => (\r\n          <div key={p.id} className=\"bg-white p-4 rounded shadow\">\r\n            <div className=\"flex justify-between items-center mb-2\">\r\n              <div>\r\n                <p className=\"font-semibold text-lg\">{p.name}</p>\r\n                <p className=\"text-sm text-gray-600\">{p.service} - {p.status}</p>\r\n                <p className=\"text-sm text-gray-600\">{p.contact}</p>\r\n              </div>\r\n              <button onClick={() => toggleSelect(p.id)} className=\"text-gray-600\">Acciones</button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Modal Añadir Proveedor */}\r\n      {showAddModal && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\r\n          <div className=\"bg-white p-4 rounded shadow w-96\">\r\n            <h2 className=\"text-lg font-semibold mb-4\">Añadir Proveedor</h2>\r\n            <form onSubmit={handleAddProvider} className=\"space-y-3\">\r\n              <input type=\"text\" placeholder=\"Nombre\" value={newProvider.name} onChange={e => setNewProvider({ ...newProvider, name: e.target.value })} className=\"w-full border rounded px-2 py-1\" required />\r\n              <input type=\"text\" placeholder=\"Servicio\" value={newProvider.service} onChange={e => setNewProvider({ ...newProvider, service: e.target.value })} className=\"w-full border rounded px-2 py-1\" required />\r\n              <input type=\"text\" placeholder=\"Contacto\" value={newProvider.contact} onChange={e => setNewProvider({ ...newProvider, contact: e.target.value })} className=\"w-full border rounded px-2 py-1\" />\r\n              <input type=\"email\" placeholder=\"Email\" value={newProvider.email} onChange={e => setNewProvider({ ...newProvider, email: e.target.value })} className=\"w-full border rounded px-2 py-1\" />\r\n              <input type=\"tel\" placeholder=\"Teléfono\" value={newProvider.phone} onChange={e => setNewProvider({ ...newProvider, phone: e.target.value })} className=\"w-full border rounded px-2 py-1\" />\r\n              <select value={newProvider.status} onChange={e => setNewProvider({ ...newProvider, status: e.target.value })} className=\"w-full border rounded px-2 py-1\">\r\n                <option value=\"\">Seleccionar estado</option>\r\n                <option value=\"Contactado\">Contactado</option>\r\n                <option value=\"Confirmado\">Confirmado</option>\r\n                <option value=\"Pendiente\">Pendiente</option>\r\n              </select>\r\n              <input type=\"date\" value={newProvider.date} onChange={e => setNewProvider({ ...newProvider, date: e.target.value })} className=\"w-full border rounded px-2 py-1\" />\r\n              <div className=\"flex justify-end gap-2\">\r\n                <button type=\"button\" onClick={() => setShowAddModal(false)} className=\"px-4 py-2 bg-gray-200 rounded\">Cancelar</button>\r\n                <button type=\"submit\" className=\"px-4 py-2 bg-blue-600 text-white rounded\">Guardar</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showResModal && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\r\n          <div className=\"bg-white p-4 rounded shadow w-96\">\r\n            <h2 className=\"text-lg font-semibold mb-4\">Reservar con {providerToReserve?.name}</h2>\r\n            <input type=\"date\" value={resDate} onChange={e => setResDate(e.target.value)} className=\"w-full border rounded px-2 py-1 mb-2\" />\r\n            <input type=\"time\" value={resTime} onChange={e => setResTime(e.target.value)} className=\"w-full border rounded px-2 py-1 mb-2\" />\r\n            <div className=\"flex justify-end gap-2\">\r\n              <button type=\"button\" onClick={() => setShowResModal(false)} className=\"px-4 py-2 bg-gray-200 rounded\">Cancelar</button>\r\n              <button type=\"button\" onClick={confirmReservation} className=\"px-4 py-2 bg-green-600 text-white rounded\">Reservar</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Modal para reserva */}\r\n      {showResModal && providerToReserve && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n            <h3 className=\"text-xl font-semibold mb-4\">Reservar con {providerToReserve.name}</h3>\r\n            \r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Fecha</label>\r\n                <input \r\n                  type=\"date\" \r\n                  value={resDate}\r\n                  onChange={e => setResDate(e.target.value)}\r\n                  className=\"w-full border rounded px-3 py-2\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hora</label>\r\n                <input \r\n                  type=\"time\" \r\n                  value={resTime}\r\n                  onChange={e => setResTime(e.target.value)}\r\n                  className=\"w-full border rounded px-3 py-2\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-end gap-2 mt-6\">\r\n              <button \r\n                className=\"px-4 py-2 bg-gray-200 rounded\" \r\n                onClick={() => setShowResModal(false)}\r\n              >\r\n                Cancelar\r\n              </button>\r\n              <button \r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded\" \r\n                onClick={confirmReservation}\r\n              >\r\n                Confirmar Reserva\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Modal para gestionar seguimiento */}\r\n      {showTrackingModal && currentTracking && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-3xl max-h-[90vh] overflow-auto\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h3 className=\"text-xl font-semibold\">Seguimiento: {currentTracking.providerName}</h3>\r\n              <button \r\n                onClick={() => setShowTrackingModal(false)}\r\n                className=\"text-gray-500 hover:text-gray-700\"\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n            \r\n            {/* Estado actual y acciones rápidas */}\r\n            <div className=\"mb-6 p-3 bg-gray-50 rounded-lg\">\r\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Estado actual</h4>\r\n              <div className=\"flex flex-wrap gap-2\">\r\n                {Object.values(TRACKING_STATUS).map(status => (\r\n                  <button\r\n                    key={status}\r\n                    onClick={() => updateTrackingStatusHandler(currentTracking.id, status)}\r\n                    className={`px-3 py-1.5 text-xs rounded-full flex items-center ${currentTracking.status === status ? \r\n                      (status === TRACKING_STATUS.URGENT ? 'bg-red-600 text-white' : \r\n                       status === TRACKING_STATUS.WAITING ? 'bg-amber-500 text-white' :\r\n                       status === TRACKING_STATUS.RESPONDED ? 'bg-green-600 text-white' :\r\n                       status === TRACKING_STATUS.FOLLOWUP ? 'bg-blue-600 text-white' :\r\n                       'bg-gray-600 text-white') : \r\n                      'bg-gray-100 text-gray-700'}`}\r\n                  >\r\n                    {status === TRACKING_STATUS.URGENT && <AlertTriangle size={12} className=\"mr-1\" />}\r\n                    {status === TRACKING_STATUS.WAITING && <Clock size={12} className=\"mr-1\" />}\r\n                    {status === TRACKING_STATUS.RESPONDED && <Eye size={12} className=\"mr-1\" />}\r\n                    {status === TRACKING_STATUS.FOLLOWUP && <RefreshCcw size={12} className=\"mr-1\" />}\r\n                    {status === TRACKING_STATUS.COMPLETED && <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n                    </svg>}\r\n                    {status === TRACKING_STATUS.URGENT ? 'Urgente' :\r\n                     status === TRACKING_STATUS.WAITING ? 'Esperando' :\r\n                     status === TRACKING_STATUS.RESPONDED ? 'Respondido' :\r\n                     status === TRACKING_STATUS.FOLLOWUP ? 'Seguimiento' :\r\n                     status === TRACKING_STATUS.COMPLETED ? 'Completado' :\r\n                     status}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Detalles del proveedor */}\r\n            <div className=\"mb-6\">\r\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Información del proveedor</h4>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-3 border rounded-lg\">\r\n                <div>\r\n                  <p><span className=\"font-medium\">Nombre:</span> {currentTracking.providerName}</p>\r\n                  <p><span className=\"font-medium\">Email:</span> {currentTracking.providerEmail}</p>\r\n                  <p><span className=\"font-medium\">Último contacto:</span> {new Date(currentTracking.lastEmailDate).toLocaleDateString()}</p>\r\n                </div>\r\n                <div>\r\n                  <p><span className=\"font-medium\">Asunto:</span> {currentTracking.subject}</p>\r\n                  {currentTracking.dueDate && <p><span className=\"font-medium\">Fecha límite:</span> {new Date(currentTracking.dueDate).toLocaleDateString()}</p>}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Historial de comunicaciones */}\r\n            {currentTracking.thread && currentTracking.thread.length > 0 && (\r\n              <div className=\"mb-6\">\r\n                <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Historial de comunicaciones</h4>\r\n                <div className=\"space-y-2 max-h-[200px] overflow-auto p-3 border rounded-lg\">\r\n                  {currentTracking.thread.map((item, idx) => (\r\n                    <div key={idx} className={`p-2 rounded-lg ${item.direction === 'outgoing' ? 'bg-blue-50 border-l-4 border-blue-400' : 'bg-green-50 border-l-4 border-green-400'}`}>\r\n                      <p className=\"text-xs text-gray-500\">{new Date(item.date).toLocaleString()}</p>\r\n                      <p className=\"text-sm font-medium\">{item.subject}</p>\r\n                      {item.snippet && <p className=\"text-sm text-gray-700\">{item.snippet}</p>}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Notas */}\r\n            <div className=\"mb-6\">\r\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Notas de seguimiento</h4>\r\n              <textarea \r\n                className=\"w-full border rounded-lg p-3 min-h-[100px]\"\r\n                placeholder=\"Añade notas sobre este proveedor...\"\r\n                value={currentTracking.notes || ''}\r\n                onChange={(e) => {\r\n                  setCurrentTracking({...currentTracking, notes: e.target.value});\r\n                  // Actualizar notas del registro\r\n                  updateTrackingStatus(currentTracking.id, currentTracking.status, e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n            \r\n            {/* Acciones finales */}\r\n            <div className=\"flex justify-between\">\r\n              <div>\r\n                <button \r\n                  className=\"px-4 py-2 text-red-600 hover:bg-red-50 rounded border border-red-200\"\r\n                  onClick={() => {\r\n                    // Eliminar seguimiento (implementar esta función)\r\n                    // deleteTrackingRecord(currentTracking.id);\r\n                    setShowTrackingModal(false);\r\n                    setToast({ message: 'Seguimiento eliminado', type: 'info' });\r\n                  }}\r\n                >\r\n                  Eliminar seguimiento\r\n                </button>\r\n              </div>\r\n              \r\n              <div className=\"flex gap-2\">\r\n                <button \r\n                  className=\"px-4 py-2 bg-amber-500 text-white rounded flex items-center\"\r\n                  onClick={() => {\r\n                    // Actualizar fecha límite para fecha actual + 3 días\r\n                    const dueDate = new Date();\r\n                    dueDate.setDate(dueDate.getDate() + 3);\r\n                    const newTracking = {...currentTracking, dueDate};\r\n                    updateTrackingStatus(currentTracking.id, currentTracking.status, currentTracking.notes, dueDate);\r\n                    setCurrentTracking(newTracking);\r\n                    setToast({ message: 'Fecha límite actualizada', type: 'success' });\r\n                  }}\r\n                >\r\n                  <Calendar size={16} className=\"mr-1\" />\r\n                  Recordatorio (3 días)\r\n                </button>\r\n                \r\n                <button \r\n                  onClick={() => setShowTrackingModal(false)}\r\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded\"\r\n                >\r\n                  Aceptar\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </PageWrapper>\r\n  );\r\n}\r\n\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\ProveedoresNuevo.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'aiResults' is assigned a value but never used.","line":57,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'clearResults' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'trackingFilter' is assigned a value but never used.","line":73,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":73,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'setTrackingFilter' is assigned a value but never used.","line":73,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":73,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'handleReserveProvider' is assigned a value but never used.","line":96,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDeleteProvider' is assigned a value but never used.","line":132,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":132,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'addReservation' is not defined.","line":146,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":146,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'handleViewTrackingDetails' is assigned a value but never used.","line":157,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":157,"endColumn":34}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport MainLayout from '../components/layout/MainLayout';\nimport Card from '../components/Card';\nimport Button from '../components/Button';\nimport { Plus, Sparkles } from 'lucide-react';\n\n// Importar componentes modulares\nimport ProveedorList from '../components/proveedores/ProveedorList';\nimport ProveedorDetail from '../components/proveedores/ProveedorDetail';\nimport ProveedorCard from '../components/proveedores/ProveedorCard';\nimport ProveedorForm from '../components/proveedores/ProveedorForm';\nimport ReservationModal from '../components/proveedores/ReservationModal';\nimport AISearchModal from '../components/proveedores/ai/AISearchModal';\n\nimport TrackingModal from '../components/proveedores/tracking/TrackingModal';\n\n// Importar hooks personalizados\nimport useProveedores from '../hooks/useProveedores';\nimport useAISearch from '../hooks/useAISearch';\nimport { useAuth } from '../hooks/useAuth';\n\nconst Proveedores = () => {\n  // Diagnóstico: verificar que la versión nueva se carga en el navegador\n  console.log('%c[Lovenda] ProveedoresNuevo cargado', 'color: #10B981; font-weight: bold;');\n  // Obtener funcionalidad de los hooks personalizados\n  const {\n    providers,\n    filteredProviders,\n    loading,\n    error,\n    selectedProvider,\n    selectedProviderIds,\n    searchTerm,\n    serviceFilter,\n    statusFilter,\n    dateFrom,\n    dateTo,\n    tab,\n    setSearchTerm,\n    setServiceFilter,\n    setStatusFilter,\n    setDateFrom,\n    setDateTo,\n    setTab,\n    setSelectedProvider,\n    loadProviders,\n    addProvider,\n    updateProvider,\n    deleteProvider,\n    toggleFavoriteProvider,\n    toggleSelectProvider,\n    clearSelection,\n    clearFilters\n  } = useProveedores();\n\n  const {\n    results: aiResults,\n    loading: aiLoading,\n    searchProviders,\n    clearResults\n  } = useAISearch();\n\n  const { user } = useAuth();\n\n  // Estado local para modales y pestañas\n  const [showNewProviderForm, setShowNewProviderForm] = useState(false);\n  const [showEditProviderForm, setShowEditProviderForm] = useState(false);\n  const [showAISearchModal, setShowAISearchModal] = useState(false);\n  const [showReservationModal, setShowReservationModal] = useState(false);\n  const [showTrackingModal, setShowTrackingModal] = useState(false);\n  const [activeTab, setActiveTab] = useState('info');\n  const [currentTrackingItem, setCurrentTrackingItem] = useState(null);\n  const [trackingFilter, setTrackingFilter] = useState('todos');\n\n  // Cargar datos iniciales\n  useEffect(() => {\n    if (user) {\n      loadProviders();\n    }\n  }, [user, loadProviders]);\n\n  // Funciones para manejar la visualización de modales\n  const handleViewDetail = (provider) => {\n    setSelectedProvider(provider);\n    setActiveTab('info');\n  };\n\n  const handleNewProvider = () => {\n    setShowNewProviderForm(true);\n  };\n\n  const handleEditProvider = () => {\n    setShowEditProviderForm(true);\n  };\n\n  const handleReserveProvider = (provider) => {\n    setSelectedProvider(provider);\n    setShowReservationModal(true);\n  };\n\n  const handleCloseDetail = () => {\n    setSelectedProvider(null);\n  };\n\n  const handleOpenAISearch = () => {\n    setShowAISearchModal(true);\n  };\n\n  const handleAISelect = (provider, action) => {\n    if (action === 'view') {\n      setSelectedProvider(provider);\n      setShowAISearchModal(false);\n    } else if (action === 'add') {\n      addProvider(provider);\n      setShowAISearchModal(false);\n    } else if (action === 'select') {\n      addProvider({...provider, status: 'Seleccionado'});\n      setShowAISearchModal(false);\n    }\n  };\n\n  const handleSubmitProvider = async (providerData) => {\n    if (showEditProviderForm && selectedProvider) {\n      await updateProvider(selectedProvider.id, providerData);\n      setShowEditProviderForm(false);\n    } else {\n      await addProvider(providerData);\n      setShowNewProviderForm(false);\n    }\n  };\n\n  const handleDeleteProvider = async (providerId) => {\n    if (window.confirm('¿Estás seguro de que deseas eliminar este proveedor?')) {\n      await deleteProvider(providerId);\n    }\n  };\n\n  const handleSubmitReservation = async (reservationData) => {\n    // En una implementación real, esto guardaría la reserva en la base de datos\n    console.log('Reserva creada:', reservationData);\n    // Actualizar el estado del proveedor a 'Contactado' si no está ya confirmado/seleccionado\n    if (selectedProvider && \n        selectedProvider.status !== 'Confirmado' && \n        selectedProvider.status !== 'Seleccionado') {\n      // Guardar reserva en Firestore y estado local\n      await addReservation(selectedProvider.id, reservationData);\n\n      await updateProvider(selectedProvider.id, { \n        ...selectedProvider, \n        status: 'Contactado',\n        date: reservationData.date\n      });\n    }\n    setShowReservationModal(false);\n  };\n\n  const handleViewTrackingDetails = (trackingItem) => {\n    setCurrentTrackingItem(trackingItem);\n    setShowTrackingModal(true);\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-2xl font-bold\">Gestión de Proveedores</h1>\n          \n          <div className=\"flex space-x-2\">\n            <Button onClick={handleOpenAISearch} className=\"flex items-center\">\n              <Sparkles size={16} className=\"mr-1\" /> Búsqueda IA\n            </Button>\n            <Button onClick={handleNewProvider} className=\"flex items-center\">\n              <Plus size={16} className=\"mr-1\" /> Nuevo Proveedor\n            </Button>\n          </div>\n        </div>\n\n        {error && (\n          <Card className=\"mb-6 bg-red-50 border border-red-200\">\n            <p className=\"text-red-700\">{error}</p>\n          </Card>\n        )}\n\n        {loading ? (\n          <Card className=\"p-8 text-center\">\n            <p className=\"text-gray-500\">Cargando proveedores...</p>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Lista de proveedores con filtros */}\n            <ProveedorList\n              providers={filteredProviders}\n              searchTerm={searchTerm}\n              setSearchTerm={setSearchTerm}\n              serviceFilter={serviceFilter}\n              setServiceFilter={setServiceFilter}\n              statusFilter={statusFilter}\n              setStatusFilter={setStatusFilter}\n              dateFrom={dateFrom}\n              setDateFrom={setDateFrom}\n              dateTo={dateTo}\n              setDateTo={setDateTo}\n              clearFilters={clearFilters}\n              handleViewDetail={handleViewDetail}\n              tab={tab}\n              setTab={setTab}\n              selected={selectedProviderIds}\n              toggleSelect={toggleSelectProvider}\n              toggleFavorite={toggleFavoriteProvider}\n            />\n\n            {/* Acciones con proveedores seleccionados */}\n            {selectedProviderIds.length > 0 && (\n              <Card className=\"bg-blue-50 border border-blue-100\">\n                <div className=\"flex justify-between items-center\">\n                  <p className=\"text-blue-800\">\n                    {selectedProviderIds.length} {selectedProviderIds.length === 1 ? 'proveedor seleccionado' : 'proveedores seleccionados'}\n                  </p>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={clearSelection}>\n                      Deseleccionar todo\n                    </Button>\n                    <Button size=\"sm\">\n                      Acción masiva\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {/* Vista detallada de proveedor */}\n        {selectedProvider && (\n          <ProveedorDetail\n            provider={selectedProvider}\n            onClose={handleCloseDetail}\n            onEdit={handleEditProvider}\n            activeTab={activeTab}\n            setActiveTab={setActiveTab}\n          />\n        )}\n\n        {/* Modal para añadir nuevo proveedor */}\n        {showNewProviderForm && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n            <ProveedorForm\n              onSubmit={handleSubmitProvider}\n              onCancel={() => setShowNewProviderForm(false)}\n            />\n          </div>\n        )}\n\n        {/* Modal para editar proveedor */}\n        {showEditProviderForm && selectedProvider && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n            <ProveedorForm\n              initialData={selectedProvider}\n              onSubmit={handleSubmitProvider}\n              onCancel={() => setShowEditProviderForm(false)}\n            />\n          </div>\n        )}\n\n        {/* Modal de búsqueda con IA */}\n        <AISearchModal\n          isOpen={showAISearchModal}\n          onClose={() => setShowAISearchModal(false)}\n          onSearch={searchProviders}\n          onSelect={handleAISelect}\n          isLoading={aiLoading}\n        />\n\n        {/* Modal de reserva */}\n        {showReservationModal && selectedProvider && (\n          <ReservationModal\n            provider={selectedProvider}\n            onClose={() => setShowReservationModal(false)}\n            onSubmit={handleSubmitReservation}\n          />\n        )}\n\n        {/* Modal de seguimiento */}\n        {showTrackingModal && currentTrackingItem && (\n          <TrackingModal\n            isOpen={showTrackingModal}\n            onClose={() => setShowTrackingModal(false)}\n            trackingItem={currentTrackingItem}\n          />\n        )}\n\n        {/* Proveedores seleccionados */}\n        {selectedProviderIds.length > 0 && (\n          <div className=\"mt-12\">\n            <h2 className=\"text-xl font-semibold mb-4\">Proveedores seleccionados</h2>\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {selectedProviderIds.map(pid => {\n                const provider = providers.find(p => p.id === pid);\n                if(!provider) return null;\n                return (\n                  <ProveedorCard\n                    key={pid}\n                    provider={provider}\n                    isSelected={true}\n                    onToggleSelect={() => toggleSelectProvider(pid)}\n                    onViewDetail={() => handleViewDetail(provider)}\n                    onToggleFavorite={toggleFavoriteProvider}\n                  />\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </MainLayout>\n  );\n};\n\nexport default Proveedores;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\RSVPConfirm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\SeatingPlan.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'SeatItem' is defined but never used.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Cloud' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudOff' is defined but never used.","line":15,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'RefreshCw' is defined but never used.","line":15,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'syncStatus' is assigned a value but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'search' is assigned a value but never used.","line":453,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":453,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearch' is assigned a value but never used.","line":453,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":453,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'savedAt' is assigned a value but never used.","line":483,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":483,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'assignSeatGuest' is assigned a value but never used.","line":516,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":516,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'updateTableDimensions' is assigned a value but never used.","line":665,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":665,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'exportPNG' is assigned a value but never used.","line":670,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":670,"endColumn":18}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport SeatingCanvas from '../features/seating/SeatingCanvas';\n// import GuestPanel eliminado\nimport Modal from '../components/Modal';\nimport TableConfigModal from '../components/TableConfigModal';\nimport SeatItem from '../components/SeatItem';\nimport TemplatesModal from '../components/TemplatesModal';\nimport CeremonyConfigModal from '../components/CeremonyConfigModal';\nimport BanquetConfigModal from '../components/BanquetConfigModal';\n// Drag & Drop context\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { saveData, loadData, subscribeSyncState, getSyncState } from '../services/SyncService';\nimport { Cloud, CloudOff, RefreshCw } from 'lucide-react';\n\n\n\n\nimport html2canvas from 'html2canvas';\n// Temporalmente deshabilitado por conflicto con Vite\n\nimport SeatingToolbar from '../components/seating/SeatingToolbar';\nimport jsPDF from 'jspdf';\nimport PageWrapper from '../components/PageWrapper';\nimport Card from '../components/Card';\n\n// Utilidad para normalizar IDs de mesas (convierte a número si es posible)\nexport const normalizeId = (id) => {\n  const num = parseInt(id, 10);\n  return !isNaN(num) ? num : id;\n};\n\n// Clean rebuilt SeatingPlan page (v2)\nexport default function SeatingPlan() {\n  const [tab, setTab] = useState('ceremony');\n  const [ceremonyConfigOpen, setCeremonyConfigOpen] = useState(false);\n  \n  // Estado de sincronización\n  const [syncStatus, setSyncStatus] = useState(getSyncState());\n\n  // Suscribirse a cambios en el estado de sincronización\n  useEffect(() => {\n    const unsubscribe = subscribeSyncState(setSyncStatus);\n    return () => unsubscribe();\n  }, []);\n\n  const [areasCeremony, setAreasCeremony] = useState([]);\n  const [areasBanquet, setAreasBanquet] = useState([]);\n  const [tablesCeremony, setTablesCeremony] = useState([]);\n  const [seatsCeremony, setSeatsCeremony] = useState([]);\n  const [tablesBanquet, setTablesBanquet] = useState([]);\n\n  const areas = tab === 'ceremony' ? areasCeremony : areasBanquet;\n  const setAreas = tab === 'ceremony' ? setAreasCeremony : setAreasBanquet;\n  const tables = tab === 'ceremony' ? tablesCeremony : tablesBanquet;\n  const seats = tab === 'ceremony' ? seatsCeremony : []; // banquet seats not used\n  const setTables = tab === 'ceremony' ? setTablesCeremony : setTablesBanquet;\n\n  // history for undo/redo\n  const historyRef = useRef({ ceremony: [], banquet: [] });\n\n\n  const pointerRef = useRef({ ceremony: -1, banquet: -1 });\n\n  // Guarda un snapshot en el historial y coloca el puntero al final\n  // Añade un nuevo snapshot al historial respetando el puntero actual.\n  const pushHistory = (snapshot) => {\n    const key = tab;\n    const deepCopy = JSON.parse(JSON.stringify(snapshot));\n    const currentHist = historyRef.current[key] || [];\n    const ptr = pointerRef.current[key];\n\n    // Si el usuario hizo undo y luego edita, descartamos la parte futura\n    const truncated = currentHist.slice(0, ptr + 1);\n    const newHist = [...truncated, deepCopy].slice(-50); // límite 50\n    historyRef.current[key] = newHist;\n    pointerRef.current[key] = newHist.length - 1;\n  };\n\n  // keyboard shortcuts\n  useEffect(()=>{\n    const handler = (e)=>{\n      if((e.ctrlKey||e.metaKey) && e.key.toLowerCase()==='z'){\n        e.preventDefault();\n        if(e.shiftKey) redo(); else undo();\n      }\n    };\n    window.addEventListener('keydown',handler);\n    return ()=>window.removeEventListener('keydown',handler);\n  },[]);\n\n  const undo = () => {\n    const key = tab;\n    const ptr = pointerRef.current[key];\n    if (ptr > 0) {\n      pointerRef.current[key] = ptr - 1;\n      const snapshot = historyRef.current[key][ptr - 1];\n      key==='ceremony' ? setTablesCeremony(snapshot) : setTablesBanquet(snapshot);\n    }\n  };\n  const redo = () => {\n\n    const key = tab;\n    const hist = historyRef.current[key];\n    const ptr = pointerRef.current[key];\n    if (ptr < hist.length - 1) {\n      pointerRef.current[key] = ptr + 1;\n      const snapshot = hist[ptr + 1];\n      key==='ceremony' ? setTablesCeremony(snapshot) : setTablesBanquet(snapshot);\n    }\n  };\n\n  // Guests from backend\n  const [guests, setGuests] = useState([]);\n  const [selectedTableId, setSelectedTableId] = useState(null);\n  const [selectedSeatId, setSelectedSeatId] = useState(null);\n  const [online, setOnline] = useState(1);\n\n  // Tabla actualmente seleccionada\n  const selectedTable = useMemo(()=> tables.find(t => String(t.id) === String(selectedTableId)), [tables, selectedTableId]);\n\n  const handleTableDimensionChange = (field, value) => {\n    if(!selectedTableId) return;\n    setTables(prev => prev.map(t => String(t.id) === String(selectedTableId) ? { ...t, [field]: +value } : t));\n  };\n\n  // Seleccionar mesa para mostrar invitados en panel lateral\n  const handleSelectTable = (id) => {\n    setSelectedTableId(id);\n    setSelectedSeatId(null);\n  };\n\n  // La lógica de habilitar/deshabilitar sillas se encuentra más abajo (única definición).\n\n  // Panel de dibujo\n  // drawMode: '', 'pan', 'move', 'free', 'line'\n  const [drawMode, setDrawMode] = useState('');\n  const toggleSelectedTableShape = () => {\n    if(!selectedTableId) return;\n    // snapshot para undo\n    pushHistory(tables);\n    setTables(prev => prev.map(t => String(t.id) === String(selectedTableId) ? { ...t, shape: t.shape === 'circle' ? 'rect' : 'circle' } : t));\n  };\n  // Seleccionar backend según dispositivo\n  const isTouch = typeof window !== 'undefined' && ('ontouchstart' in window || navigator.maxTouchPoints > 0);\n\n  // Número real de mesas (únicas) considerando tanto las dibujadas como las referenciadas por invitados\n  // Número total de elementos (mesas o sillas) según pestaña\n  const tableCount = useMemo(() => {\n     const idsFromGuests = guests\n       .map(g => g.tableId ?? g.table)\n       .filter(v => v !== undefined && v !== null && String(v).trim() !== '')\n       .map(v => String(v).trim());\n     return new Set(idsFromGuests).size;\n   }, [guests]);\n\n  // Sincronizar el número de mesas con la gestión de invitados (ceremonia)\n  useEffect(() => {\n    // Obtener identificadores (id numérico o nombre) que figuran en la lista de invitados\n    const idsFromGuests = guests\n      .map(g => g.tableId ?? g.table)\n      .filter(v => v !== undefined && v !== null && String(v).trim() !== '')\n      .map(v => String(v).trim());\n\n    if (idsFromGuests.length === 0) {\n      // Si ningún invitado referencia mesas, conservamos las mesas existentes añadidas manualmente\n      return;\n    }\n\n    // Normalizar IDs para evitar duplicados\n    const normalizeId = (id) => {\n      // Intentar convertir a número si es posible, sino dejar como string\n      const num = parseInt(id, 10);\n      return !isNaN(num) ? num : id;\n    };\n    \n    // Agrupar IDs que podrían representar la misma mesa\n    // Por ejemplo, '1' y 1 deberían considerarse el mismo ID\n    const groupedIds = {};\n    \n    idsFromGuests.forEach(idStr => {\n      const normalizedId = normalizeId(idStr);\n      // Usar el ID normalizado como clave, pero guardar la forma string\n      // para mantener la consistencia visual\n      if (!groupedIds[normalizedId]) {\n        groupedIds[normalizedId] = idStr;\n      }\n    });\n    \n    // Sincronizar mesas existentes con estos identificadores/nombres\n    setTablesCeremony(prev => {\n      // Usar los IDs agrupados/normalizados para evitar duplicados\n      const uniqueNormalizedIds = Object.keys(groupedIds);\n      \n      // Crear mapas de búsqueda rápida con IDs normalizados\n      const byId = new Map(prev.map(t => [normalizeId(t.id), t]));\n      const byName = new Map(prev.filter(t => t.name).map(t => [normalizeId(t.name), t]));\n\n      // 1. Actualizar o crear mesas necesarias\n      const updated = uniqueNormalizedIds.map(normalizedId => {\n        // Obtener la forma string original para mantener la presentación\n        const idStr = groupedIds[normalizedId];\n        \n        // ¿Existe por id normalizado o por nombre normalizado?\n        const existing = byId.get(normalizedId) || byName.get(normalizedId);\n        if (existing) {\n          // Devolver copia con nombre sincronizado (por si cambió)\n          return { ...existing, name: idStr };\n        }\n        \n        // Si es numérico, usarlo como id, sino usar el string\n        const id = typeof normalizedId === 'number' ? normalizedId : idStr;\n        \n        // Crear nueva mesa\n        return {\n          id: id,\n          name: idStr,\n          x: 120 + Math.random() * 200,\n          y: 120 + Math.random() * 200,\n          shape: 'circle',\n          seats: 8,\n        };\n      });\n\n      // Combinar con mesas existentes no referenciadas por invitados (p.ej. añadidas manualmente)\n      const extras = prev.filter(t => {\n        const norm = normalizeId(t.id);\n        return !uniqueNormalizedIds.some(id => id == norm);\n      });\n      return [...extras, ...updated];\n    });\n  }, [guests]);\n\n  // Sincronizar mesas de BANQUETE con la gestión de invitados\n  useEffect(() => {\n    // Reunir identificadores de mesa referenciados por los invitados\n    const idsFromGuests = guests\n      .map(g => g.tableId ?? g.table)\n      .filter(v => v !== undefined && v !== null && String(v).trim() !== '')\n      .map(v => String(v).trim());\n\n    if (idsFromGuests.length === 0) {\n      return; // nada que sincronizar si ningún invitado tiene mesa asignada\n    }\n\n    // Agrupar IDs normalizados para evitar duplicados (\"1\" y 1)\n    const groupedIds = {};\n    idsFromGuests.forEach(idStr => {\n      const normalizedId = normalizeId(idStr);\n      if (!groupedIds[normalizedId]) groupedIds[normalizedId] = idStr;\n    });\n\n    setTablesBanquet(prev => {\n      const uniqueNormalizedIds = Object.keys(groupedIds);\n      const byId = new Map(prev.map(t => [normalizeId(t.id), t]));\n      const byName = new Map(prev.filter(t => t.name).map(t => [normalizeId(t.name), t]));\n\n      // Crear/actualizar mesas\n      const updated = uniqueNormalizedIds.map(normalizedId => {\n        const idStr = groupedIds[normalizedId];\n        const existing = byId.get(normalizedId) || byName.get(normalizedId);\n\n        // Invitados que deberían estar sentados en esta mesa\n        const guestsForTable = guests.filter(g => String(g.tableId ?? g.table).trim() === idStr);\n\n        if (existing) {\n          return {\n            ...existing,\n            name: idStr,\n            assignedGuests: guestsForTable.slice(0, existing.seats || 8),\n          };\n        }\n\n        // Crear nueva mesa con posición aleatoria dentro del lienzo\n        const idVal = typeof normalizedId === 'number' ? normalizedId : idStr;\n        return {\n          id: idVal,\n          name: idStr,\n          x: 120 + Math.random() * 200,\n          y: 120 + Math.random() * 200,\n          shape: 'circle',\n          seats: 8,\n          assignedGuests: guestsForTable.slice(0, 8),\n          enabled: true,\n        };\n      });\n\n      // Conservar mesas no referenciadas por los invitados (añadidas manualmente)\n      const extras = prev.filter(t => {\n        const norm = normalizeId(t.id);\n        return !uniqueNormalizedIds.some(id => id == norm);\n      });\n\n      return [...extras, ...updated];\n    });\n  }, [guests]);\n/*\n  useEffect(()=>{\n    // Solo para ceremonia; para banquete la lógica ya asigna via assignedGuests\n    const idsFromGuests = guests\n      .map(g => g.tableId ?? g.table)\n      .filter(v => v !== undefined && v !== null && String(v).trim() !== '')\n      .map(v => String(v).trim());\n    if(idsFromGuests.length===0) return;\n    setTablesCeremony(prev=>{\n      const idsUnique = Array.from(new Set(idsFromGuests));\n      // Mapear los ids actuales a sus mesas si existen\n      const currentMap = new Map(prev.map(t=>[String(t.id), t]));\n      // Generar la lista final manteniendo posición para mesas existentes y creando nuevas para ids nuevos\n      const synced = idsUnique.map(idStr=>{\n        const existing = currentMap.get(idStr);\n        if(existing) return existing;\n        const idNum = parseInt(idStr,10) || idStr;\n        return {id:idNum,x:120+Math.random()*200,y:120+Math.random()*200,shape:'circle',seats:8};\n      });\n      return synced;\n    });\n      // Crear lista a partir de los ids únicos de invitados\n      const uniqueIds = Array.from(new Set(idsFromGuests));\n      const newTables = uniqueIds.map(idStr=>{\n        const existing = prev.find(t=> String(t.id)===idStr);\n        if(existing) return existing;\n        const idNum = parseInt(idStr,10) || idStr;\n        return {id: idNum, x: 120+Math.random()*200, y: 120+Math.random()*200, shape:'circle', seats:8};\n      });\n      return newTables;\n    });\n\n\n\n\n\n\n      });\n\n\n\n\n\n    });\n\n*/\n\n  useEffect(()=>{\n     const loadGuests = async ()=>{\n       let got = [];\n       try{\n         const res = await fetch('/api/guests');\n         if(res.ok){\n           got = await res.json();\n         }\n       }catch(e){\n         console.warn('Sin backend /api/guests, cargando desde SyncService');\n       }\n       if(!Array.isArray(got) || got.length===0){\n         try{ \n           got = await loadData('lovendaGuests', { \n             defaultValue: [], \n             collection: 'userGuests'\n           }); \n         }catch(error){ \n           console.error('Error al cargar invitados:', error);\n           got=[]; \n         }\n       }\n       if(got.length===0){\n         // Invitados de prueba\n         got=[\n           {id:1, name:'Ana García', companion:1, tableId:1},\n           {id:2, name:'Luis Martínez', companion:0, tableId:1},\n           {id:3, name:'María López', companion:2, tableId:1},\n           {id:4, name:'José Fernández', companion:0, tableId:1},\n         ];\n       }\n       // Normalizar campos table y tableId\n        got = got.map(g=>{\n          const t = g.tableId ?? g.table;\n          if(t===undefined || t===null || String(t).trim()===''){\n            return {...g, tableId: undefined, table: undefined};\n          }\n          const idNum = parseInt(t,10) || t;\n          return {...g, tableId: idNum, table: idNum};\n        });\n        setGuests(got);\n       // Guardar invitados usando SyncService\n       saveData('lovendaGuests', got, {\n         collection: 'userGuests',\n         showNotification: false\n       });\n     };\n     loadGuests();\n     // suscribirse a cambios en SyncService y otros eventos\n     const handleGuestsChange = async ()=>{\n       try{ \n         const g = await loadData('lovendaGuests', { defaultValue: [], collection: 'userGuests' });\n         let norm = g.map(item=>{\n          const t = item.tableId ?? item.table;\n          if(t===undefined || t===null || String(t).trim()===''){ \n            return {...item, tableId: undefined, table: undefined};\n          }\n          const idNum = parseInt(t,10) || t;\n          return {...item, tableId: idNum, table: idNum};\n        });\n        setGuests(norm);\n       }catch(error){\n         console.error('Error al procesar cambios en invitados:', error);\n       }\n     };\n     window.addEventListener('lovenda-guests', handleGuestsChange);\n     return ()=> window.removeEventListener('lovenda-guests', handleGuestsChange);\n   },[]);\n\n  // Real-time sync via WebSocket with fallback polling\n  useEffect(()=>{\n    let ws=null;\n    let pollId=null;\n    const sinceRef={current:Date.now()};\n\n    const applyUpdate = (update)=>{\n      setGuests(prev=> prev.map(g=> g.id===update.id ? {...g, tableId:update.tableId}: g));\n    };\n\n    const startPolling=()=>{\n      pollId=setInterval(async()=>{\n        try{\n          const res=await fetch(`/api/guests/changes?since=${sinceRef.current}`);\n          const data=await res.json();\n          if(Array.isArray(data)){\n            data.forEach(u=>{applyUpdate(u); sinceRef.current=u.ts;});\n          }\n        }catch(e){console.warn('poll error',e);}\n      },10000);\n    };\n\n    if('WebSocket' in window){\n      const proto=window.location.protocol==='https:'?'wss':'ws';\n      const url=`${proto}://${window.location.host}/ws/guests`;\n      ws=new WebSocket(url);\n      ws.onmessage=(ev)=>{\n        try{const msg=JSON.parse(ev.data); if(msg.type==='guestUpdated') {\n          applyUpdate(msg.payload);\n        } else if(msg.type==='presence') {\n          setOnline(msg.payload?.count || 1);\n        }}catch(e){console.warn('ws parse',e);} };\n      ws.onerror=()=>{if(ws){ws.close();ws=null;} startPolling();};\n      ws.onclose=()=>{if(!pollId) startPolling();};\n    }else startPolling();\n\n    return ()=>{ if(ws) ws.close(); if(pollId) clearInterval(pollId); };\n  },[]);\n\n  const [search, setSearch] = useState('');\n  const [guestOpen, setGuestOpen] = useState(false);\n  // accessibility refs\n  const guestBtnRef = useRef(null);\n  const searchRef = useRef(null);\n  // focus management when panel toggles\n  useEffect(()=>{\n    if(guestOpen) {\n      setTimeout(()=> searchRef.current?.focus(), 50);\n    } else {\n      guestBtnRef.current?.focus();\n    }\n  },[guestOpen]);\n  // close overlay with Escape\n  useEffect(()=>{\n    const onKey=(e)=>{ if(e.key==='Escape' && guestOpen){ setGuestOpen(false);} };\n    window.addEventListener('keydown',onKey);\n    return ()=>window.removeEventListener('keydown',onKey);\n  },[guestOpen]);\n  const [preview, setPreview] = useState(null); // {tableId: guest}\n  const [configTable, setConfigTable] = useState(null);\n  // Guardar configuración (forma, nombre, asientos…) y propagar al estado correcto\n  const saveTableConfig = (updated) => {\n    if(!updated || !updated.id) return;\n    // snapshot para undo\n    pushHistory(tables);\n    setTables(prev => prev.map(t => String(t.id) === String(updated.id) ? { ...t, ...updated } : t));\n  };\n  const [templateOpen, setTemplateOpen] = useState(false);\n  const [banquetConfigOpen, setBanquetConfigOpen] = useState(false);\n  const [savedAt, setSavedAt] = useState(null);\n  const [loadingAI, setLoadingAI] = useState(false);\n\n\n  // When guests or table list changes, sync assignedGuests to reflect any new guest allocations\n  useEffect(()=>{\n    if(tab!=='banquet') return;\n    setTablesBanquet(prev=> prev.map(t=>{\n      const already = t.assignedGuests||[];\n      const should = guests.filter(g=>g.tableId===t.id);\n      if(should.length===already.length && should.every((g,i)=>g.id===already[i]?.id)) return t;\n      return {...t, assignedGuests: should.slice(0,t.seats)};\n    }));\n  },[guests,tab]);\r\n\r\n  // Load autosaved state\r\n  useEffect(()=>{\r\n    try{\r\n      const data = loadData('seating-autosave', { \r\n        defaultValue: null, \r\n        collection: 'userSeatingPlan' \r\n      });\r\n      if(data){\r\n        setAreasCeremony(data.areasCeremony||[]);\r\n        setAreasBanquet(data.areasBanquet||[]);\r\n        setTablesCeremony(data.tablesCeremony||[]);\r\n        setTablesBanquet(data.tablesBanquet||[]);\r\n        setSeatsCeremony(data.seatsCeremony||[]);\r\n      }\r\n    }catch(e){console.warn('No autosave');}\r\n  },[]);\r\n\r\n  // ===== Seat helpers =====\r\n  const assignSeatGuest = (seatId, guestId) => {\r\n    const guest = guests.find(g=>g.id===guestId);\r\n    setSeatsCeremony(prev=>prev.map(s=> s.id===seatId? {...s, guestId, guestName: guest.name}:s));\r\n  };\r\n  const toggleSeatEnabled = (seatId) => setSeatsCeremony(prev=>prev.map(s=> s.id===seatId? {...s, enabled: s.enabled===false? true:false}:s));\r\n\r\n  const generateSeatGrid = (rows=10, cols=12, gap=40, startX=100, startY=80, aisleAfter=6) => {\r\n    const newSeats=[];\r\n    let id=1;\r\n    for(let r=0;r<rows;r++){\r\n      for(let c=0;c<cols;c++){\r\n        const extra = c>=aisleAfter ? gap : 0;\r\n        const xPos = startX + c*gap + extra;\r\n        newSeats.push({id:id++, x:xPos, y:startY+r*gap, row:r+1, col:c+1+(c>=aisleAfter?1:0), enabled:true});\r\n      }\r\n    }\r\n    setSeatsCeremony(newSeats);\r\n  };\r\n\r\n  // ===== Banquet auto-layout =====\r\n  const generateBanquetLayout = ({rows=3, cols=4, seats=8, gapX=140, gapY=160, startX=120, startY=160}={}) => {\r\n    // snapshot for undo\r\n    pushHistory(tablesBanquet);\r\n    const newTables=[];\r\n    let id=1;\r\n    // Mesa de honor (rectangular)\r\n    newTables.push({id:id++, x: startX + (cols-1)*gapX/2, y: startY - gapY, name: 'Mesa Honor', shape:'rect', seats: 10, enabled:true, isHonor:true});\r\n    for(let r=0;r<rows;r++){\r\n      for(let c=0;c<cols;c++){\r\n        newTables.push({id:id++, x:startX + c*gapX, y:startY + r*gapY, name:`Mesa ${id-1}`, shape:'circle', seats, enabled:true});\r\n      }\r\n    }\r\n        // map guests by desired tableId\r\n    const map={};\r\n    guests.forEach(g=>{ if(g.tableId){ if(!map[g.tableId]) map[g.tableId]=[]; map[g.tableId].push(g);} });\r\n    const tablesWithSeats = newTables.map(t=>({\r\n      ...t,\r\n      assignedGuests: map[t.id] ? map[t.id].slice(0,t.seats) : []\r\n    }));\r\n    setTablesBanquet(tablesWithSeats);\r\n  };\r\n\r\n  // autosave every 8s\r\n  useEffect(()=>{\r\n    const id = setInterval(()=>{\r\n      const payload = {\r\n        areasCeremony,\r\n        areasBanquet,\r\n        tablesCeremony,\r\n        tablesBanquet,\r\n        seatsCeremony,\r\n        ts: Date.now()\r\n      };\r\n      saveData('seating-autosave', payload, {\r\n        collection: 'userSeatingPlan',\r\n        showNotification: false\r\n      });\r\n      setSavedAt(new Date());\r\n    },8000);\r\n    return ()=>clearInterval(id);\r\n  },[areasCeremony,areasBanquet,tablesCeremony,tablesBanquet,seatsCeremony]);\r\n\r\n\r\n  // Ajustar vista a un área dibujada\r\n  const adjustViewToArea = (points) => {\r\n    if (!containerRef.current || !points || points.length < 2) return;\r\n    // usar sólo el contenedor del lienzo, no toda la fila flex\r\n    const canvasDiv = containerRef.current.querySelector('[aria-label=\"Lienzo de plano\"]');\r\n    const rect = (canvasDiv || containerRef.current).getBoundingClientRect();\r\n    const xs = points.map(p => p.x);\r\n    const ys = points.map(p => p.y);\r\n    const minX = Math.min(...xs);\r\n    const maxX = Math.max(...xs);\r\n    const minY = Math.min(...ys);\r\n    const maxY = Math.max(...ys);\r\n    const w = maxX - minX;\r\n    const h = maxY - minY;\r\n    if (w < 20 || h < 20) return; // evitar zoom excesivo en trazos pequeños\r\n    const scaleFactor = Math.min(rect.width / w, rect.height / h) * 0.8;\r\n    setScale(scaleFactor);\r\n    setOffset({\r\n      x: (rect.width - w * scaleFactor) / 2 - minX * scaleFactor,\r\n      y: (rect.height - h * scaleFactor) / 2 - minY * scaleFactor,\r\n    });\r\n  };\r\n\r\n  // Zoom & pan\r\n  const [scale, setScale] = useState(1);\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\r\n  const panRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n\r\n  const handleWheel = (e) => {\r\n    e.preventDefault();\r\n    const factor = e.deltaY < 0 ? 1.1 : 0.9;\r\n    setScale(s => Math.min(4, Math.max(0.5, s * factor)));\r\n  };\r\n  const handlePointerDown = (e) => {\r\n    if (e.button !== 0) return;\r\n    panRef.current = { x: e.clientX - offset.x, y: e.clientY - offset.y };\r\n    window.addEventListener('pointermove', handlePointerMove);\r\n    window.addEventListener('pointerup', handlePointerUp);\r\n  };\r\n  const handlePointerMove = (e) => {\r\n    setOffset({ x: e.clientX - panRef.current.x, y: e.clientY - panRef.current.y });\r\n  };\r\n  const handlePointerUp = () => {\r\n    window.removeEventListener('pointermove', handlePointerMove);\r\n    window.removeEventListener('pointerup', handlePointerUp);\r\n  };\r\n\r\n  // Drawing, tables & AI auto-assign\r\n  const addArea = (pts) => {\r\n    setAreas(prev => [...prev, pts]);\r\n    // Ajustar el lienzo para que el perímetro recién creado sea visible y centrado\r\n    adjustViewToArea(pts);\r\n    // Volver al modo pan automáticamente\r\n    setDrawMode('pan');\r\n  };\r\n  const addTable = () => {\r\n    pushHistory(tables);\r\n\r\n    const id = tables.length + 1;\r\n    setTables(prev => [...prev, { id, x: 200, y: 150, shape: 'circle' }]);\r\n  };\r\n  const onAssignGuest = (tableId, guestId) => {\r\n    if (guestId === null) {\r\n      // desasignar: encontrar invitado que estuviera en esa mesa\r\n      const prevGuestId = tables.find(t=>t.id===tableId)?.guestId;\r\n      pushHistory(tables);\r\n      setTables(prev => prev.map(t => t.id === tableId ? { ...t, guestId: undefined, guestName: undefined } : t));\r\n      if(prevGuestId){\r\n        setGuests(prev=> prev.map(g=> g.id===prevGuestId? {...g, tableId: undefined, table: undefined}: g));\r\n      }\r\n      return;\r\n    }\r\n    const guest = guests.find(g => g.id === guestId);\r\n    if (!guest) return;\r\n    pushHistory(tables);\r\n    setTables(prev => prev.map(t => t.id === tableId ? { ...t, guestId, guestName: guest.name } : t));\r\n    // actualizar invitado con su mesa\r\n    setGuests(prev=> prev.map(g=> g.id===guestId? {...g, tableId: tableId}: g));\r\n  };\r\n\r\n  const onToggleEnabled = (tableId) => {\r\n    pushHistory(tables);\r\n    setTables(prev => prev.map(t => t.id === tableId ? { ...t, enabled: t.enabled === false ? true : false } : t));\r\n  };\r\n\r\n  const updateTableDimensions = (id, dims) => {\r\n    pushHistory(tables);\r\n    setTables(prev => prev.map(t => t.id === id ? { ...t, ...dims } : t));\r\n  };\r\n\r\n  const exportPNG = async () => {\r\n    if(!containerRef.current) return;\r\n    const target = containerRef.current.querySelector('[aria-label=\"Lienzo de plano\"]') || containerRef.current;\r\n    const canvas = await html2canvas(target);\r\n    const link = document.createElement('a');\r\n    link.href = canvas.toDataURL('image/png');\r\n    link.download = `seating-${tab}.png`;\r\n    link.click();\r\n  };\r\n  const exportPDF = async () => {\r\n    if(!containerRef.current) return;\r\n    // 1. Capturar imagen del plano (sólo lienzo, sin barras laterales)\r\n    const target = containerRef.current.querySelector('[aria-label=\"Lienzo de plano\"]') || containerRef.current;\r\n    const canvas = await html2canvas(target);\r\n    const imgData = canvas.toDataURL('image/png');\r\n    const pdf = new jsPDF({ orientation: 'landscape', unit: 'pt', format: 'a4' });\r\n\r\n    const pageW = pdf.internal.pageSize.getWidth();\r\n    const pageH = pdf.internal.pageSize.getHeight();\r\n    const imgW = pageW;\r\n    const imgH = (canvas.height * pageW) / canvas.width;\r\n    pdf.addImage(imgData, 'PNG', 0, 0, imgW, imgH);\r\n\r\n    // 2. Nueva página con listado de mesas e invitados\r\n    pdf.addPage();\r\n    pdf.setFontSize(14);\n    pdf.text('Listado de mesas e invitados', 40, 40);\n\n    const map = {};\n    guests.forEach(g=>{\n      const tblKey = String(g.tableId ?? g.table ?? '').trim();\n      if(!tblKey) return;\n      if(!map[tblKey]) map[tblKey]=[];\n      map[tblKey].push(`${g.name}${g.companion ? ` (+${g.companion})`:''}`);\n    });\n    // Añadir mesas sin invitados (p.ej. recién creadas)\n    tables.forEach(t=>{ const key=String(t.id); if(!map[key]) map[key]=[]; });\n\n    const sorted = Object.keys(map).sort((a,b)=> a.localeCompare(b,undefined,{numeric:true}));\n    let y = 70;\n    pdf.setFontSize(12);\n    sorted.forEach(tbl=>{\n      const line = `Mesa ${tbl}: ${map[tbl].join(', ') || '---'}`;\n      const lines = pdf.splitTextToSize(line, pageW-80);\n      lines.forEach(l=>{\n        if(y > pageH - 40){ pdf.addPage(); y = 40; }\n        pdf.text(l, 40, y);\n        y += 18;\n      });\n    });\n\n    pdf.save(`seating-${tab}.pdf`);\n  };\n\n  const handleLocalAssign = () => {\n    const freeTables = tables.filter(t=>!t.guestId && t.enabled!==false);\n    const unseatedGuests = guests.filter(g=>!tables.some(t=>t.guestId===g.id));\n    const assignments = {};\n    freeTables.forEach((t,i)=>{\n      if(i<unseatedGuests.length){assignments[t.id]=unseatedGuests[i];}\n    });\n    if(Object.keys(assignments).length===0) return;\n    setPreview(assignments);\n    // application happens after accept\n  };\n\n  const handleServerAssign = async () => {\n    setLoadingAI(true);\n    try {\n      const payload = {\n        tables: tables.filter(t=>t.enabled!==false).map(({id,guestId})=>({id, guestId})) ,\n        guests: guests\n      };\n      const res = await fetch('/api/ai-assign', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload)\n      });\n      if(!res.ok) throw new Error('Error IA');\n      const data = await res.json(); // expected { assignments: { tableId: guestId } }\n      const assignments = {};\n      Object.entries(data.assignments).forEach(([tid,gid])=>{\n        const guest = guests.find(g=>g.id===gid);\n        if(guest) assignments[tid]=guest;\n      });\n      if(Object.keys(assignments).length) setPreview(assignments);\n    } catch(err){\n      alert('IA error: '+err.message);\n    } finally {\n      setLoadingAI(false);\n    }\n  };\n\n  // Aplicar plantilla de mesas o sillas según pestaña\n  const applyTemplate = (tplItems = []) => {\n    if(tab==='ceremony'){\n      // Plantilla de sillas\n      pushHistory(seats);\n      setSeatsCeremony(tplItems);\n      setTemplateOpen(false);\n      return;\n    }\n    const tplTables = tplItems;\n    // Mantener forma, invitados y nombre de las mesas existentes; solo actualizamos posiciones\n    pushHistory(tables);\n    setTables(prev => {\n      const updated = prev.map((tbl, idx) => {\n        if (tplTables[idx]) {\n          return { ...tbl, x: tplTables[idx].x, y: tplTables[idx].y };\n        }\n        return tbl;\n      });\n      // Si la plantilla contiene más mesas que las actuales, las añadimos vacías\n      if (tplTables.length > prev.length) {\n        for (let i = prev.length; i < tplTables.length; i++) {\n          const pos = tplTables[i];\n          updated.push({\n            id: prev.length + (i - prev.length) + 1,\n            x: pos.x,\n            y: pos.y,\n            shape: 'circle',\n            seats: 8,\n          });\n        }\n      }\n      return updated;\n    });\n    setTemplateOpen(false);\n  };\n\n  const deleteArea = (idx) => {\n    pushHistory(areas);\n    setAreas(prev => prev.filter((_, i) => i !== idx));\n  };\n\n  const moveTable = (id, pos) => {\n    pushHistory(tables);\n    setTables(prev => prev.map(t => {\n      if (t.id !== id) return t;\n      // Calcular tamaño de la mesa para respetar márgenes\n      const shape = t.shape || 'circle';\n      const diameter = t.diameter || 60;\n      const width = t.width || 80;\n      const height = t.height || t.length || 60;\n      const sizeX = shape === 'circle' ? diameter : width;\n      const sizeY = shape === 'circle' ? diameter : height;\n\n      let { x: newX, y: newY } = pos;\n\n      // Limitar dentro del contenedor (considerando zoom)\n      if (containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect();\n        const maxX = rect.width / scale - sizeX / 2;\n        const maxY = rect.height / scale - sizeY / 2;\n        const minX = sizeX / 2;\n        const minY = sizeY / 2;\n        newX = Math.max(minX, Math.min(maxX, newX));\n        newY = Math.max(minY, Math.min(maxY, newY));\n      }\n      return { ...t, x: newX, y: newY };\n    }));\n  };\n\n  return (\n    <DndProvider backend={isTouch ? TouchBackend : HTML5Backend}>\n    <PageWrapper title=\"Plano de mesas\" className=\"select-none\">\n      {/* Tabs */}\n      <Card className=\"space-y-4 p-4\"><div className=\"flex space-x-2\">\n        <button aria-label onClick={() => setTab('banquet')}  className={`px-4 py-2 rounded ${tab==='banquet'  ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>Banquete</button>\n        <button aria-label onClick={() => setTab('ceremony')}  className={`px-4 py-2 rounded ${tab==='ceremony'  ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>Ceremonia</button>\n      </div>\n\n      {/* Toolbar top */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-2\">\n        <h2 className=\"text-xl font-semibold\">Plano de mesas</h2>\n        <SeatingToolbar\n          tab={tab}\n          addTable={addTable}\n          setScale={setScale}\n          undo={undo}\n          redo={redo}\n          exportPDF={exportPDF}\n          setTemplateOpen={setTemplateOpen}\n          setCeremonyConfigOpen={setCeremonyConfigOpen}\n          setBanquetConfigOpen={setBanquetConfigOpen}\n          handleLocalAssign={handleLocalAssign}\n          handleServerAssign={handleServerAssign}\n          loadingAI={loadingAI}\n           />\n        </div>\n\n        {/* Layout */}\n        {/* choose backend based on touch capability */}\n\n          <div className=\"flex flex-col md:flex-row gap-4\" ref={containerRef} role=\"region\" aria-label=\"Lienzo y lista invitados\">\n            {/* Panel de herramientas de dibujo */}\n            <div className=\"w-full md:w-1/6 border rounded p-2 h-96 bg-gray-50 flex flex-col space-y-2\">\n              <h3 className=\"font-semibold mb-2\">Herramientas</h3>\n              <button className={`px-2 py-1 rounded ${drawMode==='pan'?'bg-blue-600 text-white':'bg-gray-200'}`} onClick={()=>setDrawMode('pan')}>Mover plano</button>\n              <button className={`px-2 py-1 rounded ${drawMode==='move'?'bg-blue-600 text-white':'bg-gray-200'}`} onClick={()=>setDrawMode('move')}>Mover mesas</button>\n              <button className={`px-2 py-1 rounded ${drawMode==='free'?'bg-blue-600 text-white':'bg-gray-200'}`} onClick={()=>setDrawMode('free')}>A mano alzada</button>\n              <button className={`px-2 py-1 rounded ${drawMode==='line'?'bg-blue-600 text-white':'bg-gray-200'}`} onClick={()=>setDrawMode('line')}>Línea</button>\n              <button className={`px-2 py-1 rounded ${drawMode==='rect'?'bg-blue-600 text-white':'bg-gray-200'}`} onClick={()=>setDrawMode('rect')}>Rectángulo</button>\n              <button className={`px-2 py-1 rounded ${drawMode==='curve'?'bg-blue-600 text-white':'bg-gray-200'}`} onClick={()=>setDrawMode('curve')}>Curva</button>\n              <button className={`px-2 py-1 rounded ${drawMode==='erase'?'bg-red-600 text-white':'bg-gray-200'}`} onClick={()=>setDrawMode('erase')}>Borrar</button>\n\n\n          </div>\n\n          <div className=\"flex-1 flex flex-row space-x-2\">\n            {/* Lienzo de mesas */}\n            <SeatingCanvas\n               tab={tab}\n               areas={areas}\n               tables={tables}\n               seats={seats}\n               scale={scale}\n               offset={offset}\n               addArea={addArea}\n               moveTable={moveTable}\n               onAssignGuest={onAssignGuest}\n               onToggleEnabled={onToggleEnabled}\n               onToggleSeat={toggleSeatEnabled}\n               onSelectTable={handleSelectTable}\n               setConfigTable={setConfigTable}\n               online={online}\n               handleWheel={handleWheel}\n               handlePointerDown={handlePointerDown}\n               guests={guests}\n               drawMode={drawMode}\n               canPan={drawMode==='pan'}\n               canMoveTables={drawMode==='move'}\n               onDeleteArea={deleteArea}\n            />\n            {tab==='ceremony' && (\n              <p className=\"text-sm text-gray-600 mt-1\">Total sillas: {seatsCeremony.length}</p>\n            )}\n            {/* Panel lateral: Invitados asignados + dimensiones */}\n            <div className=\"w-full md:w-1/4 border rounded p-2 h-96 overflow-y-auto\">\n              {tab==='ceremony' ? (\n                selectedSeatId ? (\n                  <> {/* Edición de silla */}\n                    <h3 className=\"font-semibold mb-2\">Silla {selectedSeatId}</h3>\n                    {(() => {\n                      const seat = seatsCeremony.find(s=>s.id===selectedSeatId);\n                      if(!seat) return null;\n                      return (\n                        <div className=\"space-y-2 text-sm\">\n                          <button\n                            className={`px-2 py-1 rounded ${seat.enabled!==false?'bg-red-600 text-white':'bg-green-600 text-white'}`}\n                            onClick={()=>toggleSeatEnabled(selectedSeatId)}\n                          >{seat.enabled!==false?'Deshabilitar':'Habilitar'}</button>\n                        </div>\n                      );\n                    })()}\n                  </>\n                ) : (\n                  <p className=\"text-sm text-gray-500\">Haz clic en una silla</p>\n                )\n              ) : selectedTableId ? (\n                <>\n                  {/* Invitados asignados */}\n                  <h3 className=\"font-semibold mb-2\">Invitados asignados</h3>\n                    {(() => {\n                     const list = guests.filter(g => {\n                      const t = g.tableId ?? g.table;\n                      return t !== undefined && t !== null && String(t).trim() === String(selectedTableId);\n                    });\n                    if (!list.length) {\n                      return <p className=\"text-sm text-gray-500\">Sin invitados</p>;\n                    }\n                    return list.map(g => (\n                      <div key={g.id} className=\"border-b py-1 flex justify-between\">\n                        <span>{g.name}</span>\n                        {g.companion ? (\n                          <span className=\"text-xs text-gray-500\">+{g.companion}</span>\n                        ) : null}\n                      </div>\n                    ));\n                  })()}\n\n                  {/* Panel de edición de la mesa */}\n                  {selectedTable && (\n                    <div className=\"fixed bottom-0 right-4 border rounded-t-lg bg-white p-3 shadow-lg w-64\">\n                       <h3 className=\"font-semibold mb-2\">Editar mesa</h3>\n                       \n                       {/* Selector de forma de mesa */}\n                       <div className=\"flex items-center justify-between text-xs mb-3\">\n                         <span className=\"font-semibold\">Forma:</span>\n                         <button\n                           aria-label\n                           onClick={toggleSelectedTableShape}\n                           className=\"px-2 py-0.5 bg-blue-600 text-white rounded\"\n                         >\n                           {selectedTable.shape === 'circle' ? 'Rectangular' : 'Circular'}\n                         </button>\n                       </div>\n                      \n                      {/* Dimensiones de la mesa */}\n                      <div className=\"space-y-1 mb-2 text-xs\">\n                        {selectedTable.shape === 'circle' ? (\n                          <label className=\"flex justify-between items-center\">\n                            <span>Diámetro:</span>\n                            <input\n                              type=\"number\"\n                              min=\"20\"\n                              max=\"400\"\n                              value={selectedTable.diameter || 60}\n                              onChange={e => handleTableDimensionChange('diameter', e.target.value)}\n                              className=\"border rounded px-1 py-0.5 w-20\"\n                            />\n                          </label>\n                        ) : (\n                          <>\n                            <label className=\"flex justify-between items-center\">\n                              <span>Ancho:</span>\n                              <input\n                                type=\"number\"\n                                min=\"20\"\n                                max=\"400\"\n                                value={selectedTable.width || 80}\n                                onChange={e => handleTableDimensionChange('width', e.target.value)}\n                                className=\"border rounded px-1 py-0.5 w-20\"\n                              />\n                            </label>\n                            <label className=\"flex justify-between items-center\">\n                              <span>Largo:</span>\n                              <input\n                                type=\"number\"\n                                min=\"20\"\n                                max=\"400\"\n                                value={selectedTable.height || selectedTable.length || 60}\n                                onChange={e => handleTableDimensionChange('height', e.target.value)}\n                                className=\"border rounded px-1 py-0.5 w-20\"\n                              />\n                            </label>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </>\n              ) : (\n                <p className=\"text-sm text-gray-500\">Haz clic en una mesa</p>\n              )}\n            </div>\n\n   \n\n          </div>{/* cierra fila lienzo + panel lateral */}\n        </div>{/* cierra contenedor lienzo+lista */}\n\n\n      {/* Eliminado: Indicador de guardado */}\n\n      {/* Preview Modal */}\n      <Modal open={!!preview} title=\"Propuesta de asignación IA\" onClose={() => setPreview(null)}>\n        {preview && (\n          <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n            {Object.entries(preview).map(([tid, guest]) => (\n              <div key={tid} className=\"flex justify-between border-b pb-1\">\n                <span>Mesa {tid}</span>\n                <span>{guest.name}</span>\n              </div>\n            ))}\n          </div>\n        )}\n        <div className=\"mt-4 flex justify-end space-x-2\">\n          <button aria-label onClick={()=>setPreview(null)} className=\"px-3 py-1 text-sm bg-gray-200 rounded\">Cancelar</button>\n          <button aria-label onClick={()=>{ if(preview){ setTables(prev=>prev.map(t=> preview[t.id] ? { ...t, guestId: preview[t.id].id, guestName: preview[t.id].name } : t)); setPreview(null);} }} className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded\">Aplicar</button>\n        </div>\n      </Modal>\n\n      {/* Banquet Config Modal */}\n\n\n\n  {/* Banquet Config Modal */}\n  <BanquetConfigModal open={banquetConfigOpen} onClose={()=>setBanquetConfigOpen(false)} onApply={cfg=>{ generateBanquetLayout(cfg); setBanquetConfigOpen(false);} } />\n  <CeremonyConfigModal open={ceremonyConfigOpen} onClose={()=>setCeremonyConfigOpen(false)} onApply={({rows,cols,gap,aisleAfter})=>{ generateSeatGrid(rows,cols,gap,100,80,aisleAfter); setCeremonyConfigOpen(false);} } />\n\n  <TableConfigModal open={!!configTable} table={configTable||{}} onSave={saveTableConfig} onClose={()=>setConfigTable(null)} />\n\n  <TemplatesModal open={templateOpen} onApply={applyTemplate} onClose={()=>setTemplateOpen(false)} count={tab==='ceremony' ? seats.length || 60 : tableCount} tab={tab} />\n\n  </Card>\n  </PageWrapper>\n</DndProvider>\n);\n}\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Signup.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\Tasks.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\UnifiedEmail.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\WebEditor.jsx","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":125,"column":76,"nodeType":"BlockStatement","messageId":"unexpected","endLine":125,"endColumn":78,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[5084,5084],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { doc, getDoc, setDoc, collection, getDocs, addDoc, deleteDoc } from 'firebase/firestore';\r\nimport { db } from '../lib/firebase';\r\nimport { useUserContext } from '../context/UserContext';\r\nimport { Plus, Trash, Zap } from 'lucide-react';\r\n\r\n/*\r\n  Editor interno para la página web de la boda.\r\n  Permite al usuario rellenar/editar la información que utilizará WeddingSite.jsx.\r\n*/\r\n\r\nexport default function WebEditor() {\r\n  const { user } = useUserContext();\r\n  const uid = user?.uid || 'dev';\r\n\r\n  const [info, setInfo] = useState({\r\n    coupleName: '',\r\n    date: '',\r\n    celebrationPlace: '',\r\n    story: '',\r\n    giftAccount: '',\r\n    primaryColor: '#E91E63',\r\n    secondaryColor: '#FFFFFF',\r\n  });\r\n  const [schedule, setSchedule] = useState([]);\r\n  const [gallery, setGallery] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [aiLoading, setAiLoading] = useState(false);\r\n\r\n  // Cargar datos existentes\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const docSnap = await getDoc(doc(db, 'users', uid));\r\n        if (docSnap.exists() && docSnap.data().weddingInfo) setInfo({ ...info, ...docSnap.data().weddingInfo });\r\n        const schSnap = await getDocs(collection(db, 'users', uid, 'schedule'));\r\n        setSchedule(schSnap.docs.map(d => ({ id: d.id, ...d.data() })).sort((a,b)=>a.time.localeCompare(b.time)));\r\n        const galSnap = await getDocs(collection(db, 'users', uid, 'gallery'));\r\n        setGallery(galSnap.docs.map(d => ({ id: d.id, ...d.data() })));\r\n      } catch (e) { console.error(e); }\r\n    })();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [uid]);\r\n\r\n  const saveInfo = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await setDoc(doc(db, 'users', uid), { weddingInfo: info }, { merge: true });\r\n      alert('Información guardada');\r\n    } catch (err) { console.error(err); alert('Error al guardar'); }\r\n    setLoading(false);\r\n  };\r\n\r\n  // --- Schedule helpers ---\r\n  const addSchedule = () => setSchedule([...schedule, { time: '', title: '', temp: Date.now() }]);\r\n  const updateSchedule = (idx, key, val) => {\r\n    const next = [...schedule];\r\n    next[idx][key] = val;\r\n    setSchedule(next);\r\n  };\r\n  const removeSchedule = (idx) => setSchedule(schedule.filter((_,i)=>i!==idx));\r\n  const saveSchedule = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const colRef = collection(db, 'users', uid, 'schedule');\r\n      // Borrar docs existentes y volver a crear (simple)\r\n      const existing = await getDocs(colRef);\r\n      await Promise.all(existing.docs.map(d=>deleteDoc(d.ref)));\r\n      await Promise.all(schedule.map(item=> addDoc(colRef, { time: item.time, title: item.title })));\r\n      alert('Programa guardado');\r\n    } catch (e) { console.error(e); alert('Error'); }\r\n    setLoading(false);\r\n  };\r\n\r\n  // --- AI helpers ---\r\n  const suggestStory = async () => {\r\n    if (aiLoading) return;\r\n    if (!import.meta.env.VITE_OPENAI_KEY) { alert('Falta la clave de OpenAI'); return; }\r\n    setAiLoading(true);\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_KEY}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-3.5-turbo',\r\n          messages: [\r\n            { role: 'system', content: 'Eres un asistente que redacta textos románticos para webs de boda en español.' },\r\n            { role: 'user', content: `Genera una breve historia de amor (máx 150 palabras) para la pareja ${info.coupleName}.` }\r\n          ],\r\n          temperature: 0.8\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      const text = data.choices?.[0]?.message?.content?.trim();\r\n      if (text) setInfo(prev => ({ ...prev, story: text }));\r\n    } catch (err) { console.error(err); alert('Error OpenAI'); }\r\n    setAiLoading(false);\r\n  };\r\n\r\n  const suggestSchedule = async () => {\r\n    if (aiLoading) return;\r\n    if (!import.meta.env.VITE_OPENAI_KEY) { alert('Falta la clave de OpenAI'); return; }\r\n    setAiLoading(true);\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_KEY}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-3.5-turbo',\r\n          messages: [\r\n            { role: 'system', content: 'Eres un asistente que devuelve un JSON con el programa típico de una boda en España. Ejemplo: [{\"time\":\"12:00\",\"title\":\"Ceremonia\"}]' },\r\n            { role: 'user', content: 'Genera un programa para nuestra boda con 6-8 eventos clave. Usa formato JSON.' }\r\n          ],\r\n          temperature: 0.7\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      let arr = [];\r\n      try { arr = JSON.parse(data.choices?.[0]?.message?.content); } catch {}\r\n      if (Array.isArray(arr)) setSchedule(arr.map((item,i)=>({...item, temp:i})));\r\n    } catch(err){ console.error(err); alert('Error OpenAI'); }\r\n    setAiLoading(false);\r\n  };\r\n\r\n  // --- Gallery helpers ---\r\n  const addImage = () => setGallery([...gallery, { url: '' }]);\r\n  const updateImage = (idx, val) => {\r\n    const next = [...gallery];\r\n    next[idx].url = val;\r\n    setGallery(next);\r\n  };\r\n  const removeImage = idx => setGallery(gallery.filter((_,i)=>i!==idx));\r\n  const saveGallery = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const colRef = collection(db, 'users', uid, 'gallery');\r\n      const existing = await getDocs(colRef);\r\n      await Promise.all(existing.docs.map(d=>deleteDoc(d.ref)));\r\n      await Promise.all(gallery.filter(g=>g.url).map(img=> addDoc(colRef, { url: img.url })));\r\n      alert('Galería guardada');\r\n    } catch (e) { console.error(e); alert('Error'); }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 md:p-6 space-y-8 max-w-4xl mx-auto\">\r\n      <h1 className=\"text-2xl font-bold text-gray-800\">Editor de mi web</h1>\r\n\r\n      {/* Información básica */}\r\n      <section className=\"space-y-4\">\r\n        <h2 className=\"text-xl font-medium\">Datos básicos</h2>\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n          <input className=\"border p-2 rounded\" placeholder=\"Nombres de la pareja\" value={info.coupleName} onChange={e=>setInfo({...info,coupleName:e.target.value})}/>\r\n          <input className=\"border p-2 rounded\" type=\"date\" value={info.date} onChange={e=>setInfo({...info,date:e.target.value})}/>\r\n          <input className=\"border p-2 rounded sm:col-span-2\" placeholder=\"Lugar de la celebración\" value={info.celebrationPlace} onChange={e=>setInfo({...info,celebrationPlace:e.target.value})}/>\r\n        </div>\r\n        <textarea className=\"border p-2 rounded w-full\" rows=\"4\" placeholder=\"Nuestra historia\" value={info.story} onChange={e=>setInfo({...info,story:e.target.value})}/>\r\n        <button type=\"button\" onClick={suggestStory} disabled={aiLoading} className=\"text-sm text-blue-600 underline\">{aiLoading ? 'Generando...' : 'Sugerir con IA'}</button>\r\n        <input className=\"border p-2 rounded w-full\" placeholder=\"Cuenta bancaria / lista de regalos\" value={info.giftAccount} onChange={e=>setInfo({...info,giftAccount:e.target.value})}/>\r\n        <div className=\"flex gap-4 items-center\">\r\n          <label>Color primario:</label>\r\n          <input type=\"color\" value={info.primaryColor} onChange={e=>setInfo({...info,primaryColor:e.target.value})}/>\r\n          <label>Color secundario:</label>\r\n          <input type=\"color\" value={info.secondaryColor} onChange={e=>setInfo({...info,secondaryColor:e.target.value})}/>\r\n        </div>\r\n        <button className=\"bg-blue-600 text-white px-4 py-2 rounded\" disabled={loading} onClick={saveInfo}>Guardar información</button>\r\n      </section>\r\n\r\n      {/* Programa */}\r\n      <section className=\"space-y-4\">\r\n        <h2 className=\"text-xl font-medium flex items-center justify-between\">Programa del día\r\n          <div className=\"flex gap-3\">\r\n            <button onClick={addSchedule} className=\"text-green-600 flex items-center gap-1\"><Plus size={16}/> Añadir</button>\r\n            <button onClick={suggestSchedule} disabled={aiLoading} className=\"text-indigo-600 flex items-center gap-1\"><Zap size={16}/> IA</button>\r\n          </div>\r\n        </h2>\r\n        {schedule.map((s,idx)=>(\r\n          <div key={s.id || s.temp} className=\"flex gap-2 items-center\">\r\n            <input type=\"time\" className=\"border p-1 rounded\" value={s.time} onChange={e=>updateSchedule(idx,'time',e.target.value)}/>\r\n            <input className=\"border p-1 rounded flex-grow\" placeholder=\"Descripción\" value={s.title} onChange={e=>updateSchedule(idx,'title',e.target.value)}/>\r\n            <button onClick={()=>removeSchedule(idx)} className=\"text-red-600\"><Trash size={16}/></button>\r\n          </div>\r\n        ))}\r\n        <button className=\"bg-blue-600 text-white px-4 py-2 rounded\" disabled={loading} onClick={saveSchedule}>Guardar programa</button>\r\n      </section>\r\n\r\n      {/* Galería */}\r\n      <section className=\"space-y-4\">\r\n        <h2 className=\"text-xl font-medium flex items-center justify-between\">Galería <button onClick={addImage} className=\"text-green-600 flex items-center gap-1\"><Plus size={16}/> Añadir</button></h2>\r\n        {gallery.map((g,idx)=>(\r\n          <div key={g.id || idx} className=\"flex gap-2 items-center\">\r\n            <input className=\"border p-1 rounded flex-grow\" placeholder=\"URL de la imagen\" value={g.url} onChange={e=>updateImage(idx,e.target.value)}/>\r\n            <button onClick={()=>removeImage(idx)} className=\"text-red-600\"><Trash size={16}/></button>\r\n          </div>\r\n        ))}\r\n        <button className=\"bg-blue-600 text-white px-4 py-2 rounded\" disabled={loading} onClick={saveGallery}>Guardar galería</button>\r\n      </section>\r\n\r\n      {/* Vista previa */}\r\n      <section className=\"space-y-2\">\r\n        <h2 className=\"text-xl font-medium\">Vista previa</h2>\r\n        <iframe title=\"Preview\" className=\"border w-full h-[600px] rounded\" src={`/w/${uid}`} />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\WeddingSite.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\disenos\\DisenosLayout.jsx","messages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":15,"column":23,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":63,"endColumn":3}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo } from 'react';\r\nimport { NavLink, Outlet, useLocation, useNavigate } from 'react-router-dom';\r\nimport Card from '../../components/Card';\r\n\r\n// Pestañas iniciales para la sección Diseños\r\nconst tabs = [\r\n  { path: 'invitaciones', label: 'Invitaciones' },\r\n  { path: 'logo', label: 'Logo' },\r\n  { path: 'menu', label: 'Menú' },\r\n  { path: 'seating-plan', label: 'Seating Plan' },\r\n  { path: 'menu-catering', label: 'Menú Catering' },\r\n  { path: 'papeles-nombres', label: 'Papeles Nombres' },\r\n];\r\n\r\nconst DisenosLayout = React.memo(() => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  /* Redirección a la primera pestaña si el usuario está en /disenos */\r\n  useEffect(() => {\r\n    if (location.pathname === '/disenos' || location.pathname === '/disenos/') {\r\n      navigate('/disenos/invitaciones', { replace: true });\r\n    }\r\n  }, [location.pathname, navigate]);\r\n\r\n  const navTabs = useMemo(() => tabs.map(t => ({ ...t, href: `/disenos/${t.path}` })), []);\r\n\r\n  if (location.pathname === '/disenos' || location.pathname === '/disenos/') {\r\n    return <div className=\"p-6\" role=\"status\" aria-live=\"polite\">Cargando...</div>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"p-6 flex flex-col gap-6\" aria-labelledby=\"disenos-heading\">\r\n      <h1 id=\"disenos-heading\" className=\"text-2xl font-bold text-gray-800\">Diseños</h1>\r\n\r\n      <nav role=\"tablist\" aria-label=\"Secciones de Diseño\" className=\"flex overflow-x-auto space-x-2 pb-2\">\r\n        {navTabs.map(tab => (\r\n          <NavLink\r\n            key={tab.path}\r\n            to={tab.href}\r\n            role=\"tab\"\r\n            aria-current={location.pathname === tab.href ? 'page' : undefined}\r\n            className={({ isActive }) =>\r\n              `px-4 py-2 rounded-t-lg font-medium whitespace-nowrap focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-500 ${\r\n                isActive\r\n                  ? 'bg-white border-t-2 border-l-2 border-r-2 border-blue-500 text-blue-600 font-semibold'\r\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n              }`\r\n            }\r\n          >\r\n            {tab.label}\r\n          </NavLink>\r\n        ))}\r\n      </nav>\r\n\r\n      <Card className=\"overflow-hidden focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500\" role=\"region\" aria-label=\"Contenido de Diseños\">\r\n        <div className=\"p-6\">\r\n          <Outlet />\r\n        </div>\r\n      </Card>\r\n    </section>\r\n  );\r\n});\r\n\r\nexport default DisenosLayout;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\disenos\\Invitaciones.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\disenos\\Logo.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport Card from '../../components/Card';\r\nimport UploadImageCard from '../../components/UploadImageCard';\r\nimport { saveData, loadData } from '../../services/SyncService';\r\nimport SyncIndicator from '../../components/SyncIndicator';\r\nimport ImageGeneratorAI from '../../components/ImageGeneratorAI';\r\n\r\n// Plantillas predefinidas para logos de boda\r\nconst logoTemplates = [\r\n  {\r\n    name: 'Monograma Elegante',\r\n    description: 'Logo con las iniciales de los novios en estilo elegante y sofisticado',\r\n    prompt: 'Diseña un monograma elegante para una boda con iniciales entrelazadas. Estilo sofisticado y clásico con tipografía serif. Usa colores dorado y blanco sobre fondo oscuro. Incluye algún elemento decorativo sutil como hojas o flores. El logo debe ser limpio y versátil para usar en invitaciones y decoración.'\r\n  },\r\n  {\r\n    name: 'Emblema Floral',\r\n    description: 'Logo rodeado de elementos florales y orgánicos',\r\n    prompt: 'Crea un logo para boda con nombres o iniciales rodeados de elementos florales. Utiliza un estilo botánico con flores y hojas delicadas. Paleta de colores suaves como verde sage, rosa pálido y toques dorados. Diseño circular u ovalado que funcione bien como sello o emblema. Estilo romántico y natural.'\r\n  },\r\n  {\r\n    name: 'Minimalista Moderno',\r\n    description: 'Logo limpio y minimalista con líneas finas y estética contemporánea',\r\n    prompt: 'Diseña un logo minimalista y moderno para boda. Utiliza líneas finas, formas geométricas simples y tipografía sans-serif. Estilo limpio y contemporáneo sin adornos excesivos. Incorpora iniciales o nombres completos en un diseño equilibrado. Usa colores neutros como negro, gris o azul marino. El logo debe transmitir elegancia y simplicidad.'\r\n  },\r\n  {\r\n    name: 'Vintage & Retro',\r\n    description: 'Logo con estética vintage y elementos decorativos de época',\r\n    prompt: 'Crea un logo de boda con estética vintage o retro. Utiliza tipografías clásicas con serifs pronunciados o estilo script elegante. Incorpora elementos decorativos como marcos ornamentados, cintas o víñetas. Usa una paleta de colores envejecida como sepia, borgoña o azul marino. El diseño debe evocar nostalgia y elegancia atemporal, inspirado en los años 20-50.'\r\n  },\r\n  {\r\n    name: 'Ilustrado & Artístico',\r\n    description: 'Logo personalizado con ilustraciones hechas a mano y elementos creativos',\r\n    prompt: 'Diseña un logo de boda ilustrado con elementos personalizados. Estilo artístico que parece hecho a mano, con trazos de acuarela, tinta o dibujo. Incluye pequenos elementos simbólicos relacionados con la pareja (hobbies, lugares significativos, mascotas). Combina las ilustraciones con tipografía manuscrita o caligráfica. Colorido pero armonioso, con aspecto único y personal.'\r\n  },\r\n];\r\n\r\nexport default function Logo() {\r\n  const [hex, setHex] = useState(() => loadData('logoColor', { defaultValue: '#FF69B4', collection: 'userLogo' }));\r\n\r\n  const handleColor = (e) => {\r\n    setHex(e.target.value);\r\n    saveData('logoColor', e.target.value, {\r\n      collection: 'userLogo',\r\n      showNotification: false\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <SyncIndicator />\r\n      <UploadImageCard title=\"Subir Logo\" storageKey=\"logoImage\" />\r\n\r\n      <Card className=\"p-4 flex flex-col gap-4 items-start\">\r\n        <h2 className=\"text-lg font-semibold\">Color principal</h2>\r\n        <input\r\n          type=\"color\"\r\n          value={hex}\r\n          onChange={handleColor}\r\n          className=\"w-16 h-10 p-0 border-0 cursor-pointer\"\r\n          aria-label=\"Seleccionar color del logo\"\r\n        />\r\n        <p className=\"text-sm text-gray-600\">Código: {hex}</p>\r\n      </Card>\r\n\r\n      <div className=\"mb-6\">\r\n        <h2 className=\"text-xl font-semibold mb-2\">Diseña el logo para tu boda</h2>\r\n        <p className=\"text-gray-600\">Crea un logo personalizado que represente vuestra boda. Podrás usarlo en invitaciones, regalos, decoración y más.</p>\r\n      </div>\r\n\r\n      <ImageGeneratorAI \r\n        category=\"logo\" \r\n        templates={logoTemplates}\r\n        onImageGenerated={(image) => {\r\n          console.log('Nuevo logo generado:', image);\r\n          // Actualizamos el logo en el contexto de usuario si se desea\r\n          try {\r\n            const userProfile = loadData('lovendaProfile', { defaultValue: {}, collection: 'userProfile' });\r\n            if (userProfile) {\r\n              userProfile.logoUrl = image.url;\r\n              saveData('lovendaProfile', userProfile, { collection: 'userProfile', showNotification: false });\r\n              // Notificar a la aplicación que el logo ha cambiado\r\n              window.dispatchEvent(new Event('lovenda-profile-updated'));\r\n            }\r\n          } catch (err) {\r\n            console.error('Error al guardar el logo en el perfil:', err);\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\disenos\\Menu.jsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ImageGeneratorAI' is not defined.","line":141,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":141,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport Card from '../../components/Card';\r\nimport { Plus, Trash2 } from 'lucide-react';\r\nimport { saveData, loadData } from '../../services/SyncService';\r\nimport SyncIndicator from '../../components/SyncIndicator';\r\n\r\nconst initialState = () => {\r\n  try {\r\n    return loadData('menuDesigner', { \r\n      defaultValue: { entradas: [], principales: [], postres: [], bebidas: [] }, \r\n      collection: 'userMenus' \r\n    });\r\n  } catch (error) {\r\n    console.error('Error al cargar el diseño del menú:', error);\r\n    return { entradas: [], principales: [], postres: [], bebidas: [] };\r\n  }\r\n};\r\n\r\n// Plantillas predefinidas para menús de boda\r\nconst menuTemplates = [\r\n  {\r\n    name: 'Elegante & Clásico',\r\n    description: 'Diseño de menú formal con estilo clásico y refinado',\r\n    prompt: 'Diseña un menú elegante para una boda con estilo clásico y refinado. Formato vertical con tipografía serif elegante. Usa colores neutros con detalles dorados o plateados. Incluye secciones para entrante, plato principal, postre y bebidas. El diseño debe ser sobrio y sofisticado, adecuado para una cena formal de boda.'\r\n  },\r\n  {\r\n    name: 'Rústico & Natural',\r\n    description: 'Menú con estética rústica, elementos naturales y texto manuscrito',\r\n    prompt: 'Crea un menú de boda con estética rústica y natural. Utiliza elementos como madera, flores silvestres y hojas. Tipografía con aspecto manuscrito o caligráfico. Formato de una página con secciones para entrante, principal, postre y bebidas. Paleta de colores tierra y verdes naturales. El diseño debe transmitir calidez y un ambiente campestre elegante.'\r\n  },\r\n  {\r\n    name: 'Minimalista & Moderno',\r\n    description: 'Diseño limpio y contemporáneo con espacios blancos y tipografía simple',\r\n    prompt: 'Diseña un menú minimalista y moderno para boda. Utiliza mucho espacio en blanco, tipografía sans-serif limpia y elementos geométricos simples. Formato elegante con distribución equilibrada. Paleta monocromática o con un acento de color. Incluye secciones para los platos principales y bebidas. El diseño debe ser contemporáneo, limpio y fácil de leer.'\r\n  },\r\n  {\r\n    name: 'Botánico & Floral',\r\n    description: 'Menú decorado con elementos botánicos, flores y follaje',\r\n    prompt: 'Crea un menú de boda con temática botánica y floral. Incorpora ilustraciones delicadas de flores, hojas y ramas como elementos decorativos. Usa una combinación de tipografías elegantes y caligráficas. Paleta de colores suaves como verde salvia, rosa pálido y toques dorados. Formato de una página con todas las secciones del menú organizadas armónicamente entre los elementos vegetales.'\r\n  },\r\n  {\r\n    name: 'Vintage & Romántico',\r\n    description: 'Menú con estética nostálgica, detalles ornamentados y aire romántico',\r\n    prompt: 'Diseña un menú de boda con estética vintage y romántica. Utiliza elementos decorativos como encajes, marcos ornamentados y motivos florales delicados. Tipografía elegante con serifs o caligráfica. Paleta en tonos sepia, crema o rosa antiguo. Formato que recuerde a documentos antiguos o postales vintage. Incluye todas las secciones del menú dentro de un diseño que evoque nostalgia y romance.'\r\n  },\r\n];\r\n\r\nexport default function MenuDiseno() {\r\n  \r\n  const [menu, setMenu] = useState(initialState);\r\n  const [course, setCourse] = useState('entradas');\r\n  const [dish, setDish] = useState('');\r\n\r\n  useEffect(() => {\r\n    saveData('menuDesigner', menu, {\r\n      collection: 'userMenus',\r\n      showNotification: false\r\n    });\r\n  }, [menu]);\r\n\r\n  const addDish = () => {\r\n    if (!dish.trim()) return;\r\n    setMenu(prev => ({ ...prev, [course]: [...prev[course], dish.trim()] }));\r\n    setDish('');\r\n  };\r\n\r\n  const removeDish = (courseKey, idx) => {\r\n    setMenu(prev => ({\r\n      ...prev,\r\n      [courseKey]: prev[courseKey].filter((_, i) => i !== idx),\r\n    }));\r\n  };\r\n\r\n  // Generar un prompt personalizado basado en los datos del menú\r\n  const generateCustomPrompt = () => {\r\n    const menuItems = [];\r\n    if (menu.entradas.length > 0) menuItems.push(`Entrantes: ${menu.entradas.join(', ')}`);\r\n    if (menu.principales.length > 0) menuItems.push(`Platos principales: ${menu.principales.join(', ')}`);\r\n    if (menu.postres.length > 0) menuItems.push(`Postres: ${menu.postres.join(', ')}`);\r\n    if (menu.bebidas.length > 0) menuItems.push(`Bebidas: ${menu.bebidas.join(', ')}`);\r\n    \r\n    if (menuItems.length === 0) return '';\r\n    \r\n    return `Diseña un menú elegante para boda con los siguientes platos:\\n${menuItems.join('\\n')}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      <SyncIndicator />\r\n      <Card className=\"p-6 space-y-4\">\r\n        <h1 className=\"text-2xl font-semibold\">Diseño del Menú</h1>\r\n        <div className=\"flex flex-col md:flex-row gap-2 md:items-end\">\r\n          <select value={course} onChange={e => setCourse(e.target.value)} className=\"border rounded px-3 py-2\">\r\n            <option value=\"entradas\">Entradas</option>\r\n            <option value=\"principales\">Plato principal</option>\r\n            <option value=\"postres\">Postres</option>\r\n            <option value=\"bebidas\">Bebidas</option>\r\n          </select>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Nombre del plato\"\r\n            value={dish}\r\n            onChange={e => setDish(e.target.value)}\r\n            className=\"flex-grow border rounded px-3 py-2\"\r\n          />\r\n          <button onClick={addDish} className=\"flex items-center gap-1 bg-blue-600 text-white px-4 py-2 rounded\">\r\n            <Plus size={16} /> Añadir\r\n          </button>\r\n        </div>\r\n      </Card>\r\n\r\n      <Card className=\"p-6 space-y-6\">\r\n        <h2 className=\"text-xl font-semibold\">Vista Previa</h2>\r\n        <div className=\"space-y-4 text-center font-serif\">\r\n          {Object.entries(menu).map(([key, dishes]) => (\r\n            <div key={key} className=\"space-y-1\">\r\n              <h3 className=\"text-lg font-bold capitalize\">{key}</h3>\r\n              {dishes.length === 0 && <p className=\"text-sm text-gray-500\">Sin elementos</p>}\r\n              {dishes.map((d, idx) => (\r\n                <div key={idx} className=\"flex items-center justify-center gap-2 group\">\r\n                  <span>{d}</span>\r\n                  <button\r\n                    onClick={() => removeDish(key, idx)}\r\n                    className=\"hidden group-hover:inline-flex text-red-600\"\r\n                    aria-label={`Eliminar ${d}`}\r\n                  >\r\n                    <Trash2 size={14} />\r\n                  </button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n\r\n      <div className=\"mt-8 mb-4\">\r\n        <h2 className=\"text-lg font-semibold mb-2\">Diseña tu menú</h2>\r\n        <p className=\"text-gray-600\">Genera diseños para tu menú utilizando IA. Los datos que has introducido arriba se incluirán automáticamente.</p>\r\n      </div>\r\n\r\n      <ImageGeneratorAI \r\n        category=\"menu\" \r\n        templates={menuTemplates}\r\n        customPrompt={generateCustomPrompt()}\r\n        onImageGenerated={(image) => {\r\n          console.log('Nuevo diseño de menú generado:', image);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\disenos\\MenuCatering.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'saveData' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'setSpecialMenus' is assigned a value but never used.","line":37,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'generateCustomPrompt' is assigned a value but never used.","line":50,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport Card from '../../components/Card';\r\nimport { saveData, loadData } from '../../services/SyncService';\r\nimport ImageGeneratorAI from '../../components/ImageGeneratorAI';\r\n\r\n// Plantillas predefinidas para menús especiales de catering\r\nconst cateringTemplates = [\r\n  {\r\n    name: 'Menú Vegetariano',\r\n    description: 'Diseño elegante para menús vegetarianos',\r\n    prompt: 'Diseña una tarjeta de menú vegetariano para boda. Utiliza un diseño elegante con elementos vegetales sutiles como hojas o hierbas. Incluye el título \"Menú Vegetariano\" y espacio para listar entrantes, plato principal y postre. El diseño debe ser sofisticado y a juego con la decoración general de la boda, pero claramente identificable como opción vegetariana. Usa colores que evoquen frescura y naturaleza.'\r\n  },\r\n  {\r\n    name: 'Menú Infantil',\r\n    description: 'Diseño divertido pero elegante para el menú de niños',\r\n    prompt: 'Crea un diseño de menú infantil para boda que sea divertido pero mantenga la elegancia del evento. Incluye elementos gráficos amigables para niños sin ser excesivamente infantil. El título debe ser \"Menú Infantil\" o similar, con espacio para listar opciones de comida para niños. Usa colores vibrantes pero armoniosos con la temática de boda. El diseño debe ser atractivo para los niños pero también visualmente agradable para los padres.'\r\n  },\r\n  {\r\n    name: 'Menú Sin Gluten',\r\n    description: 'Diseño elegante para menús sin gluten',\r\n    prompt: 'Diseña una tarjeta de menú sin gluten para boda. El diseño debe ser elegante y sofisticado, a la altura del evento. Incluye el título \"Menú Sin Gluten\" de forma visible pero discreta. Proporciona espacio para detallar los platos seguros sin gluten para entrantes, plato principal y postre. Utiliza un símbolo o icono sutil que indique que es apto para celíacos. El estilo visual debe integrarse perfectamente con el resto de la papelería de boda.'\r\n  },\r\n  {\r\n    name: 'Menú Sin Lácteos',\r\n    description: 'Diseño para menús libres de lácteos',\r\n    prompt: 'Crea un diseño de menú sin lácteos para boda. El diseño debe ser elegante y refinado, en línea con la estética general de la boda. Incluye un título claro como \"Menú Sin Lácteos\" o \"Menú Libre de Lácteos\". Proporciona espacio para listar entrantes, plato principal y postre. Puedes incorporar algún elemento gráfico sutil que indique la ausencia de lácteos. La paleta de colores debe ser armoniosa con el resto de la decoración del evento.'\r\n  },\r\n  {\r\n    name: 'Menú Personalizado',\r\n    description: 'Diseño versátil para cualquier necesidad dietética especial',\r\n    prompt: 'Diseña un formato de menú personalizable para necesidades dietéticas especiales en una boda. El diseño debe incluir un espacio prominente para el título donde se pueda especificar el tipo de menú especial. Proporciona secciones claras para entrantes, plato principal y postre. Incorpora elementos gráficos elegantes que sean neutros y adaptables a cualquier tipo de restricción alimentaria. El diseño debe ser sofisticado y coherente con la estética general de la boda.'\r\n  },\r\n];\r\n\r\nexport default function MenuCatering() {\r\n  // Estado para los diferentes tipos de menús especiales\r\n  const [specialMenus, setSpecialMenus] = useState(() => {\r\n    try {\r\n      return loadData('specialMenus', { \r\n        defaultValue: { vegetariano: [], infantil: [], sinGluten: [], sinLacteos: [], otros: [] },\r\n        collection: 'userSpecialMenus'\r\n      });\r\n    } catch (error) {\r\n      console.error('Error al cargar menús especiales:', error);\r\n      return { vegetariano: [], infantil: [], sinGluten: [], sinLacteos: [], otros: [] };\r\n    }\r\n  });\r\n\r\n  // Generar un prompt personalizado basado en los datos del menú\r\n  const generateCustomPrompt = () => {\r\n    // Ejemplo: si hay menús vegetarianos definidos, incluirlos en el prompt\r\n    const menuTypes = Object.keys(specialMenus).filter(type => specialMenus[type].length > 0);\r\n    \r\n    if (menuTypes.length === 0) return '';\r\n    \r\n    const menuDetails = menuTypes.map(type => {\r\n      const items = specialMenus[type];\r\n      const typeLabel = {\r\n        vegetariano: 'Menú Vegetariano',\r\n        infantil: 'Menú Infantil',\r\n        sinGluten: 'Menú Sin Gluten',\r\n        sinLacteos: 'Menú Sin Lácteos',\r\n        otros: 'Menú Especial'\r\n      }[type] || 'Menú Especial';\r\n      \r\n      return `${typeLabel}: ${items.join(', ')}`;\r\n    });\r\n    \r\n    return `Diseña un conjunto de tarjetas de menús especiales para boda con los siguientes tipos: ${menuDetails.join('. ')}. Cada tarjeta debe identificar claramente el tipo de menú especial.`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card className=\"p-6 space-y-4\">\r\n        <h1 className=\"text-2xl font-semibold\">Diseño de Menús Especiales</h1>\r\n        <p className=\"text-gray-600\">Crea tarjetas elegantes para los menús especiales de tu boda (vegetarianos, infantil, sin gluten, etc). Selecciona un estilo o personaliza tu propio diseño.</p>\r\n        \r\n        <div className=\"mt-2\">\r\n          <p className=\"text-sm text-blue-600\">\r\n            <span className=\"font-medium\">Consejo:</span> Para una experiencia completa, define primero los platos de cada menú especial en la sección de Menú principal.\r\n          </p>\r\n        </div>\r\n      </Card>\r\n      \r\n      <ImageGeneratorAI \r\n        category=\"special-menus\" \r\n        templates={cateringTemplates}\r\n        onImageGenerated={(image) => {\r\n          console.log('Nuevos diseños de menús especiales generados:', image);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\disenos\\PapelesNombres.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'saveData' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'getGuestsInfo' is assigned a value but never used.","line":37,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport Card from '../../components/Card';\r\nimport { saveData, loadData } from '../../services/SyncService';\r\nimport ImageGeneratorAI from '../../components/ImageGeneratorAI';\r\n\r\n// Plantillas predefinidas para marcadores de mesa y papelitos con nombres\r\nconst nameCardsTemplates = [\r\n  {\r\n    name: 'Elegante & Minimalista',\r\n    description: 'Marcador de mesa elegante con tipografía refinada sobre fondo neutro',\r\n    prompt: 'Diseña un marcador de mesa elegante y minimalista para una boda. El diseño debe incluir un espacio claro para el nombre del invitado, con tipografía serif refinada. Usa colores neutros como blanco, crema, o gris pálido con detalles en dorado o plateado. El estilo debe ser sobrio, clásico y sofisticado, adecuado para una cena formal. Formato rectangular u ovalado que pueda imprimirse y doblarse.'\r\n  },\r\n  {\r\n    name: 'Rústico & Natural',\r\n    description: 'Marcador de mesa con elementos naturales, madera y estilo campestre',\r\n    prompt: 'Crea un marcador de mesa con estilo rústico y natural para boda. Utiliza texturas que simulen madera, papel kraft o materiales reciclados. Incorpora elementos decorativos como hojas, flores silvestres o ramas. Tipografía con aspecto manuscrito o artesanal. El diseño debe transmitir calidez y un ambiente campestre. Formato que permita escribir el nombre del invitado de forma destacada y legible.'\r\n  },\r\n  {\r\n    name: 'Floral & Romántico',\r\n    description: 'Marcador decorado con flores, motivos botánicos y colores suaves',\r\n    prompt: 'Diseña un marcador de mesa con motivos florales y románticos para una boda. Incorpora ilustraciones delicadas de flores como rosas, peonías o lavanda. Utiliza una paleta de colores suaves y pasteles. Tipografía elegante, caligráfica o manuscrita que resalte el nombre del invitado. El diseño debe ser delicado y evocador, con un aire romántico y primaveral.'\r\n  },\r\n  {\r\n    name: 'Moderno & Geométrico',\r\n    description: 'Marcador con líneas limpias, formas geométricas y estilo contemporáneo',\r\n    prompt: 'Crea un marcador de mesa moderno con elementos geométricos para boda. Utiliza formas como hexágonos, triángulos o líneas abstractas. Tipografía sans-serif limpia y contemporánea. Paleta de colores contrastantes pero elegantes como negro, blanco, dorado o colores acentuados. El diseño debe ser actual, con estilo minimalista pero distintivo, dejando espacio prominente para el nombre del invitado.'\r\n  },\r\n  {\r\n    name: 'Temático & Personalizado',\r\n    description: 'Marcador temático que refleja algún interés, afición o motivo especial',\r\n    prompt: 'Diseña un marcador de mesa temático para boda inspirado en viajes/destinos. Incorpora sutilmente elementos como mapas, brújulas, aviones o monumentos icónicos. El diseño debe mantener la elegancia apropiada para una boda mientras incorpora estos elementos temáticos de forma creativa. Incluye un espacio claro para el nombre del invitado con tipografía legible y atractiva que complemente el tema.'\r\n  },\r\n];\r\n\r\nexport default function PapelesNombres() {\r\n  // Obtener información de invitados si está disponible\r\n  const getGuestsInfo = () => {\r\n    try {\r\n      const guests = loadData('lovendaGuests', { defaultValue: [], collection: 'userGuests' });\r\n      \r\n      // Si no hay suficientes invitados, devolver cadena vacía\r\n      if (guests.length < 5) return '';\r\n      \r\n      // Seleccionar algunos invitados para incluir en el ejemplo\r\n      const selectedGuests = guests\r\n        .filter(g => g.name && g.name.trim() !== '')\r\n        .slice(0, 8)\r\n        .map(g => g.name);\r\n      \r\n      if (selectedGuests.length === 0) return '';\r\n      \r\n      return `Incluye ejemplos para los siguientes nombres: ${selectedGuests.join(', ')}`;\r\n    } catch (err) {\r\n      console.error('Error al obtener información de invitados:', err);\r\n      return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card className=\"p-6 space-y-4\">\r\n        <h1 className=\"text-2xl font-semibold\">Marcadores de Mesa</h1>\r\n        <p className=\"text-gray-600\">Crea elegantes marcadores con los nombres de tus invitados para identificar su lugar en la mesa. Selecciona un estilo o personaliza tu propio diseño.</p>\r\n        \r\n        <div className=\"mt-2\">\r\n          <p className=\"text-sm text-blue-600\">\r\n            <span className=\"font-medium\">Consejo:</span> Para mejores resultados, añade primero a tus invitados en la sección de Invitados.\r\n          </p>\r\n        </div>\r\n      </Card>\r\n      \r\n      <ImageGeneratorAI \r\n        category=\"place-cards\" \r\n        templates={nameCardsTemplates}\r\n        onImageGenerated={(image) => {\r\n          console.log('Nuevos marcadores de mesa generados:', image);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\disenos\\Post.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getProfileInfo' is assigned a value but never used.","line":37,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport Card from '../../components/Card';\r\nimport { loadData } from '../../services/SyncService';\r\nimport ImageGeneratorAI from '../../components/ImageGeneratorAI';\r\n\r\n// Plantillas predefinidas para posts y contenido para redes sociales\r\nconst socialMediaTemplates = [\r\n  {\r\n    name: 'Anuncio de Compromiso',\r\n    description: 'Post elegante para anunciar el compromiso en redes sociales',\r\n    prompt: 'Diseña una imagen para anunciar un compromiso en redes sociales. Formato cuadrado (1:1) ideal para Instagram. Incluye el texto \"¡Nos casamos!\" o similar y espacio para añadir la fecha. Estilo elegante y romántico con elementos como anillos, flores o corazones sutiles. La imagen debe ser sofisticada pero emotiva, adecuada para compartir en cualquier plataforma social.'\r\n  },\r\n  {\r\n    name: 'Save the Date',\r\n    description: 'Post para informar a invitados sobre la fecha de la boda',\r\n    prompt: 'Crea un diseño de \"Save the Date\" para compartir en redes sociales. Formato cuadrado optimizado para Instagram y otras plataformas. Incluye la frase \"Save the Date\" de forma destacada y espacio para incluir la fecha y posiblemente el lugar. El estilo debe ser moderno y atractivo visualmente, con elementos gráficos que llamen la atención pero manteniendo la elegancia. La imagen debe transmitir la emoción y la anticipación del evento.'\r\n  },\r\n  {\r\n    name: 'Cuenta Atrás',\r\n    description: 'Post que muestra los días restantes hasta la boda',\r\n    prompt: 'Diseña una plantilla para posts de cuenta atrás para boda en redes sociales. Formato cuadrado para Instagram. Debe incluir prominentemente el texto \"Faltan X días\" con un espacio claro donde se pueda editar el número. El diseño debe ser atractivo visualmente con elementos festivos pero elegantes. Incluye algún elemento gráfico como un reloj, calendario o similar que enfatice el concepto de cuenta atrás. Los colores deben ser acordes a una boda.'\r\n  },\r\n  {\r\n    name: 'Hashtag de Boda',\r\n    description: 'Post que destaca el hashtag personalizado para la boda',\r\n    prompt: 'Crea un diseño para promocionar un hashtag personalizado de boda en redes sociales. Formato cuadrado para Instagram y otras plataformas. El diseño debe destacar prominentemente el texto \"#NuestroHashtag\" (como ejemplo, debe ser fácilmente reemplazable). Incorpora elementos visuales atractivos que complementen el tema de la boda. La composición debe ser clara y legible incluso en pantallas pequeñas, animando a los invitados a usar el hashtag cuando compartan fotos del evento.'\r\n  },\r\n  {\r\n    name: 'Agradecimiento Post-Boda',\r\n    description: 'Post para agradecer a invitados tras la celebración',\r\n    prompt: 'Diseña una imagen para publicar en redes sociales como agradecimiento después de una boda. Formato cuadrado para Instagram. Incluye un texto como \"Gracias por compartir nuestro día especial\" u otra frase de agradecimiento similar. El diseño debe transmitir gratitud y emoción, con elementos elegantes que evoquen la celebración. Utiliza una paleta de colores romántica y sofisticada. La imagen debe ser lo suficientemente versátil para acompañar una galería de fotos del evento.'\r\n  },\r\n];\r\n\r\nexport default function PostDiseno() {\r\n  // Obtener información del perfil para personalizar los prompts si es posible\r\n  const getProfileInfo = () => {\r\n    try {\r\n      const profile = loadData('lovendaProfile', { defaultValue: {}, collection: 'userProfiles' });\r\n      const names = [];\r\n      \r\n      if (profile.brideFirstName && profile.groomFirstName) {\r\n        names.push(`${profile.brideFirstName} & ${profile.groomFirstName}`);\r\n      } else if (profile.brideFirstName) {\r\n        names.push(profile.brideFirstName);\r\n      } else if (profile.groomFirstName) {\r\n        names.push(profile.groomFirstName);\r\n      }\r\n      \r\n      let customInfo = '';\r\n      \r\n      if (names.length > 0) {\r\n        customInfo += `Incluye los nombres: ${names.join(' y ')}. `;\r\n      }\r\n      \r\n      if (profile.weddingDate) {\r\n        // Formato simple de fecha\r\n        customInfo += `La fecha de la boda es: ${profile.weddingDate}. `;\r\n      }\r\n      \r\n      if (profile.weddingLocation) {\r\n        customInfo += `La boda se celebra en: ${profile.weddingLocation}. `;\r\n      }\r\n      \r\n      return customInfo;\r\n    } catch (err) {\r\n      console.error('Error al obtener información del perfil:', err);\r\n      return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card className=\"p-6 space-y-4\">\r\n        <h1 className=\"text-2xl font-semibold\">Diseño de Posts para Redes Sociales</h1>\r\n        <p className=\"text-gray-600\">Crea imágenes atractivas para compartir en tus redes sociales antes, durante y después de la boda. Selecciona un estilo o personaliza tu propio diseño.</p>\r\n        \r\n        <div className=\"mt-2\">\r\n          <p className=\"text-sm text-blue-600\">\r\n            <span className=\"font-medium\">Consejo:</span> Estas imágenes están optimizadas para formato cuadrado, ideal para Instagram y otras plataformas de redes sociales.\r\n          </p>\r\n        </div>\r\n      </Card>\r\n      \r\n      <ImageGeneratorAI \r\n        category=\"social-media\" \r\n        templates={socialMediaTemplates}\r\n        onImageGenerated={(image) => {\r\n          console.log('Nuevo diseño para redes sociales generado:', image);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\disenos\\SeatingPlanPost.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'saveData' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'getSeatingInfo' is assigned a value but never used.","line":37,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport Card from '../../components/Card';\r\nimport { saveData, loadData } from '../../services/SyncService';\r\nimport ImageGeneratorAI from '../../components/ImageGeneratorAI';\r\n\r\n// Plantillas predefinidas para carteles de seating plan\r\nconst seatingPlanTemplates = [\r\n  {\r\n    name: 'Elegante & Clásico',\r\n    description: 'Cartel de asignación de mesas con diseño formal y refinado',\r\n    prompt: 'Diseña un cartel elegante para el seating plan (asignación de mesas) de una boda. Estilo formal con tipografía serif. Incluye el título \"Seating Plan\" o \"Distribución de Mesas\" con un diseño elegante. El cartel debe tener espacio para listar nombres de invitados organizados por mesas. Usa colores neutros con toques dorados o plateados. El diseño debe ser sofisticado y fácil de leer.'\r\n  },\r\n  {\r\n    name: 'Rústico & Natural',\r\n    description: 'Cartel de estilo rústico con elementos naturales y madera',\r\n    prompt: 'Crea un cartel de seating plan con estética rústica para una boda. Utiliza elementos como madera, flores silvestres y elementos naturales. Diseño que parezca una pizarra o tabla de madera con los nombres escritos. Incluye el título \"Encuentra tu sitio\" o similar. Estilo cálido y acogedor, con aspecto artesanal. La distribución debe permitir organizar nombres por mesas de forma clara.'\r\n  },\r\n  {\r\n    name: 'Minimalista & Moderno',\r\n    description: 'Diseño limpio con tipografía sencilla y organización clara',\r\n    prompt: 'Diseña un cartel de seating plan minimalista y moderno para una boda. Utiliza mucho espacio en blanco, tipografía sans-serif limpia y elementos geométricos simples. El título debe ser \"Seating Plan\" o \"Tu mesa\". Organización visual muy clara con números de mesa bien destacados. Colores monocromáticos con posibles acentos en un solo color. Diseño contemporáneo, limpio y extremadamente legible.'\r\n  },\r\n  {\r\n    name: 'Temático & Creativo',\r\n    description: 'Cartel personalizado con temática especial (viajes, naturaleza, etc)',\r\n    prompt: 'Crea un cartel de seating plan con diseño temático creativo. Utiliza una temática de viajes/mapas donde cada mesa representa un destino o lugar. Incluye elementos gráficos como brújulas, mapas, aviones o globos. El título puede ser \"Encuentra tu destino\" o similar. El diseño debe ser original y visualmente atractivo, permitiendo que los invitados identifiquen fácilmente su mesa asignada.'\r\n  },\r\n  {\r\n    name: 'Romántico & Floral',\r\n    description: 'Cartel decorado con flores, motivos románticos y colores suaves',\r\n    prompt: 'Diseña un cartel de seating plan romántico con abundantes elementos florales para una boda. Utiliza una paleta de colores suaves como rosa, lavanda y verde salvia. Incorpora ilustraciones delicadas de flores y elementos botánicos. El título puede ser \"Con cariño, os hemos asignado\" o similar. Tipografía elegante y caligráfica. El diseño debe transmitir romanticismo y delicadeza, organizado de forma clara para que los invitados encuentren fácilmente su mesa.'\r\n  },\r\n];\r\n\r\nexport default function SeatingPlanPost() {\r\n  // Obtener información de invitados y mesas si está disponible\r\n  const getSeatingInfo = () => {\r\n    try {\r\n      const guests = loadData('lovendaGuests', { defaultValue: [], collection: 'userGuests' });\r\n      const tables = loadData('lovendaTables', { defaultValue: [], collection: 'userTables' });\r\n      \r\n      // Si no hay datos suficientes, devolver cadena vacía\r\n      if (!guests.length || !tables.length) return '';\r\n      \r\n      // Agrupar invitados por mesa\r\n      const guestsByTable = {};\r\n      guests.forEach(guest => {\r\n        if (guest.tableId) {\r\n          if (!guestsByTable[guest.tableId]) {\r\n            guestsByTable[guest.tableId] = [];\r\n          }\r\n          guestsByTable[guest.tableId].push(guest.name);\r\n        }\r\n      });\r\n      \r\n      // Crear prompt con la información real\r\n      let tableInfo = [];\r\n      tables.forEach(table => {\r\n        const tableGuests = guestsByTable[table.id] || [];\r\n        if (tableGuests.length) {\r\n          tableInfo.push(`Mesa ${table.name || table.id}: ${tableGuests.join(', ')}`);\r\n        }\r\n      });\r\n      \r\n      if (!tableInfo.length) return '';\r\n      \r\n      return `Incluye las siguientes mesas con sus invitados:\\n${tableInfo.join('\\n')}`;\r\n    } catch (err) {\r\n      console.error('Error al obtener información de asientos:', err);\r\n      return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card className=\"p-6 space-y-4\">\r\n        <h1 className=\"text-2xl font-semibold\">Diseño del Seating Plan</h1>\r\n        <p className=\"text-gray-600\">Crea carteles para que tus invitados encuentren su mesa asignada. Selecciona un estilo o personaliza tu propio diseño.</p>\r\n        \r\n        <div className=\"mt-2\">\r\n          <p className=\"text-sm text-blue-600\">\r\n            <span className=\"font-medium\">Consejo:</span> Para mejores resultados, primero asigna a tus invitados en mesas usando la página de Seating Plan.\r\n          </p>\r\n        </div>\r\n      </Card>\r\n      \r\n      <ImageGeneratorAI \r\n        category=\"seating-plan\" \r\n        templates={seatingPlanTemplates}\r\n        onImageGenerated={(image) => {\r\n          console.log('Nuevo cartel de seating plan generado:', image);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\protocolo\\AyudaCeremonia.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card } from '../../components/ui';\r\nimport PageWrapper from '../../components/PageWrapper';\r\nimport { Button } from '../../components/ui';\r\nimport { useUserContext } from '../../context/UserContext';\r\n\r\nconst AyudaCeremonia = () => {\r\n  const { user } = useUserContext();\r\n  const [activeTab, setActiveTab] = useState('lecturas');\r\n  const [readings, setReadings] = useState([\r\n    { id: 1, title: 'Lectura 1', content: 'Texto de la primera lectura...', duration: '3 min', status: 'draft' },\r\n    { id: 2, title: 'Evangelio', content: 'Texto del evangelio...', duration: '5 min', status: 'final' },\r\n  ]);\r\n  \r\n  const [surprises, setSurprises] = useState([\r\n    { \r\n      id: 1, \r\n      type: 'ramo', \r\n      recipient: 'Madre de la novia', \r\n      table: 'Mesa 1', \r\n      description: 'Ramo de rosas blancas',\r\n      notes: 'Entregar después del primer baile',\r\n      status: 'pending'\r\n    },\r\n  ]);\r\n  \r\n  const [activeReading, setActiveReading] = useState(null);\r\n  const [showReadingPreview, setShowReadingPreview] = useState(false);\r\n  const [readingPreview, setReadingPreview] = useState('');\r\n  \r\n  // Verificar si el usuario tiene permisos\r\n  const canEdit = user?.role === 'wedding-planner' || user?.role === 'ayudante';\r\n  \r\n  const handleReadingSave = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const formData = new FormData(form);\r\n    const title = formData.get('title');\r\n    const content = formData.get('content');\r\n    \r\n    if (activeReading) {\r\n      // Actualizar lectura existente\r\n      setReadings(readings.map(r => \r\n        r.id === activeReading.id \r\n          ? { ...r, title, content, status: 'draft' }\r\n          : r\r\n      ));\r\n    } else {\r\n      // Crear nueva lectura\r\n      const newReading = {\r\n        id: Date.now(),\r\n        title,\r\n        content,\r\n        duration: '5 min',\r\n        status: 'draft'\r\n      };\r\n      setReadings([...readings, newReading]);\r\n    }\r\n    \r\n    // Limpiar formulario\r\n    setActiveReading(null);\r\n    form.reset();\r\n  };\r\n  \r\n  const handlePreviewReading = (content) => {\r\n    setReadingPreview(content);\r\n    setShowReadingPreview(true);\r\n  };\r\n  \r\n  const calculateReadingTime = (text) => {\r\n    // Estimación: 150 palabras por minuto\r\n    const wordCount = text.trim().split(/\\s+/).length;\r\n    const minutes = Math.ceil(wordCount / 150);\r\n    return `${minutes} min`;\r\n  };\r\n  \r\n  const handleContentChange = (e) => {\r\n    const content = e.target.value;\r\n    const duration = calculateReadingTime(content);\r\n    \r\n    if (activeReading) {\r\n      setActiveReading({\r\n        ...activeReading,\r\n        content,\r\n        duration\r\n      });\r\n    }\r\n  };\r\n  \r\n  const handleAddSurprise = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const formData = new FormData(form);\r\n    \r\n    const newSurprise = {\r\n      id: Date.now(),\r\n      type: formData.get('type'),\r\n      recipient: formData.get('recipient'),\r\n      table: formData.get('table'),\r\n      description: formData.get('description'),\r\n      notes: formData.get('notes'),\r\n      status: 'pending'\r\n    };\r\n    \r\n    setSurprises([...surprises, newSurprise]);\r\n    form.reset();\r\n  };\r\n\r\n  return (\r\n    <PageWrapper title=\"Ayuda Ceremonia\">\r\n      <div className=\"space-y-6\">\r\n        <p className=\"text-gray-600\">Gestiona las lecturas y momentos especiales de tu ceremonia</p>\r\n\r\n        {/* Pestañas */}\r\n        <div className=\"border-b border-gray-200\">\r\n          <nav className=\"-mb-px flex space-x-8\">\r\n            <button\r\n              onClick={() => setActiveTab('lecturas')}\r\n              className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${\r\n                activeTab === 'lecturas'\r\n                  ? 'border-blue-500 text-blue-600'\r\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n              }`}\r\n            >\r\n              Lecturas\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('ramos-sorpresas')}\r\n              className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${\r\n                activeTab === 'ramos-sorpresas'\r\n                  ? 'border-blue-500 text-blue-600'\r\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n              }`}\r\n            >\r\n              Ramos y Sorpresas\r\n            </button>\r\n          </nav>\r\n        </div>\r\n\r\n      {/* Contenido de las pestañas */}\r\n      {activeTab === 'lecturas' ? (\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n          {/* Lista de lecturas */}\r\n          <div className=\"lg:col-span-1\">\r\n            <Card className=\"h-full\">\r\n              <div className=\"px-4 py-5 border-b\">\r\n                <h3 className=\"text-lg font-medium\">Lecturas de la Ceremonia</h3>\r\n              </div>\r\n              <div className=\"overflow-y-auto max-h-96\">\r\n                {readings.length === 0 ? (\r\n                  <p className=\"p-4 text-sm text-gray-500\">No hay lecturas guardadas</p>\r\n                ) : (\r\n                  <ul className=\"divide-y divide-gray-200\">\r\n                    {readings.map((reading) => (\r\n                      <li key={reading.id} className=\"p-4 hover:bg-gray-50 cursor-pointer\">\r\n                        <div \r\n                          className=\"flex justify-between items-start\"\r\n                          onClick={() => setActiveReading(reading)}\r\n                        >\r\n                          <div>\r\n                            <h4 className=\"font-medium\">{reading.title}</h4>\r\n                            <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">\r\n                              {reading.content.substring(0, 100)}{reading.content.length > 100 ? '...' : ''}\r\n                            </p>\r\n                            <div className=\"mt-2 flex items-center text-xs text-gray-500\">\r\n                              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full bg-blue-100 text-blue-800\">\r\n                                {reading.duration}\r\n                              </span>\r\n                              <span className=\"ml-2\">\r\n                                {reading.status === 'draft' ? 'Borrador' : 'Finalizado'}\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                          <button \r\n                            className=\"text-gray-400 hover:text-gray-600\"\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handlePreviewReading(reading.content);\r\n                            }}\r\n                          >\r\n                            <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\r\n                            </svg>\r\n                          </button>\r\n                        </div>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                )}\r\n              </div>\r\n              <div className=\"px-4 py-3 bg-gray-50 text-right\">\r\n                <Button\r\n                  onClick={() => setActiveReading({ id: null, title: '', content: '', status: 'draft' })}\r\n                  className=\"text-sm\"\r\n                >\r\n                  + Nueva Lectura\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Editor de lecturas */}\r\n          <div className=\"lg:col-span-2\">\r\n            <Card className=\"h-full\">\r\n              {activeReading ? (\r\n                <form onSubmit={handleReadingSave}>\r\n                  <div className=\"px-4 py-5 border-b flex justify-between items-center\">\r\n                    <h3 className=\"text-lg font-medium\">\r\n                      {activeReading.id ? 'Editar Lectura' : 'Nueva Lectura'}\r\n                    </h3>\r\n                    <div className=\"flex space-x-2\">\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline\"\r\n                        onClick={() => handlePreviewReading(activeReading.content)}\r\n                        disabled={!activeReading.content}\r\n                      >\r\n                        Vista Previa\r\n                      </Button>\r\n                      <Button type=\"submit\" disabled={!canEdit}>\r\n                        Guardar\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"p-4 space-y-4\">\r\n                    <div>\r\n                      <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        Título de la lectura\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"title\"\r\n                        name=\"title\"\r\n                        defaultValue={activeReading.title}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n                        placeholder=\"Ej: Primera Lectura - Carta de San Pablo\"\r\n                        required\r\n                        disabled={!canEdit}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label htmlFor=\"content\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        Contenido\r\n                      </label>\r\n                      <textarea\r\n                        id=\"content\"\r\n                        name=\"content\"\r\n                        rows={12}\r\n                        defaultValue={activeReading.content}\r\n                        onChange={handleContentChange}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 font-serif\"\r\n                        placeholder=\"Escribe aquí el texto completo de la lectura...\"\r\n                        required\r\n                        disabled={!canEdit}\r\n                      />\r\n                      <p className=\"mt-1 text-sm text-gray-500\">\r\n                        Duración estimada: {activeReading.duration}\r\n                      </p>\r\n                    </div>\r\n                    {!canEdit && (\r\n                      <div className=\"p-3 bg-yellow-50 text-yellow-700 text-sm rounded-md\">\r\n                        Solo los ayudantes y wedding planners pueden editar las lecturas.\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </form>\r\n              ) : (\r\n                <div className=\"p-8 text-center text-gray-500\">\r\n                  <svg\r\n                    className=\"mx-auto h-12 w-12 text-gray-400\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={1}\r\n                      d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n                    />\r\n                  </svg>\r\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\r\n                    {readings.length === 0 \r\n                      ? 'No hay lecturas disponibles' \r\n                      : 'Selecciona una lectura para editar'}\r\n                  </h3>\r\n                  <p className=\"mt-1 text-sm text-gray-500\">\r\n                    {readings.length === 0 \r\n                      ? 'Comienza creando tu primera lectura para la ceremonia.'\r\n                      : 'O crea una nueva lectura para la ceremonia.'}\r\n                  </p>\r\n                  <div className=\"mt-6\">\r\n                    <Button\r\n                      onClick={() => setActiveReading({ id: null, title: '', content: '', status: 'draft' })}\r\n                      className=\"inline-flex items-center\"\r\n                    >\r\n                      <svg\r\n                        className=\"-ml-1 mr-2 h-5 w-5\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        viewBox=\"0 0 20 20\"\r\n                        fill=\"currentColor\"\r\n                        aria-hidden=\"true\"\r\n                      >\r\n                        <path\r\n                          fillRule=\"evenodd\"\r\n                          d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\r\n                          clipRule=\"evenodd\"\r\n                        />\r\n                      </svg>\r\n                      Nueva Lectura\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-6\">\r\n          {/* Formulario para añadir ramo/sorpresa */}\r\n          <Card>\r\n            <div className=\"px-4 py-5 border-b\">\r\n              <h3 className=\"text-lg font-medium\">Añadir Ramo o Sorpresa</h3>\r\n            </div>\r\n            <form onSubmit={handleAddSurprise} className=\"p-4\">\r\n              <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\r\n                <div>\r\n                  <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Tipo\r\n                  </label>\r\n                  <select\r\n                    id=\"type\"\r\n                    name=\"type\"\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n                    required\r\n                  >\r\n                    <option value=\"\">Seleccionar tipo</option>\r\n                    <option value=\"ramo\">Ramo</option>\r\n                    <option value=\"sorpresa\">Sorpresa</option>\r\n                    <option value=\"detalle\">Detalle Especial</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label htmlFor=\"recipient\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Destinatario\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"recipient\"\r\n                    name=\"recipient\"\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n                    placeholder=\"Ej: Madre de la novia\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label htmlFor=\"table\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Mesa\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"table\"\r\n                    name=\"table\"\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n                    placeholder=\"Ej: Mesa 1\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Descripción\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"description\"\r\n                    name=\"description\"\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n                    placeholder=\"Ej: Ramo de rosas blancas\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div className=\"sm:col-span-2\">\r\n                  <label htmlFor=\"notes\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Notas adicionales\r\n                  </label>\r\n                  <textarea\r\n                    id=\"notes\"\r\n                    name=\"notes\"\r\n                    rows={2}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n                    placeholder=\"Instrucciones especiales o detalles importantes...\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"mt-4 flex justify-end\">\r\n                <Button type=\"submit\">\r\n                  Añadir a la lista\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </Card>\r\n\r\n          {/* Lista de ramos y sorpresas */}\r\n          <Card>\r\n            <div className=\"px-4 py-5 border-b\">\r\n              <h3 className=\"text-lg font-medium\">Lista de Ramos y Sorpresas</h3>\r\n            </div>\r\n            {surprises.length === 0 ? (\r\n              <div className=\"p-6 text-center text-gray-500\">\r\n                <p>No hay ramos o sorpresas programados aún.</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"overflow-x-auto\">\r\n                <table className=\"min-w-full divide-y divide-gray-200\">\r\n                  <thead className=\"bg-gray-50\">\r\n                    <tr>\r\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Tipo\r\n                      </th>\r\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Destinatario\r\n                      </th>\r\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Mesa\r\n                      </th>\r\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Descripción\r\n                      </th>\r\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Estado\r\n                      </th>\r\n                      <th scope=\"col\" className=\"relative px-6 py-3\">\r\n                        <span className=\"sr-only\">Acciones</span>\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                    {surprises.map((surprise) => (\r\n                      <tr key={surprise.id} className=\"hover:bg-gray-50\">\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                          {surprise.type === 'ramo' ? 'Ramo' : surprise.type === 'sorpresa' ? 'Sorpresa' : 'Detalle'}\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                          {surprise.recipient}\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                          {surprise.table}\r\n                        </td>\r\n                        <td className=\"px-6 py-4 text-sm text-gray-500\">\r\n                          {surprise.description}\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\r\n                            surprise.status === 'pending' \r\n                              ? 'bg-yellow-100 text-yellow-800' \r\n                              : 'bg-green-100 text-green-800'\r\n                          }`}>\r\n                            {surprise.status === 'pending' ? 'Pendiente' : 'Entregado'}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                          <button \r\n                            onClick={() => {\r\n                              // Cambiar estado de entrega\r\n                              const updatedSurprises = surprises.map(s => \r\n                                s.id === surprise.id \r\n                                  ? { ...s, status: s.status === 'pending' ? 'delivered' : 'pending' }\r\n                                  : s\r\n                              );\r\n                              setSurprises(updatedSurprises);\r\n                            }}\r\n                            className=\"text-blue-600 hover:text-blue-900 mr-3\"\r\n                          >\r\n                            {surprise.status === 'pending' ? 'Marcar como entregado' : 'Marcar como pendiente'}\r\n                          </button>\r\n                          <button \r\n                            onClick={() => {\r\n                              if (window.confirm('¿Estás seguro de eliminar este elemento?')) {\r\n                                setSurprises(surprises.filter(s => s.id !== surprise.id));\r\n                              }\r\n                            }}\r\n                            className=\"text-red-600 hover:text-red-900\"\r\n                          >\r\n                            Eliminar\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      </div>\r\n\r\n      {/* Modal de vista previa */}\r\n      {showReadingPreview && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n          <Card className=\"max-w-2xl w-full max-h-[90vh] flex flex-col\">\r\n            <div className=\"px-6 py-4 border-b flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-medium\">Vista Previa de la Lectura</h3>\r\n              <button \r\n                onClick={() => setShowReadingPreview(false)}\r\n                className=\"text-gray-400 hover:text-gray-500\"\r\n              >\r\n                <span className=\"sr-only\">Cerrar</span>\r\n                <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n                </svg>\r\n              </button>\r\n            </div>\r\n            <div className=\"p-6 overflow-y-auto flex-1\">\r\n              <div className=\"prose max-w-none\">\r\n                <p className=\"whitespace-pre-line\">{readingPreview}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"px-6 py-3 bg-gray-50 text-right\">\r\n              <Button onClick={() => setShowReadingPreview(false)}>\r\n                Cerrar\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </PageWrapper>\r\n  );\r\n};\r\n\r\nexport default AyudaCeremonia;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\protocolo\\Checklist.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\protocolo\\MomentosEspeciales.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ExternalLink' is defined but never used.","line":2,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":81},{"ruleId":"no-unused-vars","severity":2,"message":"'moveMoment' is assigned a value but never used.","line":10,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":84},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":250,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10716,10766],"text":"Haz clic en &quot;Añadir momento\" para crear uno nuevo."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10716,10766],"text":"Haz clic en &ldquo;Añadir momento\" para crear uno nuevo."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10716,10766],"text":"Haz clic en &#34;Añadir momento\" para crear uno nuevo."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10716,10766],"text":"Haz clic en &rdquo;Añadir momento\" para crear uno nuevo."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":250,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10716,10766],"text":"Haz clic en \"Añadir momento&quot; para crear uno nuevo."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10716,10766],"text":"Haz clic en \"Añadir momento&ldquo; para crear uno nuevo."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10716,10766],"text":"Haz clic en \"Añadir momento&#34; para crear uno nuevo."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10716,10766],"text":"Haz clic en \"Añadir momento&rdquo; para crear uno nuevo."},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Music, Edit2, Play, Plus, Trash2, Search as SearchIcon, X, ExternalLink, ChevronUp, ChevronDown } from 'lucide-react';\nimport { Card } from '../../components/ui';\nimport PageWrapper from '../../components/PageWrapper';\nimport { Button } from '../../components/ui';\nimport useSpecialMoments from '../../hooks/useSpecialMoments';\n\nconst MomentosEspeciales = () => {\n  // Hook para manejar los momentos especiales\n  const { moments, addMoment, updateMoment, removeMoment, reorderMoment, moveMoment, duplicateMoment } = useSpecialMoments();\n  \n  // Estados para las pestañas y búsqueda\n  const [activeTab, setActiveTab] = useState('ceremonia');\n  const [search, setSearch] = useState('');\n  const [results, setResults] = useState([]);\n  const [loadingSearch, setLoadingSearch] = useState(false);\n  const [errorSearch, setErrorSearch] = useState(null);\n\n  // Definición de las pestañas\n  const TABS = [\n    { key: 'ceremonia', label: 'Ceremonia' },\n    { key: 'coctail', label: 'Cóctel' },\n    { key: 'banquete', label: 'Banquete' },\n    { key: 'disco', label: 'Disco' },\n  ];\n\n  // Búsqueda de canciones usando la API de iTunes\n  const handleSearch = async () => {\n    const term = search.trim();\n    if (!term) {\n      setResults([]);\n      return;\n    }\n    \n    setLoadingSearch(true);\n    setErrorSearch(null);\n    \n    try {\n      const resp = await fetch(`https://itunes.apple.com/search?term=${encodeURIComponent(term)}&entity=song&limit=15`);\n      const data = await resp.json();\n      \n      if (Array.isArray(data.results)) {\n        const mapped = data.results.map(r => ({ id: r.trackId, name: `${r.trackName} - ${r.artistName}` }));\n        setResults(mapped);\n      } else {\n        setResults([]);\n      }\n    } catch (err) {\n      console.error('Error buscando canciones', err);\n      setErrorSearch('No se pudo buscar canciones. Inténtalo más tarde.');\n      setResults([]);\n    } finally {\n      setLoadingSearch(false);\n    }\n  };\n\n  // Añadir nuevo momento al bloque activo\n  const handleAddMoment = () => {\n    const nextOrder = (moments[activeTab]?.length || 0) + 1;\n    addMoment(activeTab, { \n      order: nextOrder, \n      title: `Nuevo momento ${nextOrder}`, \n      song: '',\n      time: ''\n    });\n  };\n\n  return (\n    <PageWrapper title=\"Momentos Especiales\">\n      <div className=\"space-y-6\">\n        <p className=\"text-gray-600\">Planifica cada instante clave de tu gran día con la música y el momento adecuados.</p>\n        \n        {/* Pestañas unificadas */}\n        <div className=\"border-b flex gap-4\">\n          {TABS.map(tab => (\n            <button\n              key={tab.key}\n              className={`pb-2 -mb-px font-medium ${activeTab === tab.key ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600'}`}\n              onClick={() => {\n                setActiveTab(tab.key);\n                setResults([]);\n                setSearch('');\n              }}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </div>\n        \n        {/* Contenido de la pestaña activa */}\n        <Card className=\"space-y-5 p-5\">\n          {/* Buscador de canciones */}\n          <div className=\"flex gap-2 items-center\">\n            <input\n              type=\"text\"\n              value={search}\n              onChange={e => setSearch(e.target.value)}\n              placeholder=\"Buscar canción...\"\n              className=\"flex-1 border rounded px-3 py-2\"\n              onKeyPress={e => e.key === 'Enter' && handleSearch()}\n            />\n            <button onClick={handleSearch} className=\"bg-blue-600 text-white px-3 py-2 rounded flex items-center gap-1\">\n              <SearchIcon size={16} /> Buscar\n            </button>\n          </div>\n\n          {/* Estado búsqueda */}\n          {loadingSearch && <p className=\"text-sm text-gray-500\">Buscando...</p>}\n          {errorSearch && <p className=\"text-sm text-red-600\">{errorSearch}</p>}\n\n          {/* Resultados búsqueda */}\n          {results.length > 0 && (\n            <div className=\"border rounded-md overflow-hidden\">\n              <div className=\"bg-gray-50 p-2 border-b text-sm font-medium\">\n                Resultados\n                <button \n                  onClick={() => setResults([])} \n                  className=\"float-right text-gray-500 hover:text-gray-700\"\n                >\n                  <X size={16} />\n                </button>\n              </div>\n              <ul className=\"divide-y\">\n                {results.map(song => (\n                  <li key={song.id} className=\"p-2 hover:bg-blue-50\">\n                    <button \n                      className=\"w-full text-left flex justify-between items-center\"\n                      onClick={() => {\n                        if (!moments[activeTab]?.length) {\n                          addMoment(activeTab, { order: 1, title: 'Nuevo momento', song: song.name, time: '' });\n                        } else {\n                          // Actualizar el último momento añadido con la canción seleccionada\n                          const lastMoment = [...(moments[activeTab] || [])].pop();\n                          if (lastMoment) {\n                            updateMoment(activeTab, lastMoment.id, { ...lastMoment, song: song.name });\n                          }\n                        }\n                        setResults([]);\n                        setSearch('');\n                      }}\n                    >\n                      <span className=\"text-sm\">{song.name}</span>\n                      <Play size={16} className=\"text-blue-600\" />\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {/* Lista de momentos */}\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"font-medium\">{TABS.find(t => t.key === activeTab)?.label || 'Momentos'}</h3>\n              <Button\n                onClick={handleAddMoment}\n                className=\"py-1 px-3 text-sm flex items-center gap-1\"\n              >\n                <Plus size={14} />\n                Añadir momento\n              </Button>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {moments[activeTab]?.length ? (\n                moments[activeTab]\n                  .sort((a, b) => a.order - b.order)\n                  .map((moment, idx) => (\n                    <div key={moment.id} className=\"border rounded-lg p-3\">\n                      <div className=\"flex justify-between gap-2\">\n                        <div className=\"flex-1\">\n                          <input\n                            type=\"text\"\n                            className=\"w-full font-medium border-0 border-b border-transparent focus:border-blue-300 focus:ring-0 p-0 pb-1\"\n                            value={moment.title || ''}\n                            onChange={e => updateMoment(activeTab, moment.id, { ...moment, title: e.target.value })}\n                            placeholder=\"Título del momento\"\n                          />\n                          \n                          <div className=\"mt-2 flex flex-wrap gap-2\">\n                            <div className=\"flex-1 min-w-[200px]\">\n                              <div className=\"text-xs text-gray-500 mb-1 flex items-center gap-1\">\n                                <Music size={12} /> Canción\n                              </div>\n                              <input\n                                type=\"text\"\n                                className=\"w-full border rounded px-2 py-1 text-sm\"\n                                value={moment.song || ''}\n                                onChange={e => updateMoment(activeTab, moment.id, { ...moment, song: e.target.value })}\n                                placeholder=\"Nombre de la canción\"\n                              />\n                            </div>\n                            \n                            <div className=\"w-24\">\n                              <div className=\"text-xs text-gray-500 mb-1\">Duración</div>\n                              <input\n                                type=\"text\"\n                                className=\"w-full border rounded px-2 py-1 text-sm\"\n                                value={moment.time || ''}\n                                onChange={e => updateMoment(activeTab, moment.id, { ...moment, time: e.target.value })}\n                                placeholder=\"00:00\"\n                              />\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex flex-col gap-1\">\n                          <button \n                            onClick={() => removeMoment(activeTab, moment.id)}\n                            className=\"text-gray-400 hover:text-red-500 p-1\"\n                            title=\"Eliminar\"\n                          >\n                            <Trash2 size={16} />\n                          </button>\n                          \n                          <button \n                            onClick={() => duplicateMoment(activeTab, moment.id)}\n                            className=\"text-gray-400 hover:text-blue-500 p-1\"\n                            title=\"Duplicar\"\n                          >\n                            <Edit2 size={16} />\n                          </button>\n                          \n                          {idx > 0 && (\n                            <button \n                              onClick={() => reorderMoment(activeTab, moment.id, 'up')}\n                              className=\"text-gray-400 hover:text-blue-600 p-1\"\n                              title=\"Mover arriba\"\n                            >\n                              <ChevronUp size={16} />\n                            </button>\n                          )}\n                          \n                          {idx < moments[activeTab].length - 1 && (\n                            <button \n                              onClick={() => reorderMoment(activeTab, moment.id, 'down')}\n                              className=\"text-gray-400 hover:text-blue-600 p-1\"\n                              title=\"Mover abajo\"\n                            >\n                              <ChevronDown size={16} />\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))\n              ) : (\n                <div className=\"text-center py-6 text-gray-500\">\n                  <p>No hay momentos en esta sección.</p>\n                  <p className=\"text-sm mt-1\">Haz clic en \"Añadir momento\" para crear uno nuevo.</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </Card>\n      </div>\n    </PageWrapper>\n  );\n};\n\nexport default MomentosEspeciales;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\protocolo\\ProtocoloLayout.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":12},{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":11,"column":25,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":76,"endColumn":3}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo } from 'react';\r\nimport { NavLink, Outlet, useLocation, useNavigate } from 'react-router-dom';\r\nimport Card from '../../components/Card';\r\n\r\n// Definición estática de las pestañas para evitar recreaciones\r\nconst tabs = [\r\n  { path: 'momentos-especiales', label: 'Momentos Especiales' },\r\n];\r\n\r\n// Componente memoizado para evitar renders innecesarios\r\nconst ProtocoloLayout = React.memo(() => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  /* Redirigir a la primera pestaña si estamos en la raíz de protocolo */\r\n  useEffect(() => {\r\n    if (location.pathname === '/protocolo' || location.pathname === '/protocolo/') {\r\n      navigate('/protocolo/momentos-especiales', { replace: true });\r\n    }\r\n  }, [location.pathname, navigate]);\r\n\r\n  // Memoizamos la lista de pestañas con sus rutas completas\r\n  const navTabs = useMemo(() => tabs.map(t => ({ ...t, href: `/protocolo/${t.path}` })), []);\r\n\r\n  // Placeholder de carga accesible\r\n  if (location.pathname === '/protocolo' || location.pathname === '/protocolo/') {\r\n    return (\r\n      <div className=\"p-4 md:p-6\" role=\"status\" aria-live=\"polite\">\r\n        Cargando...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <section className=\"p-4 md:p-6 flex flex-col gap-8\" aria-labelledby=\"protocolo-heading\">\r\n      {/* Título y navegación solo si hay más de una sección */}\r\n      {navTabs.length > 1 && (\r\n        <>\r\n          <h1 id=\"protocolo-heading\" className=\"text-2xl font-bold text-gray-800\">\r\n            {navTabs.find(t => location.pathname.startsWith(t.href))?.label || 'Protocolo'}\r\n          </h1>\r\n          <nav role=\"tablist\" aria-label=\"Secciones de Protocolo\" className=\"flex overflow-x-auto space-x-2 pb-2\">\r\n            {navTabs.map(tab => (\r\n              <NavLink\r\n                key={tab.path}\r\n                to={tab.href}\r\n                role=\"tab\"\r\n                aria-current={location.pathname === tab.href ? 'page' : undefined}\r\n                className={({ isActive }) =>\r\n                  `px-4 py-2 rounded-t-lg font-medium whitespace-nowrap focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-500 ${\r\n                    isActive\r\n                      ? 'bg-white border-t-2 border-l-2 border-r-2 border-blue-500 text-blue-600 font-semibold'\r\n                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                  }`\r\n                }\r\n              >\r\n                {tab.label}\r\n              </NavLink>\r\n            ))}\r\n          </nav>\r\n        </>\r\n\r\n      )}\r\n\r\n      {/* Contenido - Ya no envuelto en Card para permitir a cada componente tener sus propios Cards */}\r\n      <div className=\"focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500\" role=\"region\" aria-label=\"Contenido de Protocolo\">\r\n        <Outlet />\r\n      </div>\r\n\r\n      {/* Ruta actual solo visible para accesibilidad */}\r\n      <p className=\"sr-only\" data-testid=\"current-path\">\r\n        Ruta actual: {location.pathname}\r\n      </p>\r\n    </section>\r\n  );\r\n});\r\n\r\nexport default ProtocoloLayout;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\protocolo\\Timing.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'PageWrapper' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Card } from '../../components/ui';\r\nimport { Button } from '../../components/ui';\r\nimport PageWrapper from '../../components/PageWrapper';\r\n\r\nconst Timing = () => {\r\n  const [timeline, setTimeline] = useState([\r\n    {\r\n      id: 'ceremonia',\r\n      name: 'Ceremonia',\r\n      startTime: '16:00',\r\n      endTime: '16:45',\r\n      status: 'on-time', // 'on-time', 'slightly-delayed', 'delayed'\r\n      moments: [\r\n        { id: 1, name: 'Llegada de invitados', time: '15:30', duration: '30 min', status: 'on-time' },\r\n        { id: 2, name: 'Entrada de la novia', time: '16:00', duration: '5 min', status: 'on-time' },\r\n        { id: 3, name: 'Lecturas', time: '16:20', duration: '10 min', status: 'on-time' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'coctel',\r\n      name: 'Cóctel',\r\n      startTime: '17:00',\r\n      endTime: '19:00',\r\n      status: 'on-time',\r\n      moments: [\r\n        { id: 4, name: 'Brindis de bienvenida', time: '17:15', duration: '15 min', status: 'on-time' },\r\n        { id: 5, name: 'Fotos de grupo', time: '17:45', duration: '30 min', status: 'on-time' },\r\n      ],\r\n    },\r\n    // ... otros bloques\r\n  ]);\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'on-time': return 'bg-green-100 text-green-800';\r\n      case 'slightly-delayed': return 'bg-blue-100 text-blue-800';\r\n      case 'delayed': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusLabel = (status) => {\r\n    switch (status) {\r\n      case 'on-time': return 'A tiempo';\r\n      case 'slightly-delayed': return 'Ligero retraso';\r\n      case 'delayed': return 'Retrasado';\r\n      default: return 'Sin estado';\r\n    }\r\n  };\r\n\r\n  const updateTiming = (blockId, momentId, newTime) => {\r\n    setTimeline(timeline.map(block => {\r\n      if (block.id === blockId) {\r\n        return {\r\n          ...block,\r\n          moments: block.moments.map(moment => \r\n            moment.id === momentId ? { ...moment, time: newTime } : moment\r\n          )\r\n        };\r\n      }\r\n      return block;\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 md:p-6 space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-2xl font-bold text-gray-800\">Timing de la Boda</h1>\r\n        <Button>\r\n          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n          </svg>\r\n          Añadir Bloque\r\n        </Button>\r\n      </div>\r\n      \r\n      <Card className=\"p-4\">\r\n        <p className=\"text-gray-600\">Organiza la línea de tiempo de tu boda</p>\r\n      </Card>\r\n\r\n      <div className=\"space-y-6\">\r\n        {timeline.map((block) => (\r\n          <Card key={block.id} className=\"overflow-hidden\">\r\n            <div className=\"px-6 py-4 border-b flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-medium\">{block.name}</h3>\r\n              <div className=\"flex items-center space-x-4\">\r\n                <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(block.status)}`}>\r\n                  {getStatusLabel(block.status)}\r\n                </span>\r\n                <span className=\"text-sm text-gray-600\">\r\n                  {block.startTime} - {block.endTime}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"divide-y\">\r\n              {block.moments.map((moment) => (\r\n                <div key={moment.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div className={`w-3 h-3 rounded-full ${getStatusColor(moment.status).split(' ')[0]}`}></div>\r\n                        <h4 className=\"font-medium\">{moment.name}</h4>\r\n                      </div>\r\n                      <div className=\"ml-6 mt-1 text-sm text-gray-600\">\r\n                        <span className=\"inline-block mr-4\">\r\n                          <span className=\"font-medium\">Hora:</span> {moment.time}\r\n                        </span>\r\n                        <span className=\"inline-block\">\r\n                          <span className=\"font-medium\">Duración:</span> {moment.duration}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex space-x-2\">\r\n                      <button \r\n                        className=\"p-1 text-gray-400 hover:text-gray-600\"\r\n                        onClick={() => {\r\n                          const newTime = prompt('Nueva hora (HH:MM):', moment.time);\r\n                          if (newTime) updateTiming(block.id, moment.id, newTime);\r\n                        }}\r\n                      >\r\n                        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                        </svg>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            \r\n            <div className=\"px-6 py-3 bg-gray-50 text-right\">\r\n              <button className=\"text-sm text-blue-600 hover:text-blue-800 font-medium\">\r\n                + Añadir momento\r\n              </button>\r\n            </div>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n      \r\n      <Card className=\"p-4 bg-blue-50\">\r\n        <div className=\"space-y-2\">\r\n          <h3 className=\"font-medium text-blue-800 flex items-center\">\r\n            <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n            Consejo de planificación\r\n          </h3>\r\n          <p className=\"text-sm text-blue-700\">\r\n            Asegúrate de incluir tiempos de transición entre eventos. Como regla general, añade un 10-15% de tiempo extra a cada bloque para imprevistos.\r\n          </p>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timing;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\user\\EmailInbox.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":3,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":3,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":72},{"ruleId":"no-unused-vars","severity":2,"message":"'removeEmailFromFolder' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'getEmailTagsDetails' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'availableTags' is assigned a value but never used.","line":47,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'setSelectedTag' is assigned a value but never used.","line":48,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'setIsFilteringByTag' is assigned a value but never used.","line":49,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'setError' is not defined.","line":112,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'searchFilters' is not defined.","line":142,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":142,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'searchFilters' is not defined.","line":146,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":146,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'searchTerm' is not defined.","line":151,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":151,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'searchTerm' is not defined.","line":152,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":152,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'setError' is not defined.","line":165,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":165,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredEmails' is assigned a value but never used.","line":339,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":339,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'emailId' is defined but never used.","line":572,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":572,"endColumn":41}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Mail, Inbox, Send, Trash, Edit, Search, RefreshCw, Filter, Tag, BarChart2, ArrowLeft } from 'lucide-react';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Button from '../../components/Button';\nimport Card from '../../components/Card';\nimport { getMails, initEmailService, markAsRead } from '../../services/emailService';\nimport ComposeEmailModal from '../../components/email/ComposeEmailModal';\nimport EmailList from '../../components/email/EmailList';\nimport EmailDetail from '../../components/email/EmailDetail';\nimport EmailFilters from '../../components/email/EmailFilters';\nimport CustomFolders from '../../components/email/CustomFolders';\nimport { useAuth } from '../../hooks/useAuth';\nimport { \n  getUserFolders, \n  createFolder, \n  renameFolder, \n  deleteFolder, \n  assignEmailToFolder, \n  removeEmailFromFolder, \n  getEmailsInFolder, \n  updateFolderUnreadCount \n} from '../../services/folderService';\nimport {\n  getUserTags,\n  getEmailTagsDetails,\n  getEmailsByTag\n} from '../../services/tagService';\n\n/**\n * Página de bandeja de entrada de correo electrónico para usuarios\n * Permite ver, enviar y gestionar correos dentro de la plataforma Lovenda\n */\nconst EmailInbox = () => {\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedEmail, setSelectedEmail] = useState(null);\n  const [currentFolder, setCurrentFolder] = useState('inbox');\n  const [isComposeOpen, setIsComposeOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [userEmailAddress, setUserEmailAddress] = useState('');\n  const [activeFilters, setActiveFilters] = useState({});\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\n  const [customFolders, setCustomFolders] = useState([]);\n  const [selectedCustomFolder, setSelectedCustomFolder] = useState(null);\n  const [availableTags, setAvailableTags] = useState([]);\n  const [selectedTag, setSelectedTag] = useState(null);\n  const [isFilteringByTag, setIsFilteringByTag] = useState(false);\n  const { currentUser, userProfile } = useAuth();\n  const navigate = useNavigate();\n  \n  // Cargar emails al cambiar de carpeta\n  useEffect(() => {\n    const loadEmails = async () => {\n      if (!currentUser) {\n        return;\n      }\n      \n      try {\n        setLoading(true);\n        \n        // Inicializar servicio de email con el perfil del usuario actual\n        const emailAddress = await initEmailService(userProfile);\n        setUserEmailAddress(emailAddress);\n        \n        // Si es una carpeta personalizada\n        if (selectedCustomFolder) {\n          // Obtener correos de la carpeta seleccionada\n          const folderEmails = getEmailsInFolder(currentUser.uid, selectedCustomFolder);\n          \n          // Cargar todos los correos y filtrar por los IDs en la carpeta\n          const allEmails = await getMails('all');\n          const filteredEmails = allEmails.filter(email => folderEmails.includes(email.id));\n          setEmails(filteredEmails);\n        } else {\n          // Obtener correos de la carpeta del sistema\n          const emailData = await getMails(currentFolder);\n          setEmails(emailData);\n        }\n      } catch (error) {\n        console.error('Error al cargar emails:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadEmails();\n  }, [currentUser, userProfile, currentFolder, selectedCustomFolder]);\n  \n  // Cargar correos cuando cambie la carpeta o etiqueta\n  useEffect(() => {\n    if (!currentUser) return;\n    \n    // Cargar carpetas personalizadas\n    setCustomFolders(getUserFolders(currentUser.uid));\n    \n    // Cargar etiquetas disponibles\n    const tags = getUserTags(currentUser.uid);\n    setAvailableTags(tags);\n    \n    // Cargar correos con los nuevos filtros\n    loadEmails();\n  }, [currentUser, currentFolder, selectedCustomFolder, selectedTag]);\n  \n  // Función para cargar los correos según filtros actuales\n  const loadEmails = async () => {\n    if (!currentUser) return;\n    \n    try {\n      setLoading(true);\n      setError('');\n      \n      let loadedEmails;\n      \n      // Primer paso: filtrar por carpeta\n      if (selectedCustomFolder) {\n        // Cargar correos de la carpeta personalizada\n        const folderEmailIds = getEmailsInFolder(currentUser.uid, selectedCustomFolder);\n        const allEmails = await getMails('all');\n        loadedEmails = allEmails.filter(email => folderEmailIds.includes(email.id));\n      } else {\n        // Cargar correos según la carpeta del sistema\n        loadedEmails = await getMails(currentFolder);\n      }\n      \n      // Segundo paso: filtrar por etiqueta si está seleccionada\n      if (selectedTag && isFilteringByTag) {\n        // Obtener IDs de correos con esta etiqueta\n        const taggedEmailIds = getEmailsByTag(currentUser.uid, selectedTag);\n        \n        // Filtrar los correos que tienen esta etiqueta\n        loadedEmails = loadedEmails.filter(email => taggedEmailIds.includes(email.id));\n      }\n      \n      // Aplicar filtros adicionales si están activos\n      if (activeFilters && Object.keys(activeFilters).length > 0) {\n        // Filtros existentes...\n      }\n      \n      // Aplicar filtros rápidos si están activos\n      if (searchFilters.unread) {\n        loadedEmails = loadedEmails.filter(email => !email.read);\n      }\n      \n      if (searchFilters.hasAttachments) {\n        loadedEmails = loadedEmails.filter(email => email.attachments && email.attachments.length > 0);\n      }\n      \n      // Aplicar búsqueda por texto si hay alguno\n      if (searchTerm) {\n        const term = searchTerm.toLowerCase();\n        loadedEmails = loadedEmails.filter(email => \n          email.subject.toLowerCase().includes(term) ||\n          email.from.toLowerCase().includes(term) ||\n          email.to.toLowerCase().includes(term) ||\n          (email.body && email.body.toLowerCase().includes(term))\n        );\n      }\n      \n      // Establecer correos filtrados\n      setEmails(loadedEmails);\n    } catch (error) {\n      console.error('Error al cargar emails:', error);\n      setError('No se pudieron cargar los correos');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Función para refrescar la lista de correos\n  const handleRefresh = async () => {\n    await loadEmails();\n    \n    // Refrescar lista de carpetas\n    const folders = getUserFolders(currentUser.uid);\n    setCustomFolders(folders);\n    \n    toast.info('Correos actualizados');\n  };\n  \n  // Función para seleccionar un correo\n  const handleSelectEmail = async (email) => {\n    setSelectedEmail(email);\n    \n    // Marcar como leído si no lo está\n    if (!email.read) {\n      try {\n        await markAsRead(email.id);\n        // Actualizar el estado local\n        setEmails(emails.map(e => \n          e.id === email.id ? { ...e, read: true } : e\n        ));\n        \n        // Si está en una carpeta personalizada, actualizar contador\n        if (selectedCustomFolder) {\n          // Contar no leídos en la carpeta\n          const folderEmails = getEmailsInFolder(currentUser.uid, selectedCustomFolder);\n          const unreadCount = emails.filter(e => \n            folderEmails.includes(e.id) && !e.read && e.id !== email.id\n          ).length;\n          \n          // Actualizar contador\n          updateFolderUnreadCount(currentUser.uid, selectedCustomFolder, unreadCount);\n          \n          // Actualizar lista de carpetas\n          setCustomFolders(getUserFolders(currentUser.uid));\n        }\n      } catch (error) {\n        console.error('Error al marcar correo como leído:', error);\n      }\n    }\n  };\n  \n  // Aplicar filtros avanzados\n  const applyFilters = (filters) => {\n    setActiveFilters(filters);\n    setShowAdvancedFilters(false); // Opcional: ocultar panel al aplicar\n  };\n  \n  // Resetear filtros\n  const resetFilters = () => {\n    setActiveFilters({});\n  };\n  \n  // Manejar creación de carpeta\n  const handleCreateFolder = (folderName) => {\n    if (!currentUser) return;\n    \n    try {\n      // Crear nueva carpeta\n      createFolder(currentUser.uid, folderName);\n      \n      // Actualizar lista de carpetas\n      setCustomFolders(getUserFolders(currentUser.uid));\n      \n      // Mostrar notificación de éxito\n      toast.success(`Carpeta \"${folderName}\" creada con éxito`);\n    } catch (error) {\n      console.error('Error al crear carpeta:', error);\n      toast.error(`Error: ${error.message || 'No se pudo crear la carpeta'}`);\n    }\n  };\n  \n  // Manejar renombrado de carpeta\n  const handleRenameFolder = (folderId, newName) => {\n    if (!currentUser) return;\n    \n    try {\n      // Obtener nombre anterior\n      const oldFolder = customFolders.find(f => f.id === folderId);\n      \n      // Renombrar carpeta\n      renameFolder(currentUser.uid, folderId, newName);\n      \n      // Actualizar lista de carpetas\n      setCustomFolders(getUserFolders(currentUser.uid));\n      \n      // Mostrar notificación de éxito\n      toast.success(`Carpeta \"${oldFolder?.name || 'desconocida'}\" renombrada a \"${newName}\"`);\n    } catch (error) {\n      console.error('Error al renombrar carpeta:', error);\n      toast.error(`Error: ${error.message || 'No se pudo renombrar la carpeta'}`);\n    }\n  };\n  \n  // Manejar eliminación de carpeta\n  const handleDeleteFolder = (folderId) => {\n    if (!currentUser) return;\n    \n    try {\n      // Obtener nombre de la carpeta\n      const folder = customFolders.find(f => f.id === folderId);\n      const folderName = folder?.name || 'desconocida';\n      \n      // Eliminar carpeta\n      deleteFolder(currentUser.uid, folderId);\n      \n      // Si estamos viendo esta carpeta, volver a la bandeja de entrada\n      if (selectedCustomFolder === folderId) {\n        setSelectedCustomFolder(null);\n        setCurrentFolder('inbox');\n      }\n      \n      // Actualizar lista de carpetas\n      setCustomFolders(getUserFolders(currentUser.uid));\n      \n      // Mostrar notificación de éxito\n      toast.success(`Carpeta \"${folderName}\" eliminada correctamente`);\n    } catch (error) {\n      console.error('Error al eliminar carpeta:', error);\n      toast.error(`Error: ${error.message || 'No se pudo eliminar la carpeta'}`);\n    }\n  };\n  \n  // Manejar selección de carpeta personalizada\n  const handleSelectCustomFolder = (folderId) => {\n    setSelectedCustomFolder(folderId);\n    setCurrentFolder(null); // Desactivar carpetas del sistema\n  };\n  \n  // Manejar selección de carpeta del sistema\n  const handleSelectSystemFolder = (folder) => {\n    setCurrentFolder(folder);\n    setSelectedCustomFolder(null); // Desactivar carpetas personalizadas\n  };\n  \n  // Manejar movimiento de correo a carpeta\n  const handleMoveToFolder = (emailId, folderId) => {\n    if (!currentUser || !emailId) return;\n    \n    try {\n      // Encontrar nombres para el mensaje\n      const email = emails.find(e => e.id === emailId);\n      const folder = customFolders.find(f => f.id === folderId);\n      \n      if (!folder) {\n        toast.error('No se encontró la carpeta seleccionada.');\n        return;\n      }\n      \n      // Asignar correo a carpeta\n      assignEmailToFolder(currentUser.uid, emailId, folderId);\n      \n      // Mostrar notificación de éxito\n      toast.success(`Correo \"${email?.subject || 'Sin asunto'}\" movido a carpeta \"${folder.name}\"`);\n      \n      // Si estamos viendo una carpeta personalizada, refrescar\n      if (selectedCustomFolder) {\n        handleRefresh();\n      }\n    } catch (error) {\n      console.error('Error al mover correo a carpeta:', error);\n      toast.error(`Error: ${error.message || 'No se pudo mover el correo a la carpeta'}`);\n    }\n  };\n  \n  // Filtrar emails según búsqueda y filtros avanzados\n  const filteredEmails = emails.filter(email => {\n    // Primero aplicar el filtro de búsqueda general\n    if (searchQuery && !(\n        email.subject?.toLowerCase().includes(searchQuery.toLowerCase()) || \n        email.from?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        email.to?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        email.body?.toLowerCase().includes(searchQuery.toLowerCase())\n      )) {\n      return false;\n    }\n    \n    // Aplicar filtros avanzados si están activos\n    if (Object.keys(activeFilters).length > 0) {\n      // Filtro por remitente\n      if (activeFilters.from && \n          !email.from?.toLowerCase().includes(activeFilters.from.toLowerCase())) {\n        return false;\n      }\n      \n      // Filtro por destinatario\n      if (activeFilters.to && \n          !email.to?.toLowerCase().includes(activeFilters.to.toLowerCase())) {\n        return false;\n      }\n      \n      // Filtro por asunto\n      if (activeFilters.subject && \n          !email.subject?.toLowerCase().includes(activeFilters.subject.toLowerCase())) {\n        return false;\n      }\n      \n      // Filtro por adjuntos\n      if (activeFilters.hasAttachment && \n          (!email.attachments || email.attachments.length === 0)) {\n        return false;\n      }\n      \n      // Filtro por fecha desde\n      if (activeFilters.dateFrom) {\n        const dateFrom = new Date(activeFilters.dateFrom);\n        const emailDate = new Date(email.date);\n        if (emailDate < dateFrom) return false;\n      }\n      \n      // Filtro por fecha hasta\n      if (activeFilters.dateTo) {\n        const dateTo = new Date(activeFilters.dateTo);\n        const emailDate = new Date(email.date);\n        if (emailDate > dateTo) return false;\n      }\n      \n      // Filtro por no leídos\n      if (activeFilters.isUnread && email.read) {\n        return false;\n      }\n      \n      // Filtro por etiquetas\n      if (activeFilters.labels && activeFilters.labels.length > 0) {\n        if (!email.labels) return false;\n        \n        // Verificar si el email tiene al menos una de las etiquetas seleccionadas\n        const hasMatchingLabel = activeFilters.labels.some(label => \n          email.labels.includes(label)\n        );\n        \n        if (!hasMatchingLabel) return false;\n      }\n    }\n    \n    // Si pasa todos los filtros\n    return true;\n  });\n  \n  return (\n    <div className=\"container mx-auto px-3 sm:px-4 py-4 sm:py-6\">\n      <h1 className=\"text-xl sm:text-2xl font-bold mb-4 sm:mb-6\">Correo Electrónico</h1>\n      \n      {/* Dirección de correo del usuario */}\n      {userEmailAddress && (\n        <div className=\"mb-3 sm:mb-4\">\n          <p className=\"text-xs sm:text-sm text-gray-500\">Tu correo electrónico:</p>\n          <p className=\"text-sm sm:text-base font-medium\">{userEmailAddress}</p>\n        </div>\n      )}\n      \n      {/* Contenedor de notificaciones */}\n      <ToastContainer \n        position=\"bottom-right\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        draggable\n      />\n      \n      {/* Grid principal - Adaptable a móvil */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3 sm:gap-4\">\n        {/* Barra lateral - Carpetas del sistema y personalizadas */}\n        <div className=\"col-span-1\">\n          <Card className=\"overflow-hidden\">\n            <nav className=\"flex flex-col p-2\">\n              <Button \n                variant={currentFolder === 'inbox' && !selectedCustomFolder ? 'subtle' : 'ghost'} \n                className=\"w-full justify-start\" \n                onClick={() => handleSelectSystemFolder('inbox')}\n              >\n                <Inbox size={18} className=\"mr-2\" /> Bandeja de entrada\n              </Button>\n              <Button \n                variant={currentFolder === 'sent' && !selectedCustomFolder ? 'subtle' : 'ghost'} \n                className=\"w-full justify-start\" \n                onClick={() => handleSelectSystemFolder('sent')}\n              >\n                <Send size={18} className=\"mr-2\" /> Enviados\n              </Button>\n              <Button \n                variant={currentFolder === 'trash' && !selectedCustomFolder ? 'subtle' : 'ghost'} \n                className=\"w-full justify-start\" \n                onClick={() => handleSelectSystemFolder('trash')}\n              >\n                <Trash size={18} className=\"mr-2\" /> Papelera\n              </Button>\n            </nav>\n            \n            {/* Separador */}\n            <div className=\"border-t border-gray-200 my-2\"></div>\n            \n            {/* Carpetas personalizadas */}\n            <CustomFolders \n              folders={customFolders}\n              activeFolder={selectedCustomFolder}\n              onSelectFolder={handleSelectCustomFolder}\n              onCreateFolder={handleCreateFolder}\n              onRenameFolder={handleRenameFolder}\n              onDeleteFolder={handleDeleteFolder}\n            />\n          </Card>\n        </div>\n        {/* Panel central y derecho - Lista de emails y detalle */}\n        <div className=\"col-span-1 md:col-span-3\">\n          <div className=\"flex flex-col h-full\">\n            {/* Barra de búsqueda y acciones - Adaptable para móvil */}\n            <div className=\"flex flex-wrap items-center gap-2 mb-2 sm:mb-3 md:mb-4\">\n              <div className=\"relative flex-grow min-w-[140px]\">\n                <Search size={14} className=\"absolute left-2 md:left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Buscar...\"\n                  className=\"pl-7 md:pl-10 pr-2 py-1.5 md:py-2 text-xs md:text-sm border rounded-lg w-full\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n              </div>\n              <Button variant=\"outline\" size=\"sm\" className=\"flex-shrink-0\" onClick={handleRefresh}>\n                <RefreshCw size={16} />\n              </Button>\n              <Button \n                variant={showAdvancedFilters ? \"subtle\" : \"outline\"}\n                size=\"sm\" \n                className=\"flex-shrink-0\"\n                onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              >\n                <Filter size={16} className=\"mr-1\" />\n                {Object.keys(activeFilters).length > 0 && (\n                  <span className=\"bg-blue-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center\">\n                    {Object.keys(activeFilters).filter(k => \n                      activeFilters[k] && \n                      (Array.isArray(activeFilters[k]) ? activeFilters[k].length > 0 : true)\n                    ).length}\n                  </span>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-shrink-0\"\n                onClick={() => navigate('/user/email/stats')}\n                title=\"Ver estadísticas de correo\"\n              >\n                <BarChart2 size={16} />\n              </Button>\n              {/* Botón para volver a carpetas en móvil cuando hay email seleccionado */}\n              {selectedEmail && (\n                <Button \n                  variant=\"outline\"\n                  size=\"sm\" \n                  className=\"flex-shrink-0 md:hidden\"\n                  onClick={() => setSelectedEmail(null)}\n                >\n                  <ArrowLeft size={16} className=\"mr-1\" /> Carpetas\n                </Button>\n              )}\n            </div>\n            \n            {/* Filtros avanzados */}\n            {showAdvancedFilters && (\n              <div className=\"mb-3\">\n                <EmailFilters \n                  onApplyFilters={applyFilters}\n                  onResetFilters={resetFilters}\n                  initialFilters={activeFilters}\n                />\n              </div>\n            )}\n            \n            {/* Contenido principal - Adaptativo para móvil */}\n            <div className=\"flex flex-col md:flex-row gap-2 sm:gap-3 md:gap-4 flex-grow\">\n              {/* Lista de emails - Se oculta en móvil cuando hay un email seleccionado */}\n              <Card className={`flex-grow md:w-1/2 ${selectedEmail ? 'hidden md:block' : 'block'} max-h-[calc(100vh-240px)] md:max-h-none overflow-y-auto`}>\n                <div className=\"p-2\">\n                  <EmailList \n                    emails={emails} \n                    loading={loading}\n                    selectedEmailId={selectedEmail?.id}\n                    onSelectEmail={handleSelectEmail}\n                    folder={currentFolder}\n                  />\n                </div>\n              </Card>\n              \n              {/* Detalle del email */}\n              {selectedEmail ? (\n                <Card className=\"flex-grow md:w-1/2 w-full max-h-[calc(100vh-240px)] md:max-h-none overflow-y-auto\">\n                  <div className=\"py-1 px-2\">\n                    <EmailDetail \n                      email={selectedEmail}\n                      onBack={() => setSelectedEmail(null)}\n                      isMobile={window.innerWidth < 768}\n                      onReply={() => {\n                        setIsComposeOpen(true);\n                        // Pre-llenar datos para respuesta\n                      }}\n                      onDelete={(emailId) => {\n                        // Mover a papelera\n                        if (window.confirm('¿Estás seguro de mover este correo a la papelera?')) {\n                          try {\n                            // Aquí se implementaría la lógica para mover a papelera\n                            // Por ahora solo simulamos\n                            setSelectedEmail(null);\n                            toast.info(`Correo movido a la papelera`);\n                          } catch (error) {\n                            toast.error(`Error al mover el correo a la papelera`);\n                          }\n                        }\n                      }}\n                      onMoveToFolder={handleMoveToFolder}\n                      folders={customFolders}\n                    />\n                  </div>\n                </Card>\n              ) : (\n                <Card className=\"flex-grow md:w-1/2 hidden md:flex items-center justify-center text-gray-500\">\n                  <div className=\"text-center p-4\">\n                    <Mail size={48} className=\"mx-auto mb-2 opacity-20\" />\n                    <p>Selecciona un correo para ver su contenido</p>\n                  </div>\n                </Card>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Modal de composición de correo */}\n      {isComposeOpen && (\n        <ComposeEmailModal \n          isOpen={isComposeOpen}\n          onClose={() => setIsComposeOpen(false)}\n          userEmailAddress={userEmailAddress}\n          userEmail={userEmailAddress}\n          replyTo={selectedEmail}\n        />\n      )}\n      \n      {/* Notificaciones toast */}\n      <ToastContainer position=\"bottom-right\" autoClose={3000} />\n    </div>\n  );\n};\n\nexport default EmailInbox;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pages\\user\\EmailStatistics.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\pwa\\registerServiceWorker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\routes\\AdminRoutes.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\routes\\UserRoutes.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'EmailInboxLazy' is assigned a value but never used.","line":13,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'EmailSetupLazy' is assigned a value but never used.","line":14,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { lazy, Suspense } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport Loader from '../components/ui/Loader';\n\n// Páginas de usuario\nimport EmailInbox from '../components/email/EmailInbox';\nimport EmailStatistics from '../pages/user/EmailStatistics';\nimport GestionProveedores from '../pages/GestionProveedores';\nimport EmailSetup from '../pages/EmailSetup';\nimport MailgunTester from '../components/email/MailgunTester';\n\n// Carga perezosa (lazy loading) de componentes para mejor rendimiento\nconst EmailInboxLazy = lazy(() => import('../components/email/EmailInbox'));\nconst EmailSetupLazy = lazy(() => import('../pages/EmailSetup'));\n\n// Componente para mostrar durante la carga\nconst LoadingFallback = () => (\n  <div className=\"flex items-center justify-center min-h-screen\">\n    <Loader className=\"w-10 h-10\" />\n    <span className=\"ml-3 text-lg\">Cargando...</span>\n  </div>\n);\n\n/**\n * Rutas para la sección de usuario\n * Requiere autenticación\n */\nconst UserRoutes = () => {\n  return (\n    <Suspense fallback={<LoadingFallback />}>\n      <Routes>\n        <Route path=\"/\" element={<Navigate to=\"/user/dashboard\" replace />} />\n        <Route path=\"/email\" element={<EmailInbox />} />\n        <Route path=\"/email/stats\" element={<EmailStatistics />} />\n        <Route path=\"/email/setup\" element={<EmailSetup />} />\n        <Route path=\"/proveedores/*\" element={<GestionProveedores />} />\n        <Route path=\"/email/test\" element={<MailgunTester />} />\n        <Route path=\"*\" element={<Navigate to=\"/user/dashboard\" replace />} />\n      </Routes>\n    </Suspense>\n  );\n};\n\nexport default UserRoutes;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\AIEmailTrackingService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'EMAIL_TAGS' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio especializado para el seguimiento y análisis de efectividad de correos\n * generados mediante búsqueda AI de proveedores.\n */\nimport { EMAIL_TAGS } from './emailTrackingService';\n\nclass AIEmailTrackingService {\n  /**\n   * Constructor del servicio\n   */\n  constructor() {\n    this.storageKeyActivities = 'aiEmailActivities';\n    this.storageKeyMetrics = 'aiEmailMetrics';\n  }\n\n  /**\n   * Registra una actividad de email AI con información detallada\n   * @param {Object} aiResult - Resultado de búsqueda AI utilizado\n   * @param {string} searchQuery - Consulta original del usuario\n   * @param {Object} options - Opciones adicionales\n   * @returns {string} - ID único del registro de actividad\n   */\n  registerActivity(aiResult, searchQuery, options = {}) {\n    try {\n      const activityId = `ai_${Date.now()}_${Math.random().toString(36).substring(2, 10)}`;\n      \n      const activity = {\n        id: activityId,\n        aiResultId: aiResult?.id,\n        providerName: aiResult?.name,\n        providerCategory: aiResult?.service,\n        searchQuery,\n        templateCategory: options.templateCategory || aiResult?.service || 'general',\n        wasCustomized: options.wasCustomized || false,\n        timestamp: new Date().toISOString(),\n        status: 'sent',\n        responseReceived: false,\n        responseTime: null,\n        effectivenessScore: null,\n        emailId: options.emailId || null\n      };\n      \n      // Guardar en localStorage para desarrollo\n      const activities = JSON.parse(localStorage.getItem(this.storageKeyActivities) || '[]');\n      activities.push(activity);\n      localStorage.setItem(this.storageKeyActivities, JSON.stringify(activities));\n      \n      return activityId;\n    } catch (error) {\n      console.error('Error registrando actividad de email AI:', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Actualiza el estado de un correo AI cuando se recibe respuesta\n   * @param {string} activityId - ID de la actividad AI\n   * @param {Object} responseData - Datos de la respuesta\n   * @returns {boolean} - Éxito de la operación\n   */\n  updateWithResponse(activityId, responseData) {\n    try {\n      const activities = JSON.parse(localStorage.getItem(this.storageKeyActivities) || '[]');\n      const index = activities.findIndex(act => act.id === activityId);\n      \n      if (index === -1) return false;\n      \n      const now = new Date();\n      const sentDate = new Date(activities[index].timestamp);\n      const responseTime = (now - sentDate) / (1000 * 60 * 60); // horas\n      \n      // Actualizar la actividad con datos de respuesta\n      activities[index] = {\n        ...activities[index],\n        status: 'responded',\n        responseReceived: true,\n        responseTime,\n        responseDate: now.toISOString(),\n        effectivenessScore: responseData.score || null\n      };\n      \n      localStorage.setItem(this.storageKeyActivities, JSON.stringify(activities));\n      \n      // Actualizar métricas generales\n      this.updateOverallMetrics();\n      \n      return true;\n    } catch (error) {\n      console.error('Error actualizando actividad AI con respuesta:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Obtiene todas las actividades de email AI, opcionalmente filtradas\n   * @param {Object} filters - Filtros a aplicar\n   * @returns {Array} - Actividades que coinciden con los filtros\n   */\n  getActivities(filters = {}) {\n    try {\n      const activities = JSON.parse(localStorage.getItem(this.storageKeyActivities) || '[]');\n      \n      if (Object.keys(filters).length === 0) return activities;\n      \n      return activities.filter(activity => {\n        let incluir = true;\n        \n        if (filters.category) {\n          incluir = incluir && activity.templateCategory === filters.category;\n        }\n        \n        if (filters.status) {\n          incluir = incluir && activity.status === filters.status;\n        }\n        \n        if (filters.responded !== undefined) {\n          incluir = incluir && activity.responseReceived === filters.responded;\n        }\n        \n        if (filters.customized !== undefined) {\n          incluir = incluir && activity.wasCustomized === filters.customized;\n        }\n        \n        if (filters.providerName) {\n          incluir = incluir && \n            activity.providerName &&\n            activity.providerName.toLowerCase().includes(filters.providerName.toLowerCase());\n        }\n        \n        return incluir;\n      });\n    } catch (error) {\n      console.error('Error obteniendo actividades AI:', error);\n      return [];\n    }\n  }\n  \n  /**\n   * Calcula y actualiza métricas generales de efectividad\n   * @private\n   */\n  updateOverallMetrics() {\n    try {\n      const activities = this.getActivities();\n      const responded = activities.filter(act => act.responseReceived);\n      const customized = activities.filter(act => act.wasCustomized);\n      const customizedWithResponse = customized.filter(act => act.responseReceived);\n      \n      // Calcular métricas por categoría\n      const categoriesMap = {};\n      activities.forEach(act => {\n        const cat = act.templateCategory || 'general';\n        \n        if (!categoriesMap[cat]) {\n          categoriesMap[cat] = {\n            total: 0,\n            responded: 0,\n            customized: 0,\n            totalResponseTime: 0,\n            averageResponseTime: 0\n          };\n        }\n        \n        categoriesMap[cat].total++;\n        \n        if (act.wasCustomized) {\n          categoriesMap[cat].customized++;\n        }\n        \n        if (act.responseReceived) {\n          categoriesMap[cat].responded++;\n          \n          if (act.responseTime) {\n            categoriesMap[cat].totalResponseTime += act.responseTime;\n          }\n        }\n      });\n      \n      // Calcular promedios\n      Object.keys(categoriesMap).forEach(cat => {\n        const stats = categoriesMap[cat];\n        stats.averageResponseTime = stats.responded > 0 \n          ? stats.totalResponseTime / stats.responded \n          : 0;\n      });\n      \n      // Calcular métricas generales\n      const metrics = {\n        timestamp: new Date().toISOString(),\n        totalEmails: activities.length,\n        totalResponses: responded.length,\n        responseRate: activities.length > 0 \n          ? (responded.length / activities.length) * 100 \n          : 0,\n        customizedRate: activities.length > 0 \n          ? (customized.length / activities.length) * 100 \n          : 0,\n        customizedResponseRate: customized.length > 0 \n          ? (customizedWithResponse.length / customized.length) * 100 \n          : 0,\n        averageResponseTime: responded.length > 0 \n          ? responded.reduce((sum, act) => sum + (act.responseTime || 0), 0) / responded.length \n          : 0,\n        categoryStats: categoriesMap\n      };\n      \n      // Guardar métricas\n      localStorage.setItem(this.storageKeyMetrics, JSON.stringify(metrics));\n      \n      return metrics;\n    } catch (error) {\n      console.error('Error actualizando métricas:', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Obtiene las métricas actuales de efectividad\n   * @returns {Object} - Métricas actuales\n   */\n  getMetrics() {\n    try {\n      const storedMetrics = localStorage.getItem(this.storageKeyMetrics);\n      \n      if (storedMetrics) {\n        return JSON.parse(storedMetrics);\n      }\n      \n      return this.updateOverallMetrics();\n    } catch (error) {\n      console.error('Error obteniendo métricas AI:', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Obtiene datos para el panel de comparación de efectividad AI vs no-AI\n   * @returns {Object} - Datos de comparación\n   */\n  getComparisonData() {\n    try {\n      // Obtener métricas AI\n      const aiMetrics = this.getMetrics();\n      \n      // Obtener datos de correos no-AI desde localStorage (simulado)\n      // En producción, esta información vendría de la base de datos\n      const emailData = JSON.parse(localStorage.getItem('emailTrackings') || '[]');\n      const nonAiEmails = emailData.filter(e => !e.isAIGenerated);\n      const nonAiResponses = nonAiEmails.filter(e => e.hasResponse);\n      \n      // Calcular métricas para correos no-AI\n      const nonAiResponseRate = nonAiEmails.length > 0\n        ? (nonAiResponses.length / nonAiEmails.length) * 100\n        : 0;\n      \n      // Calcular tiempo de respuesta promedio para no-AI (si hay datos disponibles)\n      let nonAiAvgResponseTime = 0;\n      if (nonAiResponses.length > 0) {\n        let totalTime = 0;\n        let countWithTime = 0;\n        \n        nonAiResponses.forEach(email => {\n          if (email.sentDate && email.responseDate) {\n            const sentDate = new Date(email.sentDate);\n            const responseDate = new Date(email.responseDate);\n            const responseTime = (responseDate - sentDate) / (1000 * 60 * 60); // horas\n            totalTime += responseTime;\n            countWithTime++;\n          }\n        });\n        \n        nonAiAvgResponseTime = countWithTime > 0 ? totalTime / countWithTime : 0;\n      }\n      \n      // Preparar datos de comparación\n      return {\n        ai: {\n          total: aiMetrics.totalEmails || 0,\n          responded: aiMetrics.totalResponses || 0,\n          responseRate: aiMetrics.responseRate.toFixed(2),\n          avgResponseTime: aiMetrics.averageResponseTime.toFixed(1)\n        },\n        nonAi: {\n          total: nonAiEmails.length,\n          responded: nonAiResponses.length,\n          responseRate: nonAiResponseRate.toFixed(2),\n          avgResponseTime: nonAiAvgResponseTime.toFixed(1)\n        },\n        difference: {\n          responseRate: (aiMetrics.responseRate - nonAiResponseRate).toFixed(2),\n          avgResponseTime: (nonAiAvgResponseTime - aiMetrics.averageResponseTime).toFixed(1)\n        },\n        categoryBreakdown: Object.keys(aiMetrics.categoryStats || {}).map(cat => ({\n          category: cat,\n          total: aiMetrics.categoryStats[cat].total,\n          responseRate: aiMetrics.categoryStats[cat].total > 0\n            ? ((aiMetrics.categoryStats[cat].responded / aiMetrics.categoryStats[cat].total) * 100).toFixed(2)\n            : '0.00',\n          avgResponseTime: aiMetrics.categoryStats[cat].averageResponseTime.toFixed(1)\n        }))\n      };\n    } catch (error) {\n      console.error('Error obteniendo datos de comparación:', error);\n      return {\n        ai: { total: 0, responded: 0, responseRate: '0.00', avgResponseTime: '0.0' },\n        nonAi: { total: 0, responded: 0, responseRate: '0.00', avgResponseTime: '0.0' },\n        difference: { responseRate: '0.00', avgResponseTime: '0.0' },\n        categoryBreakdown: []\n      };\n    }\n  }\n}\n\nexport default AIEmailTrackingService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\EmailRecommendationService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'EMAIL_TAGS' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'metrics' is assigned a value but never used.","line":24,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'comparison' is assigned a value but never used.","line":25,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'activities' is defined but never used.","line":149,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":149,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'activities' is defined but never used.","line":455,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":455,"endColumn":64}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio para generar recomendaciones inteligentes basadas en métricas \n * de efectividad de correos electrónicos\n */\nimport AIEmailTrackingService from './AIEmailTrackingService';\nimport { EMAIL_TAGS } from './emailTrackingService';\n\nclass EmailRecommendationService {\n  constructor() {\n    this.trackingService = new AIEmailTrackingService();\n    this.storageKeyRecommendations = 'emailRecommendations';\n  }\n\n  /**\n   * Genera recomendaciones personalizadas basadas en métricas históricas\n   * @param {string} category - Categoría de proveedor (opcional)\n   * @param {string} searchQuery - Consulta de búsqueda (opcional)\n   * @returns {Object} Objeto con recomendaciones\n   */\n  generateRecommendations(category = null, searchQuery = null) {\n    try {\n      // Obtener datos históricos\n      const activities = this.trackingService.getActivities();\n      const metrics = this.trackingService.getMetrics();\n      const comparison = this.trackingService.getComparisonData();\n      \n      // Objeto base de recomendaciones\n      const recommendations = {\n        bestTimeToSend: this._calculateBestTimeToSend(activities),\n        subjectLineRecommendations: this._generateSubjectRecommendations(activities),\n        templateRecommendations: this._generateTemplateRecommendations(activities, category),\n        customizationImpact: this._calculateCustomizationImpact(activities),\n        responseTimeExpectations: this._calculateResponseTimeExpectations(activities, category),\n        confidenceScore: 0\n      };\n      \n      // Aplicar contexto de categoría si está disponible\n      if (category) {\n        recommendations.categorySpecific = this._generateCategorySpecificRecommendations(category, activities);\n      }\n      \n      // Aplicar contexto de búsqueda si está disponible\n      if (searchQuery) {\n        recommendations.querySpecific = this._generateQuerySpecificRecommendations(searchQuery, activities);\n      }\n      \n      // Calcular puntuación de confianza basada en la cantidad de datos disponibles\n      recommendations.confidenceScore = this._calculateConfidenceScore(activities, category);\n      \n      // Guardar recomendaciones en localStorage para referencia\n      this._saveRecommendations(recommendations, category, searchQuery);\n      \n      return recommendations;\n    } catch (error) {\n      console.error('Error generando recomendaciones:', error);\n      return this._getDefaultRecommendations();\n    }\n  }\n  \n  /**\n   * Calcula el mejor momento del día para enviar correos basado en tasas de respuesta históricas\n   * @private\n   * @param {Array} activities - Actividades históricas\n   * @returns {Object} Objeto con recomendaciones de horario\n   */\n  _calculateBestTimeToSend(activities) {\n    // Inicializar contadores por franja horaria\n    const timeSlots = {\n      morning: { sent: 0, responded: 0, rate: 0 },     // 8-12h\n      afternoon: { sent: 0, responded: 0, rate: 0 },   // 12-16h\n      evening: { sent: 0, responded: 0, rate: 0 },     // 16-20h\n      night: { sent: 0, responded: 0, rate: 0 }        // 20-8h\n    };\n    \n    // Analizar actividades\n    activities.forEach(activity => {\n      const timestamp = new Date(activity.timestamp);\n      const hour = timestamp.getHours();\n      \n      // Determinar franja horaria\n      let timeSlot = 'night';\n      if (hour >= 8 && hour < 12) timeSlot = 'morning';\n      else if (hour >= 12 && hour < 16) timeSlot = 'afternoon';\n      else if (hour >= 16 && hour < 20) timeSlot = 'evening';\n      \n      // Incrementar contadores\n      timeSlots[timeSlot].sent++;\n      if (activity.responseReceived) {\n        timeSlots[timeSlot].responded++;\n      }\n    });\n    \n    // Calcular tasas y determinar mejor franja\n    let bestTimeSlot = 'morning';\n    let bestRate = 0;\n    \n    Object.keys(timeSlots).forEach(slot => {\n      const { sent, responded } = timeSlots[slot];\n      const rate = sent > 0 ? (responded / sent) * 100 : 0;\n      timeSlots[slot].rate = rate;\n      \n      if (sent >= 5 && rate > bestRate) {\n        bestRate = rate;\n        bestTimeSlot = slot;\n      }\n    });\n    \n    // Mappear nombres amigables\n    const timeSlotNames = {\n      morning: 'mañana (8-12h)',\n      afternoon: 'mediodía (12-16h)',\n      evening: 'tarde (16-20h)',\n      night: 'noche (20-8h)'\n    };\n    \n    // Preparar recomendación\n    return {\n      bestTimeSlot,\n      bestTimeSlotName: timeSlotNames[bestTimeSlot],\n      bestRate: timeSlots[bestTimeSlot].rate.toFixed(1),\n      timeSlots,\n      hasSufficientData: this._hasSufficientTimeData(timeSlots)\n    };\n  }\n  \n  /**\n   * Determina si hay suficientes datos para hacer recomendaciones de tiempo confiables\n   * @private\n   * @param {Object} timeSlots - Datos por franja horaria\n   * @returns {boolean} True si hay suficientes datos\n   */\n  _hasSufficientTimeData(timeSlots) {\n    // Verificar si al menos 2 franjas tienen 5+ envíos\n    let slotsWithSufficientData = 0;\n    \n    Object.values(timeSlots).forEach(slot => {\n      if (slot.sent >= 5) slotsWithSufficientData++;\n    });\n    \n    return slotsWithSufficientData >= 2;\n  }\n  \n  /**\n   * Genera recomendaciones para líneas de asunto efectivas\n   * @private\n   * @param {Array} activities - Actividades históricas\n   * @returns {Object} Objeto con recomendaciones de asunto\n   */\n  _generateSubjectRecommendations(activities) {\n    // Para una implementación real, esto requeriría analizar los asuntos de correos exitosos\n    // Aquí incluiremos recomendaciones genéricas basadas en mejores prácticas\n    \n    return {\n      recommendedPatterns: [\n        'Consulta sobre [Servicio] para evento el [Fecha]',\n        'Disponibilidad y presupuesto para [Evento]',\n        'Interés en contratar [Servicio] - Lovenda'\n      ],\n      avoidPatterns: [\n        'Consulta',\n        'Información',\n        'Hola'\n      ],\n      optimalLength: {\n        min: 30,\n        max: 60\n      },\n      includeElements: [\n        'Fecha del evento',\n        'Tipo de servicio',\n        'Mención de Lovenda'\n      ]\n    };\n  }\n  \n  /**\n   * Genera recomendaciones para plantillas basadas en datos históricos\n   * @private\n   * @param {Array} activities - Actividades históricas\n   * @param {string} category - Categoría de proveedor\n   * @returns {Object} Objeto con recomendaciones de plantillas\n   */\n  _generateTemplateRecommendations(activities, category) {\n    // Agrupar por plantilla/categoría\n    const templateStats = {};\n    \n    activities.forEach(activity => {\n      const templateCat = activity.templateCategory || 'general';\n      \n      if (!templateStats[templateCat]) {\n        templateStats[templateCat] = {\n          total: 0,\n          responded: 0,\n          responseRate: 0,\n          avgResponseTime: 0,\n          totalResponseTime: 0\n        };\n      }\n      \n      templateStats[templateCat].total++;\n      \n      if (activity.responseReceived) {\n        templateStats[templateCat].responded++;\n        \n        if (activity.responseTime) {\n          templateStats[templateCat].totalResponseTime += activity.responseTime;\n        }\n      }\n    });\n    \n    // Calcular tasas y promedios\n    Object.keys(templateStats).forEach(cat => {\n      const stats = templateStats[cat];\n      stats.responseRate = stats.total > 0 ? (stats.responded / stats.total) * 100 : 0;\n      stats.avgResponseTime = stats.responded > 0 ? stats.totalResponseTime / stats.responded : 0;\n    });\n    \n    // Encontrar mejor plantilla general\n    let bestTemplate = 'general';\n    let bestRate = 0;\n    \n    Object.keys(templateStats).forEach(cat => {\n      // Solo considerar plantillas con suficientes datos\n      if (templateStats[cat].total >= 5 && templateStats[cat].responseRate > bestRate) {\n        bestRate = templateStats[cat].responseRate;\n        bestTemplate = cat;\n      }\n    });\n    \n    // Si se especificó una categoría, filtrar para esa categoría\n    let categorySpecificTemplate = null;\n    if (category && templateStats[category] && templateStats[category].total > 0) {\n      categorySpecificTemplate = {\n        category,\n        responseRate: templateStats[category].responseRate.toFixed(1),\n        hasSufficientData: templateStats[category].total >= 5\n      };\n    }\n    \n    return {\n      bestOverallTemplate: bestTemplate,\n      bestOverallResponseRate: bestRate.toFixed(1),\n      templateStats,\n      categorySpecificTemplate,\n      hasSufficientData: this._hasSufficientTemplateData(templateStats)\n    };\n  }\n  \n  /**\n   * Determina si hay suficientes datos para hacer recomendaciones de plantillas confiables\n   * @private\n   * @param {Object} templateStats - Estadísticas por plantilla\n   * @returns {boolean} True si hay suficientes datos\n   */\n  _hasSufficientTemplateData(templateStats) {\n    // Verificar si al menos 2 plantillas tienen 5+ envíos\n    let templatesWithSufficientData = 0;\n    \n    Object.values(templateStats).forEach(stats => {\n      if (stats.total >= 5) templatesWithSufficientData++;\n    });\n    \n    return templatesWithSufficientData >= 2;\n  }\n  \n  /**\n   * Calcula el impacto de personalizar mensajes en la tasa de respuesta\n   * @private\n   * @param {Array} activities - Actividades históricas\n   * @returns {Object} Objeto con análisis de impacto\n   */\n  _calculateCustomizationImpact(activities) {\n    const customized = {\n      total: 0,\n      responded: 0,\n      rate: 0\n    };\n    \n    const nonCustomized = {\n      total: 0,\n      responded: 0,\n      rate: 0\n    };\n    \n    // Analizar actividades\n    activities.forEach(activity => {\n      const target = activity.wasCustomized ? customized : nonCustomized;\n      \n      target.total++;\n      if (activity.responseReceived) {\n        target.responded++;\n      }\n    });\n    \n    // Calcular tasas\n    customized.rate = customized.total > 0 ? (customized.responded / customized.total) * 100 : 0;\n    nonCustomized.rate = nonCustomized.total > 0 ? (nonCustomized.responded / nonCustomized.total) * 100 : 0;\n    \n    // Calcular impacto\n    const impact = customized.rate - nonCustomized.rate;\n    \n    return {\n      customized: {\n        ...customized,\n        rate: customized.rate.toFixed(1)\n      },\n      nonCustomized: {\n        ...nonCustomized,\n        rate: nonCustomized.rate.toFixed(1)\n      },\n      impact: impact.toFixed(1),\n      recommendCustomization: impact > 5, // Recomendar si hay al menos 5% de mejora\n      hasSufficientData: customized.total >= 5 && nonCustomized.total >= 5\n    };\n  }\n  \n  /**\n   * Calcula tiempos esperados de respuesta basados en datos históricos\n   * @private\n   * @param {Array} activities - Actividades históricas\n   * @param {string} category - Categoría de proveedor\n   * @returns {Object} Objeto con expectativas de tiempo de respuesta\n   */\n  _calculateResponseTimeExpectations(activities, category) {\n    // Filtrar solo actividades con respuesta\n    const respondedActivities = activities.filter(a => a.responseReceived && a.responseTime);\n    \n    // Si no hay suficientes datos, retornar expectativas por defecto\n    if (respondedActivities.length < 5) {\n      return {\n        averageTime: '24-48',\n        hasSufficientData: false\n      };\n    }\n    \n    // Calcular tiempo promedio general\n    const avgTime = respondedActivities.reduce((sum, act) => sum + act.responseTime, 0) / respondedActivities.length;\n    \n    // Si se especificó categoría, calcular tiempo para esa categoría\n    let categoryAvgTime = null;\n    if (category) {\n      const categoryActivities = respondedActivities.filter(a => a.templateCategory === category);\n      \n      if (categoryActivities.length >= 3) {\n        categoryAvgTime = categoryActivities.reduce((sum, act) => sum + act.responseTime, 0) / categoryActivities.length;\n      }\n    }\n    \n    return {\n      averageTime: avgTime.toFixed(1),\n      medianTime: this._calculateMedianTime(respondedActivities),\n      categoryAverageTime: categoryAvgTime ? categoryAvgTime.toFixed(1) : null,\n      fastestResponse: Math.min(...respondedActivities.map(a => a.responseTime)).toFixed(1),\n      slowestResponse: Math.max(...respondedActivities.map(a => a.responseTime)).toFixed(1),\n      hasSufficientData: true\n    };\n  }\n  \n  /**\n   * Calcula la mediana del tiempo de respuesta\n   * @private\n   * @param {Array} activities - Actividades con respuesta\n   * @returns {string} Mediana formateada\n   */\n  _calculateMedianTime(activities) {\n    const times = activities.map(a => a.responseTime).sort((a, b) => a - b);\n    const mid = Math.floor(times.length / 2);\n    \n    const median = times.length % 2 === 0\n      ? (times[mid - 1] + times[mid]) / 2\n      : times[mid];\n      \n    return median.toFixed(1);\n  }\n  \n  /**\n   * Genera recomendaciones específicas para una categoría\n   * @private\n   * @param {string} category - Categoría de proveedor\n   * @param {Array} activities - Actividades históricas\n   * @returns {Object} Objeto con recomendaciones específicas\n   */\n  _generateCategorySpecificRecommendations(category, activities) {\n    // Filtrar actividades para la categoría específica\n    const categoryActivities = activities.filter(a => a.templateCategory === category);\n    \n    if (categoryActivities.length < 3) {\n      return {\n        hasSufficientData: false,\n        recommendations: []\n      };\n    }\n    \n    // En una implementación real, aquí se aplicaría análisis específico por categoría\n    // Proveer algunas recomendaciones basadas en la categoría\n    \n    const categoryRecommendations = {\n      hasSufficientData: true,\n      responseRate: (categoryActivities.filter(a => a.responseReceived).length / categoryActivities.length * 100).toFixed(1),\n      recommendations: []\n    };\n    \n    // Generar recomendaciones específicas según la categoría\n    switch (category.toLowerCase()) {\n      case 'fotografía':\n        categoryRecommendations.recommendations = [\n          'Mencionar el estilo específico de fotografías que buscas',\n          'Preguntar por la disponibilidad de álbumes impresos',\n          'Consultar sobre el tiempo de entrega de las fotos editadas'\n        ];\n        break;\n        \n      case 'catering':\n        categoryRecommendations.recommendations = [\n          'Especificar el número aproximado de invitados',\n          'Mencionar restricciones alimentarias o preferencias',\n          'Preguntar por opciones de menú y posibilidad de cata'\n        ];\n        break;\n        \n      case 'música':\n        categoryRecommendations.recommendations = [\n          'Especificar el estilo musical preferido',\n          'Consultar sobre el repertorio y posibilidad de peticiones',\n          'Preguntar por necesidades técnicas y espacio necesario'\n        ];\n        break;\n        \n      case 'flores':\n        categoryRecommendations.recommendations = [\n          'Mencionar la paleta de colores del evento',\n          'Especificar las áreas que requieren decoración',\n          'Consultar sobre flores de temporada disponibles'\n        ];\n        break;\n        \n      default:\n        categoryRecommendations.recommendations = [\n          'Ser específico sobre tus necesidades para el evento',\n          'Mencionar fecha, ubicación y número de invitados',\n          'Consultar disponibilidad antes de entrar en detalles'\n        ];\n    }\n    \n    return categoryRecommendations;\n  }\n  \n  /**\n   * Genera recomendaciones específicas basadas en la consulta de búsqueda\n   * @private\n   * @param {string} searchQuery - Consulta de búsqueda\n   * @param {Array} activities - Actividades históricas\n   * @returns {Object} Objeto con recomendaciones basadas en la búsqueda\n   */\n  _generateQuerySpecificRecommendations(searchQuery, activities) {\n    // Análisis básico de la consulta\n    const query = searchQuery.toLowerCase();\n    const recommendations = [];\n    \n    // Detectar elementos clave en la consulta\n    const hasLocation = /madrid|barcelona|valencia|sevilla|málaga|ciudad|zona|cerca/i.test(query);\n    const hasDate = /202\\d|enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre/i.test(query);\n    const hasBudget = /presupuesto|euros|precio|coste|económico/i.test(query);\n    const hasSize = /grande|pequeño|íntimo|invitados|personas|gente|tamaño/i.test(query);\n    \n    // Generar recomendaciones contextuales\n    if (!hasLocation) {\n      recommendations.push('Especificar la ubicación del evento en tu mensaje');\n    }\n    \n    if (!hasDate) {\n      recommendations.push('Mencionar la fecha del evento para confirmar disponibilidad');\n    }\n    \n    if (!hasBudget) {\n      recommendations.push('Indicar un rango de presupuesto para obtener propuestas ajustadas');\n    }\n    \n    if (!hasSize) {\n      recommendations.push('Especificar el número aproximado de invitados o tamaño del evento');\n    }\n    \n    return {\n      searchContext: {\n        includesLocation: hasLocation,\n        includesDate: hasDate,\n        includesBudget: hasBudget,\n        includesSize: hasSize\n      },\n      recommendations\n    };\n  }\n  \n  /**\n   * Calcula la puntuación de confianza para las recomendaciones\n   * @private\n   * @param {Array} activities - Actividades históricas\n   * @param {string} category - Categoría de proveedor\n   * @returns {number} Puntuación de confianza (0-100)\n   */\n  _calculateConfidenceScore(activities, category) {\n    // Base: cantidad de datos disponibles\n    let baseScore = 0;\n    \n    // Por cantidad total de actividades\n    if (activities.length >= 50) baseScore = 100;\n    else if (activities.length >= 30) baseScore = 80;\n    else if (activities.length >= 15) baseScore = 60;\n    else if (activities.length >= 5) baseScore = 40;\n    else baseScore = 20;\n    \n    // Ajustar por categoría específica si está disponible\n    if (category) {\n      const categoryActivities = activities.filter(a => a.templateCategory === category);\n      let categoryMultiplier = 1;\n      \n      if (categoryActivities.length >= 20) categoryMultiplier = 1.2;\n      else if (categoryActivities.length >= 10) categoryMultiplier = 1.1;\n      else if (categoryActivities.length >= 5) categoryMultiplier = 1.05;\n      else if (categoryActivities.length < 3) categoryMultiplier = 0.8;\n      \n      baseScore = Math.min(100, baseScore * categoryMultiplier);\n    }\n    \n    // Ajustar por distribución de respuestas\n    const responded = activities.filter(a => a.responseReceived).length;\n    if (activities.length > 0) {\n      const responseRate = (responded / activities.length);\n      \n      // Penalizar si la tasa de respuesta es muy baja o muy alta (datos poco representativos)\n      if (responseRate < 0.1 || responseRate > 0.9) {\n        baseScore *= 0.9;\n      }\n    }\n    \n    return Math.round(baseScore);\n  }\n  \n  /**\n   * Guarda las recomendaciones generadas para referencia futura\n   * @private\n   * @param {Object} recommendations - Recomendaciones generadas\n   * @param {string} category - Categoría de proveedor\n   * @param {string} searchQuery - Consulta de búsqueda\n   */\n  _saveRecommendations(recommendations, category, searchQuery) {\n    try {\n      const savedRecommendations = JSON.parse(localStorage.getItem(this.storageKeyRecommendations) || '[]');\n      \n      // Limitar a las últimas 10 recomendaciones\n      if (savedRecommendations.length >= 10) {\n        savedRecommendations.pop();\n      }\n      \n      // Añadir nueva recomendación\n      savedRecommendations.unshift({\n        id: `rec_${Date.now()}`,\n        timestamp: new Date().toISOString(),\n        category,\n        searchQuery,\n        recommendations,\n        applied: false\n      });\n      \n      localStorage.setItem(this.storageKeyRecommendations, JSON.stringify(savedRecommendations));\n    } catch (error) {\n      console.error('Error guardando recomendaciones:', error);\n    }\n  }\n  \n  /**\n   * Retorna las recomendaciones por defecto cuando no hay datos suficientes\n   * @private\n   * @returns {Object} Recomendaciones por defecto\n   */\n  _getDefaultRecommendations() {\n    return {\n      bestTimeToSend: {\n        bestTimeSlot: 'morning',\n        bestTimeSlotName: 'mañana (8-12h)',\n        hasSufficientData: false\n      },\n      subjectLineRecommendations: {\n        recommendedPatterns: [\n          'Consulta sobre [Servicio] para evento el [Fecha]',\n          'Disponibilidad y presupuesto para [Evento]',\n          'Interés en contratar [Servicio] - Lovenda'\n        ],\n        optimalLength: {\n          min: 30,\n          max: 60\n        }\n      },\n      templateRecommendations: {\n        bestOverallTemplate: 'general',\n        hasSufficientData: false\n      },\n      customizationImpact: {\n        recommendCustomization: true,\n        hasSufficientData: false\n      },\n      responseTimeExpectations: {\n        averageTime: '24-48',\n        hasSufficientData: false\n      },\n      confidenceScore: 20\n    };\n  }\n  \n  /**\n   * Obtiene recomendaciones previamente generadas\n   * @returns {Array} Historial de recomendaciones\n   */\n  getRecommendationsHistory() {\n    try {\n      return JSON.parse(localStorage.getItem(this.storageKeyRecommendations) || '[]');\n    } catch (error) {\n      console.error('Error obteniendo historial de recomendaciones:', error);\n      return [];\n    }\n  }\n  \n  /**\n   * Marca una recomendación como aplicada\n   * @param {string} recommendationId - ID de la recomendación\n   * @returns {boolean} Éxito de la operación\n   */\n  markRecommendationAsApplied(recommendationId) {\n    try {\n      const savedRecommendations = JSON.parse(localStorage.getItem(this.storageKeyRecommendations) || '[]');\n      const index = savedRecommendations.findIndex(r => r.id === recommendationId);\n      \n      if (index === -1) return false;\n      \n      savedRecommendations[index].applied = true;\n      savedRecommendations[index].appliedAt = new Date().toISOString();\n      \n      localStorage.setItem(this.storageKeyRecommendations, JSON.stringify(savedRecommendations));\n      return true;\n    } catch (error) {\n      console.error('Error marcando recomendación como aplicada:', error);\n      return false;\n    }\n  }\n}\n\nexport default EmailRecommendationService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\EmailService\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\EmailTemplateService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\EmailTrackingService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'emailId' is defined but never used.","line":252,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":252,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'providerId' is defined but never used.","line":252,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":252,"endColumn":53}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// EmailTrackingService.js - Servicio para el seguimiento de respuestas de proveedores\nimport { saveData, loadData } from './SyncService';\n\nconst TRACKING_STORAGE_KEY = 'lovenda_email_tracking';\n\n// Estados posibles para seguimiento de correos\nexport const TRACKING_STATUS = {\n  WAITING: 'waiting',         // Esperando respuesta\n  RESPONDED: 'responded',     // Proveedor respondió\n  FOLLOWUP: 'followup',       // Requiere seguimiento adicional\n  COMPLETED: 'completed',     // Conversación completada/cerrada\n  URGENT: 'urgent'            // Requiere atención urgente\n};\n\n// Etiquetas disponibles para correos\nexport const EMAIL_TAGS = {\n  PROVIDER: 'provider',       // Comunicación con proveedor\n  IMPORTANT: 'important',     // Correo importante\n  BUDGET: 'budget',           // Relacionado con presupuesto\n  CONTRACT: 'contract',       // Relacionado con contrato\n  QUESTION: 'question',       // Consulta o pregunta\n  OFFER: 'offer',             // Oferta o promoción\n  APPOINTMENT: 'appointment', // Cita o reunión\n  AI_GENERATED: 'ai-generado' // Correo generado por AI\n};\n\n// Estructura de un registro de seguimiento\n// {\n//   id: string,              // ID único del seguimiento\n//   emailId: string,         // ID del correo relacionado\n//   providerId: string,      // ID del proveedor (si aplica)\n//   providerName: string,    // Nombre del proveedor\n//   providerEmail: string,   // Email del proveedor\n//   subject: string,         // Asunto del correo\n//   status: string,          // Estado del seguimiento (TRACKING_STATUS)\n//   tags: string[],          // Etiquetas aplicadas\n//   lastEmailDate: Date,     // Fecha del último correo\n//   dueDate: Date,           // Fecha límite para seguimiento (opcional)\n//   notes: string,           // Notas adicionales\n//   thread: [                // Hilo de correos relacionados\n//     { emailId, direction, date, subject, snippet }\n//   ]\n//   isAIGenerated: boolean,  // Si el correo fue generado por AI\n//   aiTrackingId: string,    // ID de seguimiento de actividad AI (si aplica)\n// }\n\n// Cargar registros de seguimiento\nexport function loadTrackingRecords() {\n  return loadData(TRACKING_STORAGE_KEY, { defaultValue: [] });\n}\n\n// Guardar registros de seguimiento\nexport function saveTrackingRecords(records) {\n  saveData(TRACKING_STORAGE_KEY, records);\n}\n\n// Crear un nuevo registro de seguimiento para un correo a un proveedor\nexport function createTrackingRecord(email, provider, options = {}) {\n  const trackingRecords = loadTrackingRecords();\n  \n  // Verificar si ya existe un registro para este proveedor\n  const existingRecord = trackingRecords.find(record => \n    record.providerEmail === provider.email\n  );\n  \n  if (existingRecord) {\n    // Actualizar el registro existente con el nuevo correo\n    const updatedRecord = {\n      ...existingRecord,\n      subject: email.subject,\n      lastEmailDate: new Date(),\n      status: TRACKING_STATUS.WAITING,\n      thread: [\n        ...(existingRecord.thread || []),\n        {\n          emailId: email.id,\n          direction: 'outgoing',\n          date: new Date(),\n          subject: email.subject,\n          snippet: email.body.substring(0, 100) + (email.body.length > 100 ? '...' : '')\n        }\n      ]\n    };\n    \n    // Actualizar el registro en la lista\n    const updatedRecords = trackingRecords.map(record => \n      record.id === existingRecord.id ? updatedRecord : record\n    );\n    \n    saveTrackingRecords(updatedRecords);\n    return updatedRecord;\n  } else {\n    // Crear un nuevo registro de seguimiento\n    const newRecord = {\n      id: crypto.randomUUID ? crypto.randomUUID() : Math.random().toString(36).substring(2),\n      emailId: email.id,\n      providerId: provider.id,\n      providerName: provider.name,\n      providerEmail: provider.email,\n      subject: email.subject,\n      status: TRACKING_STATUS.WAITING,\n      tags: [EMAIL_TAGS.PROVIDER],\n      lastEmailDate: new Date(),\n      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // Por defecto, 7 días\n      notes: '',\n      thread: [{\n        emailId: email.id,\n        direction: 'outgoing',\n        date: new Date(),\n        subject: email.subject,\n        snippet: email.body.substring(0, 100) + (email.body.length > 100 ? '...' : '')\n      }],\n      isAIGenerated: options.isAIGenerated || false,\n      aiTrackingId: options.aiTrackingId || null\n    };\n    \n    // Añadir etiquetas adicionales basadas en el asunto y contenido\n    if (email.subject.toLowerCase().includes('presupuesto') || \n        email.body.toLowerCase().includes('presupuesto')) {\n      newRecord.tags.push(EMAIL_TAGS.BUDGET);\n    }\n    \n    if (email.subject.toLowerCase().includes('contrato') || \n        email.body.toLowerCase().includes('contrato')) {\n      newRecord.tags.push(EMAIL_TAGS.CONTRACT);\n    }\n    \n    if (email.subject.toLowerCase().includes('cita') || \n        email.body.toLowerCase().includes('cita') ||\n        email.subject.toLowerCase().includes('reunión') || \n        email.body.toLowerCase().includes('reunión')) {\n      newRecord.tags.push(EMAIL_TAGS.APPOINTMENT);\n    }\n    \n    if (options.isAIGenerated) {\n      newRecord.tags.push(EMAIL_TAGS.AI_GENERATED);\n    }\n    \n    // Añadir el nuevo registro\n    const updatedRecords = [...trackingRecords, newRecord];\n    saveTrackingRecords(updatedRecords);\n    return newRecord;\n  }\n}\n\n// Actualizar un registro de seguimiento cuando se recibe una respuesta\nexport function updateTrackingWithResponse(email) {\n  const trackingRecords = loadTrackingRecords();\n  \n  // Buscar el registro que corresponde al remitente de este correo\n  const recordIndex = trackingRecords.findIndex(record => \n    record.providerEmail === email.from\n  );\n  \n  if (recordIndex >= 0) {\n    // Actualizar el registro con la respuesta\n    const record = trackingRecords[recordIndex];\n    const updatedRecord = {\n      ...record,\n      status: TRACKING_STATUS.RESPONDED,\n      lastEmailDate: new Date(email.date),\n      thread: [\n        ...(record.thread || []),\n        {\n          emailId: email.id,\n          direction: 'incoming',\n          date: new Date(email.date),\n          subject: email.subject,\n          snippet: email.body.substring(0, 100) + (email.body.length > 100 ? '...' : '')\n        }\n      ]\n    };\n    \n    // Actualizar la lista de registros\n    trackingRecords[recordIndex] = updatedRecord;\n    saveTrackingRecords(trackingRecords);\n    return updatedRecord;\n  }\n  \n  return null;\n}\n\n// Actualizar estado de un registro de seguimiento\nexport function updateTrackingStatus(recordId, status, notes = null) {\n  const trackingRecords = loadTrackingRecords();\n  \n  const updatedRecords = trackingRecords.map(record => {\n    if (record.id === recordId) {\n      return {\n        ...record,\n        status,\n        notes: notes !== null ? notes : record.notes\n      };\n    }\n    return record;\n  });\n  \n  saveTrackingRecords(updatedRecords);\n}\n\n// Obtener registros que necesitan seguimiento (sin respuesta después de N días)\nexport function getTrackingNeedingFollowup(days = 3) {\n  const trackingRecords = loadTrackingRecords();\n  const now = new Date();\n  const cutoffDate = new Date(now.getTime() - days * 24 * 60 * 60 * 1000);\n  \n  return trackingRecords.filter(record => \n    record.status === TRACKING_STATUS.WAITING && \n    new Date(record.lastEmailDate) < cutoffDate\n  );\n}\n\n// Añadir o eliminar etiquetas de un registro\nexport function updateTrackingTags(recordId, tags) {\n  const trackingRecords = loadTrackingRecords();\n  \n  const updatedRecords = trackingRecords.map(record => {\n    if (record.id === recordId) {\n      return {\n        ...record,\n        tags\n      };\n    }\n    return record;\n  });\n  \n  saveTrackingRecords(updatedRecords);\n}\n\n// Eliminar un registro de seguimiento\nexport function deleteTrackingRecord(recordId) {\n  const trackingRecords = loadTrackingRecords();\n  const updatedRecords = trackingRecords.filter(record => record.id !== recordId);\n  saveTrackingRecords(updatedRecords);\n}\n\n// Detectar automáticamente si un correo entrante es de un proveedor conocido\nexport function detectProviderResponse(email, providers) {\n  // Si el correo entrante es de un dominio conocido de proveedor\n  const providerMatch = providers.find(p => \n    p.email && email.from.toLowerCase().includes(p.email.toLowerCase())\n  );\n  \n  if (providerMatch) {\n    return updateTrackingWithResponse(email);\n  }\n  \n  return null;\n}\n\n// Marcar un correo relacionado con un proveedor\nexport function tagProviderEmail(emailId, providerId) {\n  // Implementación pendiente - requiere integración con EmailService\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\FolderService\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\GoogleCalendarService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\PerformanceMonitor.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'useEffect' is not defined.","line":572,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":572,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio de monitoreo de rendimiento para la aplicación Lovenda\n * \n * Este servicio permite monitorizar el rendimiento de diferentes componentes\n * y funcionalidades críticas, especialmente el sistema de emails personalizados.\n */\n\n// Configuración para el monitoreo\nconst CONFIG = {\n  // Activar/desactivar el monitoreo\n  enabled: true,\n  \n  // Nivel de detalle del monitoreo\n  // 0: solo errores críticos\n  // 1: errores y advertencias\n  // 2: información general\n  // 3: información detallada\n  logLevel: 2,\n  \n  // Intervalo para enviar métricas al servidor (ms)\n  reportInterval: 60000, // 1 minuto\n  \n  // URL del endpoint para enviar métricas\n  reportUrl: import.meta.env.VITE_METRICS_ENDPOINT || '',\n  \n  // Tamaño máximo de la cola de eventos antes de enviar\n  batchSize: 20,\n  \n  // Métricas a recopilar\n  metrics: {\n    emailProcessing: true,\n    searchPerformance: true,\n    notificationsRendering: true,\n    eventDetection: true,\n    uiInteractions: true\n  }\n};\n\n// Clase para el monitoreo de rendimiento\nclass PerformanceMonitor {\n  constructor(config = CONFIG) {\n    this.config = {\n      ...CONFIG,\n      ...config\n    };\n    \n    this.metrics = {\n      events: [],\n      errors: [],\n      timings: {},\n      counters: {},\n    };\n    \n    this.enabled = this.config.enabled;\n    this.pendingFlush = false;\n    this.startTime = Date.now();\n    \n    if (this.enabled && this.config.reportInterval) {\n      this.scheduleReporting();\n    }\n    \n    // Registrar evento de inicialización\n    this.logEvent('monitor_init', {\n      version: import.meta.env.VITE_APP_VERSION || 'dev',\n      metrics_enabled: this.config.metrics,\n      log_level: this.config.logLevel\n    });\n    \n    console.info('🔍 Monitor de rendimiento inicializado');\n  }\n  \n  /**\n   * Activar o desactivar el monitoreo\n   * @param {boolean} state - Estado del monitoreo\n   */\n  setEnabled(state) {\n    this.enabled = state;\n    \n    if (this.enabled && this.config.reportInterval && !this.reportingTimer) {\n      this.scheduleReporting();\n    } else if (!this.enabled && this.reportingTimer) {\n      clearTimeout(this.reportingTimer);\n      this.reportingTimer = null;\n    }\n    \n    this.logEvent('monitor_state_change', { enabled: state });\n  }\n  \n  /**\n   * Programar envío periódico de métricas\n   * @private\n   */\n  scheduleReporting() {\n    if (this.reportingTimer) {\n      clearTimeout(this.reportingTimer);\n    }\n    \n    this.reportingTimer = setTimeout(() => {\n      this.flushMetrics();\n      this.scheduleReporting();\n    }, this.config.reportInterval);\n  }\n  \n  /**\n   * Registrar un evento en el sistema de monitoreo\n   * @param {string} name - Nombre del evento\n   * @param {Object} data - Datos asociados al evento\n   */\n  logEvent(name, data = {}) {\n    if (!this.enabled || this.config.logLevel < 2) return;\n    \n    const event = {\n      name,\n      timestamp: Date.now(),\n      data: {\n        ...data,\n        sessionDuration: Date.now() - this.startTime\n      }\n    };\n    \n    this.metrics.events.push(event);\n    \n    // Si alcanzamos el tamaño máximo de lote, enviamos las métricas\n    if (this.metrics.events.length >= this.config.batchSize) {\n      this.flushMetrics();\n    }\n    \n    if (this.config.logLevel >= 3) {\n      console.debug(`📊 Evento: ${name}`, data);\n    }\n  }\n  \n  /**\n   * Registrar un error en el sistema de monitoreo\n   * @param {string} errorType - Tipo de error\n   * @param {Error|string} error - Error o mensaje de error\n   * @param {Object} context - Contexto adicional del error\n   */\n  logError(errorType, error, context = {}) {\n    if (!this.enabled || this.config.logLevel < 1) return;\n    \n    const errorData = {\n      type: errorType,\n      timestamp: Date.now(),\n      message: error instanceof Error ? error.message : error,\n      stack: error instanceof Error ? error.stack : undefined,\n      context\n    };\n    \n    this.metrics.errors.push(errorData);\n    \n    // Siempre registrar errores en la consola\n    console.error(`❌ Error en ${errorType}:`, error);\n    \n    // Enviar inmediatamente si es un error crítico\n    if (errorType === 'critical') {\n      this.flushMetrics();\n    }\n  }\n  \n  /**\n   * Iniciar medición de tiempo para una operación\n   * @param {string} operationId - Identificador único de la operación\n   * @returns {Function} Función para finalizar la medición\n   */\n  startTimer(operationId) {\n    if (!this.enabled || !this.config.metrics.uiInteractions) return () => {};\n    \n    const startTime = performance.now();\n    \n    return (metadata = {}) => {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      this.recordTiming(operationId, duration, metadata);\n      return duration;\n    };\n  }\n  \n  /**\n   * Registrar una medición de tiempo\n   * @param {string} metricName - Nombre de la métrica\n   * @param {number} durationMs - Duración en milisegundos\n   * @param {Object} metadata - Metadatos adicionales\n   */\n  recordTiming(metricName, durationMs, metadata = {}) {\n    if (!this.enabled) return;\n    \n    if (!this.metrics.timings[metricName]) {\n      this.metrics.timings[metricName] = {\n        count: 0,\n        total: 0,\n        min: Number.MAX_SAFE_INTEGER,\n        max: 0,\n        samples: []\n      };\n    }\n    \n    const timing = this.metrics.timings[metricName];\n    timing.count++;\n    timing.total += durationMs;\n    timing.min = Math.min(timing.min, durationMs);\n    timing.max = Math.max(timing.max, durationMs);\n    \n    // Guardar muestra con metadatos\n    timing.samples.push({\n      duration: durationMs,\n      timestamp: Date.now(),\n      metadata\n    });\n    \n    // Limitar número de muestras guardadas\n    if (timing.samples.length > 10) {\n      timing.samples.shift();\n    }\n    \n    if (this.config.logLevel >= 3) {\n      console.debug(`⏱️ Tiempo ${metricName}: ${durationMs.toFixed(2)}ms`);\n    }\n    \n    // Si la operación es lenta (> 1 segundo), registrar como evento\n    if (durationMs > 1000) {\n      this.logEvent('slow_operation', {\n        operation: metricName,\n        duration: durationMs,\n        ...metadata\n      });\n    }\n  }\n  \n  /**\n   * Incrementar un contador\n   * @param {string} counterName - Nombre del contador\n   * @param {number} value - Valor a incrementar (por defecto 1)\n   */\n  incrementCounter(counterName, value = 1) {\n    if (!this.enabled) return;\n    \n    if (!this.metrics.counters[counterName]) {\n      this.metrics.counters[counterName] = 0;\n    }\n    \n    this.metrics.counters[counterName] += value;\n  }\n  \n  /**\n   * Monitorear el tiempo de ejecución de una función\n   * @param {string} operationName - Nombre de la operación\n   * @param {Function} fn - Función a monitorear\n   * @param {Object} metadata - Metadatos adicionales\n   * @returns {any} El resultado de la función\n   */\n  async measureAsync(operationName, fn, metadata = {}) {\n    if (!this.enabled) return fn();\n    \n    const startTime = performance.now();\n    \n    try {\n      return await fn();\n    } catch (error) {\n      this.logError(`${operationName}_error`, error, metadata);\n      throw error;\n    } finally {\n      const duration = performance.now() - startTime;\n      this.recordTiming(operationName, duration, metadata);\n    }\n  }\n  \n  /**\n   * Monitorear el tiempo de ejecución de una función sincrónica\n   * @param {string} operationName - Nombre de la operación\n   * @param {Function} fn - Función a monitorear\n   * @param {Object} metadata - Metadatos adicionales\n   * @returns {any} El resultado de la función\n   */\n  measure(operationName, fn, metadata = {}) {\n    if (!this.enabled) return fn();\n    \n    const startTime = performance.now();\n    \n    try {\n      return fn();\n    } catch (error) {\n      this.logError(`${operationName}_error`, error, metadata);\n      throw error;\n    } finally {\n      const duration = performance.now() - startTime;\n      this.recordTiming(operationName, duration, metadata);\n    }\n  }\n  \n  /**\n   * Enviar métricas recopiladas al servidor\n   * @returns {Promise<void>}\n   * @private\n   */\n  async flushMetrics() {\n    if (!this.enabled || this.pendingFlush || \n        (this.metrics.events.length === 0 && \n         this.metrics.errors.length === 0 && \n         Object.keys(this.metrics.timings).length === 0)) {\n      return;\n    }\n    \n    this.pendingFlush = true;\n    \n    // Clonar y reiniciar métricas\n    const metricsToSend = { ...this.metrics };\n    this.metrics = {\n      events: [],\n      errors: [],\n      timings: {},\n      counters: { ...this.metrics.counters }\n    };\n    \n    try {\n      // Si hay URL de endpoint configurada, enviar métricas\n      if (this.config.reportUrl) {\n        const response = await fetch(this.config.reportUrl, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            timestamp: Date.now(),\n            appVersion: import.meta.env.VITE_APP_VERSION || 'dev',\n            metrics: metricsToSend\n          })\n        });\n        \n        if (!response.ok) {\n          console.warn('Error al enviar métricas:', response.statusText);\n        }\n      } else {\n        // Si no hay URL, guardar localmente para desarrollo\n        if (this.config.logLevel >= 2) {\n          console.info('📊 Métricas recopiladas:', metricsToSend);\n        }\n        \n        // Almacenar últimas métricas en localStorage para debugging\n        try {\n          localStorage.setItem('lovenda_last_metrics', JSON.stringify(metricsToSend));\n        } catch (e) {\n          // Ignorar errores de localStorage\n        }\n      }\n    } catch (error) {\n      console.error('Error al procesar métricas:', error);\n      \n      // Restaurar eventos y errores no enviados\n      this.metrics.events = [...metricsToSend.events, ...this.metrics.events];\n      this.metrics.errors = [...metricsToSend.errors, ...this.metrics.errors];\n    } finally {\n      this.pendingFlush = false;\n    }\n  }\n  \n  /**\n   * Monitorear específicamente operaciones del sistema de emails\n   * @param {string} operation - Operación específica (enviar, recibir, etc.)\n   * @param {Function} fn - Función a monitorear\n   * @param {Object} metadata - Metadatos adicionales\n   * @returns {Promise<any>} Resultado de la función\n   */\n  async monitorEmailOperation(operation, fn, metadata = {}) {\n    if (!this.enabled || !this.config.metrics.emailProcessing) {\n      return fn();\n    }\n    \n    // Registrar el evento de operación de email\n    this.logEvent(`email_operation_${operation}`, {\n      ...metadata,\n      timestamp: Date.now()\n    });\n    \n    // Incrementar contador de operaciones por tipo\n    this.incrementCounter(`email_operation_${operation}`);\n    \n    return this.measureAsync(`email_${operation}`, fn, metadata);\n  }\n  \n  /**\n   * Monitorear el uso de plantillas de email\n   * @param {string} templateId - ID o nombre de la plantilla\n   * @param {string} category - Categoría de la plantilla\n   * @param {string} action - Acción realizada (view, edit, use, create)\n   * @param {Function} fn - Función a monitorear\n   * @param {Object} metadata - Metadatos adicionales\n   * @returns {Promise<any>} Resultado de la función\n   */\n  async monitorTemplateUsage(templateId, category, action, fn, metadata = {}) {\n    if (!this.enabled || !this.config.metrics.emailProcessing) {\n      return fn();\n    }\n    \n    // Registrar el evento de uso de plantilla\n    this.logEvent('template_usage', {\n      templateId,\n      category,\n      action,\n      ...metadata\n    });\n    \n    // Incrementar contadores específicos\n    this.incrementCounter(`template_${action}`);\n    this.incrementCounter(`template_category_${category}`);\n    \n    return this.measureAsync(`template_${action}`, fn, {\n      templateId,\n      category,\n      ...metadata\n    });\n  }\n  \n  /**\n   * Monitorear el rendimiento de renderizado de plantillas\n   * @param {string} templateId - ID o nombre de la plantilla\n   * @param {number} dataSize - Tamaño de los datos de la plantilla (en bytes)\n   * @param {Function} fn - Función de renderizado\n   * @returns {Promise<any>} Resultado del renderizado\n   */\n  async monitorTemplateRendering(templateId, dataSize, fn) {\n    if (!this.enabled || !this.config.metrics.emailProcessing) {\n      return fn();\n    }\n    \n    return this.measureAsync('template_rendering', fn, {\n      templateId,\n      dataSize,\n      timestamp: Date.now()\n    });\n  }\n  \n  /**\n   * Monitorear el proceso de entrega de email\n   * @param {string} emailId - ID del email\n   * @param {string} recipientType - Tipo de destinatario (provider, guest, etc.)\n   * @param {Function} fn - Función de entrega\n   * @param {Object} metadata - Metadatos adicionales\n   * @returns {Promise<any>} Resultado de la entrega\n   */\n  async monitorEmailDelivery(emailId, recipientType, fn, metadata = {}) {\n    if (!this.enabled || !this.config.metrics.emailProcessing) {\n      return fn();\n    }\n    \n    // Registrar evento de intento de entrega\n    this.logEvent('email_delivery_attempt', {\n      emailId,\n      recipientType,\n      ...metadata\n    });\n    \n    // Incrementar contador de intentos por tipo de destinatario\n    this.incrementCounter(`email_delivery_${recipientType}`);\n    \n    try {\n      const result = await this.measureAsync('email_delivery', fn, {\n        emailId,\n        recipientType,\n        ...metadata\n      });\n      \n      // Registrar éxito de entrega\n      this.logEvent('email_delivery_success', {\n        emailId,\n        recipientType,\n        ...metadata\n      });\n      \n      return result;\n    } catch (error) {\n      // Registrar fallo de entrega\n      this.logEvent('email_delivery_failure', {\n        emailId,\n        recipientType,\n        errorMessage: error.message,\n        ...metadata\n      });\n      \n      // Incrementar contador de fallos\n      this.incrementCounter('email_delivery_failures');\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Monitorear interacciones con emails (aperturas, clics, etc.)\n   * @param {string} emailId - ID del email\n   * @param {string} interactionType - Tipo de interacción (open, click, etc.)\n   * @param {Object} metadata - Metadatos adicionales\n   */\n  trackEmailInteraction(emailId, interactionType, metadata = {}) {\n    if (!this.enabled || !this.config.metrics.emailProcessing) {\n      return;\n    }\n    \n    // Registrar evento de interacción\n    this.logEvent('email_interaction', {\n      emailId,\n      interactionType,\n      timestamp: Date.now(),\n      ...metadata\n    });\n    \n    // Incrementar contadores específicos\n    this.incrementCounter(`email_interaction_${interactionType}`);\n    this.incrementCounter('email_interactions_total');\n  }\n  \n  /**\n   * Monitorear búsqueda global\n   * @param {string} query - Consulta de búsqueda\n   * @param {Function} fn - Función de búsqueda\n   * @returns {Promise<any>} Resultados de búsqueda\n   */\n  async monitorSearch(query, fn) {\n    if (!this.enabled || !this.config.metrics.searchPerformance) {\n      return fn();\n    }\n    \n    return this.measureAsync('search', fn, {\n      query,\n      queryLength: query?.length || 0\n    });\n  }\n  \n  /**\n   * Monitorear renderizado de notificaciones\n   * @param {number} count - Cantidad de notificaciones\n   * @param {Function} fn - Función de renderizado\n   * @returns {any} Resultado del renderizado\n   */\n  monitorNotificationRendering(count, fn) {\n    if (!this.enabled || !this.config.metrics.notificationsRendering) {\n      return fn();\n    }\n    \n    return this.measure('notification_rendering', fn, { count });\n  }\n  \n  /**\n   * Monitorear detección de eventos en emails\n   * @param {string} emailId - ID del email\n   * @param {number} contentLength - Longitud del contenido\n   * @param {Function} fn - Función de detección\n   * @returns {Promise<any>} Eventos detectados\n   */\n  async monitorEventDetection(emailId, contentLength, fn) {\n    if (!this.enabled || !this.config.metrics.eventDetection) {\n      return fn();\n    }\n    \n    return this.measureAsync('event_detection', fn, {\n      emailId,\n      contentLength\n    });\n  }\n}\n\n// Instancia singleton para uso en toda la aplicación\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Hooks para facilitar el uso en componentes React\nexport function usePerformanceMonitor() {\n  return performanceMonitor;\n}\n\n// Hook específico para medir el tiempo de carga de un componente\nexport function useComponentLoadTime(componentName) {\n  const mountTime = performance.now();\n  \n  useEffect(() => {\n    if (!performanceMonitor.enabled) return;\n    \n    const loadTime = performance.now() - mountTime;\n    performanceMonitor.recordTiming(`component_load_${componentName}`, loadTime, {\n      component: componentName\n    });\n    \n    // Medir tiempo de desmontar al limpiar el efecto\n    return () => {\n      const unmountStart = performance.now();\n      \n      // Usamos setTimeout para medir después de que el componente se haya desmontado\n      setTimeout(() => {\n        const unmountTime = performance.now() - unmountStart;\n        performanceMonitor.recordTiming(`component_unmount_${componentName}`, unmountTime, {\n          component: componentName\n        });\n      }, 0);\n    };\n  }, [componentName]);\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\ProveedorService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\StatsService\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\SyncService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\TagService\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\TemplateCacheService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":132,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":132,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":134,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":134,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":163,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio de caché para plantillas de email\n * \n * Este servicio proporciona una capa de caché para optimizar\n * el acceso a plantillas de email, reduciendo llamadas al backend\n * y mejorando el rendimiento general del sistema.\n * \n * Implementa:\n * - Caché en memoria para acceso rápido\n * - Almacenamiento en localStorage para persistencia entre sesiones\n * - Invalidación inteligente basada en tiempo y eventos\n * - Precarga de plantillas frecuentemente usadas\n */\n\nimport { performanceMonitor } from './PerformanceMonitor';\n\n// Constantes para configuración de caché\nconst CACHE_VERSION = '1.0.0';\nconst CACHE_PREFIX = 'lovenda_template_cache';\nconst CACHE_EXPIRY = 12 * 60 * 60 * 1000; // 12 horas en milisegundos\nconst CACHE_MAX_SIZE = 100; // Máximo número de plantillas en caché\nconst TEMPLATE_USAGE_KEY = 'lovenda_template_usage';\nconst PRELOAD_THRESHOLD = 3; // Número mínimo de usos para precarga\n\n// Caché en memoria\nlet memoryCache = {\n  allTemplates: null,\n  byId: {},\n  byCategory: {},\n  lastFetched: 0\n};\n\n// Estado de la caché\nlet cacheStats = {\n  hits: 0,\n  misses: 0,\n  saves: 0,\n  preloads: 0\n};\n\n/**\n * Genera una clave única para el localStorage basada en el tipo y el identificador\n * @param {string} type - Tipo de caché (all, id, category)\n * @param {string} identifier - Identificador específico (id de plantilla o nombre de categoría)\n * @returns {string} - Clave para localStorage\n */\nconst getCacheKey = (type, identifier = '') => {\n  return `${CACHE_PREFIX}_${type}_${identifier}`;\n};\n\n/**\n * Verifica si la caché está vencida\n * @param {number} timestamp - Timestamp de cuando se almacenó el item\n * @returns {boolean} - True si está vencido, false si sigue vigente\n */\nconst isCacheExpired = (timestamp) => {\n  return (Date.now() - timestamp) > CACHE_EXPIRY;\n};\n\n/**\n * Guarda estadísticas de uso de la caché\n */\nconst saveStats = () => {\n  try {\n    performanceMonitor.logEvent('template_cache_stats', {\n      ...cacheStats,\n      timestamp: Date.now()\n    });\n    \n    // Guardar en localStorage para análisis histórico\n    localStorage.setItem(`${CACHE_PREFIX}_stats`, JSON.stringify({\n      ...cacheStats,\n      timestamp: Date.now()\n    }));\n  } catch (error) {\n    console.error('Error al guardar estadísticas de caché:', error);\n  }\n};\n\n/**\n * Registra el uso de una plantilla para informar la precarga\n * @param {string} templateId - ID de la plantilla usada\n * @param {string} category - Categoría de la plantilla\n */\nexport const registerTemplateUsage = (templateId, category) => {\n  try {\n    // Obtener historial de uso existente o inicializar\n    const usageData = JSON.parse(localStorage.getItem(TEMPLATE_USAGE_KEY) || '{}');\n    \n    // Incrementar contador para esta plantilla\n    if (!usageData[templateId]) {\n      usageData[templateId] = { \n        count: 0,\n        lastUsed: Date.now(),\n        category\n      };\n    }\n    \n    usageData[templateId].count++;\n    usageData[templateId].lastUsed = Date.now();\n    \n    // Actualizar datos de categoría\n    usageData[templateId].category = category;\n    \n    // Guardar de vuelta en localStorage\n    localStorage.setItem(TEMPLATE_USAGE_KEY, JSON.stringify(usageData));\n    \n    // Registrar evento en monitor de rendimiento\n    performanceMonitor.logEvent('template_usage_tracked', {\n      templateId,\n      category,\n      count: usageData[templateId].count\n    });\n    \n    return usageData[templateId].count;\n  } catch (error) {\n    console.error('Error al registrar uso de plantilla:', error);\n    return 0;\n  }\n};\n\n/**\n * Determina qué plantillas deben ser precargadas basado en su uso\n * @returns {Array} - IDs de plantillas a precargar\n */\nexport const getTemplatesToPreload = () => {\n  try {\n    const usageData = JSON.parse(localStorage.getItem(TEMPLATE_USAGE_KEY) || '{}');\n    \n    // Filtrar plantillas usadas frecuentemente\n    return Object.entries(usageData)\n      .filter(([_, data]) => data.count >= PRELOAD_THRESHOLD)\n      .sort((a, b) => b[1].count - a[1].count) // Ordenar por uso (mayor primero)\n      .map(([id, _]) => id);\n      \n  } catch (error) {\n    console.error('Error al determinar plantillas para precargar:', error);\n    return [];\n  }\n};\n\n/**\n * Obtiene las categorías más usadas\n * @returns {Array} - Lista de categorías ordenadas por frecuencia de uso\n */\nexport const getMostUsedCategories = () => {\n  try {\n    const usageData = JSON.parse(localStorage.getItem(TEMPLATE_USAGE_KEY) || '{}');\n    \n    // Contar usos por categoría\n    const categoryCount = {};\n    Object.values(usageData).forEach(data => {\n      const category = data.category || 'Sin categoría';\n      if (!categoryCount[category]) {\n        categoryCount[category] = 0;\n      }\n      categoryCount[category] += data.count;\n    });\n    \n    // Ordenar categorías por uso\n    return Object.entries(categoryCount)\n      .sort((a, b) => b[1] - a[1])\n      .map(([category, _]) => category);\n      \n  } catch (error) {\n    console.error('Error al obtener categorías más usadas:', error);\n    return [];\n  }\n};\n\n/**\n * Limpia entradas antiguas de la caché\n */\nconst cleanupCache = () => {\n  // Limpiar caché en memoria si es demasiado grande\n  if (Object.keys(memoryCache.byId).length > CACHE_MAX_SIZE) {\n    const templateIds = Object.keys(memoryCache.byId);\n    \n    // Obtener datos de uso para determinar qué eliminar\n    const usageData = JSON.parse(localStorage.getItem(TEMPLATE_USAGE_KEY) || '{}');\n    \n    // Ordenar IDs por uso (menos usados primero)\n    const sortedIds = templateIds.sort((a, b) => {\n      const aUsage = usageData[a]?.count || 0;\n      const bUsage = usageData[b]?.count || 0;\n      return aUsage - bUsage;\n    });\n    \n    // Eliminar el 20% menos usado\n    const toRemove = Math.ceil(templateIds.length * 0.2);\n    for (let i = 0; i < toRemove; i++) {\n      if (sortedIds[i]) {\n        delete memoryCache.byId[sortedIds[i]];\n      }\n    }\n  }\n  \n  // Limpiar localStorage de entradas vencidas\n  try {\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      \n      // Solo procesar claves de nuestra caché\n      if (key.startsWith(CACHE_PREFIX)) {\n        try {\n          const value = JSON.parse(localStorage.getItem(key));\n          if (value && value.timestamp && isCacheExpired(value.timestamp)) {\n            localStorage.removeItem(key);\n          }\n        } catch (e) {\n          // Ignorar errores de parseo, probablemente no sea un item válido\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Error al limpiar caché:', error);\n  }\n};\n\n/**\n * Inicializa o reinicia la caché\n */\nexport const initCache = () => {\n  memoryCache = {\n    allTemplates: null,\n    byId: {},\n    byCategory: {},\n    lastFetched: 0\n  };\n  \n  cacheStats = {\n    hits: 0,\n    misses: 0,\n    saves: 0,\n    preloads: 0\n  };\n  \n  cleanupCache();\n  \n  performanceMonitor.logEvent('template_cache_initialized', {\n    version: CACHE_VERSION,\n    timestamp: Date.now()\n  });\n};\n\n/**\n * Guarda todas las plantillas en caché\n * @param {Array} templates - Lista de plantillas\n * @param {boolean} updateLocalStorage - Si es true, también actualiza localStorage\n */\nexport const cacheAllTemplates = (templates, updateLocalStorage = true) => {\n  // Guardar en caché de memoria\n  memoryCache.allTemplates = templates;\n  memoryCache.lastFetched = Date.now();\n  \n  // Organizar por ID para acceso rápido\n  templates.forEach(template => {\n    memoryCache.byId[template.id] = template;\n    \n    // Organizar por categoría\n    const category = template.category || 'Sin categoría';\n    if (!memoryCache.byCategory[category]) {\n      memoryCache.byCategory[category] = [];\n    }\n    memoryCache.byCategory[category].push(template);\n  });\n  \n  // Actualizar localStorage si es necesario\n  if (updateLocalStorage) {\n    try {\n      localStorage.setItem(getCacheKey('all'), JSON.stringify({\n        data: templates,\n        timestamp: Date.now(),\n        version: CACHE_VERSION\n      }));\n      \n      cacheStats.saves++;\n    } catch (error) {\n      console.error('Error al guardar plantillas en localStorage:', error);\n    }\n  }\n  \n  performanceMonitor.logEvent('template_cache_updated', {\n    count: templates.length,\n    timestamp: Date.now()\n  });\n};\n\n/**\n * Guarda una plantilla individual en la caché\n * @param {Object} template - Plantilla a guardar\n */\nexport const cacheTemplate = (template) => {\n  if (!template || !template.id) return;\n  \n  // Actualizar en caché de memoria\n  memoryCache.byId[template.id] = template;\n  \n  // Actualizar en la lista completa si existe\n  if (memoryCache.allTemplates) {\n    const index = memoryCache.allTemplates.findIndex(t => t.id === template.id);\n    if (index >= 0) {\n      memoryCache.allTemplates[index] = template;\n    } else {\n      memoryCache.allTemplates.push(template);\n    }\n  }\n  \n  // Actualizar en categoría\n  const category = template.category || 'Sin categoría';\n  if (!memoryCache.byCategory[category]) {\n    memoryCache.byCategory[category] = [];\n  }\n  \n  const categoryIndex = memoryCache.byCategory[category].findIndex(t => t.id === template.id);\n  if (categoryIndex >= 0) {\n    memoryCache.byCategory[category][categoryIndex] = template;\n  } else {\n    memoryCache.byCategory[category].push(template);\n  }\n  \n  // Guardar en localStorage\n  try {\n    localStorage.setItem(getCacheKey('id', template.id), JSON.stringify({\n      data: template,\n      timestamp: Date.now(),\n      version: CACHE_VERSION\n    }));\n    \n    cacheStats.saves++;\n  } catch (error) {\n    console.error('Error al guardar plantilla en localStorage:', error);\n  }\n  \n  performanceMonitor.logEvent('template_cached', {\n    id: template.id,\n    category: template.category\n  });\n};\n\n/**\n * Elimina una plantilla de la caché\n * @param {string} templateId - ID de la plantilla a eliminar\n */\nexport const invalidateTemplate = (templateId) => {\n  // Eliminar de la caché en memoria\n  if (memoryCache.byId[templateId]) {\n    const template = memoryCache.byId[templateId];\n    const category = template.category || 'Sin categoría';\n    \n    // Eliminar de la caché por ID\n    delete memoryCache.byId[templateId];\n    \n    // Eliminar de la lista completa si existe\n    if (memoryCache.allTemplates) {\n      memoryCache.allTemplates = memoryCache.allTemplates.filter(t => t.id !== templateId);\n    }\n    \n    // Eliminar de la categoría\n    if (memoryCache.byCategory[category]) {\n      memoryCache.byCategory[category] = memoryCache.byCategory[category].filter(t => t.id !== templateId);\n    }\n  }\n  \n  // Eliminar del localStorage\n  try {\n    localStorage.removeItem(getCacheKey('id', templateId));\n  } catch (error) {\n    console.error('Error al eliminar plantilla de localStorage:', error);\n  }\n  \n  performanceMonitor.logEvent('template_cache_invalidated', {\n    id: templateId,\n    timestamp: Date.now()\n  });\n};\n\n/**\n * Invalida completamente la caché de plantillas\n */\nexport const invalidateAllTemplates = () => {\n  // Reiniciar caché en memoria\n  memoryCache.allTemplates = null;\n  memoryCache.byId = {};\n  memoryCache.byCategory = {};\n  memoryCache.lastFetched = 0;\n  \n  // Limpiar localStorage\n  try {\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key.startsWith(CACHE_PREFIX)) {\n        localStorage.removeItem(key);\n      }\n    }\n  } catch (error) {\n    console.error('Error al invalidar caché en localStorage:', error);\n  }\n  \n  performanceMonitor.logEvent('template_cache_reset', {\n    timestamp: Date.now()\n  });\n};\n\n/**\n * Obtiene todas las plantillas de la caché\n * @param {boolean} bypassCache - Si es true, indica que se debe ignorar la caché\n * @returns {Object} - Objeto con las plantillas y el estado de la caché\n */\nexport const getCachedTemplates = (bypassCache = false) => {\n  // Si se debe ignorar la caché, devolver null\n  if (bypassCache) {\n    cacheStats.misses++;\n    return { templates: null, fromCache: false };\n  }\n  \n  // Verificar caché en memoria primero (más rápida)\n  if (memoryCache.allTemplates && !isCacheExpired(memoryCache.lastFetched)) {\n    cacheStats.hits++;\n    \n    return {\n      templates: memoryCache.allTemplates,\n      fromCache: true,\n      source: 'memory'\n    };\n  }\n  \n  // Verificar localStorage\n  try {\n    const cachedItem = localStorage.getItem(getCacheKey('all'));\n    \n    if (cachedItem) {\n      const { data, timestamp, version } = JSON.parse(cachedItem);\n      \n      // Verificar versión y expiración\n      if (version === CACHE_VERSION && !isCacheExpired(timestamp)) {\n        // Actualizar caché en memoria\n        cacheAllTemplates(data, false);\n        \n        cacheStats.hits++;\n        \n        return {\n          templates: data,\n          fromCache: true,\n          source: 'localStorage'\n        };\n      }\n    }\n  } catch (error) {\n    console.error('Error al leer caché de localStorage:', error);\n  }\n  \n  cacheStats.misses++;\n  \n  return {\n    templates: null,\n    fromCache: false\n  };\n};\n\n/**\n * Obtiene una plantilla específica de la caché\n * @param {string} templateId - ID de la plantilla\n * @param {boolean} bypassCache - Si es true, indica que se debe ignorar la caché\n * @returns {Object} - Objeto con la plantilla y el estado de la caché\n */\nexport const getCachedTemplate = (templateId, bypassCache = false) => {\n  // Si se debe ignorar la caché, devolver null\n  if (bypassCache) {\n    cacheStats.misses++;\n    return { template: null, fromCache: false };\n  }\n  \n  // Verificar caché en memoria primero\n  if (memoryCache.byId[templateId]) {\n    cacheStats.hits++;\n    \n    return {\n      template: memoryCache.byId[templateId],\n      fromCache: true,\n      source: 'memory'\n    };\n  }\n  \n  // Verificar localStorage\n  try {\n    const cachedItem = localStorage.getItem(getCacheKey('id', templateId));\n    \n    if (cachedItem) {\n      const { data, timestamp, version } = JSON.parse(cachedItem);\n      \n      // Verificar versión y expiración\n      if (version === CACHE_VERSION && !isCacheExpired(timestamp)) {\n        // Actualizar caché en memoria\n        memoryCache.byId[templateId] = data;\n        \n        cacheStats.hits++;\n        \n        return {\n          template: data,\n          fromCache: true,\n          source: 'localStorage'\n        };\n      }\n    }\n  } catch (error) {\n    console.error('Error al leer caché de plantilla de localStorage:', error);\n  }\n  \n  cacheStats.misses++;\n  \n  return {\n    template: null,\n    fromCache: false\n  };\n};\n\n/**\n * Obtiene plantillas por categoría de la caché\n * @param {string} category - Categoría de las plantillas\n * @param {boolean} bypassCache - Si es true, indica que se debe ignorar la caché\n * @returns {Object} - Objeto con las plantillas y el estado de la caché\n */\nexport const getCachedTemplatesByCategory = (category, bypassCache = false) => {\n  const categoryKey = category || 'Sin categoría';\n  \n  // Si se debe ignorar la caché, devolver null\n  if (bypassCache) {\n    cacheStats.misses++;\n    return { templates: null, fromCache: false };\n  }\n  \n  // Verificar caché en memoria primero\n  if (memoryCache.byCategory[categoryKey] && memoryCache.lastFetched && !isCacheExpired(memoryCache.lastFetched)) {\n    cacheStats.hits++;\n    \n    return {\n      templates: memoryCache.byCategory[categoryKey],\n      fromCache: true,\n      source: 'memory'\n    };\n  }\n  \n  // Para categorías, si tenemos todas las plantillas en caché, podemos filtrarlas\n  if (memoryCache.allTemplates && !isCacheExpired(memoryCache.lastFetched)) {\n    const categoryTemplates = memoryCache.allTemplates.filter(t => \n      (t.category || 'Sin categoría') === categoryKey\n    );\n    \n    // Guardar en caché por categoría para futuros accesos\n    memoryCache.byCategory[categoryKey] = categoryTemplates;\n    \n    cacheStats.hits++;\n    \n    return {\n      templates: categoryTemplates,\n      fromCache: true,\n      source: 'memory-filtered'\n    };\n  }\n  \n  cacheStats.misses++;\n  \n  return {\n    templates: null,\n    fromCache: false\n  };\n};\n\n/**\n * Precarga plantillas populares en caché\n * @param {Function} fetchFunction - Función que obtiene una plantilla del backend/storage\n */\nexport const preloadPopularTemplates = async (fetchFunction) => {\n  if (!fetchFunction || typeof fetchFunction !== 'function') return;\n  \n  try {\n    const templatesToPreload = getTemplatesToPreload();\n    \n    if (templatesToPreload.length === 0) return;\n    \n    performanceMonitor.logEvent('template_preload_started', {\n      count: templatesToPreload.length\n    });\n    \n    // Precargar hasta 5 plantillas populares\n    const limit = Math.min(5, templatesToPreload.length);\n    \n    for (let i = 0; i < limit; i++) {\n      const templateId = templatesToPreload[i];\n      \n      // Verificar si ya está en caché\n      const { fromCache } = getCachedTemplate(templateId);\n      if (fromCache) continue;\n      \n      // Obtener y cachear\n      try {\n        const template = await fetchFunction(templateId);\n        \n        if (template) {\n          cacheTemplate(template);\n          cacheStats.preloads++;\n          \n          performanceMonitor.logEvent('template_preloaded', {\n            id: templateId,\n            success: true\n          });\n        }\n      } catch (error) {\n        console.error(`Error al precargar plantilla ${templateId}:`, error);\n        performanceMonitor.logEvent('template_preload_error', {\n          id: templateId,\n          error: error.message\n        });\n      }\n    }\n    \n    performanceMonitor.logEvent('template_preload_completed', {\n      preloaded: cacheStats.preloads\n    });\n    \n  } catch (error) {\n    console.error('Error al precargar plantillas populares:', error);\n  }\n};\n\n// Guardar estadísticas periódicamente\nsetInterval(saveStats, 5 * 60 * 1000); // Cada 5 minutos\n\n// Limpiar caché periódicamente\nsetInterval(cleanupCache, 60 * 60 * 1000); // Cada hora\n\n// Inicializar caché al cargar\ninitCache();\n\nexport default {\n  initCache,\n  cacheAllTemplates,\n  cacheTemplate,\n  invalidateTemplate,\n  invalidateAllTemplates,\n  getCachedTemplates,\n  getCachedTemplate,\n  getCachedTemplatesByCategory,\n  registerTemplateUsage,\n  getTemplatesToPreload,\n  getMostUsedCategories,\n  preloadPopularTemplates\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\WeddingService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'addDoc' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'collection' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":13}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Servicio para gestionar bodas y vincular cuentas (novios y planners)\n// Cada documento en la colección \"weddings\" representa una boda.\n// Estructura mínima de un doc:\n// {\n//   ownerIds: [uid1, uid2],   // novios con acceso total\n//   plannerIds: [uid3, ...],  // planners que gestionan varias bodas\n//   subscription: {\n//     tier: 'free' | 'premium',\n//     renewedAt: Timestamp\n//   },\n//   createdAt: Timestamp\n// }\n\nimport { db } from '../lib/firebase';\nimport {\n  doc,\n  setDoc,\n  updateDoc,\n  arrayUnion,\n  getDoc,\n  addDoc,\n  collection,\n  Timestamp\n} from 'firebase/firestore';\n\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Crea una nueva boda y asigna al usuario como propietario principal.\n * @param {string} uid - UID del usuario creador.\n * @param {object} [extraData] - Datos opcionales de la boda (fecha, nombre...)\n * @returns {Promise<string>} weddingId creado\n */\nexport async function createWedding(uid, extraData = {}) {\n  if (!uid) throw new Error('uid requerido');\n  const weddingId = uuidv4();\n  const ref = doc(db, 'weddings', weddingId);\n  const base = {\n    ownerIds: [uid],\n    plannerIds: [],\n    subscription: { tier: 'free', renewedAt: Timestamp.now() },\n    createdAt: Timestamp.now(),\n    ...extraData,\n  };\n  await setDoc(ref, base);\n  // Actualizar doc del usuario con su weddingId principal\n  await updateDoc(doc(db, 'users', uid), { weddingId });\n  return weddingId;\n}\n\n/**\n * Crea una invitación para otro novio/a.\n * @param {string} weddingId\n * @param {string} email\n * @returns {Promise<string>} invitationCode\n */\nexport async function invitePartner(weddingId, email) {\n  return createInvitation(weddingId, email, 'partner');\n}\n\n/**\n * Crea una invitación para un wedding planner.\n * @param {string} weddingId\n * @param {string} email\n * @returns {Promise<string>} invitationCode\n */\nexport async function invitePlanner(weddingId, email) {\n  return createInvitation(weddingId, email, 'planner');\n}\n\nasync function createInvitation(weddingId, email, role) {\n  if (!weddingId || !email) throw new Error('parámetros requeridos');\n  const code = uuidv4();\n  await setDoc(doc(db, 'weddingInvitations', code), {\n    weddingId,\n    email: email.toLowerCase(),\n    role, // 'partner' | 'planner'\n    createdAt: Timestamp.now(),\n  });\n  return code;\n}\n\n/**\n * Acepta una invitación (partner o planner) y agrega el uid al array correspondiente.\n * @param {string} code - invitation code\n * @param {string} uid  - usuario que acepta\n */\nexport async function acceptInvitation(code, uid) {\n  if (!code || !uid) throw new Error('parámetros requeridos');\n  const invRef = doc(db, 'weddingInvitations', code);\n  const snap = await getDoc(invRef);\n  if (!snap.exists()) throw new Error('Invitación no encontrada');\n  const { weddingId, role } = snap.data();\n  const wedRef = doc(db, 'weddings', weddingId);\n  if (role === 'partner') {\n    await updateDoc(wedRef, { ownerIds: arrayUnion(uid) });\n  } else if (role === 'planner') {\n    await updateDoc(wedRef, { plannerIds: arrayUnion(uid) });\n  }\n  // Guardar weddingId en perfil de usuario si es partner\n  if (role === 'partner') {\n    await updateDoc(doc(db, 'users', uid), { weddingId });\n  }\n  // eliminar invitación o marcar como aceptada\n  await setDoc(invRef, { acceptedAt: Timestamp.now() }, { merge: true });\n  return weddingId;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\__tests__\\TemplateCacheService.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\bankService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\blogService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\commentService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\emailMetricsService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\emailService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CURRENT_USER' is assigned a value but never used.","line":104,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":17},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":560,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":578,"endColumn":6},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":564,"column":52,"nodeType":"BlockStatement","messageId":"unexpected","endLine":564,"endColumn":54,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[19128,19128],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Email service – interacts with backend API (Express + Firestore) or Mailgun API\n// Email: { id, from, to, subject, body, date, folder, read, attachments }\n\n// Servicio de correo con soporte para Mailgun, backend y fallback a localStorage\n// Estructura Mail: { id, from, to, subject, body, date, folder, read, attachments }\n\nconst BASE = import.meta.env.VITE_BACKEND_BASE_URL || import.meta.env.VITE_BACKEND_URL;\nconst MAILGUN_API_KEY = import.meta.env.VITE_MAILGUN_API_KEY;\nconst MAILGUN_DOMAIN = import.meta.env.VITE_MAILGUN_DOMAIN || 'mywed360.com';\n\n// Define si usamos Mailgun, backend o localStorage como fallback\nexport const USE_MAILGUN = !!MAILGUN_API_KEY;\n// Permitimos usar backend aunque Mailgun esté configurado\nexport const USE_BACKEND = !!BASE;\nconst STORAGE_KEY = 'lovenda_mails';\n\n// Obtener dirección de correo personalizada del usuario según su perfil\nconst getUserEmailAddress = (profile) => {\n  if (!profile) return null;\n  \n  // Prioridad: myWed360Email configurado > emailUsername > emailAlias > generación fallback\n  if (profile.myWed360Email && !profile.myWed360Email.startsWith('usuario@')) {\n    return profile.myWed360Email;\n  }\n\n  // Prioridad de cuentas generadas dentro del dominio\n  if (profile.emailUsername) {\n    return `${profile.emailUsername}@${MAILGUN_DOMAIN}`;\n  }\n  \n  if (profile.emailAlias) {\n    return `${profile.emailAlias}@${MAILGUN_DOMAIN}`;\n  }\n  \n  const loginEmail = profile.email || (profile.account && profile.account.email);\n  // Usar email del perfil solo si pertenece al dominio configurado\n  if (loginEmail && loginEmail.endsWith(`@${MAILGUN_DOMAIN}`)) {\n    return loginEmail;\n  }\n  \n  // Fallback a método anterior\n  if (profile.emailAlias) {\n    return `${profile.emailAlias}@${MAILGUN_DOMAIN}`;\n  }\n  \n  if (profile.brideFirstName && profile.brideLastName) {\n    const normalizedName = `${profile.brideFirstName.toLowerCase()}.${profile.brideLastName.toLowerCase()}`\n      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') // Eliminar acentos\n      .replace(/[^a-z0-9.]/g, '.'); // Reemplazar caracteres no permitidos\n    return `${normalizedName}@${MAILGUN_DOMAIN}`;\n  }\n  \n  if (profile.brideFirstName) {\n    const normalizedName = profile.brideFirstName.toLowerCase()\n      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n      .replace(/[^a-z0-9.]/g, '.');\n    return `${normalizedName}@${MAILGUN_DOMAIN}`;\n  }\n  \n  if (profile.userId) {\n    return `user${profile.userId}@${MAILGUN_DOMAIN}`;\n  }\n\n  // Intentar generar alias a partir del email de inicio de sesión primero\n  if (loginEmail) {\n    let prefix = loginEmail.split('@')[0].toLowerCase()\n      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n      .replace(/[^a-z0-9]/g, '');\n    if (prefix.length > 8) {\n      prefix = prefix.slice(0,4);\n    }\n    if (prefix.length >=3 && prefix !== 'usuario') {\n      return `${prefix}@${MAILGUN_DOMAIN}`;\n    }\n  }\n\n  // Si no, generar a partir del nombre\n  if (profile.name) {\n    const first = profile.name.split(' ')[0].toLowerCase()\n      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n      .replace(/[^a-z0-9]/g, '');\n    if (first.length >= 3 && first !== 'usuario') {\n      return `${first}@${MAILGUN_DOMAIN}`;\n    }\n  }\n\n  if (profile.email) {\n    let prefix = profile.email.split('@')[0].toLowerCase()\n      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n      .replace(/[^a-z0-9]/g, '');\n    if (prefix.length > 8) {\n      // Usar los primeros 4 caracteres para un alias más corto (ej: dani)\n      prefix = prefix.slice(0, 4);\n    }\n    if (prefix.length >= 3) {\n      return `${prefix}@${MAILGUN_DOMAIN}`;\n    }\n  }\n  \n  return `usuario@${MAILGUN_DOMAIN}`;\n};\n\n// Almacena el usuario actual y su dirección de correo\nlet CURRENT_USER = null;\nlet CURRENT_USER_EMAIL = null;\n\n// Inicializar el servicio con el perfil del usuario\nexport async function initEmailService(userProfile) {\n  CURRENT_USER = userProfile;\n  CURRENT_USER_EMAIL = getUserEmailAddress(userProfile);\n  \n  // Verificar si el usuario ya tiene configurado un nombre de usuario para correo\n  if (!userProfile.emailUsername && !userProfile.myWed360Email) {\n    console.log('Usuario sin nombre de correo configurado. Recomendado configurar en /email/setup');\n  }\n  \n  // Persistir en el perfil si aún no existe o cambió\n  try {\n    if (!userProfile.myWed360Email || userProfile.myWed360Email !== CURRENT_USER_EMAIL) {\n      userProfile.myWed360Email = CURRENT_USER_EMAIL;\n      // Guardar de nuevo en localStorage para futuras sesiones\n      const storedProfile = localStorage.getItem('lovenda_user_profile');\n      if (storedProfile) {\n        const parsed = JSON.parse(storedProfile);\n        parsed.myWed360Email = CURRENT_USER_EMAIL;\n        localStorage.setItem('lovenda_user_profile', JSON.stringify(parsed));\n      } else {\n        localStorage.setItem('lovenda_user_profile', JSON.stringify(userProfile));\n      }\n    }\n  } catch (e) {\n    console.warn('No se pudo persistir myWed360Email:', e);\n  }\n\n  console.log(`Servicio de email inicializado para: ${CURRENT_USER_EMAIL}`);\n  return CURRENT_USER_EMAIL;\n}\n\nfunction uuid() {\n  return (crypto && crypto.randomUUID) ? crypto.randomUUID() : Math.random().toString(36).substring(2, 10);\n}\n\nfunction loadLocal() {\n  return JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n}\nfunction saveLocal(arr) {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(arr));\n}\n\n// Funciones de integración con Mailgun - Ahora usando Firebase Cloud Functions como proxy seguro\n// Flag para no seguir intentando si Mailgun/Firebase devuelve error permanente (CORS/404)\nlet mailgunDisabled = false;\n\nasync function fetchMailgunEvents(userEmail, eventType = 'delivered') {\n  if (mailgunDisabled) {\n    return []; // Salir temprano si se ha deshabilitado\n  }\n  if (!USE_MAILGUN) {\n    console.warn('Configuración de Mailgun no disponible, usando datos locales');\n    return []; // Devolver un array vacío en lugar de lanzar una excepción\n  }\n  \n  const params = new URLSearchParams({\n    recipient: userEmail,\n    event: eventType,\n    limit: 50\n  });\n  \n  try {\n    // Establecer un timeout para la petición\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 segundos de timeout\n\n    // Intentar primero el endpoint del backend y usar Cloud Function como fallback\n    const backendBase = import.meta.env.VITE_BACKEND_BASE_URL;\n    const endpointUrl = backendBase\n      ? `${backendBase}/api/mailgun/events?${params.toString()}`\n      : `${(import.meta.env.VITE_FIREBASE_FUNCTIONS_URL || 'https://us-central1-lovenda-98c77.cloudfunctions.net')}/getMailgunEvents?${params.toString()}`;\n\n    const response = await fetch(endpointUrl, {\n      method: 'GET',\n      signal: controller.signal,\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      console.warn(`Error al obtener eventos de correo: ${response.status}`);\n      // Deshabilitar futuros intentos para evitar spam de errores\n      mailgunDisabled = true;\n      return [];\n    }\n    \n    const data = await response.json();\n    return data.items || [];\n  } catch (error) {\n    // Manejar errores sin romper la aplicación\n    console.error('Error con Mailgun, usando fallback:', error);\n    // Deshabilitar futuros intentos\n    mailgunDisabled = true;\n    return []; // Devolver array vacío para continuar con la app\n  }\n}\n\n// Convertir eventos de Mailgun a formato interno de emails\nfunction mapMailgunEventsToMails(events, folder) {\n  return events.map(event => {\n    const message = event.message || {};\n    const storage = event.storage || {};\n    \n    return {\n      id: event.id || uuid(),\n      from: message.headers?.from || event.message?.from || 'desconocido@ejemplo.com',\n      to: message.headers?.to || event.recipient || CURRENT_USER_EMAIL,\n      subject: message.headers?.subject || storage.subject || '(Sin asunto)',\n      body: storage.bodyHtml || storage.bodyPlain || message.headers?.['message-id'] || '',\n      date: new Date(event.timestamp * 1000).toISOString(),\n      folder: folder,\n      read: false,\n      attachments: []\n    };\n  });\n}\n\nexport async function getMails(folder = 'inbox') {\n  if (!CURRENT_USER_EMAIL) {\n    return { success: false, error: 'Servicio de email no inicializado' };\n  }\n\n  // Soporte para carpeta \"all\": combinar bandeja de entrada y enviados\n  if (folder === 'all') {\n    try {\n      const inboxMails = await getMails('inbox');\n      const sentMails  = await getMails('sent');\n      // Unir y ordenar por fecha descendente\n      const merged = [...inboxMails, ...sentMails].sort((a, b) => {\n        const da = new Date(a.date || 0);\n        const db = new Date(b.date || 0);\n        return db - da;\n      });\n      return merged;\n    } catch (err) {\n      console.warn('Error obteniendo correos \"all\":', err);\n      // Continuar con flujo normal si algo falla\n    }\n  }\n  \n  if (USE_MAILGUN) {\n    try {\n      // Para bandeja de entrada, obtenemos los correos recibidos\n      if (folder === 'inbox') {\n        const events = await fetchMailgunEvents(CURRENT_USER_EMAIL, 'delivered');\n        const inboxMails = mapMailgunEventsToMails(events, folder);\n        if (inboxMails.length > 0) {\n          return inboxMails; // Mailgun devolvió datos\n        }\n        // Si Mailgun no devuelve nada, intentamos backend/Firestore como fallback\n        console.info('Mailgun no devolvió eventos, usando backend como fallback');\n        try {\n          const backendUrl = BASE || 'http://localhost:4004';\n          const res = await fetch(`${backendUrl}/api/mail?folder=${encodeURIComponent(folder)}&user=${encodeURIComponent(CURRENT_USER_EMAIL)}`);\n          if (res.ok) {\n            const json = await res.json();\n            if (Array.isArray(json)) {\n              return json;\n            }\n          }\n        } catch (err) {\n          console.warn('Fallback backend también falló:', err);\n        }\n        return inboxMails;\n      }\n      // Para enviados, obtenemos los correos enviados por este usuario\n      else if (folder === 'sent') {\n        // Consulta diferente para correos enviados\n        const events = await fetchMailgunEvents(CURRENT_USER_EMAIL, 'accepted');\n        return mapMailgunEventsToMails(events, folder);\n      }\n      else {\n        // Otras carpetas (borradores, spam, etc)\n        return [];\n      }\n    } catch (error) {\n      console.error('Error con Mailgun, usando fallback:', error);\n      // Fallback al método normal si falla Mailgun\n    }\n  }\n  \n  if (USE_BACKEND) {\n    try {\n      const res = await fetch(`${BASE}/api/mail?folder=${encodeURIComponent(folder)}&user=${encodeURIComponent(CURRENT_USER_EMAIL)}`);\n      if (!res.ok) throw new Error('Error fetching mails');\n      const json = await res.json();\n      // Si backend devuelve array directamente\n      if (Array.isArray(json)) {\n        // Si estamos en inbox y no llegó ningún mail y ya buscábamos por usuario,\n        // intentar descubrir dirección correcta a partir de cualquier correo existente.\n        if (folder === 'inbox' && json.length === 0 && CURRENT_USER_EMAIL && CURRENT_USER_EMAIL.startsWith('usuario')) {\n          try {\n            const altRes = await fetch(`${BASE}/api/mail?folder=inbox`); // sin filtro user\n            if (altRes.ok) {\n              const allMails = await altRes.json();\n              const myMail = allMails.find(m => m.to && m.to.endsWith(`@${MAILGUN_DOMAIN}`));\n              if (myMail) {\n                const newAddr = myMail.to;\n                console.log('Descubierta dirección real de correo:', newAddr);\n                // Persistir y actualizar\n                if (typeof window !== 'undefined') {\n                  const stored = localStorage.getItem('lovenda_user_profile');\n                  if (stored) {\n                    const parsed = JSON.parse(stored);\n                    parsed.myWed360Email = newAddr;\n                    localStorage.setItem('lovenda_user_profile', JSON.stringify(parsed));\n                  }\n                }\n                CURRENT_USER_EMAIL = newAddr;\n                // Reintentar obtener mails con la dirección correcta\n                const retry = await fetch(`${BASE}/api/mail?folder=${encodeURIComponent(folder)}&user=${encodeURIComponent(CURRENT_USER_EMAIL)}`);\n                if (retry.ok) {\n                  return await retry.json();\n                }\n              }\n            }\n          } catch (e) {\n            console.warn('No se pudo descubrir dirección alternativa:', e);\n          }\n        }\n        return json;\n      }\n      // Si el backend responde pero success es false, lanzamos para caer al fallback\n      throw new Error(json.message || 'Error fetching mails');\n    } catch (error) {\n      console.error('Error con backend, usando localStorage:', error);\n      // Fallback a localStorage si falla el backend\n    }\n  }\n  \n  // Fallback local\n  const mails = loadLocal();\n  return mails.filter(m => m.folder === folder && \n    (folder === 'sent' ? m.from === CURRENT_USER_EMAIL : m.to === CURRENT_USER_EMAIL));\n}\n\nimport validateAttachments from '../utils/validateAttachments';\nimport * as MailgunService from './mailgunService';\n\n// Enviar correo usando Mailgun API\nexport async function sendMailWithMailgun({ from, to, subject, body, attachments = [] }) {\n  if (!USE_MAILGUN || !MailgunService.isMailgunConfigured()) {\n    throw new Error('Configuración de Mailgun no disponible');\n  }\n\n  // Si no se proporciona remitente, usamos el correo del usuario actual\n  if (!from && CURRENT_USER_EMAIL) {\n    from = CURRENT_USER_EMAIL;\n  }\n  \n  if (!from) {\n    throw new Error('Remitente no especificado');\n  }\n\n  try {\n    // Usar el nuevo servicio especializado de Mailgun\n    const result = await MailgunService.sendEmail({\n      from,\n      to,\n      subject,\n      html: body,\n      attachments: attachments.map((attachment, index) => ({\n        file: attachment.file,\n        name: attachment.filename || `adjunto-${index+1}`\n      }))\n    });\n    \n    return {\n      success: true,\n      messageId: result.messageId,\n      response: result.response\n    };\n  } catch (error) {\n    console.error('Error al enviar correo con Mailgun:', error);\n    throw error;\n  }\n}\n\n// Crear un alias de correo para el usuario\nexport async function createEmailAlias(userProfile, aliasName) {\n  if (!USE_MAILGUN || !MAILGUN_API_KEY) {\n    throw new Error('Configuración de Mailgun no disponible');\n  }\n  \n  // Validamos y normalizamos el alias\n  const normalizedAlias = aliasName.toLowerCase()\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[^a-z0-9.]/g, '.');\n  \n  // Verificar que el alias sea válido\n  if (!normalizedAlias || normalizedAlias.length < 3) {\n    throw new Error('El alias debe tener al menos 3 caracteres válidos');\n  }\n  \n  const newEmail = `${normalizedAlias}@${MAILGUN_DOMAIN}`;\n  \n  try {\n    // Aquí iría la lógica para verificar disponibilidad del alias\n    // y registrarlo en Mailgun si fuera necesario\n    \n    // Por ahora, simplemente actualizamos el perfil con el nuevo alias\n    userProfile.emailAlias = normalizedAlias;\n    CURRENT_USER = userProfile;\n    CURRENT_USER_EMAIL = newEmail;\n    \n    return {\n      success: true,\n      email: newEmail,\n      alias: normalizedAlias\n    };\n  } catch (error) {\n    console.error('Error al crear alias de correo:', error);\n    throw error;\n  }\n}\n\n// Sanitiza HTML muy básico para eliminar scripts potencialmente peligrosos\nfunction sanitizeHtml(html = '') {\n  return html.replace(/<script[\\s\\S]*?>[\\s\\S]*?<\\/script>/gi, '');\n}\n\nexport async function sendMail({ to, subject = '', body = '', attachments = [] }) {\n  // --- Validaciones previas ---\n  // Destinatario requerido\n  if (!to || to.trim() === '') {\n    return { success: false, error: 'Destinatario es obligatorio' };\n  }\n  // Máximo 50 destinatarios\n  const recipients = to.split(/[;,]+/).map(r => r.trim()).filter(Boolean);\n  if (recipients.length > 50) {\n    return { success: false, error: 'demasiados destinatarios' };\n  }\n  // Limitar asunto a 255 caracteres (truncar si es necesario)\n  if (subject.length > 255) {\n    subject = subject.slice(0, 255);\n  }\n  // Sanitizar body\n  body = sanitizeHtml(body);\n\n  // Validar adjuntos\n  try {\n    validateAttachments(attachments);\n  } catch (err) {\n    return { success: false, error: err.message };\n  }\n  if (!CURRENT_USER_EMAIL) {\n    throw new Error('Servicio de email no inicializado con perfil de usuario');\n  }\n\n  // Intentar enviar con Mailgun si está configurado\n  if (USE_MAILGUN) {\n    try {\n      const mailgunResponse = await sendMailWithMailgun({\n        from: CURRENT_USER_EMAIL,\n        to,\n        subject,\n        body,\n        attachments\n      });\n      \n      // Crear objeto de correo enviado para compatibilidad\n      const mailSent = {\n        id: mailgunResponse.messageId || uuid(),\n        from: CURRENT_USER_EMAIL,\n        to,\n        subject,\n        body,\n        date: new Date().toISOString(),\n        folder: 'sent',\n        read: true,\n        attachments: attachments || []\n      };\n      \n      // Guardar en local también para respaldo\n      const mails = loadLocal();\n      mails.push(mailSent);\n      saveLocal(mails);\n      \n      return { success: true, ...mailSent };\n    } catch (error) {\n      console.error('Error con Mailgun, usando fallback:', error);\n      // Fallback al método normal si falla Mailgun\n    }\n  }\n  \n  // Backend fallback\n  if (USE_BACKEND) {\n    try {\n      const res = await fetch(`${BASE}/api/emails`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          from: CURRENT_USER_EMAIL,\n          to, \n          subject, \n          body,\n          attachments\n        }),\n      });\n            if (!res.ok) {\n        const message = `Error HTTP ${res.status}`;\n        return { success: false, error: message };\n      }\n      const jsonBackend = await res.json();\n      return jsonBackend;\n    } catch (error) {\n      console.error('Error con backend, usando localStorage:', error);\n    }\n  }\n  \n  // Fallback local\n  const mails = loadLocal();\n  const mailSent = {\n    id: uuid(),\n    from: CURRENT_USER_EMAIL,\n    to,\n    subject,\n    body,\n    date: new Date().toISOString(),\n    folder: 'sent',\n    read: true,\n    attachments: attachments || []\n  };\n  mails.push(mailSent);\n  \n  // Simulamos recepción para pruebas locales\n  // Solo si el destinatario es del mismo dominio\n  if (to.includes(`@${MAILGUN_DOMAIN}`)) {\n    const mailReceived = {\n      ...mailSent,\n      id: uuid(),\n      folder: 'inbox',\n      read: false,\n    };\n    mails.push(mailReceived);\n  }\n  \n  saveLocal(mails);\n  return { success: true, ...mailSent };\n}\n\n// Alias para compatibilidad con componentes y tests que usan sendEmail\nexport async function sendEmail(options) {\n  return sendMail(options);\n}\n\n// Obtener correo individual (con fallback a local)\nexport async function getMail(id) {\n  if (USE_BACKEND) {\n    try {\n      const res = await fetch(`${BASE}/api/mail/${id}`);\n      if (!res.ok) {\n        let json;\n        try { json = await res.json(); } catch (_) {}\n        const err = new Error(json?.message || 'Email no encontrado');\n        err.status = res.status;\n        throw err;\n      }\n      const json = await res.json();\n      if (!json.success) {\n        const err = new Error(json.message || 'Error al obtener correo');\n        err.status = res.status;\n        throw err;\n      }\n      return { success: true, ...json.data };\n    } catch (error) {\n      throw error;\n    }\n  }\n  // Fallback local\n  const mails = loadLocal();\n  const mail = mails.find(m => m.id === id);\n  if (!mail) {\n    const err = new Error('Correo no encontrado');\n    err.status = 404;\n    throw err;\n  }\n  return mail;\n}\n\nexport async function markAsRead(id) {\n  console.log('[EmailService] markAsRead', { id, BASE });\n  // Si hay backend disponible, priorizarlo siempre\n  if (BASE) {\n    try {\n      const res = await fetch(`${BASE}/api/mail/${id}/read`, { method: 'POST' });\n      if (!res.ok) throw new Error('Error marcar leído');\n      const json = await res.json();\n      return json.success ? json : { success: true };\n    } catch (err) {\n      console.warn('Fallo backend markAsRead, usando fallback local:', err);\n    }\n  }\n  // Fallback a localStorage\n  const mails = loadLocal();\n  const updated = mails.map(m => m.id === id ? { ...m, read: true } : m);\n  saveLocal(updated);\n  return { success: true };\n}\n\nexport async function deleteMail(id) {\n  console.log('[EmailService] deleteMail', { id, BASE });\n  // Intentar siempre backend primero\n  if (BASE) {\n    try {\n      const res = await fetch(`${BASE}/api/mail/${id}`, { method: 'DELETE' });\n      if (!res.ok) throw new Error('Error eliminando mail');\n      return { success: true };\n    } catch (err) {\n      console.warn('Fallo backend deleteMail, usando fallback local:', err);\n    }\n  }\n  // Fallback localStorage\n  const mails = loadLocal();\n  saveLocal(mails.filter(m => m.id !== id));\n  return { success: true };\n}\n\n// ========== Funciones para gestión de plantillas de email ==========\n\n// Clave para almacenamiento local de plantillas\nconst TEMPLATES_STORAGE_KEY = 'lovenda_email_templates';\n\n// Importar plantillas predefinidas\nimport { allTemplates } from '../data/templates';\n\n// Importar el servicio de caché\nimport templateCache from './TemplateCacheService';\n\n/**\n * Carga las plantillas de email almacenadas. Si no existen, inicializa con las plantillas predefinidas.\n * @param {boolean} bypassCache - Si es true, ignora la caché y fuerza una carga fresca\n * @returns {Array} Array con todas las plantillas disponibles\n */\nexport async function getEmailTemplates(bypassCache = false) {\n  // Verificar si hay datos en caché primero\n  const { templates: cachedTemplates, fromCache } = templateCache.getCachedTemplates(bypassCache);\n  \n  // Si tenemos datos en caché, los usamos\n  if (fromCache && cachedTemplates) {\n    console.log('Usando plantillas desde caché');\n    return cachedTemplates;\n  }\n  \n  console.log('Cargando plantillas frescas (no en caché)');\n  let templates = [];\n  \n  // Intentar cargar del backend si está disponible\n  if (USE_BACKEND) {\n    try {\n      const res = await fetch(`${BASE}/api/email-templates?user=${encodeURIComponent(CURRENT_USER_EMAIL)}`);\n      if (res.ok) {\n        templates = await res.json();\n        // Guardar en caché para futuras solicitudes\n        templateCache.cacheAllTemplates(templates);\n        return templates;\n      }\n    } catch (error) {\n      console.error('Error al cargar plantillas del backend:', error);\n      // Fallback a localStorage\n    }\n  }\n  \n  // Cargar de localStorage o inicializar con plantillas predefinidas\n  try {\n    const storedTemplates = localStorage.getItem(TEMPLATES_STORAGE_KEY);\n    if (storedTemplates) {\n      templates = JSON.parse(storedTemplates);\n    } else {\n      // Si no hay plantillas guardadas, inicializar con las predefinidas\n      templates = allTemplates;\n      localStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(allTemplates));\n    }\n    \n    // Guardar en caché para futuras solicitudes\n    templateCache.cacheAllTemplates(templates);\n    \n    return templates;\n  } catch (error) {\n    console.error('Error al cargar plantillas:', error);\n    return [];\n  }\n}\n\n/**\n * Obtiene una plantilla específica por su ID\n * @param {string} templateId - ID de la plantilla a obtener\n * @param {boolean} bypassCache - Si es true, ignora la caché y fuerza una carga fresca\n * @returns {Object|null} La plantilla encontrada o null\n */\nexport async function getEmailTemplateById(templateId, bypassCache = false) {\n  // Verificar si está en caché primero\n  const { template: cachedTemplate, fromCache } = templateCache.getCachedTemplate(templateId, bypassCache);\n  \n  if (fromCache && cachedTemplate) {\n    return cachedTemplate;\n  }\n  \n  // Si no está en caché, cargar todas las plantillas y buscar\n  const templates = await getEmailTemplates(bypassCache);\n  const template = templates.find(t => t.id === templateId);\n  \n  // Guardar en caché para futuras solicitudes si existe\n  if (template) {\n    templateCache.cacheTemplate(template);\n  }\n  \n  return template || null;\n}\n\n/**\n * Guarda una plantilla de email nueva o actualiza una existente\n * @param {Object} template - Objeto con datos de la plantilla\n * @returns {Object} La plantilla guardada\n */\nexport async function saveEmailTemplate(template) {\n  let savedTemplate = null;\n  \n  // Intentar guardar en el backend si está disponible\n  if (USE_BACKEND) {\n    try {\n      const res = await fetch(`${BASE}/api/email-templates`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          template,\n          user: CURRENT_USER_EMAIL\n        })\n      });\n      \n      if (res.ok) {\n        savedTemplate = await res.json();\n        // Actualizar caché con la plantilla guardada\n        templateCache.cacheTemplate(savedTemplate);\n        // Invalidar caché de todas las plantillas para forzar recarga en próxima solicitud\n        templateCache.invalidateAllTemplates();\n        return savedTemplate;\n      }\n    } catch (error) {\n      console.error('Error al guardar plantilla en backend:', error);\n      // Fallback a localStorage\n    }\n  }\n  \n  // Guardar en localStorage\n  try {\n    // Forzar carga fresca para asegurar datos actualizados\n    const templates = await getEmailTemplates(true);\n    const existingIndex = templates.findIndex(t => t.id === template.id);\n    \n    if (existingIndex >= 0) {\n      // Actualizar plantilla existente, preservando isSystem\n      const isSystem = templates[existingIndex].isSystem;\n      templates[existingIndex] = { ...template, isSystem };\n      savedTemplate = templates[existingIndex];\n    } else {\n      // Añadir nueva plantilla\n      templates.push(template);\n      savedTemplate = template;\n    }\n    \n    localStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(templates));\n    \n    // Actualizar caché con la plantilla guardada\n    templateCache.cacheTemplate(savedTemplate);\n    // Actualizar caché completa\n    templateCache.cacheAllTemplates(templates, false);\n    \n    // Registrar uso de la plantilla para métricas\n    if (savedTemplate.category) {\n      templateCache.registerTemplateUsage(savedTemplate.id, savedTemplate.category);\n    }\n    \n    return savedTemplate;\n  } catch (error) {\n    console.error('Error al guardar plantilla:', error);\n    throw new Error('No se pudo guardar la plantilla');\n  }\n}\n\n/**\n * Elimina una plantilla de email\n * @param {string} templateId - ID de la plantilla a eliminar\n * @returns {boolean} Éxito de la operación\n */\nexport async function deleteEmailTemplate(templateId) {\n  // Verificar que no sea una plantilla del sistema\n  const templates = await getEmailTemplates();\n  const templateToDelete = templates.find(t => t.id === templateId);\n  \n  if (!templateToDelete) {\n    return false; // No existe la plantilla\n  }\n  \n  if (templateToDelete.isSystem) {\n    throw new Error('No se pueden eliminar plantillas del sistema');\n  }\n  \n  let success = false;\n  \n  // Intentar eliminar en backend si está disponible\n  if (USE_BACKEND) {\n    try {\n      const res = await fetch(`${BASE}/api/email-templates/${templateId}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ user: CURRENT_USER_EMAIL })\n      });\n      \n      if (res.ok) {\n        success = true;\n      }\n    } catch (error) {\n      console.error('Error al eliminar plantilla en backend:', error);\n      // Fallback a localStorage\n    }\n  }\n  \n  // Eliminar de localStorage si no se pudo en backend o si no se usa backend\n  if (!success) {\n    try {\n      const updatedTemplates = templates.filter(t => t.id !== templateId);\n      localStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(updatedTemplates));\n      success = true;\n    } catch (error) {\n      console.error('Error al eliminar plantilla:', error);\n      return false;\n    }\n  }\n  \n  // Si se eliminó exitosamente, actualizar caché\n  if (success) {\n    // Invalidar la plantilla en caché\n    templateCache.invalidateTemplate(templateId);\n    \n    // Forzar recarga de la lista completa en próximo acceso\n    if (USE_BACKEND) {\n      templateCache.invalidateAllTemplates();\n    } else {\n      // Si no hay backend, actualizar caché con la lista actualizada\n      const updatedTemplates = templates.filter(t => t.id !== templateId);\n      templateCache.cacheAllTemplates(updatedTemplates);\n    }\n    \n    console.log(`Plantilla ${templateId} eliminada y caché actualizada`);\n  }\n  \n  return success;\n}\n\n/**\n * Reinicia las plantillas predefinidas del sistema\n * @returns {Array} Lista de plantillas restauradas\n */\nexport async function resetPredefinedTemplates() {\n  try {\n    // Obtener todas las plantillas actuales\n    const currentTemplates = await getEmailTemplates();\n    \n    // Filtrar las plantillas personalizadas (no son del sistema)\n    const customTemplates = currentTemplates.filter(template => !template.isSystem);\n    \n    // Combinar plantillas personalizadas con las predefinidas actualizadas\n    const updatedTemplates = [...customTemplates, ...allTemplates];\n    \n    // Guardar la nueva colección\n    localStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(updatedTemplates));\n    \n    return updatedTemplates;\n  } catch (error) {\n    console.error('Error al resetear plantillas predefinidas:', error);\n    throw new Error('No se pudieron restaurar las plantillas predefinidas');\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\emailTemplates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\folderService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":297,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":297,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":298,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":298,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio para gestionar carpetas personalizadas de correo\n * Permite crear, editar, eliminar y mover correos entre carpetas\n */\n\nimport { v4 as uuidv4 } from 'uuid';\n\n// Clave para almacenamiento local\nconst FOLDERS_STORAGE_KEY = 'lovenda_email_folders';\nconst EMAIL_FOLDER_MAPPING_KEY = 'lovenda_email_folder_mapping';\n\n/**\n * Obtener todas las carpetas del usuario actual\n * @param {string} userId - ID del usuario\n * @returns {Array} - Array de objetos de carpeta\n */\nexport const getUserFolders = (userId) => {\n  try {\n    // Formato de clave: lovenda_email_folders_[userId]\n    const storageKey = `${FOLDERS_STORAGE_KEY}_${userId}`;\n    const foldersJson = localStorage.getItem(storageKey);\n    \n    if (!foldersJson) {\n      return [];\n    }\n    \n    return JSON.parse(foldersJson);\n  } catch (error) {\n    console.error('Error al obtener carpetas:', error);\n    return [];\n  }\n};\n\n/**\n * Crear una nueva carpeta\n * @param {string} userId - ID del usuario\n * @param {string} folderName - Nombre de la carpeta\n * @returns {Object} - Objeto con la carpeta creada\n */\nexport const createFolder = (userId, folderName) => {\n  try {\n    const folders = getUserFolders(userId);\n    \n    // Verificar si ya existe una carpeta con el mismo nombre\n    const folderExists = folders.some(folder => \n      folder.name.toLowerCase() === folderName.toLowerCase()\n    );\n    \n    if (folderExists) {\n      throw new Error('Ya existe una carpeta con ese nombre');\n    }\n    \n    // Crear nueva carpeta\n    const newFolder = {\n      id: uuidv4(),\n      name: folderName,\n      createdAt: new Date().toISOString(),\n      unread: 0\n    };\n    \n    // Guardar carpetas actualizadas\n    const updatedFolders = [...folders, newFolder];\n    saveUserFolders(userId, updatedFolders);\n    \n    return newFolder;\n  } catch (error) {\n    console.error('Error al crear carpeta:', error);\n    throw error;\n  }\n};\n\n/**\n * Renombrar una carpeta existente\n * @param {string} userId - ID del usuario\n * @param {string} folderId - ID de la carpeta\n * @param {string} newName - Nuevo nombre de la carpeta\n * @returns {Object} - Objeto con la carpeta actualizada\n */\nexport const renameFolder = (userId, folderId, newName) => {\n  try {\n    const folders = getUserFolders(userId);\n    \n    // Verificar si ya existe otra carpeta con el mismo nombre\n    const folderExists = folders.some(folder => \n      folder.name.toLowerCase() === newName.toLowerCase() && \n      folder.id !== folderId\n    );\n    \n    if (folderExists) {\n      throw new Error('Ya existe otra carpeta con ese nombre');\n    }\n    \n    // Encontrar y actualizar la carpeta\n    const updatedFolders = folders.map(folder => {\n      if (folder.id === folderId) {\n        return { ...folder, name: newName };\n      }\n      return folder;\n    });\n    \n    // Guardar carpetas actualizadas\n    saveUserFolders(userId, updatedFolders);\n    \n    return updatedFolders.find(folder => folder.id === folderId);\n  } catch (error) {\n    console.error('Error al renombrar carpeta:', error);\n    throw error;\n  }\n};\n\n/**\n * Eliminar una carpeta\n * @param {string} userId - ID del usuario\n * @param {string} folderId - ID de la carpeta\n * @returns {boolean} - true si se eliminó con éxito\n */\nexport const deleteFolder = (userId, folderId) => {\n  try {\n    const folders = getUserFolders(userId);\n    \n    // Filtrar la carpeta a eliminar\n    const updatedFolders = folders.filter(folder => folder.id !== folderId);\n    \n    // Guardar carpetas actualizadas\n    saveUserFolders(userId, updatedFolders);\n    \n    // También eliminar mapeos de correos a esta carpeta\n    removeEmailsFromFolder(userId, folderId);\n    \n    return true;\n  } catch (error) {\n    console.error('Error al eliminar carpeta:', error);\n    throw error;\n  }\n};\n\n/**\n * Guardar carpetas del usuario\n * @param {string} userId - ID del usuario\n * @param {Array} folders - Array de objetos de carpeta\n * @private\n */\nconst saveUserFolders = (userId, folders) => {\n  const storageKey = `${FOLDERS_STORAGE_KEY}_${userId}`;\n  localStorage.setItem(storageKey, JSON.stringify(folders));\n};\n\n/**\n * Obtener mapeo de correos a carpetas para un usuario\n * @param {string} userId - ID del usuario\n * @returns {Object} - Objeto con mapeos de correos a carpetas\n * @private\n */\nconst getEmailFolderMapping = (userId) => {\n  try {\n    const storageKey = `${EMAIL_FOLDER_MAPPING_KEY}_${userId}`;\n    const mappingJson = localStorage.getItem(storageKey);\n    \n    if (!mappingJson) {\n      return {};\n    }\n    \n    return JSON.parse(mappingJson);\n  } catch (error) {\n    console.error('Error al obtener mapeo de correos a carpetas:', error);\n    return {};\n  }\n};\n\n/**\n * Guardar mapeo de correos a carpetas\n * @param {string} userId - ID del usuario\n * @param {Object} mapping - Objeto con mapeos de correos a carpetas\n * @private\n */\nconst saveEmailFolderMapping = (userId, mapping) => {\n  const storageKey = `${EMAIL_FOLDER_MAPPING_KEY}_${userId}`;\n  localStorage.setItem(storageKey, JSON.stringify(mapping));\n};\n\n/**\n * Asignar un correo a una carpeta\n * @param {string} userId - ID del usuario\n * @param {string} emailId - ID del correo\n * @param {string} folderId - ID de la carpeta\n * @returns {boolean} - true si se asignó con éxito\n */\nexport const assignEmailToFolder = (userId, emailId, folderId) => {\n  try {\n    // Verificar que la carpeta existe\n    const folders = getUserFolders(userId);\n    const folderExists = folders.some(folder => folder.id === folderId);\n    \n    if (!folderExists) {\n      throw new Error('La carpeta especificada no existe');\n    }\n    \n    // Obtener mapeo actual\n    const mapping = getEmailFolderMapping(userId);\n    \n    // Actualizar mapeo\n    mapping[emailId] = folderId;\n    \n    // Guardar mapeo actualizado\n    saveEmailFolderMapping(userId, mapping);\n    \n    return true;\n  } catch (error) {\n    console.error('Error al asignar correo a carpeta:', error);\n    throw error;\n  }\n};\n\n/**\n * Quitar un correo de una carpeta\n * @param {string} userId - ID del usuario\n * @param {string} emailId - ID del correo\n * @returns {boolean} - true si se quitó con éxito\n */\nexport const removeEmailFromFolder = (userId, emailId) => {\n  try {\n    // Obtener mapeo actual\n    const mapping = getEmailFolderMapping(userId);\n    \n    // Eliminar la asignación del correo\n    delete mapping[emailId];\n    \n    // Guardar mapeo actualizado\n    saveEmailFolderMapping(userId, mapping);\n    \n    return true;\n  } catch (error) {\n    console.error('Error al quitar correo de carpeta:', error);\n    throw error;\n  }\n};\n\n/**\n * Eliminar todos los correos de una carpeta\n * @param {string} userId - ID del usuario\n * @param {string} folderId - ID de la carpeta\n * @returns {boolean} - true si se eliminaron con éxito\n * @private\n */\nconst removeEmailsFromFolder = (userId, folderId) => {\n  try {\n    // Obtener mapeo actual\n    const mapping = getEmailFolderMapping(userId);\n    \n    // Filtrar mapeos para eliminar los de esta carpeta\n    const updatedMapping = {};\n    \n    for (const [emailId, mappedFolderId] of Object.entries(mapping)) {\n      if (mappedFolderId !== folderId) {\n        updatedMapping[emailId] = mappedFolderId;\n      }\n    }\n    \n    // Guardar mapeo actualizado\n    saveEmailFolderMapping(userId, updatedMapping);\n    \n    return true;\n  } catch (error) {\n    console.error('Error al eliminar correos de carpeta:', error);\n    throw error;\n  }\n};\n\n/**\n * Obtener la carpeta asignada a un correo\n * @param {string} userId - ID del usuario\n * @param {string} emailId - ID del correo\n * @returns {string|null} - ID de la carpeta o null si no está asignado\n */\nexport const getEmailFolder = (userId, emailId) => {\n  try {\n    const mapping = getEmailFolderMapping(userId);\n    return mapping[emailId] || null;\n  } catch (error) {\n    console.error('Error al obtener carpeta de correo:', error);\n    return null;\n  }\n};\n\n/**\n * Obtener todos los correos asignados a una carpeta\n * @param {string} userId - ID del usuario\n * @param {string} folderId - ID de la carpeta\n * @returns {Array} - Array de IDs de correos\n */\nexport const getEmailsInFolder = (userId, folderId) => {\n  try {\n    const mapping = getEmailFolderMapping(userId);\n    \n    // Filtrar correos que pertenecen a esta carpeta\n    return Object.entries(mapping)\n      .filter(([_, mappedFolderId]) => mappedFolderId === folderId)\n      .map(([emailId, _]) => emailId);\n  } catch (error) {\n    console.error('Error al obtener correos de carpeta:', error);\n    return [];\n  }\n};\n\n/**\n * Actualizar contador de no leídos para una carpeta\n * @param {string} userId - ID del usuario\n * @param {string} folderId - ID de la carpeta\n * @param {number} unreadCount - Número de correos no leídos\n */\nexport const updateFolderUnreadCount = (userId, folderId, unreadCount) => {\n  try {\n    const folders = getUserFolders(userId);\n    \n    // Actualizar contador de no leídos\n    const updatedFolders = folders.map(folder => {\n      if (folder.id === folderId) {\n        return { ...folder, unread: unreadCount };\n      }\n      return folder;\n    });\n    \n    // Guardar carpetas actualizadas\n    saveUserFolders(userId, updatedFolders);\n    \n    return true;\n  } catch (error) {\n    console.error('Error al actualizar contador de no leídos:', error);\n    return false;\n  }\n};\n\n/**\n * Verificar si un correo pertenece a alguna carpeta personalizada\n * @param {string} userId - ID del usuario\n * @param {string} emailId - ID del correo\n * @returns {boolean} - true si el correo está en alguna carpeta\n */\nexport const isEmailInCustomFolder = (userId, emailId) => {\n  const mapping = getEmailFolderMapping(userId);\n  return !!mapping[emailId];\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\inspirationService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\mailgunService.js","messages":[{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":160,"column":3,"nodeType":"ExpressionStatement","messageId":"unreachableCode","endLine":168,"endColumn":30},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":188,"column":19,"nodeType":"BlockStatement","messageId":"unreachableCode","endLine":191,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio de integración con Mailgun para correos myWed360 (actualizado)\n * Este servicio gestiona todas las interacciones con Mailgun a través de\n * Firebase Cloud Functions por seguridad (no expone API keys en el frontend):\n * - Envío de correos\n * - Verificación de entrega\n * - Gestión de alias de correo\n * - Validación de direcciones\n */\n\n// Variables de configuración\nconst DOMAIN = import.meta.env.VITE_MAILGUN_DOMAIN || 'mywed360.com';\nconst FUNCTIONS_URL = import.meta.env.VITE_FIREBASE_FUNCTIONS_URL || 'https://us-central1-lovenda-98c77.cloudfunctions.net';\n\n/**\n * Verifica si Mailgun está configurado correctamente\n * @returns {boolean} - true si hay un dominio configurado y acceso a funciones\n */\nexport function isMailgunConfigured() {\n  return !!DOMAIN && !!FUNCTIONS_URL;\n}\n\n/**\n * Envía un correo electrónico usando Mailgun a través de Cloud Functions\n * \n * @param {Object} options - Opciones para el correo\n * @param {string} options.from - Dirección de correo del remitente\n * @param {string} options.to - Dirección(es) de correo de destinatario(s)\n * @param {string} options.subject - Asunto del correo\n * @param {string} options.text - Contenido en texto plano\n * @param {string} options.html - Contenido en HTML\n * @param {string} [options.cc] - Dirección(es) en copia\n * @param {string} [options.bcc] - Dirección(es) en copia oculta\n * @param {string} [options.replyTo] - Dirección de respuesta\n * @param {Array} [options.attachments] - Archivos adjuntos\n * @returns {Promise<Object>} - Respuesta de la Cloud Function\n */\nexport async function sendEmail(options) {\n  if (!isMailgunConfigured()) {\n    throw new Error('Mailgun no está configurado correctamente');\n  }\n  \n  const { from, to, subject, text, html, cc, bcc, replyTo, attachments = [] } = options;\n  \n  // Validaciones básicas\n  if (!from) throw new Error('Remitente (from) requerido');\n  if (!to) throw new Error('Destinatario (to) requerido');\n  if (!subject) throw new Error('Asunto (subject) requerido');\n  if (!text && !html) throw new Error('Contenido (text o html) requerido');\n  \n  // Llamar a la Cloud Function para enviar el correo\n  try {\n    const response = await fetch(`${FUNCTIONS_URL}/sendEmail`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        from,\n        to,\n        subject,\n        text,\n        html,\n        cc,\n        bcc,\n        replyTo,\n        // No se pueden enviar archivos binarios directamente, se necesita un enfoque diferente para adjuntos\n        // En producción, deberías subir los archivos a Cloud Storage y pasar las URLs\n        attachments: attachments ? attachments.map(a => ({ name: a.name })) : []\n      })\n    });\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Error al enviar correo: ${response.status} - ${errorText}`);\n    }\n    \n    const data = await response.json();\n    return {\n      success: true,\n      messageId: data.id || 'unknown',\n      response: data\n    };\n  } catch (error) {\n    console.error('Error en Cloud Function sendEmail:', error);\n    throw error;\n  }\n}\n\n/**\n * Verifica si un correo electrónico es válido (sintaxis y existencia) usando Cloud Functions\n * @param {string} email - Correo electrónico a verificar\n * @returns {Promise<Object>} - Información sobre la validez del correo\n */\nexport async function validateEmail(email) {\n  if (!isMailgunConfigured()) {\n    throw new Error('Mailgun no está configurado correctamente');\n  }\n  \n  if (!email) {\n    throw new Error('Correo electrónico requerido');\n  }\n  \n  try {\n    const response = await fetch(`${FUNCTIONS_URL}/validateEmail?email=${encodeURIComponent(email)}`);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Error al validar correo: ${response.status} - ${errorText}`);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error en la validación de correo:', error);\n    throw error;\n  }\n}\n\n/**\n * Verifica si un nombre de usuario está disponible en el dominio usando Cloud Functions\n * @param {string} username - Nombre de usuario a verificar (sin @dominio)\n * @returns {Promise<boolean>} - true si está disponible\n */\nexport async function checkUsernameAvailability(username) {\n  if (!isMailgunConfigured()) {\n    throw new Error('Mailgun no está configurado correctamente');\n  }\n  \n  if (!username) {\n    throw new Error('Nombre de usuario requerido');\n  }\n  \n  // Normalizar el nombre de usuario (minusculas, sin acentos, etc)\n  const normalizedUsername = username.toLowerCase()\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[^a-z0-9.]/g, '.');\n    \n  // El correo a verificar\n  const email = `${normalizedUsername}@${DOMAIN}`;\n  \n  try {\n    // Usamos el endpoint de validación para verificar a través de Cloud Functions\n    const validationResult = await validateEmail(email);\n    \n    // Si mailgun dice que es válido, podemos asumirlo como disponible\n    // En producción, se debería verificar contra una base de datos de usuarios existentes\n    return validationResult.is_valid && !validationResult.is_disposable_address;\n    \n  } catch (error) {\n    console.error('Error al verificar disponibilidad de nombre de usuario:', error);\n    // En caso de error, asumimos que no está disponible por precaución\n    return false;\n  }\n  \n  // En una implementación real, aquí verificaríamos contra la base de datos\n  // y el servicio de correo (Mailgun) si el nombre existe ya\n  \n  // Simular latencia de red y verificación\n  await new Promise(resolve => setTimeout(resolve, 600));\n  \n  // Para simulación, consideramos nombres cortos como no disponibles\n  if (username.length <= 4) {\n    return { available: false, reason: 'Este nombre de usuario no está disponible' };\n  }\n  \n  // Por defecto, indicamos que está disponible\n  return { available: true };\n}\n\n/**\n * Crea una ruta de reenvío de correo en Mailgun\n * @param {string} address - Dirección de correo completa (ejemplo@mywed360.com)\n * @param {string} forwardTo - Dirección a la que reenviar (usuario@gmail.com)\n * @returns {Promise<Object>} - Respuesta de la API\n */\nexport async function createForwardingRoute(address, forwardTo) {\n  if (!isMailgunConfigured()) {\n    throw new Error('Mailgun no está configurado correctamente');\n  }\n  \n  if (!address || !forwardTo) {\n    throw new Error('Se requieren dirección de origen y destino');\n  }\n  \n  try {\n    return { available: true };\n  } catch (error) {\n    console.error('Error en Mailgun createForwardingRoute:', error);\n    throw error;\n  }\n}\n\n/**\n * Obtiene los eventos de correo para un usuario específico usando Cloud Functions\n * @param {string} emailAddress - Dirección de correo\n * @param {string} [eventType='delivered'] - Tipo de evento (accepted, delivered, failed, rejected)\n * @param {number} [limit=50] - Número máximo de eventos a devolver\n * @returns {Promise<Array>} - Array de eventos\n */\nexport async function getMailEvents(emailAddress, eventType = 'delivered', limit = 50) {\n  if (!isMailgunConfigured()) {\n    throw new Error('Mailgun no está configurado correctamente');\n  }\n  \n  if (!emailAddress) {\n    throw new Error('Dirección de correo requerida');\n  }\n  \n  try {\n    const params = new URLSearchParams({\n      recipient: emailAddress,\n      event: eventType,\n      limit\n    });\n    \n    const response = await fetch(`${FUNCTIONS_URL}/getMailgunEvents?${params}`);\n    \n    if (!response.ok) {\n      throw new Error(`Error al obtener eventos: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return data.items || [];\n  } catch (error) {\n    console.error('Error al obtener eventos de correo:', error);\n    throw error;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\notificationService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\reminderService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'allSent' is assigned a value but never used.","line":81,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio para gestionar recordatorios automáticos de seguimiento.\n * Cuando un correo enviado no recibe respuesta después de X días, se envía\n * automáticamente un recordatorio (Re:) al mismo destinatario.\n * \n * Estrategia:\n *   1. Cada vez que se envía un correo con emailService.sendMail se almacena\n *      { reminderSent: false, reminderAt: ISODate } en el objeto del mail.\n *   2. Este servicio registra un job (setInterval) que se ejecuta cada hora\n *      (configurable). Recorre la carpeta \"sent\" buscando correos que:\n *         - reminderSent === false\n *         - new Date(reminderAt) < Date.now()\n *         - No existe respuesta del destinatario en la bandeja de entrada\n *           (se determina buscando en localStorage un correo con inReplyTo === id)\n *      Si cumple las condiciones, envía un nuevo correo con asunto `Re: ...`\n *      y marca reminderSent = true.\n * \n * Nota: Para entornos con backend, se recomienda mover esta lógica al servidor.\n */\n\nimport { getMails, sendMail } from './emailService';\n\nconst DEFAULT_DAYS = 3; // días de espera por defecto\nconst CHECK_INTERVAL_MS = 60 * 60 * 1000; // 1 hora\n\nlet intervalId = null;\nlet enabled = true;\n\n/**\n * Activa el servicio de recordatorios.\n * @param {Object} options\n * @param {number} options.days Número de días antes de recordar.\n * @param {boolean} options.enabled Habilitar/deshabilitar.\n */\nexport function initReminderService({ days = DEFAULT_DAYS, enabled: en = true } = {}) {\n  enabled = en;\n  if (!enabled) {\n    stopReminderService();\n    return;\n  }\n  if (intervalId) return; // Ya iniciado\n  intervalId = setInterval(() => runReminderJob(days), CHECK_INTERVAL_MS);\n  // Ejecutar inmediatamente en el arranque\n  runReminderJob(days);\n}\n\nexport function stopReminderService() {\n  if (intervalId) {\n    clearInterval(intervalId);\n    intervalId = null;\n  }\n}\n\nasync function runReminderJob(days) {\n  if (!enabled) return;\n  try {\n    const sentMails = await getMails('sent');\n    const inboxMails = await getMails('inbox');\n    const cutoff = Date.now() - days * 24 * 60 * 60 * 1000;\n\n    for (const mail of sentMails) {\n      if (mail.reminderSent) continue;\n      if (new Date(mail.reminderAt || mail.date).getTime() > cutoff) continue;\n\n      // Comprobar respuesta: buscamos correo en inbox con inReplyTo = mail.id o mismo asunto + Re:\n      const replied = inboxMails.some(\n        m => m.inReplyTo === mail.id || (m.subject || '').startsWith('Re:') && (m.subject || '').includes(mail.subject)\n      );\n      if (replied) continue;\n\n      // Enviar recordatorio\n      await sendMail({\n        to: mail.to,\n        subject: `Re: ${mail.subject}`,\n        body: `Hola,\\n\\nSólo para asegurarme de que recibiste mi mensaje anterior. Quedo atento(a) a tu respuesta.\\n\\n---\\nMensaje original:\\n${mail.body}`,\n      });\n\n      // Marcar como enviado el recordatorio\n      mail.reminderSent = true;\n      // Persistir\n      const allSent = sentMails.map(m => (m.id === mail.id ? mail : m));\n      // emailService expone saveLocal? no, usamos localStorage directo\n      try {\n        const stored = JSON.parse(localStorage.getItem('lovenda_mails') || '[]');\n        const updated = stored.map(m => (m.id === mail.id ? mail : m));\n        localStorage.setItem('lovenda_mails', JSON.stringify(updated));\n      } catch (e) {\n        console.error('Error actualizando estado de recordatorio:', e);\n      }\n    }\n  } catch (err) {\n    console.error('Error en job de recordatorios:', err);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\statsService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getEmailTagsDetails' is defined but never used.","line":9,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'getDailyStats' is defined but never used.","line":10,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'emails' is defined but never used.","line":218,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":49}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio para recolectar y analizar estadísticas de uso del sistema de correo\n * Proporciona métricas sobre actividad de correo, patrones de comunicación, \n * distribución por etiquetas y carpetas, etc.\n */\n\nimport { getMails } from './emailService';\nimport { getUserFolders, getEmailsInFolder } from './folderService';\nimport { getUserTags, getEmailsByTag, getEmailTagsDetails } from './tagService';\nimport { getAggregatedStats, getDailyStats } from './emailMetricsService';\n\n/**\n * Almacena las estadísticas de correo del usuario en localStorage\n * @param {string} userId - ID del usuario\n * @param {Object} stats - Estadísticas a almacenar\n */\nconst saveUserStats = (userId, stats) => {\n  if (!userId) return;\n  localStorage.setItem(`lovenda_email_stats_${userId}`, JSON.stringify(stats));\n};\n\n/**\n * Recupera las estadísticas de correo del usuario desde localStorage\n * @param {string} userId - ID del usuario\n * @returns {Object} Estadísticas del usuario o un objeto vacío\n */\nconst getUserStats = (userId) => {\n  if (!userId) return {};\n  try {\n    const stats = localStorage.getItem(`lovenda_email_stats_${userId}`);\n    return stats ? JSON.parse(stats) : {};\n  } catch (error) {\n    console.error('Error al recuperar estadísticas:', error);\n    return {};\n  }\n};\n\n/**\n * Genera estadísticas completas de uso del correo para el usuario\n * @param {string} userId - ID del usuario\n * @returns {Promise<Object>} Estadísticas completas\n */\nconst generateUserStats = async (userId) => {\n  if (!userId) return {};\n  \n  try {\n    // Intentar obtener métricas agregadas desde Firestore\n    const aggregated = await getAggregatedStats(userId);\n    if (aggregated) {\n      // Guardar copia local para acceso offline\n      saveUserStats(userId, { ...aggregated, lastUpdated: new Date().toISOString() });\n      return aggregated;\n    }\n\n    // --- Fallback local: calcular métricas en el cliente ---\n    const inboxEmails = await getMails('inbox');\n    const sentEmails = await getMails('sent');\n    const trashEmails = await getMails('trash');\n    \n    // Combinar todos los correos para análisis\n    const allEmails = [...inboxEmails, ...sentEmails, ...trashEmails];\n    \n    // Estructura para las estadísticas\n    const stats = {\n      lastUpdated: new Date().toISOString(),\n      emailCounts: {\n        total: allEmails.length,\n        inbox: inboxEmails.length,\n        sent: sentEmails.length,\n        trash: trashEmails.length,\n        unread: inboxEmails.filter(email => !email.read).length\n      },\n      activityMetrics: calculateActivityMetrics(allEmails),\n      folderDistribution: calculateFolderDistribution(userId, allEmails),\n      tagDistribution: calculateTagDistribution(userId, allEmails),\n      contactAnalysis: analyzeContacts(allEmails),\n      responseMetrics: calculateResponseMetrics(inboxEmails, sentEmails)\n    };\n    \n    // Guardar estadísticas en localStorage\n    saveUserStats(userId, stats);\n    \n    return stats;\n  } catch (error) {\n    console.error('Error al generar estadísticas:', error);\n    return {\n      error: true,\n      message: 'No se pudieron generar las estadísticas'\n    };\n  }\n};\n\n/**\n * Calcula métricas de actividad (correos por día/semana/mes)\n * @param {Array} emails - Lista de correos\n * @returns {Object} Métricas de actividad\n */\nconst calculateActivityMetrics = (emails) => {\n  // Inicializar estructura de datos\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  const yesterday = new Date(today);\n  yesterday.setDate(yesterday.getDate() - 1);\n  \n  const oneWeekAgo = new Date(today);\n  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n  \n  const oneMonthAgo = new Date(today);\n  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n  \n  // Inicializar contadores\n  const metrics = {\n    today: 0,\n    yesterday: 0,\n    thisWeek: 0,\n    thisMonth: 0,\n    daily: {} // Para gráfico diario\n  };\n  \n  // Preparar estructura para gráfico diario (últimos 7 días)\n  for (let i = 6; i >= 0; i--) {\n    const date = new Date(today);\n    date.setDate(date.getDate() - i);\n    const dateStr = date.toISOString().split('T')[0];\n    metrics.daily[dateStr] = {\n      sent: 0,\n      received: 0,\n      date: dateStr\n    };\n  }\n  \n  // Analizar correos\n  emails.forEach(email => {\n    if (!email.date) return;\n    \n    const emailDate = new Date(email.date);\n    \n    // Determinar si es enviado o recibido\n    const isSent = email.from && email.from.includes('@lovenda.app');\n    \n    // Contar por período\n    if (emailDate >= today) {\n      metrics.today++;\n    } else if (emailDate >= yesterday) {\n      metrics.yesterday++;\n    }\n    \n    if (emailDate >= oneWeekAgo) {\n      metrics.thisWeek++;\n      \n      // Agregar al gráfico diario\n      const dateStr = emailDate.toISOString().split('T')[0];\n      if (metrics.daily[dateStr]) {\n        if (isSent) {\n          metrics.daily[dateStr].sent++;\n        } else {\n          metrics.daily[dateStr].received++;\n        }\n      }\n    }\n    \n    if (emailDate >= oneMonthAgo) {\n      metrics.thisMonth++;\n    }\n  });\n  \n  // Convertir el objeto daily a un array para facilitar el renderizado\n  metrics.dailyGraph = Object.values(metrics.daily);\n  \n  return metrics;\n};\n\n/**\n * Calcula la distribución de correos por carpeta\n * @param {string} userId - ID del usuario\n * @param {Array} emails - Lista de correos\n * @returns {Object} Distribución por carpetas\n */\nconst calculateFolderDistribution = (userId, emails) => {\n  const folderDistribution = {\n    system: {\n      inbox: 0,\n      sent: 0,\n      trash: 0\n    },\n    custom: []\n  };\n  \n  // Contar correos por carpeta del sistema\n  emails.forEach(email => {\n    if (email.folder === 'inbox') folderDistribution.system.inbox++;\n    else if (email.folder === 'sent') folderDistribution.system.sent++;\n    else if (email.folder === 'trash') folderDistribution.system.trash++;\n  });\n  \n  // Obtener carpetas personalizadas\n  const customFolders = getUserFolders(userId);\n  \n  // Contar correos por carpeta personalizada\n  customFolders.forEach(folder => {\n    const folderEmails = getEmailsInFolder(userId, folder.id);\n    folderDistribution.custom.push({\n      id: folder.id,\n      name: folder.name,\n      count: folderEmails.length\n    });\n  });\n  \n  return folderDistribution;\n};\n\n/**\n * Calcula la distribución de correos por etiquetas\n * @param {string} userId - ID del usuario\n * @param {Array} emails - Lista de correos\n * @returns {Object} Distribución por etiquetas\n */\nconst calculateTagDistribution = (userId, emails) => {\n  // Obtener todas las etiquetas disponibles\n  const allTags = getUserTags(userId);\n  \n  // Inicializar contadores para cada etiqueta\n  const tagStats = allTags.map(tag => ({\n    id: tag.id,\n    name: tag.name,\n    color: tag.color,\n    count: 0\n  }));\n  \n  // Contar correos por etiqueta\n  allTags.forEach(tag => {\n    const taggedEmails = getEmailsByTag(userId, tag.id);\n    const tagStat = tagStats.find(ts => ts.id === tag.id);\n    if (tagStat) {\n      tagStat.count = taggedEmails.length;\n    }\n  });\n  \n  // Ordenar por cantidad (mayor a menor)\n  tagStats.sort((a, b) => b.count - a.count);\n  \n  return tagStats;\n};\n\n/**\n * Analiza la distribución de correos por contactos\n * @param {Array} emails - Lista de correos\n * @returns {Object} Análisis de contactos\n */\nconst analyzeContacts = (emails) => {\n  const contactMap = new Map();\n  \n  emails.forEach(email => {\n    // Procesar remitente\n    if (email.from && !email.from.includes('@lovenda.app')) {\n      const senderName = extractNameFromEmail(email.from);\n      const senderContact = contactMap.get(senderName) || { \n        name: senderName, \n        sent: 0, \n        received: 0,\n        lastContact: null\n      };\n      \n      senderContact.received++;\n      \n      if (!senderContact.lastContact || new Date(email.date) > new Date(senderContact.lastContact)) {\n        senderContact.lastContact = email.date;\n      }\n      \n      contactMap.set(senderName, senderContact);\n    }\n    \n    // Procesar destinatario\n    if (email.to && !email.to.includes('@lovenda.app')) {\n      const recipientName = extractNameFromEmail(email.to);\n      const recipientContact = contactMap.get(recipientName) || { \n        name: recipientName, \n        sent: 0, \n        received: 0,\n        lastContact: null \n      };\n      \n      recipientContact.sent++;\n      \n      if (!recipientContact.lastContact || new Date(email.date) > new Date(recipientContact.lastContact)) {\n        recipientContact.lastContact = email.date;\n      }\n      \n      contactMap.set(recipientName, recipientContact);\n    }\n  });\n  \n  // Convertir a array y ordenar por número total de interacciones\n  const contacts = Array.from(contactMap.values())\n    .map(contact => ({\n      ...contact,\n      total: contact.sent + contact.received\n    }))\n    .sort((a, b) => b.total - a.total);\n  \n  return {\n    topContacts: contacts.slice(0, 5),\n    totalContacts: contacts.length,\n    contacts: contacts\n  };\n};\n\n/**\n * Extrae el nombre de una dirección de correo\n * @param {string} emailAddress - Dirección de correo (puede incluir nombre)\n * @returns {string} Nombre extraído\n */\nconst extractNameFromEmail = (emailAddress) => {\n  if (!emailAddress) return 'Desconocido';\n  \n  // Si tiene formato \"Nombre <email@ejemplo.com>\"\n  const match = emailAddress.match(/^([^<]+)\\s*<([^>]+)>$/);\n  if (match) {\n    return match[1].trim();\n  }\n  \n  // Si es solo correo, extraer parte local\n  const parts = emailAddress.split('@');\n  if (parts.length === 2) {\n    return parts[0];\n  }\n  \n  return emailAddress;\n};\n\n/**\n * Calcula métricas de respuesta (tiempo promedio, tasa de respuesta)\n * @param {Array} inboxEmails - Correos recibidos\n * @param {Array} sentEmails - Correos enviados\n * @returns {Object} Métricas de respuesta\n */\nconst calculateResponseMetrics = (inboxEmails, sentEmails) => {\n  // Mapear correos enviados por referencia a correo original (In-Reply-To)\n  const repliesMap = new Map();\n  \n  sentEmails.forEach(email => {\n    if (email.inReplyTo) {\n      repliesMap.set(email.inReplyTo, email);\n    }\n  });\n  \n  // Analizar tiempos de respuesta\n  let totalResponseTime = 0;\n  let responseCount = 0;\n  \n  inboxEmails.forEach(receivedEmail => {\n    const reply = repliesMap.get(receivedEmail.id);\n    \n    if (reply) {\n      const receivedDate = new Date(receivedEmail.date);\n      const replyDate = new Date(reply.date);\n      \n      if (receivedDate && replyDate) {\n        const responseTime = replyDate - receivedDate;\n        totalResponseTime += responseTime;\n        responseCount++;\n      }\n    }\n  });\n  \n  // Calcular métricas\n  const metrics = {\n    responseRate: inboxEmails.length > 0 ? (responseCount / inboxEmails.length) : 0,\n    averageResponseTime: responseCount > 0 ? (totalResponseTime / responseCount) : null,\n    responseCount: responseCount,\n    formattedAvgResponseTime: null\n  };\n  \n  // Formatear tiempo de respuesta promedio en formato amigable\n  if (metrics.averageResponseTime !== null) {\n    const avgMinutes = Math.floor(metrics.averageResponseTime / (1000 * 60));\n    \n    if (avgMinutes < 60) {\n      metrics.formattedAvgResponseTime = `${avgMinutes} minutos`;\n    } else if (avgMinutes < 24 * 60) {\n      metrics.formattedAvgResponseTime = `${Math.floor(avgMinutes / 60)} horas`;\n    } else {\n      metrics.formattedAvgResponseTime = `${Math.floor(avgMinutes / (60 * 24))} días`;\n    }\n  }\n  \n  return metrics;\n};\n\nexport {\n  generateUserStats,\n  getUserStats,\n  saveUserStats\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\tagService.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'_getStorage' is not defined.","line":34,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":347,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":347,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":348,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":348,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio para gestionar etiquetas (tags) de correo\n * Permite crear, eliminar, asignar y filtrar etiquetas para correos\n */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { loadJson, saveJson } from '../utils/storage.js';\n\n// Caché en memoria para tests y runtime rápido\nconst runtimeCustomTags = {};\n\n// Claves para almacenamiento local\nconst TAGS_STORAGE_KEY = 'lovenda_email_tags';\nconst EMAIL_TAGS_MAPPING_KEY = 'lovenda_email_tags_mapping';\n\n// Etiquetas predefinidas por el sistema\nexport const SYSTEM_TAGS = [\n  { id: 'important', name: 'Importante', color: '#e53e3e' }, // Rojo\n  { id: 'work', name: 'Trabajo', color: '#3182ce' },         // Azul\n  { id: 'personal', name: 'Personal', color: '#38a169' },    // Verde\n  { id: 'invitation', name: 'Invitación', color: '#805ad5' }, // Morado\n  { id: 'provider', name: 'Proveedor', color: '#dd6b20' },   // Naranja\n];\n\n/**\n * Obtener todas las etiquetas disponibles para un usuario\n * Incluye tanto etiquetas del sistema como personalizadas\n * @param {string} userId - ID del usuario\n * @returns {Array} - Array de objetos de etiqueta\n */\nexport const getUserTags = (userId) => {\n  const storageKey = `${TAGS_STORAGE_KEY}_${userId}`;\n  try {\n    const storage = _getStorage();\n\n    // Llamada explícita para que el spy de los tests registre la lectura\n    const raw = storage.getItem(storageKey);\n\n    // Parsear resultado (si existe)\n    let customTags = [];\n    if (raw) {\n      try {\n        customTags = JSON.parse(raw);\n      } catch {\n        customTags = [];\n      }\n    }\n\n    // Actualizar caché\n    runtimeCustomTags[userId] = customTags;\n\n    return [...SYSTEM_TAGS, ...customTags];\n  } catch (error) {\n    console.error('Error al obtener etiquetas:', error);\n    return [...SYSTEM_TAGS];\n  }\n};\n\n/**\n * Obtener solo las etiquetas personalizadas de un usuario\n * @param {string} userId - ID del usuario\n * @returns {Array} - Array de objetos de etiqueta personalizados\n */\nexport const getCustomTags = (userId) => {\n  try {\n    // Refrescar siempre desde storage para consistencia en tests\n    const storageKey = `${TAGS_STORAGE_KEY}_${userId}`;\n    const fromStorage = loadJson(storageKey, []);\n    runtimeCustomTags[userId] = fromStorage; // cache interna\n    return fromStorage;\n  } catch (error) {\n    console.error('Error al obtener etiquetas personalizadas:', error);\n    return runtimeCustomTags[userId] || [];\n  }\n};\n\n/**\n * Crear una nueva etiqueta personalizada\n * @param {string} userId - ID del usuario\n * @param {string} tagName - Nombre de la etiqueta\n * @param {string} color - Color de la etiqueta en formato hex\n * @returns {Object} - Objeto con la etiqueta creada\n */\nexport const createTag = (userId, tagName, color = '#64748b') => {\n  try {\n    const tags = getCustomTags(userId);\n\n    // Verificar duplicado exacto (case-insensitive) entre sistema y personalizadas\n    const allTags = [...SYSTEM_TAGS, ...tags];\n    const duplicate = allTags.some(t => t.name.toLowerCase() === tagName.toLowerCase());\n    if (duplicate) {\n      throw new Error('Ya existe una etiqueta con ese nombre');\n    }\n\n    // Crear nueva etiqueta\n    const newTag = {\n      id: uuidv4(),\n      name: tagName,\n      color: color,\n      createdAt: new Date().toISOString()\n    };\n\n    // Guardar etiquetas actualizadas\n    const updatedTags = [...tags, newTag];\n    saveUserTags(userId, updatedTags);\n\n    return newTag;\n  } catch (error) {\n    console.error('Error al crear etiqueta:', error);\n    throw error;\n  }\n};\n\n/**\n * Eliminar una etiqueta personalizada\n * @param {string} userId - ID del usuario\n * @param {string} tagId - ID de la etiqueta\n * @returns {Object} - { success: boolean }\n */\nexport const deleteTag = (userId, tagId) => {\n  try {\n    // Si es etiqueta del sistema, no se puede eliminar -> false\n    const isSystemTag = SYSTEM_TAGS.some(tag => tag.id === tagId);\n    if (isSystemTag) {\n      return false;\n    }\n\n    const tags = getCustomTags(userId);\n\n    // Comprobar si la etiqueta existe realmente\n    const exists = tags.some(tag => tag.id === tagId);\n    if (!exists) {\n      return false; // Nada que eliminar\n    }\n\n    // Filtrar la etiqueta a eliminar\n    const updatedTags = tags.filter(tag => tag.id !== tagId);\n\n    // Guardar etiquetas actualizadas\n    saveUserTags(userId, updatedTags);\n\n    // También eliminar asignaciones de esta etiqueta a correos\n    removeTagFromAllEmails(userId, tagId);\n\n    return true;\n  } catch (error) {\n    console.error('Error al eliminar etiqueta:', error);\n    return false;\n  }\n};\n\n/**\n * Guardar etiquetas personalizadas del usuario\n * @param {string} userId - ID del usuario\n * @param {Array} tags - Array de objetos de etiqueta\n * @private\n */\nconst saveUserTags = (userId, tags) => {\n  // Sincronizar caché primero\n  runtimeCustomTags[userId] = tags;\n  const storageKey = `${TAGS_STORAGE_KEY}_${userId}`;\n  saveJson(storageKey, tags);\n};\n\n/**\n * Obtener mapeo de correos a etiquetas para un usuario\n * @param {string} userId - ID del usuario\n * @returns {Object} - Objeto con mapeos de correos a etiquetas\n * @private\n */\nconst getEmailTagsMapping = (userId) => {\n  try {\n    const storageKey = `${EMAIL_TAGS_MAPPING_KEY}_${userId}`;\n    return loadJson(storageKey, {});\n  } catch (error) {\n    console.error('Error al obtener mapeo de correos a etiquetas:', error);\n    return {};\n  }\n};\n\n/**\n * Guardar mapeo de correos a etiquetas\n * @param {string} userId - ID del usuario\n * @param {Object} mapping - Objeto con mapeos de correos a etiquetas\n * @private\n */\nconst saveEmailTagsMapping = (userId, mapping) => {\n  const storageKey = `${EMAIL_TAGS_MAPPING_KEY}_${userId}`;\n  saveJson(storageKey, mapping);\n};\n\n/**\n * Asignar una etiqueta a un correo\n * @param {string} userId - ID del usuario\n * @param {string} emailId - ID del correo\n * @param {string} tagId - ID de la etiqueta\n * @returns {boolean} - true si se asignó con éxito\n */\nexport const addTagToEmail = (userId, emailId, tagId) => {\n  try {\n    // Verificar que la etiqueta existe\n    let allTags = getUserTags(userId);\n    let tagExists = allTags.some(tag => tag.id === tagId);\n\n    // Si no se encuentra, forzar recarga desde storage para evitar desincronización de caché\n    if (!tagExists) {\n      runtimeCustomTags[userId] = undefined; // invalidar caché\n      allTags = getUserTags(userId);\n      tagExists = allTags.some(tag => tag.id === tagId);\n    }\n\n    if (!tagExists) {\n      // Etiqueta inexistente\n      return false;\n    }\n    \n    // Obtener mapeo actual\n    const mapping = getEmailTagsMapping(userId);\n    \n    // Inicializar array de etiquetas para este correo si no existe\n    if (!mapping[emailId]) {\n      mapping[emailId] = [];\n    }\n    \n    // Verificar si la etiqueta ya está asignada\n    if (mapping[emailId].includes(tagId)) {\n      return false; // Duplicado, no guardar ni modificar\n    }\n    mapping[emailId].push(tagId);\n    // Guardar mapeo actualizado\n    saveEmailTagsMapping(userId, mapping);\n    return true;\n  } catch (error) {\n    console.error('Error al asignar etiqueta a correo:', error);\n    throw error;\n  }\n};\n\n/**\n * Quitar una etiqueta de un correo\n * @param {string} userId - ID del usuario\n * @param {string} emailId - ID del correo\n * @param {string} tagId - ID de la etiqueta\n * @returns {boolean} - true si se quitó con éxito\n */\nexport const removeTagFromEmail = (userId, emailId, tagId) => {\n  try {\n    // Obtener mapeo actual\n    const mapping = getEmailTagsMapping(userId);\n    \n    // Si el correo no tiene etiquetas, no hay nada que hacer\n    if (!mapping[emailId]) {\n      return false;\n    }\n    \n    const originalLength = mapping[emailId].length;\n    // Filtrar la etiqueta a quitar\n    mapping[emailId] = mapping[emailId].filter(id => id !== tagId);\n    if (mapping[emailId].length === originalLength) {\n      return false; // No había la etiqueta\n    }\n    // Guardar mapeo actualizado\n    saveEmailTagsMapping(userId, mapping);\n    return true;\n  } catch (error) {\n    console.error('Error al quitar etiqueta de correo:', error);\n    throw error;\n  }\n};\n\n/**\n * Quitar una etiqueta de todos los correos\n * @param {string} userId - ID del usuario\n * @param {string} tagId - ID de la etiqueta\n * @returns {boolean} - true si se quitó con éxito\n * @private\n */\nexport const removeTagFromAllEmails = (userId, tagId) => {\n  try {\n    // Obtener mapeo actual\n    const mapping = getEmailTagsMapping(userId);\n    \n    // Filtrar la etiqueta de todos los correos\n    Object.keys(mapping).forEach(emailId => {\n      mapping[emailId] = mapping[emailId].filter(id => id !== tagId);\n    });\n    \n    // Guardar mapeo actualizado\n    saveEmailTagsMapping(userId, mapping);\n    \n    return true;\n  } catch (error) {\n    console.error('Error al quitar etiqueta de todos los correos:', error);\n    throw error;\n  }\n};\n\n/**\n * Obtener todas las etiquetas asignadas a un correo\n * @param {string} userId - ID del usuario\n * @param {string} emailId - ID del correo\n * @returns {Array} - Array de IDs de etiquetas\n */\nexport const getEmailTags = (userId, emailId) => {\n  try {\n    const mapping = getEmailTagsMapping(userId);\n    return mapping[emailId] || [];\n  } catch (error) {\n    console.error('Error al obtener etiquetas de correo:', error);\n    return [];\n  }\n};\n\n/**\n * Obtener etiquetas completas (con nombre, color, etc) de un correo\n * @param {string} userId - ID del usuario\n * @param {string} emailId - ID del correo\n * @returns {Array} - Array de objetos de etiqueta completos\n */\nexport const getEmailTagsDetails = (userId, emailId) => {\n  try {\n    const tagIds = getEmailTags(userId, emailId);\n    if (!tagIds.length) return [];\n    \n    const allTags = getUserTags(userId);\n    return tagIds\n      .map(tagId => allTags.find(tag => tag.id === tagId))\n      .filter(tag => tag !== undefined); // Filtrar etiquetas que ya no existen\n  } catch (error) {\n    console.error('Error al obtener detalles de etiquetas:', error);\n    return [];\n  }\n};\n\n/**\n * Obtener todos los correos que tienen una etiqueta específica\n * @param {string} userId - ID del usuario\n * @param {string} tagId - ID de la etiqueta\n * @returns {Array} - Array de IDs de correos\n */\nexport const getEmailsByTag = (userId, tagId) => {\n  try {\n    const mapping = getEmailTagsMapping(userId);\n    \n    // Filtrar correos que tienen esta etiqueta\n    return Object.entries(mapping)\n      .filter(([_, tagIds]) => tagIds.includes(tagId))\n      .map(([emailId, _]) => emailId);\n  } catch (error) {\n    console.error('Error al obtener correos por etiqueta:', error);\n    return [];\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\services\\translationService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\src\\components\\HomePage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\AllProviders.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\accessibility\\EmailDetail.a11y.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\accessibility\\EmailInbox.a11y.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'queryByText' is assigned a value but never used.","line":140,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":140,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render } from '@testing-library/react';\nimport { MemoryRouter } from 'react-router-dom';\nimport { axe, formatViolations } from '../helpers/axeSetup';\nimport EmailInbox from '../../components/email/EmailInbox';\n\n// Mock de servicios\nvi.mock('../../services/EmailService', () => ({\n  getMails: vi.fn().mockResolvedValue([\n    {\n      id: 'email1',\n      from: 'remitente@example.com',\n      to: 'usuario@lovenda.com',\n      subject: 'Asunto de prueba',\n      body: '<p>Contenido de prueba</p>',\n      date: '2025-07-10T15:30:00Z',\n      folder: 'inbox',\n      read: false,\n      attachments: []\n    },\n    {\n      id: 'email2',\n      from: 'otro@example.com',\n      to: 'usuario@lovenda.com',\n      subject: 'Segundo email',\n      body: '<p>Otro contenido de prueba</p>',\n      date: '2025-07-09T10:15:00Z',\n      folder: 'inbox',\n      read: true,\n      attachments: []\n    }\n  ]),\n  getUnreadCount: vi.fn().mockResolvedValue(1)\n}));\n\nvi.mock('../../services/TagService', () => ({\n  getUserTags: vi.fn().mockReturnValue([\n    { id: 'important', name: 'Importante', color: '#e53e3e' }\n  ]),\n  getEmailTagsDetails: vi.fn().mockReturnValue([])\n}));\n\nvi.mock('../../services/FolderService', () => ({\n  getUserFolders: vi.fn().mockReturnValue([\n    { id: 'inbox', name: 'Bandeja de entrada', system: true },\n    { id: 'sent', name: 'Enviados', system: true },\n    { id: 'trash', name: 'Papelera', system: true }\n  ])\n}));\n\n// Wrapper de componente para pruebas\nconst TestWrapper = ({ children }) => (\n  <MemoryRouter>\n    {children}\n  </MemoryRouter>\n);\n\ndescribe('Pruebas de accesibilidad para EmailInbox', () => {\n  let rendered;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    rendered = render(<EmailInbox />, { wrapper: TestWrapper });\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('no tiene violaciones de accesibilidad', async () => {\n    // Esperar a que los datos se carguen\n    await vi.waitFor(() => {\n      expect(rendered.getByText('Bandeja de entrada')).toBeInTheDocument();\n    });\n\n    // Ejecutar análisis de accesibilidad\n    const results = await axe(rendered.container);\n    \n    // Opcional: imprimir detalles de violaciones para depuración\n    if (results.violations.length > 0) {\n      console.error(formatViolations(results.violations));\n    }\n    \n    expect(results).toHaveNoViolations();\n  });\n\n  it('mantiene la navegación por teclado funcional', async () => {\n    // Esperar a que los datos se carguen\n    await vi.waitFor(() => {\n      expect(rendered.getByText('Bandeja de entrada')).toBeInTheDocument();\n    });\n    \n    // Verificar que los elementos interactivos son focusables y tienen roles adecuados\n    const emailItems = rendered.container.querySelectorAll('.email-item');\n    \n    expect(emailItems.length).toBeGreaterThan(0);\n    \n    emailItems.forEach(item => {\n      // Verificar atributos de accesibilidad esenciales\n      expect(item).toHaveAttribute('tabindex', '0');\n      expect(item).toHaveAttribute('role', 'button');\n      \n      // Verificar que los elementos no leídos tienen información semántica adicional\n      if (item.classList.contains('unread')) {\n        expect(item).toHaveAttribute('aria-label', expect.stringContaining('no leído'));\n      }\n    });\n\n    // Verificar navegación para filtros y acciones\n    const actionButtons = rendered.container.querySelectorAll('button, [role=\"button\"]');\n    actionButtons.forEach(button => {\n      expect(button).toHaveAttribute('aria-label');\n    });\n  });\n\n  it('usa estructura semántica adecuada para la lista de emails', async () => {\n    // Esperar a que los datos se carguen\n    await vi.waitFor(() => {\n      expect(rendered.getByText('Bandeja de entrada')).toBeInTheDocument();\n    });\n    \n    // Verificar estructura semántica\n    const emailList = rendered.container.querySelector('.email-list');\n    expect(emailList).toHaveAttribute('role', 'list');\n    \n    const emailItems = emailList.querySelectorAll('.email-item');\n    emailItems.forEach(item => {\n      expect(item).toHaveAttribute('role', 'listitem');\n    });\n  });\n\n  it('proporciona feedback adecuado para estados de carga y errores', async () => {\n    // Simular estado de carga\n    vi.mock('../../services/EmailService', () => ({\n      getMails: vi.fn().mockImplementation(() => new Promise(resolve => setTimeout(resolve, 1000))),\n      getUnreadCount: vi.fn().mockResolvedValue(0)\n    }));\n    \n    const { getByText, queryByText } = render(<EmailInbox />, { wrapper: TestWrapper });\n    \n    // Verificar indicador de carga\n    expect(getByText('Cargando...')).toBeInTheDocument();\n    expect(getByText('Cargando...')).toHaveAttribute('aria-live', 'polite');\n    \n    // Simular error\n    vi.mock('../../services/EmailService', () => ({\n      getMails: vi.fn().mockRejectedValue(new Error('Error de prueba')),\n      getUnreadCount: vi.fn().mockResolvedValue(0)\n    }));\n    \n    const { getByText: getByTextError } = render(<EmailInbox />, { wrapper: TestWrapper });\n    \n    // Verificar mensaje de error\n    await vi.waitFor(() => {\n      expect(getByTextError('Error al cargar correos')).toBeInTheDocument();\n      expect(getByTextError('Error al cargar correos')).toHaveAttribute('aria-live', 'assertive');\n    });\n  });\n\n  it('mantiene suficiente contraste en todos los elementos', async () => {\n    // Esperar a que los datos se carguen\n    await vi.waitFor(() => {\n      expect(rendered.getByText('Bandeja de entrada')).toBeInTheDocument();\n    });\n    \n    // Realizar análisis específico para contraste\n    const contrastResults = await axe(rendered.container, {\n      runOnly: {\n        type: 'rule',\n        values: ['color-contrast']\n      }\n    });\n    \n    // Si hay problemas de contraste, mostrar detalles\n    if (contrastResults.violations.length > 0) {\n      console.error('Problemas de contraste:', formatViolations(contrastResults.violations));\n    }\n    \n    expect(contrastResults).toHaveNoViolations();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\accessibility\\email-components.a11y.test.jsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":14,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":28,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":30,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":31,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":32,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":38,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":39,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":43,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":44,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":44,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":48,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":59,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":77,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":77,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":95,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":95,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":116,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":116,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":138,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":138,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":174,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":174,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":175,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":175,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":192,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":192,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":193,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":26}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, afterEach } from 'vitest';\nimport { render, screen, cleanup } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport EmailComposer from '../../components/email/EmailComposer';\nimport EmailTagsManager from '../../components/email/EmailTagsManager';\nimport TagsManager from '../../components/email/TagsManager';\n\n// Extender las utilidades de prueba con el matcher de axe\nexpect.extend(toHaveNoViolations);\n\n// Mock de componentes y hooks necesarios\nvi.mock('../../hooks/useAuth', () => ({\n  default: () => ({\n    currentUser: { uid: 'testuid' },\n    profile: {\n      id: 'profile123',\n      userId: 'user123',\n      brideFirstName: 'María',\n      brideLastName: 'García',\n      emailAlias: 'maria.garcia'\n    },\n    isAuthenticated: true\n  })\n}));\n\nvi.mock('react-toastify', () => ({\n  toast: {\n    success: vi.fn(),\n    error: vi.fn(),\n    info: vi.fn()\n  },\n  ToastContainer: () => <div data-testid=\"toast-container\" />\n}));\n\n// Mock del servicio de etiquetas\nvi.mock('../../services/tagService', () => ({\n  getTags: vi.fn(() => Promise.resolve([\n    { id: 'tag1', name: 'Urgente', color: '#ff0000', systemTag: true },\n    { id: 'tag2', name: 'Proveedores', color: '#00ff00', systemTag: false }\n  ])),\n  createTag: vi.fn(() => Promise.resolve({ id: 'newTag', name: 'Nueva Etiqueta', color: '#0000ff', systemTag: false })),\n  deleteTag: vi.fn(() => Promise.resolve(true))\n}));\n\n// Mock para iconos\nvi.mock('lucide-react', () => ({\n  Plus: () => <div data-testid=\"plus-icon\">+</div>,\n  Trash: () => <div data-testid=\"trash-icon\">×</div>,\n  X: () => <div data-testid=\"x-icon\">×</div>,\n  Tags: () => <div data-testid=\"tags-icon\">Tags</div>,\n  Tag: () => <div data-testid=\"tag-icon\">Tag</div>,\n  Paperclip: () => <div data-testid=\"paperclip-icon\">Attach</div>,\n  Send: () => <div data-testid=\"send-icon\">Send</div>\n}));\n\n// Componente de Button mockeado\nvi.mock('../../components/ui/Button', () => ({\n  default: ({ children, onClick, disabled }) => (\n    <button onClick={onClick} disabled={disabled} data-testid=\"button-mock\">\n      {children}\n    </button>\n  )\n}));\n\n// Wrapper para los componentes que requieren context\nconst TestWrapper = ({ children }) => (\n  <BrowserRouter>\n    {children}\n    <ToastContainer />\n  </BrowserRouter>\n);\n\ndescribe('Pruebas de accesibilidad para componentes de Email', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('EmailComposer - Accesibilidad', () => {\n    it('no debe tener violaciones de accesibilidad', async () => {\n      const initialValues = {\n        to: '',\n        subject: '',\n        body: '',\n        attachments: []\n      };\n\n      const { container } = render(\n        <EmailComposer\n          onSend={vi.fn()}\n          initialValues={initialValues}\n          isLoading={false}\n        />, \n        { wrapper: TestWrapper }\n      );\n\n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it('debe tener los campos con labels accesibles', () => {\n      const initialValues = {\n        to: '',\n        subject: '',\n        body: '',\n        attachments: []\n      };\n\n      render(\n        <EmailComposer\n          onSend={vi.fn()}\n          initialValues={initialValues}\n          isLoading={false}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      // Verificar que los campos tienen labels accesibles\n      expect(screen.getByLabelText(/destinatario/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/asunto/i)).toBeInTheDocument();\n    });\n\n    it('los botones deben tener texto descriptivo para lectores de pantalla', () => {\n      const initialValues = {\n        to: '',\n        subject: '',\n        body: '',\n        attachments: []\n      };\n\n      render(\n        <EmailComposer\n          onSend={vi.fn()}\n          initialValues={initialValues}\n          isLoading={false}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      // Verificar que los botones tienen texto accesible\n      const buttons = screen.getAllByRole('button');\n      \n      // Al menos un botón debe tener descripción de adjuntar archivo\n      const attachButton = buttons.find(button => \n        button.textContent.includes('Attach') || \n        button.getAttribute('aria-label')?.includes('adjunt')\n      );\n      \n      // Al menos un botón debe tener descripción de enviar\n      const sendButton = buttons.find(button => \n        button.textContent.includes('Send') || \n        button.getAttribute('aria-label')?.includes('enviar')\n      );\n      \n      expect(attachButton).toBeDefined();\n      expect(sendButton).toBeDefined();\n    });\n  });\n\n  describe('EmailTagsManager - Accesibilidad', () => {\n    it('no debe tener violaciones de accesibilidad', async () => {\n      const { container } = render(\n        <EmailTagsManager\n          emailTags={[]}\n          allTags={[\n            { id: 'tag1', name: 'Urgente', color: '#ff0000', systemTag: true },\n            { id: 'tag2', name: 'Proveedores', color: '#00ff00', systemTag: false }\n          ]}\n          onAddTag={vi.fn()}\n          onRemoveTag={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it('las etiquetas deben tener suficiente contraste de color', () => {\n      render(\n        <EmailTagsManager\n          emailTags={[{ id: 'tag1', name: 'Urgente', color: '#ff0000', systemTag: true }]}\n          allTags={[\n            { id: 'tag1', name: 'Urgente', color: '#ff0000', systemTag: true },\n            { id: 'tag2', name: 'Proveedores', color: '#00ff00', systemTag: false }\n          ]}\n          onAddTag={vi.fn()}\n          onRemoveTag={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      // Verificar que la etiqueta se renderiza\n      const tag = screen.getByText('Urgente');\n      expect(tag).toBeInTheDocument();\n      \n      // La validación de contraste real se hará mediante axe en el test anterior\n    });\n  });\n\n  describe('TagsManager - Accesibilidad', () => {\n    it('no debe tener violaciones de accesibilidad', async () => {\n      const { container } = render(\n        <TagsManager />,\n        { wrapper: TestWrapper }\n      );\n\n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it('el formulario de creación de etiquetas debe ser accesible', async () => {\n      render(\n        <TagsManager />,\n        { wrapper: TestWrapper }\n      );\n\n      // Verificar que el botón para crear una nueva etiqueta es accesible\n      const newTagButton = screen.getByRole('button', { name: /nueva etiqueta/i });\n      expect(newTagButton).toBeInTheDocument();\n      \n      // La validación completa de accesibilidad se hará mediante axe en el test anterior\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\accessibility\\email-viewer.a11y.test.jsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":13,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":28,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":94,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":94,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":106,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":106,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":107,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":107,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":108,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":109,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":109,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":122,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":122,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":123,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":123,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":124,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":124,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":125,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":125,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":141,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":141,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":142,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":142,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":143,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":143,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":144,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":144,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":163,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":163,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":164,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":164,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":165,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":165,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":166,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":166,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":186,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":186,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":188,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":188,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":189,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":189,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":202,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":202,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":204,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":204,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":205,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":205,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":225,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":225,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":227,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":227,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":228,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":228,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":248,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":248,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":249,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":249,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":250,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":250,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":264,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":264,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":265,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":265,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":266,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":266,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":281,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":281,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":282,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":282,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":283,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":283,"endColumn":29}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, afterEach } from 'vitest';\nimport { render, screen, cleanup } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport { BrowserRouter } from 'react-router-dom';\nimport EmailView from '../../components/email/EmailView';\nimport EmailList from '../../components/email/EmailList';\nimport EmailFolderList from '../../components/email/EmailFolderList';\n\n// Extender las utilidades de prueba con el matcher de axe\nexpect.extend(toHaveNoViolations);\n\n// Mock de hooks y servicios\nvi.mock('../../hooks/useAuth', () => ({\n  default: () => ({\n    currentUser: { uid: 'testuid' },\n    profile: {\n      id: 'profile123',\n      userId: 'user123',\n      brideFirstName: 'María',\n      brideLastName: 'García',\n      emailAlias: 'maria.garcia'\n    },\n    isAuthenticated: true\n  })\n}));\n\n// Mock de componentes visuales\nvi.mock('lucide-react', () => ({\n  Trash: () => <div data-testid=\"trash-icon\">×</div>,\n  Reply: () => <div data-testid=\"reply-icon\">↩</div>,\n  Forward: () => <div data-testid=\"forward-icon\">→</div>,\n  Star: () => <div data-testid=\"star-icon\">★</div>,\n  Download: () => <div data-testid=\"download-icon\">↓</div>,\n  Mail: () => <div data-testid=\"mail-icon\">✉</div>,\n  Archive: () => <div data-testid=\"archive-icon\">📦</div>,\n  Inbox: () => <div data-testid=\"inbox-icon\">📥</div>,\n  Send: () => <div data-testid=\"sent-icon\">📤</div>,\n  Folder: () => <div data-testid=\"folder-icon\">📁</div>,\n  Plus: () => <div data-testid=\"plus-icon\">+</div>\n}));\n\n// Datos de ejemplo\nconst mockEmail = {\n  id: 'email123',\n  from: 'proveedor@florista.com',\n  to: 'maria.garcia@lovenda.com',\n  subject: 'Presupuesto de flores para boda',\n  body: '<p>Estimada María,</p><p>Adjunto el presupuesto para las flores de tu boda.</p><p>Saludos cordiales,<br/>Floristas Bella</p>',\n  attachments: [{\n    name: 'presupuesto.pdf',\n    url: 'https://example.com/presupuesto.pdf',\n    size: 1024\n  }],\n  timestamp: new Date(),\n  read: false,\n  starred: false,\n  folder: 'inbox',\n  tags: ['tag1']\n};\n\nconst mockEmails = [\n  mockEmail,\n  {\n    id: 'email456',\n    from: 'fotografia@capturamos.com',\n    to: 'maria.garcia@lovenda.com',\n    subject: 'Catálogo de fotos',\n    body: '<p>Hola María,</p><p>Te enviamos nuestro catálogo de fotografías.</p>',\n    attachments: [],\n    timestamp: new Date(),\n    read: true,\n    starred: true,\n    folder: 'inbox',\n    tags: ['tag2']\n  }\n];\n\nconst mockFolders = [\n  { id: 'inbox', name: 'Bandeja de entrada', systemFolder: true, count: 2 },\n  { id: 'sent', name: 'Enviados', systemFolder: true, count: 1 },\n  { id: 'trash', name: 'Papelera', systemFolder: true, count: 0 },\n  { id: 'proveedores', name: 'Proveedores', systemFolder: false, count: 3 }\n];\n\n// Wrapper para los componentes\nconst TestWrapper = ({ children }) => (\n  <BrowserRouter>\n    {children}\n  </BrowserRouter>\n);\n\ndescribe('Pruebas de accesibilidad para visualización de correos', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('EmailView - Accesibilidad', () => {\n    it('no debe tener violaciones de accesibilidad', async () => {\n      const { container } = render(\n        <EmailView \n          email={mockEmail}\n          onReply={vi.fn()}\n          onForward={vi.fn()}\n          onDelete={vi.fn()}\n          onToggleStarred={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it('debe tener imágenes con texto alternativo', () => {\n      render(\n        <EmailView \n          email={mockEmail}\n          onReply={vi.fn()}\n          onForward={vi.fn()}\n          onDelete={vi.fn()}\n          onToggleStarred={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      // Verificar que los iconos tienen texto alternativo\n      const images = screen.getAllByRole('img');\n      images.forEach(img => {\n        expect(img).toHaveAttribute('alt');\n      });\n    });\n\n    it('debe tener botones con propósitos claros', () => {\n      render(\n        <EmailView \n          email={mockEmail}\n          onReply={vi.fn()}\n          onForward={vi.fn()}\n          onDelete={vi.fn()}\n          onToggleStarred={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      // Verificar que los botones tienen textos o aria-labels descriptivos\n      const buttons = screen.getAllByRole('button');\n      buttons.forEach(button => {\n        expect(\n          button.textContent || \n          button.getAttribute('aria-label')\n        ).toBeTruthy();\n      });\n    });\n\n    it('los enlaces para descargar deben ser accesibles', () => {\n      render(\n        <EmailView \n          email={mockEmail}\n          onReply={vi.fn()}\n          onForward={vi.fn()}\n          onDelete={vi.fn()}\n          onToggleStarred={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      // Verificar que hay un enlace para el archivo adjunto\n      const downloadLinks = screen.getAllByRole('link');\n      expect(downloadLinks.length).toBeGreaterThan(0);\n      \n      // Verificar que tiene texto descriptivo\n      const attachmentLink = screen.getByText('presupuesto.pdf');\n      expect(attachmentLink).toBeInTheDocument();\n    });\n  });\n\n  describe('EmailList - Accesibilidad', () => {\n    it('no debe tener violaciones de accesibilidad', async () => {\n      const { container } = render(\n        <EmailList \n          emails={mockEmails}\n          onSelectEmail={vi.fn()}\n          selectedEmail={null}\n          onDeleteEmail={vi.fn()}\n          onToggleStarred={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it('los elementos de la lista deben ser navegables por teclado', () => {\n      render(\n        <EmailList \n          emails={mockEmails}\n          onSelectEmail={vi.fn()}\n          selectedEmail={null}\n          onDeleteEmail={vi.fn()}\n          onToggleStarred={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      // Verificar que los elementos de la lista son interactivos\n      const listItems = screen.getAllByRole('listitem');\n      expect(listItems.length).toBeGreaterThan(0);\n      \n      // Verificar que tienen elementos enfocables\n      listItems.forEach(item => {\n        const interactiveElements = item.querySelectorAll('button, a, [tabindex=\"0\"]');\n        expect(interactiveElements.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('debe indicar cuáles correos están no leídos de forma accesible', () => {\n      render(\n        <EmailList \n          emails={mockEmails}\n          onSelectEmail={vi.fn()}\n          selectedEmail={null}\n          onDeleteEmail={vi.fn()}\n          onToggleStarred={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n      \n      // La implementación depende de cómo se indiquen visualmente los correos no leídos\n      // pero debería ser perceptible no solo por color sino por algún otro indicador\n      \n      // Asumimos que hay algún elemento que tiene una clase o atributo para correos no leídos\n      const unreadItems = screen.getAllByText(/Presupuesto de flores/i);\n      expect(unreadItems.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('EmailFolderList - Accesibilidad', () => {\n    it('no debe tener violaciones de accesibilidad', async () => {\n      const { container } = render(\n        <EmailFolderList \n          folders={mockFolders}\n          selectedFolder=\"inbox\"\n          onSelectFolder={vi.fn()}\n          onCreateFolder={vi.fn()}\n          onDeleteFolder={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n\n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it('debe indicar claramente la carpeta seleccionada', () => {\n      render(\n        <EmailFolderList \n          folders={mockFolders}\n          selectedFolder=\"inbox\"\n          onSelectFolder={vi.fn()}\n          onCreateFolder={vi.fn()}\n          onDeleteFolder={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n      \n      // Verificar que se indica la carpeta seleccionada (puede ser via aria-current)\n      const selectedItem = screen.getByText('Bandeja de entrada');\n      expect(selectedItem.parentElement).toHaveAttribute('aria-current', 'true');\n    });\n\n    it('el botón de crear carpeta debe ser accesible', () => {\n      render(\n        <EmailFolderList \n          folders={mockFolders}\n          selectedFolder=\"inbox\"\n          onSelectFolder={vi.fn()}\n          onCreateFolder={vi.fn()}\n          onDeleteFolder={vi.fn()}\n        />,\n        { wrapper: TestWrapper }\n      );\n      \n      // Verificar que hay un botón para crear carpeta y es accesible\n      const newFolderButton = screen.getByRole('button', { name: /nueva carpeta/i });\n      expect(newFolderButton).toBeInTheDocument();\n      expect(newFolderButton).not.toHaveAttribute('disabled');\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\components\\Button.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\components\\SmartEmailComposer.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":2,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'within' is defined but never used.","line":2,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'waitFor' is defined but never used.","line":2,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":52},{"ruleId":"no-unused-vars","severity":2,"message":"'EmailRecommendationService' is defined but never used.","line":5,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'category' is defined but never used.","line":32,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'searchQuery' is defined but never used.","line":32,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":36}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen, fireEvent, within, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport SmartEmailComposer from '../../components/email/SmartEmailComposer';\nimport EmailRecommendationService from '../../services/EmailRecommendationService';\n\n// Mock del servicio de recomendaciones\nvi.mock('../../services/EmailRecommendationService', () => {\n  return {\n    default: vi.fn().mockImplementation(() => ({\n      generateRecommendations: vi.fn().mockReturnValue({\n        bestTimeToSend: {\n          bestTimeSlot: 'morning',\n          bestTimeSlotName: 'mañana (8-12h)',\n          bestRate: '75.0'\n        },\n        subjectLineRecommendations: {\n          recommendedPatterns: ['Consulta sobre [Servicio] para evento el [Fecha]']\n        },\n        templateRecommendations: {\n          bestOverallTemplate: 'fotografía'\n        },\n        confidenceScore: 85\n      }),\n      markRecommendationAsApplied: vi.fn()\n    }))\n  };\n});\n\n// Mock del componente EmailRecommendationsPanel\nvi.mock('../../components/email/EmailRecommendationsPanel', () => ({\n  default: ({ category, searchQuery, onApplyRecommendation }) => (\n    <div data-testid=\"recommendations-panel\">\n      <button \n        data-testid=\"apply-subject-recommendation\"\n        onClick={() => onApplyRecommendation('subject', 'Consulta sobre [Servicio] para evento el [Fecha]')}\n      >\n        Aplicar recomendación de asunto\n      </button>\n      <button \n        data-testid=\"apply-template-recommendation\"\n        onClick={() => onApplyRecommendation('template', 'fotografía')}\n      >\n        Aplicar recomendación de plantilla\n      </button>\n      <button \n        data-testid=\"apply-time-recommendation\"\n        onClick={() => onApplyRecommendation('time', { bestTimeSlot: 'morning' })}\n      >\n        Aplicar recomendación de hora\n      </button>\n    </div>\n  )\n}));\n\ndescribe('SmartEmailComposer', () => {\n  const mockProvider = {\n    id: 'provider-1',\n    name: 'Fotógrafo Test',\n    email: 'fotografo@test.com',\n    service: 'fotografía'\n  };\n  \n  const mockTemplates = [\n    {\n      id: 'template-1',\n      name: 'Fotografía General',\n      category: 'fotografía',\n      subjectTemplate: 'Consulta sobre [Servicio] con [Proveedor]',\n      messageTemplate: 'Hola [Proveedor], estoy interesado en contratar servicios de [Servicio] para mi evento.'\n    },\n    {\n      id: 'template-2',\n      name: 'Catering General',\n      category: 'catering',\n      subjectTemplate: 'Servicios de [Servicio] para evento',\n      messageTemplate: 'Hola [Proveedor], me gustaría recibir información sobre sus servicios de [Servicio].'\n    }\n  ];\n  \n  const mockOnSend = vi.fn();\n  const mockOnCancel = vi.fn();\n  \n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n  \n  it('debe renderizarse correctamente', () => {\n    render(\n      <SmartEmailComposer \n        provider={mockProvider}\n        searchQuery=\"fotografía boda madrid\"\n        onSend={mockOnSend}\n        onCancel={mockOnCancel}\n        templates={mockTemplates}\n      />\n    );\n    \n    // Verificar elementos principales\n    expect(screen.getByText('Redactar Correo')).toBeInTheDocument();\n    expect(screen.getByText(/a Fotógrafo Test/)).toBeInTheDocument();\n    expect(screen.getByLabelText('Asunto')).toBeInTheDocument();\n    expect(screen.getByLabelText('Mensaje')).toBeInTheDocument();\n  });\n  \n  it('debe cargar una plantilla inicial basada en la categoría del proveedor', () => {\n    render(\n      <SmartEmailComposer \n        provider={mockProvider}\n        templates={mockTemplates}\n        onSend={mockOnSend}\n      />\n    );\n    \n    // Verificar que se cargó la plantilla de fotografía\n    const asuntoInput = screen.getByLabelText('Asunto');\n    const mensajeInput = screen.getByLabelText('Mensaje');\n    \n    expect(asuntoInput.value).toBe('Consulta sobre fotografía con Fotógrafo Test');\n    expect(mensajeInput.value).toContain('Hola Fotógrafo Test, estoy interesado');\n    expect(mensajeInput.value).toContain('servicios de fotografía');\n  });\n  \n  it('debe mostrar/ocultar el panel de recomendaciones al hacer clic en el botón', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <SmartEmailComposer \n        provider={mockProvider}\n        templates={mockTemplates}\n        onSend={mockOnSend}\n      />\n    );\n    \n    // Por defecto el panel no debería estar visible\n    expect(screen.queryByTestId('recommendations-panel')).not.toBeInTheDocument();\n    \n    // Hacer clic en el botón de recomendaciones\n    const toggleButton = screen.getByRole('button', { name: /mostrar recomendaciones/i });\n    await user.click(toggleButton);\n    \n    // Verificar que ahora está visible\n    expect(screen.getByTestId('recommendations-panel')).toBeInTheDocument();\n    \n    // Hacer clic nuevamente para ocultar\n    await user.click(toggleButton);\n    \n    // Verificar que se ha ocultado\n    expect(screen.queryByTestId('recommendations-panel')).not.toBeInTheDocument();\n  });\n  \n  it('debe aplicar recomendación de asunto', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <SmartEmailComposer \n        provider={mockProvider}\n        templates={mockTemplates}\n        onSend={mockOnSend}\n      />\n    );\n    \n    // Mostrar panel de recomendaciones\n    const toggleButton = screen.getByRole('button', { name: /mostrar recomendaciones/i });\n    await user.click(toggleButton);\n    \n    // Aplicar recomendación de asunto\n    const applySubjectBtn = screen.getByTestId('apply-subject-recommendation');\n    await user.click(applySubjectBtn);\n    \n    // Verificar que se aplicó la recomendación\n    const asuntoInput = screen.getByLabelText('Asunto');\n    expect(asuntoInput.value).toBe('Consulta sobre fotografía para evento el próximamente');\n    \n    // Verificar que se muestra mensaje de feedback\n    expect(screen.getByText('Línea de asunto actualizada con la recomendación')).toBeInTheDocument();\n  });\n  \n  it('debe aplicar recomendación de plantilla', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <SmartEmailComposer \n        provider={mockProvider}\n        templates={mockTemplates}\n        onSend={mockOnSend}\n      />\n    );\n    \n    // Mostrar panel de recomendaciones\n    const toggleButton = screen.getByRole('button', { name: /mostrar recomendaciones/i });\n    await user.click(toggleButton);\n    \n    // Aplicar recomendación de plantilla\n    const applyTemplateBtn = screen.getByTestId('apply-template-recommendation');\n    await user.click(applyTemplateBtn);\n    \n    // Verificar que se muestra mensaje de feedback\n    expect(screen.getByText(/Plantilla \".*\" aplicada/)).toBeInTheDocument();\n  });\n  \n  it('debe programar el envío para un horario recomendado', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <SmartEmailComposer \n        provider={mockProvider}\n        templates={mockTemplates}\n        onSend={mockOnSend}\n      />\n    );\n    \n    // Mostrar panel de recomendaciones\n    const toggleButton = screen.getByRole('button', { name: /mostrar recomendaciones/i });\n    await user.click(toggleButton);\n    \n    // Aplicar recomendación de horario\n    const applyTimeBtn = screen.getByTestId('apply-time-recommendation');\n    await user.click(applyTimeBtn);\n    \n    // Verificar que se muestra mensaje de feedback\n    expect(screen.getByText(/Correo programado para mañana/)).toBeInTheDocument();\n    \n    // Verificar que hay una fecha programada\n    const programarInput = screen.getByLabelText(/datetime-local/i);\n    expect(programarInput.value).not.toBe('');\n  });\n  \n  it('debe mostrar error al intentar enviar sin asunto o mensaje', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <SmartEmailComposer \n        provider={mockProvider}\n        onSend={mockOnSend}\n      />\n    );\n    \n    // Limpiar campos\n    const asuntoInput = screen.getByLabelText('Asunto');\n    const mensajeInput = screen.getByLabelText('Mensaje');\n    \n    await user.clear(asuntoInput);\n    await user.clear(mensajeInput);\n    \n    // Intentar enviar\n    const enviarBtn = screen.getByRole('button', { name: /enviar/i });\n    await user.click(enviarBtn);\n    \n    // Verificar mensaje de error\n    expect(screen.getByText('Por favor, completa el asunto y el mensaje antes de enviar.')).toBeInTheDocument();\n    expect(mockOnSend).not.toHaveBeenCalled();\n  });\n  \n  it('debe enviar el correo con los datos correctos', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <SmartEmailComposer \n        provider={mockProvider}\n        searchQuery=\"fotografía boda\"\n        templates={mockTemplates}\n        onSend={mockOnSend}\n      />\n    );\n    \n    // Editar campos\n    const asuntoInput = screen.getByLabelText('Asunto');\n    const mensajeInput = screen.getByLabelText('Mensaje');\n    \n    await user.clear(asuntoInput);\n    await user.clear(mensajeInput);\n    \n    await user.type(asuntoInput, 'Asunto de prueba');\n    await user.type(mensajeInput, 'Mensaje de prueba');\n    \n    // Enviar correo\n    const enviarBtn = screen.getByRole('button', { name: /enviar/i });\n    await user.click(enviarBtn);\n    \n    // Verificar que se llamó a onSend con los datos correctos\n    expect(mockOnSend).toHaveBeenCalledTimes(1);\n    expect(mockOnSend).toHaveBeenCalledWith(\n      expect.objectContaining({\n        to: 'fotografo@test.com',\n        subject: 'Asunto de prueba',\n        message: 'Mensaje de prueba',\n        provider: mockProvider,\n        searchQuery: 'fotografía boda'\n      })\n    );\n  });\n  \n  it('debe cambiar entre programar y enviar según haya fecha programada', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <SmartEmailComposer \n        provider={mockProvider}\n        templates={mockTemplates}\n        onSend={mockOnSend}\n      />\n    );\n    \n    // Por defecto debería mostrar \"Enviar\"\n    let enviarBtn = screen.getByRole('button', { name: /enviar/i });\n    expect(enviarBtn).toBeInTheDocument();\n    \n    // Configurar una fecha programada\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    const dateString = tomorrow.toISOString().substring(0, 16);\n    \n    const programarInput = screen.getByLabelText(/datetime-local/i);\n    await user.type(programarInput, dateString);\n    \n    // Ahora debería mostrar \"Programar\"\n    enviarBtn = screen.getByRole('button', { name: /programar/i });\n    expect(enviarBtn).toBeInTheDocument();\n    \n    // Limpiar fecha\n    const limpiarBtn = screen.getByRole('button', { name: /limpiar/i });\n    await user.click(limpiarBtn);\n    \n    // Volver a mostrar \"Enviar\"\n    enviarBtn = screen.getByRole('button', { name: /enviar/i });\n    expect(enviarBtn).toBeInTheDocument();\n  });\n  \n  it('debe llamar a onCancel cuando se hace clic en cancelar', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <SmartEmailComposer \n        provider={mockProvider}\n        templates={mockTemplates}\n        onSend={mockOnSend}\n        onCancel={mockOnCancel}\n      />\n    );\n    \n    const cancelarBtn = screen.getByRole('button', { name: /cancelar/i });\n    await user.click(cancelarBtn);\n    \n    expect(mockOnCancel).toHaveBeenCalledTimes(1);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\components\\email\\EmailDetail.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\components\\email\\EmailInbox.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'mockFolders' is assigned a value but never used.","line":80,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport EmailInbox from '../../../components/email/EmailInbox';\nimport * as EmailService from '../../../services/EmailService';\nimport { useAuth } from '../../../hooks/useAuth';\n\n// Mocks necesarios\nvi.mock('../../../hooks/useAuth', () => ({\n  useAuth: vi.fn()\n}));\n\nvi.mock('../../../services/EmailService', () => ({\n  initEmailService: vi.fn(),\n  getMails: vi.fn(),\n  deleteMail: vi.fn(),\n  markAsRead: vi.fn(),\n  sendMail: vi.fn()\n}));\n\n// Mock para los componentes que no necesitamos probar en detalle\nvi.mock('../../../components/email/EmailDetail', () => ({\n  default: ({ email, onBack }) => (\n    <div data-testid=\"email-detail\">\n      {email && (\n        <>\n          <div data-testid=\"email-subject\">{email.subject}</div>\n          <button onClick={onBack}>Volver</button>\n        </>\n      )}\n    </div>\n  )\n}));\n\nvi.mock('../../../components/Card', () => ({\n  default: ({ children }) => <div data-testid=\"card\">{children}</div>\n}));\n\nvi.mock('../../../components/Button', () => ({\n  default: ({ children, onClick, ...props }) => (\n    <button onClick={onClick} {...props}>{children}</button>\n  )\n}));\n\ndescribe('EmailInbox Component', () => {\n  // Datos de ejemplo para las pruebas\n  const mockEmails = [\n    { \n      id: 'email-1', \n      subject: 'Asunto importante', \n      from: 'remitente@ejemplo.com',\n      to: 'usuario@lovenda.app',\n      date: '2025-07-10T10:30:00Z',\n      read: false,\n      folder: 'inbox',\n      attachments: []\n    },\n    { \n      id: 'email-2', \n      subject: 'Recordatorio reunión', \n      from: 'team@empresa.com',\n      to: 'usuario@lovenda.app',\n      date: '2025-07-09T08:15:00Z',\n      read: true,\n      folder: 'inbox',\n      attachments: [{ filename: 'acta.pdf' }]\n    },\n    { \n      id: 'email-3', \n      subject: 'Borrador enviado', \n      from: 'usuario@lovenda.app',\n      to: 'destinatario@empresa.com',\n      date: '2025-07-08T14:45:00Z',\n      read: true,\n      folder: 'sent',\n      attachments: []\n    }\n  ];\n\n  const mockFolders = [\n    { id: 'folder-1', name: 'Importante' },\n    { id: 'folder-2', name: 'Trabajo' }\n  ];\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Configurar el mock de autenticación\n    useAuth.mockReturnValue({\n      user: { uid: 'user123' },\n      profile: { \n        id: 'profile123',\n        email: 'usuario@lovenda.app',\n        name: 'Usuario Test' \n      }\n    });\n    \n    // Configurar el mock de servicio de email\n    EmailService.getMails.mockResolvedValue(mockEmails);\n    EmailService.initEmailService.mockReturnValue('usuario@lovenda.app');\n  });\n\n  // Prueba de carga inicial\n  it('carga y muestra correctamente la lista de emails', async () => {\n    render(<EmailInbox />);\n    \n    // Verificar que muestra el estado de carga inicialmente\n    expect(screen.getByText(/cargando/i)).toBeInTheDocument();\n    \n    // Esperar a que se muestren los emails\n    await waitFor(() => {\n      expect(screen.queryByText(/cargando/i)).not.toBeInTheDocument();\n      expect(EmailService.getMails).toHaveBeenCalledWith('inbox');\n    });\n    \n    // Verificar que los emails se muestran correctamente\n    expect(screen.getByText('Asunto importante')).toBeInTheDocument();\n    expect(screen.getByText('Recordatorio reunión')).toBeInTheDocument();\n  });\n\n  // Prueba de búsqueda de emails\n  it('filtra emails correctamente al buscar', async () => {\n    render(<EmailInbox />);\n    \n    // Esperar a que carguen los emails\n    await waitFor(() => {\n      expect(screen.queryByText(/cargando/i)).not.toBeInTheDocument();\n    });\n    \n    // Buscar un término específico\n    const searchInput = screen.getByPlaceholderText(/buscar/i);\n    fireEvent.change(searchInput, { target: { value: 'importante' } });\n    \n    // Verificar que solo se muestra el email que coincide\n    expect(screen.getByText('Asunto importante')).toBeInTheDocument();\n    expect(screen.queryByText('Recordatorio reunión')).not.toBeInTheDocument();\n  });\n\n  // Prueba de selección y acciones con emails\n  it('permite seleccionar emails y realizar acciones con ellos', async () => {\n    EmailService.deleteMail.mockResolvedValue(true);\n    \n    render(<EmailInbox />);\n    \n    // Esperar a que carguen los emails\n    await waitFor(() => {\n      expect(screen.queryByText(/cargando/i)).not.toBeInTheDocument();\n    });\n    \n    // Seleccionar un email\n    const emailCheckbox = screen.getAllByRole('checkbox')[1]; // El primero es \"Seleccionar todos\"\n    fireEvent.click(emailCheckbox);\n    \n    // Verificar que se ha seleccionado\n    expect(emailCheckbox).toBeChecked();\n    \n    // Eliminar el email seleccionado\n    const deleteButton = screen.getByText(/eliminar/i);\n    fireEvent.click(deleteButton);\n    \n    // Verificar que se llama a la función de eliminar\n    expect(EmailService.deleteMail).toHaveBeenCalledWith('email-1');\n    \n    // Verificar que se actualiza la lista\n    await waitFor(() => {\n      expect(EmailService.getMails).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  // Prueba de cambio entre carpetas\n  it('cambia correctamente entre carpetas', async () => {\n    render(<EmailInbox />);\n    \n    // Esperar a que carguen los emails\n    await waitFor(() => {\n      expect(screen.queryByText(/cargando/i)).not.toBeInTheDocument();\n    });\n    \n    // Cambiar a la carpeta Enviados\n    const sentFolder = screen.getByText(/enviados/i);\n    fireEvent.click(sentFolder);\n    \n    // Verificar que se llama a getMails con la carpeta correcta\n    await waitFor(() => {\n      expect(EmailService.getMails).toHaveBeenCalledWith('sent');\n    });\n  });\n\n  // Prueba de ordenación\n  it('cambia el orden de los emails al hacer clic en las cabeceras de columna', async () => {\n    render(<EmailInbox />);\n    \n    // Esperar a que carguen los emails\n    await waitFor(() => {\n      expect(screen.queryByText(/cargando/i)).not.toBeInTheDocument();\n    });\n    \n    // Ordenar por asunto\n    const subjectHeader = screen.getByRole('button', { name: /asunto/i });\n    fireEvent.click(subjectHeader);\n    \n    // Verificar el cambio de orden\n    const emailItems = screen.getAllByRole('row');\n    expect(emailItems[1]).toHaveTextContent('Asunto importante');\n    \n    // Cambiar el orden nuevamente\n    fireEvent.click(subjectHeader);\n    \n    // Verificar que el orden se invierte\n    expect(screen.getAllByRole('row')[1]).toHaveTextContent('Borrador enviado');\n  });\n\n  // Prueba de selección de email para ver detalles\n  it('muestra los detalles de un email al hacer clic en él', async () => {\n    render(<EmailInbox />);\n    \n    // Esperar a que carguen los emails\n    await waitFor(() => {\n      expect(screen.queryByText(/cargando/i)).not.toBeInTheDocument();\n    });\n    \n    // Hacer clic en un email\n    const emailRow = screen.getAllByRole('row')[1];\n    fireEvent.click(emailRow);\n    \n    // Verificar que se muestra el detalle\n    expect(screen.getByTestId('email-detail')).toBeInTheDocument();\n    expect(screen.getByTestId('email-subject')).toHaveTextContent('Asunto importante');\n    \n    // Volver a la lista\n    const backButton = screen.getByText('Volver');\n    fireEvent.click(backButton);\n    \n    // Verificar que se oculta el detalle\n    expect(screen.queryByTestId('email-subject')).not.toBeInTheDocument();\n  });\n\n  // Prueba de manejo de errores\n  it('muestra mensaje de error cuando falla la carga de emails', async () => {\n    // Simular un error en la carga\n    EmailService.getMails.mockRejectedValue(new Error('Error al cargar'));\n    \n    render(<EmailInbox />);\n    \n    // Verificar que se muestra el error\n    await waitFor(() => {\n      expect(screen.getByText(/no se pudieron cargar los emails/i)).toBeInTheDocument();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\components\\email\\FolderSelectionModal.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\components\\proveedores\\ai\\AIEmailModal.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isSent' is assigned a value but never used.","line":118,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport AIEmailModal from '../../../../components/proveedores/ai/AIEmailModal';\n\n// Mock del hook useAIProviderEmail\nvi.mock('../../../../hooks/useAIProviderEmail', () => ({\n  useAIProviderEmail: () => ({\n    userEmail: 'usuario.test@lovenda.com',\n    isSending: false,\n    error: null,\n    sendEmailFromAIResult: vi.fn().mockResolvedValue(true),\n    generateAISubject: () => 'Consulta sobre Fotografía para boda - Fotógrafo Prueba',\n    generateAIEmailBody: () => 'Cuerpo de email generado por IA'\n  })\n}));\n\n// Mock del componente Alert\nvi.mock('../../../../components/Alert', () => ({\n  default: ({ type, title, message, className, children, 'data-testid': testId }) => (\n    <div data-testid={testId || 'alert'} className={`alert-${type} ${className || ''}`}>\n      <div className=\"alert-title\">{title}</div>\n      <div className=\"alert-message\">{message}</div>\n      {children}\n    </div>\n  )\n}));\n\ndescribe('AIEmailModal', () => {\n  const mockOnClose = vi.fn();\n  \n  const defaultProps = {\n    isOpen: true,\n    onClose: mockOnClose,\n    aiResult: {\n      id: 1,\n      name: 'Fotógrafo Prueba',\n      service: 'Fotografía',\n      email: 'fotografo@prueba.com',\n      aiSummary: 'Este fotógrafo tiene un estilo moderno perfecto para bodas.'\n    },\n    searchQuery: 'fotógrafo estilo moderno para boda'\n  };\n  \n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n  \n  it('no renderiza nada cuando isOpen es false', () => {\n    const { container } = render(\n      <AIEmailModal {...defaultProps} isOpen={false} />\n    );\n    \n    expect(container.firstChild).toBeNull();\n  });\n  \n  it('renderiza el modal con la información correcta del proveedor', () => {\n    render(<AIEmailModal {...defaultProps} />);\n    \n    expect(screen.getByText(/Contactar a Fotógrafo Prueba/i)).toBeInTheDocument();\n    expect(screen.getByText(/usuario.test@lovenda.com/i)).toBeInTheDocument();\n    expect(screen.getByText(/fotografo@prueba.com/i)).toBeInTheDocument();\n    expect(screen.getByTestId('email-subject')).toHaveValue('Consulta sobre Fotografía para boda - Fotógrafo Prueba');\n    expect(screen.getByTestId('email-body')).toHaveValue('Cuerpo de email generado por IA');\n  });\n  \n  it('llama a onClose cuando se hace clic en el botón cerrar', () => {\n    render(<AIEmailModal {...defaultProps} />);\n    \n    fireEvent.click(screen.getByTestId('close-modal-btn'));\n    expect(mockOnClose).toHaveBeenCalledTimes(1);\n  });\n  \n  it('permite editar el asunto y cuerpo del email', () => {\n    render(<AIEmailModal {...defaultProps} />);\n    \n    const subjectInput = screen.getByTestId('email-subject');\n    const bodyInput = screen.getByTestId('email-body');\n    \n    fireEvent.change(subjectInput, { target: { value: 'Asunto modificado' } });\n    fireEvent.change(bodyInput, { target: { value: 'Contenido modificado' } });\n    \n    expect(subjectInput).toHaveValue('Asunto modificado');\n    expect(bodyInput).toHaveValue('Contenido modificado');\n  });\n  \n  it('envía el formulario correctamente y muestra mensaje de éxito', async () => {\n    // Mock de useAIProviderEmail con control de isSending y success\n    let isSendingState = false;\n    let setIsSent = null;\n    \n    vi.mock('../../../../hooks/useAIProviderEmail', () => ({\n      useAIProviderEmail: () => {\n        const sendEmailMock = vi.fn().mockImplementation(async () => {\n          isSendingState = true;\n          // Simular una pequeña demora para probar el estado de envío\n          await new Promise(resolve => setTimeout(resolve, 10));\n          isSendingState = false;\n          if (setIsSent) setIsSent(true);\n          return true;\n        });\n        \n        return {\n          userEmail: 'usuario.test@lovenda.com',\n          isSending: isSendingState,\n          error: null,\n          sendEmailFromAIResult: sendEmailMock,\n          generateAISubject: () => 'Consulta sobre Fotografía para boda - Fotógrafo Prueba',\n          generateAIEmailBody: () => 'Cuerpo de email generado por IA'\n        };\n      }\n    }), { virtual: true });\n    \n    // Modificar el componente para capturar el estado de isSent\n    vi.mock('../../../../components/proveedores/ai/AIEmailModal', () => {\n      const ActualComponent = vi.requireActual('../../../../components/proveedores/ai/AIEmailModal').default;\n      return {\n        default: (props) => {\n          const [isSent, setIsSentState] = vi.importActual('react').useState(false);\n          setIsSent = setIsSentState;\n          return <ActualComponent {...props} />;\n        }\n      };\n    }, { virtual: true });\n    \n    render(<AIEmailModal {...defaultProps} />);\n    \n    const sendButton = screen.getByTestId('send-email-btn');\n    fireEvent.click(sendButton);\n    \n    // Verificar que el formulario se envía correctamente\n    await waitFor(() => {\n      expect(screen.getByTestId('success-alert')).toBeInTheDocument();\n    });\n    \n    // Verificar que el modal se cierra después de un tiempo\n    await waitFor(() => {\n      expect(mockOnClose).toHaveBeenCalledTimes(1);\n    }, { timeout: 2500 });\n  });\n  \n  it('muestra error cuando falla el envío de email', async () => {\n    // Mock de useAIProviderEmail con error\n    vi.mock('../../../../hooks/useAIProviderEmail', () => ({\n      useAIProviderEmail: () => ({\n        userEmail: 'usuario.test@lovenda.com',\n        isSending: false,\n        error: 'Error al enviar el email',\n        sendEmailFromAIResult: vi.fn().mockResolvedValue(false),\n        generateAISubject: () => 'Consulta sobre Fotografía para boda - Fotógrafo Prueba',\n        generateAIEmailBody: () => 'Cuerpo de email generado por IA'\n      })\n    }), { virtual: true });\n    \n    render(<AIEmailModal {...defaultProps} />);\n    \n    const sendButton = screen.getByTestId('send-email-btn');\n    fireEvent.click(sendButton);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('error-alert')).toBeInTheDocument();\n      expect(screen.getByText(/Error al enviar el email/i)).toBeInTheDocument();\n    });\n  });\n  \n  it('muestra la información de AI sobre el proveedor', () => {\n    render(<AIEmailModal {...defaultProps} />);\n    \n    expect(screen.getByText(/Este fotógrafo tiene un estilo moderno perfecto para bodas./i)).toBeInTheDocument();\n    expect(screen.getByText(/¿Por qué este proveedor?/i)).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\coverage\\coverage-report.js","messages":[{"ruleId":"no-const-assign","severity":2,"message":"'total' is constant.","line":176,"column":7,"nodeType":"Identifier","messageId":"const","endLine":176,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Script para generar y analizar informes de cobertura de código\n * Este script puede ejecutarse después de las pruebas para analizar la cobertura\n */\n\n// Importamos el módulo fs para acceso a archivos\nconst fs = require('fs');\nconst path = require('path');\n\n// Función para analizar los informes de cobertura\nfunction analyzeCoverage() {\n  console.log('Analizando informes de cobertura...');\n  \n  try {\n    // Ruta al informe JSON de cobertura (ajustar según la configuración de Vitest/Jest)\n    // Intentar localizar coverage-final.json automáticamente\n    const coverageRoot = path.join(__dirname, '../../coverage');\n    let coverageFile = path.join(coverageRoot, 'coverage-final.json');\n\n    if (!fs.existsSync(coverageFile)) {\n      // Buscar en subdirectorios como v8/, istanbul/, etc.\n      const subdirs = fs.existsSync(coverageRoot)\n        ? fs.readdirSync(coverageRoot).filter((entry) => fs.statSync(path.join(coverageRoot, entry)).isDirectory())\n        : [];\n      for (const dir of subdirs) {\n        const candidate = path.join(coverageRoot, dir, 'coverage-final.json');\n        if (fs.existsSync(candidate)) {\n          coverageFile = candidate;\n          break;\n        }\n      }\n    }\n\n    // Verificar si finalmente se encontró el archivo\n    if (!fs.existsSync(coverageFile)) {\n      console.error('No se encontró coverage-final.json. Asegúrate de ejecutar \"npm run test:coverage\" y que la configuración de Vitest utiliza provider v8.');\n      return;\n    }\n    \n    // Leer y parsear el informe\n    const coverageData = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));\n    \n    // Variables para estadísticas\n    let totalStatements = 0;\n    let coveredStatements = 0;\n    let totalBranches = 0;\n    let coveredBranches = 0;\n    let totalFunctions = 0;\n    let coveredFunctions = 0;\n    let totalLines = 0;\n    let coveredLines = 0;\n    \n    // Componentes/archivos con baja cobertura\n    const lowCoverageFiles = [];\n    const untested = [];\n    \n    // Analizar cada archivo\n    Object.keys(coverageData).forEach(filePath => {\n      const fileData = coverageData[filePath];\n      \n      // Extraer métricas de este archivo\n      const statements = countCoverage(fileData.s);\n      const branches = countCoverage(fileData.b);\n      const functions = countCoverage(fileData.f);\n      const lines = countCoverage(fileData.l);\n      \n      // Calcular porcentajes\n      const statementPct = calculatePercentage(statements.covered, statements.total);\n      const branchPct = calculatePercentage(branches.covered, branches.total);\n      const functionPct = calculatePercentage(functions.covered, functions.total);\n      const linePct = calculatePercentage(lines.covered, lines.total);\n      \n      // Sumar a los totales\n      totalStatements += statements.total;\n      coveredStatements += statements.covered;\n      totalBranches += branches.total;\n      coveredBranches += branches.covered;\n      totalFunctions += functions.total;\n      coveredFunctions += functions.covered;\n      totalLines += lines.total;\n      coveredLines += lines.covered;\n      \n      // Extraer nombre del archivo\n      const fileName = path.basename(filePath);\n      \n      // Verificar si tiene baja cobertura (menos del 70%)\n      if ((statementPct + branchPct + functionPct + linePct) / 4 < 70) {\n        lowCoverageFiles.push({\n          file: fileName,\n          path: filePath,\n          statementPct,\n          branchPct,\n          functionPct,\n          linePct,\n          overallPct: (statementPct + branchPct + functionPct + linePct) / 4\n        });\n      }\n      \n      // Verificar si no tiene pruebas\n      if (statements.covered === 0) {\n        untested.push(fileName);\n      }\n    });\n    \n    // Calcular porcentajes totales\n    const overallStatementPct = calculatePercentage(coveredStatements, totalStatements);\n    const overallBranchPct = calculatePercentage(coveredBranches, totalBranches);\n    const overallFunctionPct = calculatePercentage(coveredFunctions, totalFunctions);\n    const overallLinePct = calculatePercentage(coveredLines, totalLines);\n    \n    // Generar informe\n    console.log('\\n==================== INFORME DE COBERTURA ====================');\n    console.log(`Cobertura total: ${((overallStatementPct + overallBranchPct + overallFunctionPct + overallLinePct) / 4).toFixed(2)}%`);\n    console.log(`- Statements: ${overallStatementPct.toFixed(2)}% (${coveredStatements}/${totalStatements})`);\n    console.log(`- Branches: ${overallBranchPct.toFixed(2)}% (${coveredBranches}/${totalBranches})`);\n    console.log(`- Functions: ${overallFunctionPct.toFixed(2)}% (${coveredFunctions}/${totalFunctions})`);\n    console.log(`- Lines: ${overallLinePct.toFixed(2)}% (${coveredLines}/${totalLines})`);\n    \n    // Archivos con baja cobertura\n    console.log('\\nArchivos con baja cobertura:');\n    if (lowCoverageFiles.length === 0) {\n      console.log('- Ninguno (todos tienen al menos 70% de cobertura)');\n    } else {\n      lowCoverageFiles.sort((a, b) => a.overallPct - b.overallPct);\n      lowCoverageFiles.forEach(file => {\n        console.log(`- ${file.file}: ${file.overallPct.toFixed(2)}%`);\n      });\n    }\n    \n    // Archivos sin pruebas\n    console.log('\\nArchivos sin pruebas:');\n    if (untested.length === 0) {\n      console.log('- Ninguno (todos los archivos tienen alguna cobertura)');\n    } else {\n      untested.forEach(file => {\n        console.log(`- ${file}`);\n      });\n    }\n    \n    // Sugerencias de mejora\n    console.log('\\nSugerencias de mejora:');\n    if (lowCoverageFiles.length > 0) {\n      console.log('1. Priorizar la implementación de pruebas para estos archivos con baja cobertura:');\n      lowCoverageFiles.slice(0, 5).forEach(file => {\n        console.log(`   - ${file.file}`);\n      });\n    }\n    \n    if (overallBranchPct < 70) {\n      console.log('2. Enfocar en mejorar la cobertura de ramas (condicionales, switch, etc.)');\n    }\n    \n    console.log('\\n===============================================================');\n    \n  } catch (error) {\n    console.error('Error al analizar la cobertura:', error);\n  }\n}\n\n// Función auxiliar para contar elementos cubiertos\nfunction countCoverage(data) {\n  if (!data) return { total: 0, covered: 0 };\n  \n  const total = Object.keys(data).length;\n  let covered = 0;\n  \n  // Para branches (que son arrays)\n  if (Array.isArray(data[Object.keys(data)[0]])) {\n    for (const key in data) {\n      const branches = data[key];\n      let branchCovered = 0;\n      for (let i = 0; i < branches.length; i++) {\n        if (branches[i] > 0) branchCovered++;\n      }\n      covered += branchCovered;\n      total += branches.length - 1; // Ajustar el total para branches\n    }\n  } \n  // Para otros tipos (statements, functions, lines)\n  else {\n    for (const key in data) {\n      if (data[key] > 0) covered++;\n    }\n  }\n  \n  return { total, covered };\n}\n\n// Función auxiliar para calcular porcentaje\nfunction calculatePercentage(covered, total) {\n  return total === 0 ? 100 : (covered / total) * 100;\n}\n\n// Ejecutar el análisis\nanalyzeCoverage();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\e2e\\AdvancedEmailWorkflows.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'within' is defined but never used.","line":2,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":52},{"ruleId":"no-unused-vars","severity":2,"message":"'TagService' is defined but never used.","line":16,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'FolderService' is defined but never used.","line":17,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'mockProfile' is assigned a value but never used.","line":90,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'email' is defined but never used.","line":198,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":198,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":204,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":204,"endColumn":57},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":205,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":55},{"ruleId":"no-unused-vars","severity":2,"message":"'folder' is defined but never used.","line":205,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":63},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":206,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":206,"endColumn":57},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":207,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":207,"endColumn":56},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used.","line":207,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":207,"endColumn":65},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":210,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'to' is defined but never used.","line":210,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":62},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used.","line":210,"column":64,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":71}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { MemoryRouter, Routes, Route } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\n\n// Componentes principales\nimport EmailInbox from '../../components/email/EmailInbox';\nimport EmailDetail from '../../components/email/EmailDetail';\nimport ComposeEmail from '../../components/email/ComposeEmail';\nimport EmailSettings from '../../components/email/EmailSettings';\nimport EmailStats from '../../components/email/EmailStats';\n\n// Servicios\nimport * as EmailService from '../../services/EmailService';\nimport * as TagService from '../../services/TagService';\nimport * as FolderService from '../../services/FolderService';\nimport * as StatsService from '../../services/StatsService';\n\n// Mock para localStorage\nconst localStorageMock = (() => {\n  let store = {};\n  return {\n    getItem: vi.fn(key => store[key] || null),\n    setItem: vi.fn((key, value) => {\n      store[key] = value.toString();\n    }),\n    clear: vi.fn(() => {\n      store = {};\n    }),\n    removeItem: vi.fn(key => {\n      delete store[key];\n    }),\n    getAll: () => store\n  };\n})();\n\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock\n});\n\n// Mock para fetch global\nglobal.fetch = vi.fn();\n\n// Mock para los servicios\nvi.mock('../../services/EmailService');\nvi.mock('../../services/TagService');\nvi.mock('../../services/FolderService');\nvi.mock('../../services/StatsService');\n\n// Mock para File y FileReader\nglobal.File = class MockFile {\n  constructor(bits, name, options) {\n    this.name = name;\n    this.size = bits.length;\n    this.type = options?.type || '';\n  }\n};\n\nglobal.FileReader = class MockFileReader {\n  constructor() {\n    this.result = null;\n  }\n  readAsDataURL() {\n    this.result = 'data:text/plain;base64,dGVzdCBmaWxl';\n    setTimeout(() => this.onload(), 50);\n  }\n};\n\n// Componente para envolver los tests y proporcionar el contexto necesario\nconst TestWrapper = ({ children, initialRoute = '/' }) => {\n  return (\n    <MemoryRouter initialEntries={[initialRoute]}>\n      <ToastContainer position=\"top-right\" autoClose={2000} />\n      <Routes>\n        <Route path=\"/\" element={<EmailInbox />} />\n        <Route path=\"/detail/:id\" element={<EmailDetail />} />\n        <Route path=\"/compose\" element={<ComposeEmail />} />\n        <Route path=\"/compose/:action/:id\" element={<ComposeEmail />} />\n        <Route path=\"/settings\" element={<EmailSettings />} />\n        <Route path=\"/stats\" element={<EmailStats />} />\n        {children}\n      </Routes>\n    </MemoryRouter>\n  );\n};\n\ndescribe('Flujos avanzados del sistema de correo (E2E)', () => {\n  // Datos de ejemplo\n  const mockProfile = {\n    id: 'profile123',\n    userId: 'user123',\n    brideFirstName: 'María',\n    brideLastName: 'García',\n  };\n\n  const mockEmails = [\n    {\n      id: 'email1',\n      from: 'remitente@example.com',\n      to: 'maria.garcia@lovenda.com',\n      subject: 'Presupuesto fotografía',\n      body: '<p>Hola María, te envío el presupuesto para las fotos de la boda.</p>',\n      date: '2025-07-12T15:30:00Z',\n      folder: 'inbox',\n      read: false,\n      attachments: []\n    },\n    {\n      id: 'email2',\n      from: 'maria.garcia@lovenda.com',\n      to: 'florista@example.com',\n      subject: 'Consulta sobre centros de mesa',\n      body: '<p>Hola, estoy interesada en vuestros servicios para mi boda.</p>',\n      date: '2025-07-11T10:15:00Z',\n      folder: 'sent',\n      read: true,\n      attachments: []\n    },\n    {\n      id: 'email3',\n      from: 'dj@example.com',\n      to: 'maria.garcia@lovenda.com',\n      subject: 'Presupuesto DJ y sonido',\n      body: '<p>Buenos días María, adjunto encontrarás nuestro presupuesto.</p>',\n      date: '2025-07-10T09:45:00Z',\n      folder: 'inbox',\n      read: true,\n      attachments: [\n        { id: 'att1', name: 'presupuesto.pdf', size: 1024000, type: 'application/pdf' }\n      ]\n    },\n    {\n      id: 'draft1',\n      from: 'maria.garcia@lovenda.com',\n      to: 'catering@example.com',\n      subject: 'Consulta menús',\n      body: '<p>Borrador de consulta para catering</p>',\n      date: '2025-07-13T08:20:00Z',\n      folder: 'drafts',\n      draft: true,\n      attachments: []\n    }\n  ];\n\n  const mockStats = {\n    lastUpdated: '2025-07-13T17:30:00Z',\n    emailCounts: {\n      total: 250,\n      inbox: 120,\n      sent: 100,\n      trash: 20,\n      unread: 5\n    },\n    activityMetrics: {\n      daily: [5, 7, 3, 8, 4, 6, 2],\n      weekly: [25, 30, 28, 32],\n      monthly: [95, 120, 85]\n    },\n    folderDistribution: {\n      labels: ['Bandeja de entrada', 'Enviados', 'Papelera', 'Proveedores', 'Ideas de boda'],\n      data: [120, 100, 20, 15, 5]\n    },\n    tagDistribution: {\n      labels: ['Importante', 'Fotografía', 'Catering', 'Música'],\n      data: [45, 20, 15, 10],\n      colors: ['#e53e3e', '#3182ce', '#38a169', '#805ad5']\n    },\n    contactAnalysis: {\n      topContacts: [\n        { name: 'Fotógrafo', email: 'fotografo@example.com', count: 25 },\n        { name: 'Florista', email: 'florista@example.com', count: 18 },\n        { name: 'Catering', email: 'catering@example.com', count: 15 }\n      ]\n    },\n    responseMetrics: {\n      averageResponseTime: 3.5, // horas\n      responseRate: 0.85 // 85%\n    }\n  };\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    localStorage.clear();\n    \n    // Configurar mocks para los servicios\n    EmailService.initEmailService.mockReturnValue('maria.garcia@lovenda.com');\n    EmailService.getMails.mockImplementation(async (folder) => {\n      if (folder === 'drafts') {\n        return [mockEmails[3]];\n      }\n      return mockEmails.filter(email => email.folder === folder);\n    });\n    EmailService.getEmail.mockImplementation(async (id) => {\n      return mockEmails.find(email => email.id === id) || null;\n    });\n    EmailService.getUnreadCount.mockResolvedValue(1);\n    EmailService.sendMail.mockImplementation(async (email) => {\n      return { success: true, id: 'new-email-id' };\n    });\n    EmailService.saveDraft.mockImplementation(async (draft) => {\n      return { success: true, id: draft.id || 'new-draft-id' };\n    });\n    EmailService.markAsRead.mockImplementation(async (id) => true);\n    EmailService.moveMail.mockImplementation(async (id, folder) => true);\n    EmailService.deleteMail.mockImplementation(async (id) => true);\n    EmailService.replyMail.mockImplementation(async (id, content) => {\n      return { success: true, id: 'reply-email-id' };\n    });\n    EmailService.forwardMail.mockImplementation(async (id, to, content) => {\n      return { success: true, id: 'forward-email-id' };\n    });\n    \n    StatsService.generateUserStats.mockResolvedValue(mockStats);\n    StatsService.getUserStats.mockReturnValue(mockStats);\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('Flujo de respuesta a correos', () => {\n    it('permite responder a un correo existente', async () => {\n      render(<TestWrapper initialRoute=\"/detail/email1\" />);\n      \n      // Verificar que se carga el detalle del correo\n      await waitFor(() => {\n        expect(screen.getByText('Presupuesto fotografía')).toBeInTheDocument();\n      });\n      \n      // Hacer clic en el botón de responder\n      fireEvent.click(screen.getByText('Responder'));\n      \n      // Verificar que se abre el formulario de respuesta con datos prellenados\n      await waitFor(() => {\n        // El destinatario debe ser el remitente original\n        const toField = screen.getByPlaceholderText('Para:');\n        expect(toField).toHaveValue('remitente@example.com');\n        \n        // El asunto debe incluir \"Re:\"\n        const subjectField = screen.getByPlaceholderText('Asunto:');\n        expect(subjectField).toHaveValue('Re: Presupuesto fotografía');\n      });\n      \n      // Escribir el contenido de la respuesta\n      const editorElement = screen.getByTestId('email-body-editor');\n      fireEvent.input(editorElement, { \n        target: { innerHTML: '<p>Gracias por el presupuesto. Tengo algunas dudas adicionales.</p>' } \n      });\n      \n      // Enviar la respuesta\n      fireEvent.click(screen.getByText('Enviar'));\n      \n      // Verificar que se llamó a la función de respuesta\n      await waitFor(() => {\n        expect(EmailService.replyMail).toHaveBeenCalledWith(\n          'email1',\n          expect.objectContaining({\n            to: 'remitente@example.com',\n            subject: 'Re: Presupuesto fotografía',\n            body: expect.stringContaining('Gracias por el presupuesto')\n          })\n        );\n        \n        // Verificar que se muestra una notificación de éxito\n        expect(screen.getByText(/respuesta enviada|mensaje enviado/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Flujo de reenvío de correos', () => {\n    it('permite reenviar un correo a otro destinatario', async () => {\n      render(<TestWrapper initialRoute=\"/detail/email1\" />);\n      \n      // Verificar que se carga el detalle del correo\n      await waitFor(() => {\n        expect(screen.getByText('Presupuesto fotografía')).toBeInTheDocument();\n      });\n      \n      // Hacer clic en el botón de reenviar\n      fireEvent.click(screen.getByText('Reenviar'));\n      \n      // Verificar que se abre el formulario de reenvío con datos prellenados\n      await waitFor(() => {\n        // El destinatario debe estar vacío\n        const toField = screen.getByPlaceholderText('Para:');\n        expect(toField).toHaveValue('');\n        \n        // El asunto debe incluir \"Fwd:\"\n        const subjectField = screen.getByPlaceholderText('Asunto:');\n        expect(subjectField).toHaveValue('Fwd: Presupuesto fotografía');\n        \n        // El cuerpo debe contener el correo original\n        const editorElement = screen.getByTestId('email-body-editor');\n        expect(editorElement.innerHTML).toContain('Hola María');\n      });\n      \n      // Completar el destinatario\n      const user = userEvent.setup();\n      await user.type(screen.getByPlaceholderText('Para:'), 'familiar@example.com');\n      \n      // Añadir un comentario al reenvío\n      const editorElement = screen.getByTestId('email-body-editor');\n      const originalContent = editorElement.innerHTML;\n      fireEvent.input(editorElement, { \n        target: { innerHTML: `<p>Mira este presupuesto que me enviaron.</p>${originalContent}` } \n      });\n      \n      // Enviar el reenvío\n      fireEvent.click(screen.getByText('Enviar'));\n      \n      // Verificar que se llamó a la función de reenvío\n      await waitFor(() => {\n        expect(EmailService.forwardMail).toHaveBeenCalledWith(\n          'email1',\n          'familiar@example.com',\n          expect.objectContaining({\n            subject: 'Fwd: Presupuesto fotografía',\n            body: expect.stringContaining('Mira este presupuesto')\n          })\n        );\n        \n        // Verificar que se muestra una notificación de éxito\n        expect(screen.getByText(/correo reenviado|mensaje reenviado/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Flujo de gestión de borradores', () => {\n    it('permite guardar un borrador y editarlo posteriormente', async () => {\n      // Renderizar el componente de composición\n      render(<TestWrapper initialRoute=\"/compose\" />);\n      \n      // Verificar que se muestra el formulario de composición\n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Para:')).toBeInTheDocument();\n      });\n      \n      // Rellenar parcialmente el formulario\n      const user = userEvent.setup();\n      await user.type(screen.getByPlaceholderText('Para:'), 'destinatario@example.com');\n      await user.type(screen.getByPlaceholderText('Asunto:'), 'Borrador importante');\n      \n      // Escribir en el editor\n      const editorElement = screen.getByTestId('email-body-editor');\n      fireEvent.input(editorElement, { \n        target: { innerHTML: '<p>Este es un borrador que completaré más tarde.</p>' } \n      });\n      \n      // Guardar como borrador\n      fireEvent.click(screen.getByText('Guardar borrador'));\n      \n      // Verificar que se llamó a la función de guardar borrador\n      await waitFor(() => {\n        expect(EmailService.saveDraft).toHaveBeenCalledWith(expect.objectContaining({\n          to: 'destinatario@example.com',\n          subject: 'Borrador importante',\n          body: '<p>Este es un borrador que completaré más tarde.</p>'\n        }));\n        \n        // Verificar que se muestra una notificación de éxito\n        expect(screen.getByText(/borrador guardado/i)).toBeInTheDocument();\n      });\n      \n      // Simular navegación a la bandeja de entrada\n      render(<TestWrapper />);\n      \n      // Ir a la carpeta de borradores\n      fireEvent.click(screen.getByText('Borradores'));\n      \n      // Verificar que se muestra el borrador\n      await waitFor(() => {\n        expect(screen.getByText('Consulta menús')).toBeInTheDocument();\n      });\n      \n      // Abrir el borrador\n      fireEvent.click(screen.getByText('Consulta menús'));\n      \n      // Verificar que se abre el formulario de edición con los datos del borrador\n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Para:')).toHaveValue('catering@example.com');\n        expect(screen.getByPlaceholderText('Asunto:')).toHaveValue('Consulta menús');\n        \n        const editorElement = screen.getByTestId('email-body-editor');\n        expect(editorElement.innerHTML).toContain('Borrador de consulta para catering');\n      });\n      \n      // Completar el borrador y enviar\n      const editorElement2 = screen.getByTestId('email-body-editor');\n      fireEvent.input(editorElement2, { \n        target: { innerHTML: '<p>Quisiera información sobre menús para 100 invitados.</p>' } \n      });\n      \n      fireEvent.click(screen.getByText('Enviar'));\n      \n      // Verificar que se envió el correo\n      await waitFor(() => {\n        expect(EmailService.sendMail).toHaveBeenCalledWith(expect.objectContaining({\n          id: 'draft1',\n          to: 'catering@example.com',\n          subject: 'Consulta menús'\n        }));\n      });\n    });\n  });\n\n  describe('Flujo de eliminación de correos', () => {\n    it('permite eliminar correos (mover a papelera y eliminar permanentemente)', async () => {\n      // Renderizar el detalle de un correo\n      render(<TestWrapper initialRoute=\"/detail/email1\" />);\n      \n      // Verificar que se carga el detalle del correo\n      await waitFor(() => {\n        expect(screen.getByText('Presupuesto fotografía')).toBeInTheDocument();\n      });\n      \n      // Eliminar el correo (mover a papelera)\n      fireEvent.click(screen.getByText('Eliminar'));\n      \n      // Verificar que se llamó a la función para mover a papelera\n      await waitFor(() => {\n        expect(EmailService.moveMail).toHaveBeenCalledWith('email1', 'trash');\n        \n        // Verificar que se muestra una notificación\n        expect(screen.getByText(/correo eliminado|movido a papelera/i)).toBeInTheDocument();\n      });\n      \n      // Simular navegación a la papelera\n      render(<TestWrapper initialRoute=\"/\" />);\n      \n      // Ir a la papelera\n      fireEvent.click(screen.getByText('Papelera'));\n      \n      // Verificar que podemos eliminar permanentemente\n      const emailInTrash = mockEmails[0]; // Ahora está en papelera según la simulación\n      EmailService.getMails.mockResolvedValueOnce([{...emailInTrash, folder: 'trash'}]);\n      \n      await waitFor(() => {\n        const trashAction = screen.getAllByText('Eliminar permanentemente')[0];\n        fireEvent.click(trashAction);\n      });\n      \n      // Confirmar eliminación permanente\n      fireEvent.click(screen.getByText('Confirmar'));\n      \n      // Verificar que se llamó a la función de eliminación permanente\n      await waitFor(() => {\n        expect(EmailService.deleteMail).toHaveBeenCalledWith('email1');\n        \n        // Verificar que se muestra una notificación\n        expect(screen.getByText(/eliminado permanentemente/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Flujo de gestión de adjuntos', () => {\n    it('permite ver y descargar adjuntos de un correo', async () => {\n      // Renderizar el detalle de un correo con adjuntos\n      render(<TestWrapper initialRoute=\"/detail/email3\" />);\n      \n      // Verificar que se carga el detalle del correo con su adjunto\n      await waitFor(() => {\n        expect(screen.getByText('Presupuesto DJ y sonido')).toBeInTheDocument();\n        expect(screen.getByText('presupuesto.pdf')).toBeInTheDocument();\n      });\n      \n      // Hacer clic para descargar el adjunto\n      window.URL.createObjectURL = vi.fn().mockReturnValue('blob:adjunto');\n      window.URL.revokeObjectURL = vi.fn();\n      \n      // Mock para document.createElement y click\n      const mockAnchor = {\n        click: vi.fn(),\n        setAttribute: vi.fn(),\n        style: {}\n      };\n      \n      const originalCreateElement = document.createElement;\n      document.createElement = vi.fn().mockImplementation((tag) => {\n        if (tag === 'a') {\n          return mockAnchor;\n        }\n        return originalCreateElement.call(document, tag);\n      });\n      \n      // Simular descarga\n      fireEvent.click(screen.getByText('Descargar'));\n      \n      // Verificar que se inició la descarga\n      await waitFor(() => {\n        expect(mockAnchor.setAttribute).toHaveBeenCalledWith('download', 'presupuesto.pdf');\n        expect(mockAnchor.click).toHaveBeenCalled();\n      });\n      \n      // Restaurar el mock\n      document.createElement = originalCreateElement;\n    });\n    \n    it('permite adjuntar archivos al componer un correo', async () => {\n      render(<TestWrapper initialRoute=\"/compose\" />);\n      \n      // Verificar que se muestra el formulario de composición\n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Para:')).toBeInTheDocument();\n      });\n      \n      // Simular selección de archivo\n      const file = new File(['contenido de prueba'], 'test.docx', { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\n      const input = screen.getByLabelText('Adjuntar archivo');\n      \n      await fireEvent.change(input, { target: { files: [file] } });\n      \n      // Verificar que se muestra el adjunto\n      await waitFor(() => {\n        expect(screen.getByText('test.docx')).toBeInTheDocument();\n      });\n      \n      // Rellenar el resto del formulario\n      const user = userEvent.setup();\n      await user.type(screen.getByPlaceholderText('Para:'), 'destinatario@example.com');\n      await user.type(screen.getByPlaceholderText('Asunto:'), 'Correo con adjunto');\n      \n      const editorElement = screen.getByTestId('email-body-editor');\n      fireEvent.input(editorElement, { \n        target: { innerHTML: '<p>Adjunto documento solicitado.</p>' } \n      });\n      \n      // Enviar el correo\n      fireEvent.click(screen.getByText('Enviar'));\n      \n      // Verificar que se llamó a la función de envío con el adjunto\n      await waitFor(() => {\n        expect(EmailService.sendMail).toHaveBeenCalledWith(expect.objectContaining({\n          to: 'destinatario@example.com',\n          subject: 'Correo con adjunto',\n          attachments: [expect.objectContaining({ name: 'test.docx' })]\n        }));\n      });\n    });\n  });\n\n  describe('Flujo de visualización de estadísticas', () => {\n    it('permite ver estadísticas y métricas de uso del correo', async () => {\n      render(<TestWrapper initialRoute=\"/stats\" />);\n      \n      // Verificar que se cargan las estadísticas\n      await waitFor(() => {\n        expect(screen.getByText('Estadísticas de correo')).toBeInTheDocument();\n        expect(StatsService.generateUserStats).toHaveBeenCalled();\n      });\n      \n      // Verificar que se muestran las métricas principales\n      expect(screen.getByText('250')).toBeInTheDocument(); // Total de correos\n      expect(screen.getByText('5')).toBeInTheDocument(); // Correos sin leer\n      \n      // Verificar que se muestran los gráficos (al menos sus títulos)\n      expect(screen.getByText('Actividad reciente')).toBeInTheDocument();\n      expect(screen.getByText('Distribución por carpetas')).toBeInTheDocument();\n      expect(screen.getByText('Distribución por etiquetas')).toBeInTheDocument();\n      \n      // Verificar que se muestran los contactos frecuentes\n      expect(screen.getByText('Contactos frecuentes')).toBeInTheDocument();\n      expect(screen.getByText('Fotógrafo')).toBeInTheDocument();\n      expect(screen.getByText('25')).toBeInTheDocument(); // Contador del contacto más frecuente\n      \n      // Verificar que se muestran las métricas de respuesta\n      expect(screen.getByText('Tiempo medio de respuesta')).toBeInTheDocument();\n      expect(screen.getByText('3.5h')).toBeInTheDocument(); // Tiempo medio\n      expect(screen.getByText('85%')).toBeInTheDocument(); // Tasa de respuesta\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\e2e\\EmailWorkflows.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'BrowserRouter' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'FolderSelectionModal' is defined but never used.","line":12,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'email' is defined but never used.","line":120,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":123,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":57},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":124,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":55},{"ruleId":"no-unused-vars","severity":2,"message":"'folder' is defined but never used.","line":124,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":63},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":125,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":57},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":130,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":56},{"ruleId":"no-unused-vars","severity":2,"message":"'emailId' is defined but never used.","line":130,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":65},{"ruleId":"no-unused-vars","severity":2,"message":"'tagId' is defined but never used.","line":130,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":72},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":131,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":61},{"ruleId":"no-unused-vars","severity":2,"message":"'emailId' is defined but never used.","line":131,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":70},{"ruleId":"no-unused-vars","severity":2,"message":"'tagId' is defined but never used.","line":131,"column":72,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":77}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { BrowserRouter, MemoryRouter, Routes, Route } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\n\n// Componentes principales\nimport EmailInbox from '../../components/email/EmailInbox';\nimport EmailDetail from '../../components/email/EmailDetail';\nimport ComposeEmail from '../../components/email/ComposeEmail';\nimport EmailSettings from '../../components/email/EmailSettings';\nimport FolderSelectionModal from '../../components/email/FolderSelectionModal';\n\n// Servicios\nimport * as EmailService from '../../services/EmailService';\nimport * as TagService from '../../services/TagService';\nimport * as FolderService from '../../services/FolderService';\n\n// Mock para localStorage\nconst localStorageMock = (() => {\n  let store = {};\n  return {\n    getItem: vi.fn(key => store[key] || null),\n    setItem: vi.fn((key, value) => {\n      store[key] = value.toString();\n    }),\n    clear: vi.fn(() => {\n      store = {};\n    }),\n    removeItem: vi.fn(key => {\n      delete store[key];\n    }),\n    getAll: () => store\n  };\n})();\n\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock\n});\n\n// Mock para fetch global\nglobal.fetch = vi.fn();\n\n// Mock para los servicios\nvi.mock('../../services/EmailService');\nvi.mock('../../services/TagService');\nvi.mock('../../services/FolderService');\n\n// Componente para envolver los tests y proporcionar el contexto necesario\nconst TestWrapper = ({ children, initialRoute = '/' }) => {\n  return (\n    <MemoryRouter initialEntries={[initialRoute]}>\n      <ToastContainer position=\"top-right\" autoClose={2000} />\n      <Routes>\n        <Route path=\"/\" element={<EmailInbox />} />\n        <Route path=\"/detail/:id\" element={<EmailDetail />} />\n        <Route path=\"/compose\" element={<ComposeEmail />} />\n        <Route path=\"/settings\" element={<EmailSettings />} />\n        {children}\n      </Routes>\n    </MemoryRouter>\n  );\n};\n\ndescribe('Flujos completos del sistema de correo (E2E)', () => {\n  // Datos de ejemplo\n  const mockProfile = {\n    id: 'profile123',\n    userId: 'user123',\n    brideFirstName: 'María',\n    brideLastName: 'García',\n  };\n\n  const mockEmails = [\n    {\n      id: 'email1',\n      from: 'remitente@example.com',\n      to: 'maria.garcia@lovenda.com',\n      subject: 'Presupuesto fotografía',\n      body: '<p>Hola María, te envío el presupuesto para las fotos de la boda.</p>',\n      date: '2025-07-12T15:30:00Z',\n      folder: 'inbox',\n      read: false,\n      attachments: []\n    },\n    {\n      id: 'email2',\n      from: 'maria.garcia@lovenda.com',\n      to: 'florista@example.com',\n      subject: 'Consulta sobre centros de mesa',\n      body: '<p>Hola, estoy interesada en vuestros servicios para mi boda.</p>',\n      date: '2025-07-11T10:15:00Z',\n      folder: 'sent',\n      read: true,\n      attachments: []\n    }\n  ];\n\n  const mockFolders = [\n    { id: 'inbox', name: 'Bandeja de entrada', system: true },\n    { id: 'sent', name: 'Enviados', system: true },\n    { id: 'trash', name: 'Papelera', system: true },\n    { id: 'proveedores', name: 'Proveedores', system: false },\n    { id: 'ideas', name: 'Ideas de boda', system: false }\n  ];\n\n  const mockTags = [\n    { id: 'important', name: 'Importante', color: '#e53e3e', system: true },\n    { id: 'photography', name: 'Fotografía', color: '#3182ce', system: false }\n  ];\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    localStorage.clear();\n    \n    // Configurar mocks para los servicios\n    EmailService.initEmailService.mockReturnValue('maria.garcia@lovenda.com');\n    EmailService.getMails.mockResolvedValue(mockEmails);\n    EmailService.getUnreadCount.mockResolvedValue(1);\n    EmailService.sendMail.mockImplementation(async (email) => {\n      return { success: true, id: 'new-email-id' };\n    });\n    EmailService.markAsRead.mockImplementation(async (id) => true);\n    EmailService.moveMail.mockImplementation(async (id, folder) => true);\n    EmailService.deleteMail.mockImplementation(async (id) => true);\n    \n    TagService.getUserTags.mockReturnValue(mockTags);\n    TagService.getEmailTags.mockReturnValue(['important']);\n    TagService.getEmailTagsDetails.mockReturnValue([mockTags[0]]);\n    TagService.addTagToEmail.mockImplementation((userId, emailId, tagId) => true);\n    TagService.removeTagFromEmail.mockImplementation((userId, emailId, tagId) => true);\n    \n    FolderService.getUserFolders.mockReturnValue(mockFolders);\n    FolderService.createFolder.mockImplementation((userId, name) => {\n      return { id: `folder-${Date.now()}`, name, system: false };\n    });\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('Flujo de recepción y lectura de correo', () => {\n    it('permite ver la bandeja de entrada y abrir un correo', async () => {\n      // Renderizar la bandeja de entrada\n      render(<TestWrapper />);\n      \n      // Verificar que se muestra la lista de correos\n      await waitFor(() => {\n        expect(screen.getByText('Bandeja de entrada')).toBeInTheDocument();\n        expect(screen.getByText('Presupuesto fotografía')).toBeInTheDocument();\n      });\n      \n      // Verificar que muestra el indicador de no leído\n      expect(screen.getByText('Presupuesto fotografía').closest('.email-item')).toHaveClass('unread');\n      \n      // Hacer clic en un correo para abrirlo\n      fireEvent.click(screen.getByText('Presupuesto fotografía'));\n      \n      // Verificar que se abre el detalle del correo\n      await waitFor(() => {\n        expect(EmailService.markAsRead).toHaveBeenCalledWith('email1');\n        expect(screen.getByText('Hola María, te envío el presupuesto para las fotos de la boda.')).toBeInTheDocument();\n      });\n    });\n\n    it('muestra etiquetas en los correos y permite filtrar por ellas', async () => {\n      render(<TestWrapper />);\n      \n      // Verificar que se muestra la etiqueta en el correo\n      await waitFor(() => {\n        const emailItem = screen.getByText('Presupuesto fotografía').closest('.email-item');\n        expect(within(emailItem).getByText('Importante')).toBeInTheDocument();\n      });\n      \n      // Hacer clic en el filtro de etiquetas\n      fireEvent.click(screen.getByText('Filtros'));\n      fireEvent.click(screen.getByText('Importante'));\n      \n      // Verificar que se aplica el filtro\n      await waitFor(() => {\n        expect(EmailService.getMails).toHaveBeenCalledWith('inbox', expect.objectContaining({\n          tags: ['important']\n        }));\n      });\n    });\n  });\n\n  describe('Flujo de envío de correo', () => {\n    it('permite componer y enviar un nuevo correo', async () => {\n      render(<TestWrapper initialRoute=\"/compose\" />);\n      \n      // Verificar que se muestra el formulario de composición\n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Para:')).toBeInTheDocument();\n        expect(screen.getByPlaceholderText('Asunto:')).toBeInTheDocument();\n      });\n      \n      // Rellenar el formulario\n      const user = userEvent.setup();\n      await user.type(screen.getByPlaceholderText('Para:'), 'destinatario@example.com');\n      await user.type(screen.getByPlaceholderText('Asunto:'), 'Solicitud de información');\n      \n      // El editor de texto enriquecido es más complejo, simulemos un cambio directo\n      const editorElement = screen.getByTestId('email-body-editor');\n      fireEvent.input(editorElement, { \n        target: { innerHTML: '<p>Hola, necesito más información sobre sus servicios.</p>' } \n      });\n      \n      // Enviar el correo\n      fireEvent.click(screen.getByText('Enviar'));\n      \n      // Verificar que se llamó a la función de envío\n      await waitFor(() => {\n        expect(EmailService.sendMail).toHaveBeenCalledWith(expect.objectContaining({\n          to: 'destinatario@example.com',\n          subject: 'Solicitud de información',\n          body: '<p>Hola, necesito más información sobre sus servicios.</p>'\n        }));\n        \n        // Verificar que se muestra una notificación de éxito\n        expect(screen.getByText(/correo enviado|mensaje enviado/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Flujo de organización de correo', () => {\n    it('permite mover un correo a una carpeta diferente', async () => {\n      render(<TestWrapper initialRoute=\"/detail/email1\" />);\n      \n      // Verificar que se carga el detalle del correo\n      await waitFor(() => {\n        expect(screen.getByText('Presupuesto fotografía')).toBeInTheDocument();\n      });\n      \n      // Hacer clic en el botón de mover\n      fireEvent.click(screen.getByText('Mover a'));\n      \n      // Verificar que se abre el modal de selección de carpeta\n      await waitFor(() => {\n        expect(screen.getByText('Seleccionar carpeta')).toBeInTheDocument();\n      });\n      \n      // Seleccionar una carpeta\n      fireEvent.click(screen.getByText('Proveedores'));\n      fireEvent.click(screen.getByText('Mover'));\n      \n      // Verificar que se llamó a la función para mover el correo\n      await waitFor(() => {\n        expect(EmailService.moveMail).toHaveBeenCalledWith('email1', 'proveedores');\n        \n        // Verificar que se muestra una notificación de éxito\n        expect(screen.getByText(/correo movido|mensaje movido/i)).toBeInTheDocument();\n      });\n    });\n\n    it('permite añadir y quitar etiquetas a un correo', async () => {\n      render(<TestWrapper initialRoute=\"/detail/email1\" />);\n      \n      // Verificar que se carga el detalle del correo\n      await waitFor(() => {\n        expect(screen.getByText('Presupuesto fotografía')).toBeInTheDocument();\n      });\n      \n      // Hacer clic en el botón de gestión de etiquetas\n      fireEvent.click(screen.getByText('Etiquetas'));\n      \n      // Verificar que se muestra el selector de etiquetas\n      await waitFor(() => {\n        expect(screen.getByText('Fotografía')).toBeInTheDocument();\n      });\n      \n      // Añadir una etiqueta\n      fireEvent.click(screen.getByText('Fotografía'));\n      \n      // Verificar que se llamó a la función para añadir la etiqueta\n      await waitFor(() => {\n        expect(TagService.addTagToEmail).toHaveBeenCalledWith(\n          mockProfile.userId, \n          'email1', \n          'photography'\n        );\n      });\n      \n      // Quitar una etiqueta existente\n      fireEvent.click(screen.getByText('Importante'));\n      \n      // Verificar que se llamó a la función para quitar la etiqueta\n      await waitFor(() => {\n        expect(TagService.removeTagFromEmail).toHaveBeenCalledWith(\n          mockProfile.userId, \n          'email1', \n          'important'\n        );\n      });\n    });\n  });\n\n  describe('Flujo de gestión de carpetas y etiquetas', () => {\n    it('permite crear una nueva carpeta personalizada', async () => {\n      render(<TestWrapper initialRoute=\"/settings\" />);\n      \n      // Verificar que se carga la configuración\n      await waitFor(() => {\n        expect(screen.getByText('Configuración de correo')).toBeInTheDocument();\n      });\n      \n      // Ir a la sección de carpetas\n      fireEvent.click(screen.getByText('Carpetas'));\n      \n      // Crear nueva carpeta\n      const user = userEvent.setup();\n      await user.type(screen.getByPlaceholderText('Nombre de carpeta'), 'Presupuestos');\n      fireEvent.click(screen.getByText('Crear carpeta'));\n      \n      // Verificar que se llamó a la función para crear la carpeta\n      await waitFor(() => {\n        expect(FolderService.createFolder).toHaveBeenCalledWith(\n          mockProfile.userId, \n          'Presupuestos'\n        );\n        \n        // Verificar que se muestra una notificación de éxito\n        expect(screen.getByText(/carpeta creada|creada con éxito/i)).toBeInTheDocument();\n      });\n    });\n\n    it('permite crear una nueva etiqueta personalizada', async () => {\n      render(<TestWrapper initialRoute=\"/settings\" />);\n      \n      // Verificar que se carga la configuración\n      await waitFor(() => {\n        expect(screen.getByText('Configuración de correo')).toBeInTheDocument();\n      });\n      \n      // Ir a la sección de etiquetas\n      fireEvent.click(screen.getByText('Etiquetas'));\n      \n      // Crear nueva etiqueta\n      const user = userEvent.setup();\n      await user.type(screen.getByPlaceholderText('Nombre de etiqueta'), 'Catering');\n      \n      // Seleccionar un color\n      fireEvent.click(screen.getByTestId('color-picker'));\n      fireEvent.click(screen.getByTestId('color-#38a169')); // Verde\n      \n      fireEvent.click(screen.getByText('Crear etiqueta'));\n      \n      // Verificar que se llamó a la función para crear la etiqueta\n      await waitFor(() => {\n        expect(TagService.createTag).toHaveBeenCalledWith(\n          mockProfile.userId, \n          'Catering',\n          '#38a169'\n        );\n        \n        // Verificar que se muestra una notificación de éxito\n        expect(screen.getByText(/etiqueta creada|creada con éxito/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Flujo de búsqueda y filtrado avanzado', () => {\n    it('permite buscar correos por texto', async () => {\n      render(<TestWrapper />);\n      \n      // Verificar que se muestra la bandeja de entrada\n      await waitFor(() => {\n        expect(screen.getByText('Bandeja de entrada')).toBeInTheDocument();\n      });\n      \n      // Realizar una búsqueda\n      const user = userEvent.setup();\n      await user.type(screen.getByPlaceholderText('Buscar...'), 'fotografía');\n      fireEvent.keyPress(screen.getByPlaceholderText('Buscar...'), { key: 'Enter', code: 13 });\n      \n      // Verificar que se llamó a la función de búsqueda\n      await waitFor(() => {\n        expect(EmailService.getMails).toHaveBeenCalledWith('inbox', expect.objectContaining({\n          search: 'fotografía'\n        }));\n      });\n    });\n\n    it('permite aplicar filtros avanzados combinando criterios', async () => {\n      render(<TestWrapper />);\n      \n      // Verificar que se muestra la bandeja de entrada\n      await waitFor(() => {\n        expect(screen.getByText('Bandeja de entrada')).toBeInTheDocument();\n      });\n      \n      // Abrir el panel de filtros avanzados\n      fireEvent.click(screen.getByText('Filtros'));\n      \n      // Aplicar múltiples filtros\n      fireEvent.click(screen.getByText('Importante')); // Etiqueta\n      fireEvent.click(screen.getByText('No leídos')); // Estado\n      \n      // Filtrar por fecha (últimos 7 días)\n      fireEvent.change(screen.getByLabelText('Periodo'), { target: { value: '7d' } });\n      \n      // Aplicar filtros\n      fireEvent.click(screen.getByText('Aplicar filtros'));\n      \n      // Verificar que se llamó a getMails con los filtros correctos\n      await waitFor(() => {\n        expect(EmailService.getMails).toHaveBeenCalledWith('inbox', expect.objectContaining({\n          tags: ['important'],\n          onlyUnread: true,\n          dateRange: '7d'\n        }));\n      });\n    });\n  });\n\n  describe('Flujo de estadísticas y análisis', () => {\n    it('muestra correctamente las estadísticas de uso del correo', async () => {\n      // Mock para estadísticas\n      const mockStats = {\n        totalSent: 45,\n        totalReceived: 87,\n        responseRate: 76,\n        avgResponseTime: 3.2, // horas\n        topContacts: [\n          { email: 'florista@example.com', count: 12 },\n          { email: 'fotografo@example.com', count: 8 }\n        ],\n        tagDistribution: [\n          { tag: 'Importante', count: 15 },\n          { tag: 'Fotografía', count: 7 }\n        ],\n        activityByDay: {\n          lun: 14, mar: 8, mié: 22, jue: 11, vie: 17, sáb: 5, dom: 2\n        }\n      };\n      \n      EmailService.getEmailStatistics.mockResolvedValue(mockStats);\n      \n      render(<TestWrapper initialRoute=\"/statistics\" />);\n      \n      // Verificar que se muestran las estadísticas\n      await waitFor(() => {\n        expect(screen.getByText('Estadísticas de uso')).toBeInTheDocument();\n        expect(screen.getByText('87')).toBeInTheDocument(); // Total recibidos\n        expect(screen.getByText('45')).toBeInTheDocument(); // Total enviados\n        expect(screen.getByText('76%')).toBeInTheDocument(); // Tasa de respuesta\n      });\n      \n      // Verificar gráficos y distribuciones\n      expect(screen.getByText('Contactos frecuentes')).toBeInTheDocument();\n      expect(screen.getByText('florista@example.com')).toBeInTheDocument();\n      expect(screen.getByText('fotografo@example.com')).toBeInTheDocument();\n      \n      expect(screen.getByText('Distribución por etiquetas')).toBeInTheDocument();\n      expect(screen.getByText('Actividad por día')).toBeInTheDocument();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\email-integration-test.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'updatedEmail' is assigned a value but never used.","line":206,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":206,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Script de prueba de integración para validar el funcionamiento conjunto \n * del sistema de emails, calendario y plantillas de Lovenda.\n * \n * Este script simula un flujo completo de usuario, desde recepción de emails\n * hasta la creación de eventos en calendario y uso de plantillas.\n */\n\n// Simulación de servicios para pruebas\nconst mockServices = {\n  EmailService: {\n    // Datos de prueba - Emails recibidos\n    inboxEmails: [\n      {\n        id: 'email_001',\n        from: 'fotografo@ejemplo.com',\n        to: 'maria.garcia@lovenda.com',\n        subject: 'Disponibilidad para sesión de fotos',\n        body: `<p>Hola María,</p>\n        <p>Te confirmo que tengo disponibilidad para la sesión de fotos que solicitaste el 15/09/2025 a las 16:30.</p>\n        <p>El lugar sería en nuestro estudio ubicado en Calle Gran Vía 56, Madrid.</p>\n        <p>Si necesitas más información o quieres modificar algo, no dudes en contactarme.</p>\n        <p>Saludos cordiales,</p>\n        <p>Juan Pérez<br>Fotografía Momentos</p>`,\n        date: '2025-07-10T10:23:45',\n        read: false,\n        folder: 'inbox',\n        providerId: 'prov_001'\n      },\n      {\n        id: 'email_002',\n        from: 'catering@ejemplo.com',\n        to: 'maria.garcia@lovenda.com',\n        subject: 'Presupuesto para tu boda',\n        body: `<p>Hola María,</p>\n        <p>Adjunto encontrarás el presupuesto detallado para el servicio de catering que solicitaste.</p>\n        <p>Como comentamos, incluye opciones para 100 invitados con diferentes menús a elegir.</p>\n        <p>Necesitaríamos una confirmación antes del 20/07/2025 para reservar la fecha.</p>\n        <p>Quedamos a tu disposición,</p>\n        <p>Ana López<br>Catering Delicatessen</p>`,\n        date: '2025-07-09T15:42:30',\n        read: true,\n        folder: 'inbox',\n        attachments: [\n          {\n            name: 'Presupuesto-Boda-García.pdf',\n            size: 2458000\n          }\n        ],\n        providerId: 'prov_002'\n      }\n    ],\n    \n    // Datos de prueba - Emails enviados\n    sentEmails: [\n      {\n        id: 'email_003',\n        from: 'maria.garcia@lovenda.com',\n        to: 'florista@ejemplo.com',\n        subject: 'Consulta sobre arreglos florales',\n        body: `<p>Estimados,</p>\n        <p>Me pongo en contacto para consultar sobre sus servicios de decoración floral para una boda.</p>\n        <p>La fecha sería el 15/09/2025 y necesitaría arreglos para la ceremonia y centro de mesa para 10 mesas.</p>\n        <p>¿Podrían enviarme información y presupuesto?</p>\n        <p>Muchas gracias,</p>\n        <p>María García</p>`,\n        date: '2025-07-08T09:15:22',\n        read: true,\n        folder: 'sent'\n      }\n    ],\n    \n    // Datos de prueba - Plantillas\n    emailTemplates: [\n      {\n        id: 'template_001',\n        name: 'Solicitud de información',\n        category: 'Proveedores - Solicitud de información',\n        subject: 'Consulta sobre servicios de {{servicio}} para boda',\n        body: `<p>Estimado/a {{nombre_proveedor}}:</p>\n        <p>Me pongo en contacto con ustedes porque estoy organizando mi boda para el día {{fecha_boda}} y estoy interesada en sus servicios de {{servicio}}.</p>\n        <p>Me gustaría conocer más información sobre:</p>\n        <ul>\n          <li>Disponibilidad para la fecha mencionada</li>\n          <li>Diferentes opciones y paquetes</li>\n          <li>Precios aproximados</li>\n        </ul>\n        <p>Quedo a la espera de su respuesta.</p>\n        <p>Saludos cordiales,</p>\n        <p>{{nombre_novia}}</p>`,\n        variables: ['servicio', 'nombre_proveedor', 'fecha_boda', 'nombre_novia'],\n        isSystem: true\n      },\n      {\n        id: 'template_002',\n        name: 'Confirmación de cita',\n        category: 'Proveedores - Confirmación',\n        subject: 'Confirmación de cita - {{fecha_cita}}',\n        body: `<p>Estimado/a {{nombre_proveedor}}:</p>\n        <p>Por la presente confirmo nuestra cita para el día {{fecha_cita}} a las {{hora_cita}} en {{lugar_cita}}.</p>\n        <p>Cualquier cambio, por favor házmelo saber con antelación.</p>\n        <p>Saludos cordiales,</p>\n        <p>{{nombre_novia}}</p>`,\n        variables: ['nombre_proveedor', 'fecha_cita', 'hora_cita', 'lugar_cita', 'nombre_novia'],\n        isSystem: true\n      }\n    ],\n    \n    // Métodos simulados\n    getMails: function(folder = 'inbox') {\n      if (folder === 'inbox') return this.inboxEmails;\n      if (folder === 'sent') return this.sentEmails;\n      return [];\n    },\n    \n    getMailDetails: function(emailId) {\n      const allEmails = [...this.inboxEmails, ...this.sentEmails];\n      return allEmails.find(email => email.id === emailId) || null;\n    },\n    \n    getEmailTemplates: function() {\n      return this.emailTemplates;\n    },\n    \n    saveEmailTemplate: function(template) {\n      // Simular guardado\n      console.log('Guardando plantilla:', template.name);\n      return template;\n    },\n    \n    sendMail: function(mailData) {\n      console.log('Enviando email:', mailData);\n      return {\n        id: `email_${Date.now()}`,\n        from: 'maria.garcia@lovenda.com',\n        to: mailData.to,\n        subject: mailData.subject,\n        body: mailData.body,\n        date: new Date().toISOString(),\n        read: true,\n        folder: 'sent'\n      };\n    },\n    \n    markAsRead: function(emailId) {\n      console.log('Marcando email como leído:', emailId);\n      const email = this.getMailDetails(emailId);\n      if (email) {\n        email.read = true;\n      }\n      return email;\n    }\n  },\n  \n  CalendarService: {\n    // Datos de prueba - Eventos\n    events: [\n      {\n        id: 'event_001',\n        title: 'Prueba de vestido',\n        dateTime: '2025-08-10T11:00:00',\n        location: 'Tienda Novias Elegantes, Calle Serrano 25',\n        description: 'Primera prueba del vestido con posibles ajustes',\n        attendees: ['María García', 'Carmen García (madre)', 'Elena Martínez (madrina)'],\n        providerRelated: true,\n        providerId: 'prov_005'\n      }\n    ],\n    \n    // Métodos simulados\n    getEvents: function() {\n      return this.events;\n    },\n    \n    addEvent: function(eventData) {\n      console.log('Añadiendo evento al calendario:', eventData.title);\n      const newEvent = {\n        id: `event_${Date.now()}`,\n        ...eventData\n      };\n      this.events.push(newEvent);\n      return newEvent;\n    }\n  }\n};\n\n// Simulación de componentes React para pruebas\nconst mockComponents = {\n  // Simula el comportamiento del componente EmailInbox\n  EmailInbox: {\n    name: 'EmailInbox',\n    simulate: function() {\n      console.log('\\n--- SIMULANDO INTERACCIÓN CON BANDEJA DE ENTRADA ---');\n      \n      // Obtener emails\n      console.log('1. Cargando emails de la bandeja de entrada');\n      const emails = mockServices.EmailService.getMails('inbox');\n      console.log(`   ✓ ${emails.length} emails recuperados`);\n      \n      // Seleccionar un email no leído\n      const unreadEmail = emails.find(email => !email.read);\n      if (unreadEmail) {\n        console.log('2. Seleccionando email no leído:', unreadEmail.subject);\n        \n        // Marcar como leído\n        const updatedEmail = mockServices.EmailService.markAsRead(unreadEmail.id);\n        console.log('   ✓ Email marcado como leído');\n        \n        // Detectar posibles fechas y eventos\n        console.log('3. Detectando información de eventos en el email');\n        const hasEventInfo = unreadEmail.body.includes('sesión') && \n                            (unreadEmail.body.includes('fecha') || \n                             unreadEmail.body.match(/\\d{1,2}\\/\\d{1,2}\\/\\d{4}/));\n        \n        if (hasEventInfo) {\n          console.log('   ✓ Información de evento detectada, sugerencia de añadir al calendario');\n        }\n      }\n      \n      // Comprobar emails importantes\n      const importantEmails = emails.filter(email => \n        email.folder === 'important' || \n        email.subject.toLowerCase().includes('urgente')\n      );\n      \n      console.log(`4. Emails importantes: ${importantEmails.length}`);\n      \n      return { success: true };\n    }\n  },\n  \n  // Simula el comportamiento del componente EmailComposer con plantillas\n  EmailComposer: {\n    name: 'EmailComposer',\n    simulate: function() {\n      console.log('\\n--- SIMULANDO CREACIÓN DE EMAIL CON PLANTILLA ---');\n      \n      // Cargar plantillas disponibles\n      console.log('1. Cargando plantillas de email disponibles');\n      const templates = mockServices.EmailService.getEmailTemplates();\n      console.log(`   ✓ ${templates.length} plantillas disponibles`);\n      \n      // Seleccionar una plantilla\n      const selectedTemplate = templates[0]; // Solicitud de información\n      console.log('2. Seleccionando plantilla:', selectedTemplate.name);\n      \n      // Rellenar variables de la plantilla\n      console.log('3. Rellenando variables de la plantilla');\n      const replacedSubject = selectedTemplate.subject\n        .replace('{{servicio}}', 'decoración floral');\n      \n      const replacedBody = selectedTemplate.body\n        .replace('{{nombre_proveedor}}', 'Flores del Jardín')\n        .replace('{{fecha_boda}}', '15/09/2025')\n        .replace('{{servicio}}', 'decoración floral')\n        .replace('{{nombre_novia}}', 'María García');\n      \n      console.log('   ✓ Variables reemplazadas correctamente');\n      \n      // Enviar email\n      console.log('4. Enviando email basado en plantilla');\n      const sentEmail = mockServices.EmailService.sendMail({\n        to: 'flores.jardin@ejemplo.com',\n        subject: replacedSubject,\n        body: replacedBody\n      });\n      \n      console.log('   ✓ Email enviado correctamente con ID:', sentEmail.id);\n      \n      return { success: true, emailId: sentEmail.id };\n    }\n  },\n  \n  // Simula el comportamiento del componente de integración con calendario\n  CalendarIntegration: {\n    name: 'CalendarIntegration',\n    simulate: function() {\n      console.log('\\n--- SIMULANDO INTEGRACIÓN CON CALENDARIO ---');\n      \n      // Seleccionar un email con información de evento\n      console.log('1. Seleccionando email con información de evento');\n      const emailWithEvent = mockServices.EmailService.getMailDetails('email_001');\n      console.log(`   ✓ Email seleccionado: \"${emailWithEvent.subject}\"`);\n      \n      // Extraer información de fecha y hora\n      console.log('2. Extrayendo información de fecha y hora del email');\n      const dateMatch = emailWithEvent.body.match(/(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/);\n      const timeMatch = emailWithEvent.body.match(/(\\d{1,2}):(\\d{2})/);\n      \n      let extractedDate = '';\n      let extractedTime = '';\n      \n      if (dateMatch) {\n        // Formato YYYY-MM-DD para fecha\n        extractedDate = `${dateMatch[3]}-${dateMatch[2].padStart(2, '0')}-${dateMatch[1].padStart(2, '0')}`;\n        console.log(`   ✓ Fecha detectada: ${extractedDate}`);\n      }\n      \n      if (timeMatch) {\n        // Formato HH:MM para hora\n        extractedTime = `${timeMatch[1].padStart(2, '0')}:${timeMatch[2]}`;\n        console.log(`   ✓ Hora detectada: ${extractedTime}`);\n      }\n      \n      // Extraer información de ubicación\n      console.log('3. Extrayendo información de ubicación');\n      const locationMatch = emailWithEvent.body.match(/en ([^.,<]+)/);\n      const extractedLocation = locationMatch ? locationMatch[1].trim() : '';\n      \n      if (extractedLocation) {\n        console.log(`   ✓ Ubicación detectada: ${extractedLocation}`);\n      }\n      \n      // Crear evento en calendario\n      console.log('4. Creando evento en el calendario');\n      const newEvent = mockServices.CalendarService.addEvent({\n        title: `Sesión de fotos - ${emailWithEvent.from.split('@')[0]}`,\n        dateTime: `${extractedDate}T${extractedTime}:00`,\n        location: extractedLocation,\n        description: `Evento creado automáticamente desde email: \"${emailWithEvent.subject}\"`,\n        attendees: ['María García', 'Fotógrafo'],\n        providerRelated: true,\n        providerId: emailWithEvent.providerId\n      });\n      \n      console.log('   ✓ Evento añadido al calendario con ID:', newEvent.id);\n      \n      return { success: true, eventId: newEvent.id };\n    }\n  }\n};\n\n// Ejecutar prueba completa de integración\nasync function runIntegrationTest() {\n  console.log('==========================================================');\n  console.log('= PRUEBA DE INTEGRACIÓN DEL SISTEMA DE EMAILS DE LOVENDA =');\n  console.log('==========================================================');\n  \n  try {\n    // Probar la bandeja de entrada unificada\n    const inboxResult = mockComponents.EmailInbox.simulate();\n    \n    // Probar el compositor con plantillas\n    const composerResult = mockComponents.EmailComposer.simulate();\n    \n    // Probar la integración con calendario\n    const calendarResult = mockComponents.CalendarIntegration.simulate();\n    \n    // Verificar resultados\n    console.log('\\n--- RESULTADOS DE LA PRUEBA DE INTEGRACIÓN ---');\n    console.log(`1. Bandeja de entrada: ${inboxResult.success ? '✅ CORRECTO' : '❌ FALLÓ'}`);\n    console.log(`2. Compositor con plantillas: ${composerResult.success ? '✅ CORRECTO' : '❌ FALLÓ'}`);\n    console.log(`3. Integración con calendario: ${calendarResult.success ? '✅ CORRECTO' : '❌ FALLÓ'}`);\n    \n    console.log('\\nPrueba de integración completada correctamente.');\n    console.log('El sistema de emails personalizado de Lovenda funciona según lo esperado.');\n    \n  } catch (error) {\n    console.error('\\n❌ ERROR EN LA PRUEBA DE INTEGRACIÓN:', error);\n  }\n}\n\n// Ejecutar la prueba\nrunIntegrationTest();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\email-system-test.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'body' is defined but never used.","line":25,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'EmailTrackingService' is assigned a value but never used.","line":43,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'createTrackingRecord' is not defined.","line":116,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":116,"endColumn":56}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Script de validación del sistema de emails personalizado de Lovenda\n// Ejecutar con: node email-system-test.js\n\n// Nota: Este script está diseñado para probar la lógica, pero requiere adaptaciones\n// para ejecutarse fuera del entorno de React debido a las dependencias de entorno\n\n// Simulación de servicios para pruebas\nconst EmailService = {\n  initEmailService: (profile) => {\n    // Simula la lógica de generación de emails\n    if (profile.emailAlias) {\n      return `${profile.emailAlias}@lovenda.com`;\n    }\n    \n    if (profile.brideFirstName && profile.brideLastName) {\n      const normalizedName = `${profile.brideFirstName.toLowerCase()}.${profile.brideLastName.toLowerCase()}`\n        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') // Eliminar acentos\n        .replace(/[^a-z0-9.]/g, '.'); // Reemplazar caracteres no permitidos\n      return `${normalizedName}@lovenda.com`;\n    }\n    \n    return `user${profile.userId}@lovenda.com`;\n  },\n  \n  sendMail: async ({ to, subject, body }) => {\n    console.log('\\nSimulando envío de email:');\n    console.log(`A: ${to}`);\n    console.log(`Asunto: ${subject}`);\n    console.log('Contenido: [Contenido HTML omitido]');\n    \n    // Simular respuesta exitosa\n    return {\n      id: 'email_' + Math.random().toString(36).substring(2, 10),\n      from: 'usuario@lovenda.com',\n      to,\n      subject,\n      date: new Date().toISOString(),\n      status: 'sent'\n    };\n  }\n};\n\nconst EmailTrackingService = {\n  createTrackingRecord: async (email, provider) => {\n    console.log('\\nCreando registro de seguimiento:');\n    console.log(`Email ID: ${email.id}`);\n    console.log(`Proveedor: ${provider.name} (${provider.id})`);\n    \n    return {\n      id: 'track_' + Math.random().toString(36).substring(2, 10),\n      emailId: email.id,\n      providerId: provider.id,\n      providerName: provider.name,\n      status: 'waiting',\n      lastEmailDate: new Date().toISOString(),\n      thread: [{ emailId: email.id, direction: 'outgoing', date: new Date().toISOString() }]\n    };\n  }\n};\n\n// Perfil de usuario de prueba\nconst testUserProfile = {\n  userId: '1234',\n  brideFirstName: 'María',\n  brideLastName: 'García',\n  weddingDate: '2025-09-15',\n  emailAlias: '', // Dejar vacío para probar la generación automática\n};\n\n// Proveedor de prueba\nconst testProvider = {\n  id: 'prov123',\n  name: 'Fotografía Momentos',\n  email: 'test@provider.com',\n  service: 'fotografía',\n  phone: '555-123456',\n  contact: 'Juan Pérez'\n};\n\n// Inicializa la prueba\nasync function runEmailTest() {\n  console.log('=== Iniciando prueba del sistema de emails de Lovenda ===');\n  \n  try {\n    // 1. Inicializar el servicio con el perfil de usuario\n    const userEmail = EmailService.initEmailService(testUserProfile);\n    console.log(`✅ Email de usuario generado: ${userEmail}`);\n    \n    // 2. Enviar un email de prueba\n    console.log('\\n>> Enviando email de prueba al proveedor...');\n    const emailSubject = `Consulta sobre servicios de fotografía para boda`;\n    const emailBody = `\n      <p>Estimado/a ${testProvider.name}:</p>\n      \n      <p>Mi nombre es ${testUserProfile.brideFirstName} ${testUserProfile.brideLastName} y me pongo en contacto con ustedes porque estoy organizando mi boda.</p>\n      \n      <p>He visto sus servicios de fotografía y me gustaría obtener más información.</p>\n      \n      <p>Saludos cordiales,<br>\n      ${testUserProfile.brideFirstName}</p>\n      \n      <p style=\"color:#888; font-size:12px;\">Email de prueba - Sistema Lovenda</p>\n    `;\n    \n    const emailResult = await EmailService.sendMail({\n      to: testProvider.email,\n      subject: emailSubject,\n      body: emailBody\n    });\n    \n    if (emailResult && emailResult.id) {\n      console.log(`✅ Email enviado correctamente con ID: ${emailResult.id}`);\n      \n      // 3. Crear registro de seguimiento\n      console.log('\\n>> Creando registro de seguimiento...');\n      const trackingResult = await createTrackingRecord(emailResult, testProvider);\n      \n      if (trackingResult && trackingResult.id) {\n        console.log(`✅ Registro de seguimiento creado con ID: ${trackingResult.id}`);\n        console.log(`   Estado inicial: ${trackingResult.status}`);\n        console.log(`   Fecha de seguimiento: ${trackingResult.lastEmailDate}`);\n      } else {\n        console.error('❌ Error al crear registro de seguimiento');\n      }\n      \n      // 4. Simular recepción de respuesta\n      console.log('\\n>> Simulando respuesta del proveedor...');\n      // Esta parte depende de la implementación concreta del sistema\n      // En producción, esto sería automático al detectar un email entrante\n      console.log('ℹ️ En un entorno real, el sistema detectaría automáticamente la respuesta');\n      \n    } else {\n      console.error('❌ Error al enviar email');\n    }\n    \n  } catch (error) {\n    console.error('❌ Error en la prueba:', error);\n  }\n  \n  console.log('\\n=== Fin de la prueba ===');\n}\n\n// Ejecutar la prueba\nrunEmailTest()\n  .then(() => {\n    console.log('Prueba completada');\n    process.exit(0);\n  })\n  .catch(err => {\n    console.error('Error fatal en la prueba:', err);\n    process.exit(1);\n  });\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\helpers\\axeSetup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\hooks\\useAIProviderEmail.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\integration\\EmailEdgeCases.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\integration\\EmailWorkflow.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'within' is defined but never used.","line":2,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { BrowserRouter } from 'react-router-dom';\nimport userEvent from '@testing-library/user-event';\nimport { toast } from 'react-toastify';\n\n// Componentes a probar en integración\nimport EmailInbox from '../../components/email/EmailInbox';\nimport EmailComposer from '../../components/email/EmailComposer';\nimport * as EmailService from '../../services/EmailService';\nimport * as TagService from '../../services/TagService';\nimport { useAuth } from '../../hooks/useAuth';\n\n// Mock de dependencias\nvi.mock('react-toastify', () => ({\n  toast: {\n    success: vi.fn(),\n    error: vi.fn(),\n    info: vi.fn()\n  }\n}));\n\nvi.mock('../../hooks/useAuth', () => ({\n  useAuth: vi.fn()\n}));\n\nvi.mock('../../services/EmailService', () => ({\n  initEmailService: vi.fn(),\n  getMails: vi.fn(),\n  sendMail: vi.fn(),\n  deleteMail: vi.fn(),\n  markAsRead: vi.fn(),\n  moveToFolder: vi.fn(),\n  createFolder: vi.fn(),\n  getFolders: vi.fn()\n}));\n\nvi.mock('../../services/TagService', () => ({\n  getTags: vi.fn(),\n  createTag: vi.fn(),\n  deleteTag: vi.fn(),\n  tagEmail: vi.fn(),\n  untagEmail: vi.fn(),\n  getEmailTags: vi.fn()\n}));\n\n// Mock de los componentes hijos que no son el foco de estas pruebas de integración\nvi.mock('../../components/email/EmailDetail', () => ({\n  default: ({ email, onBack, onReply, onDelete, onMoveToFolder }) => (\n    <div data-testid=\"email-detail\">\n      {email && (\n        <div>\n          <div data-testid=\"email-subject\">{email.subject}</div>\n          <div data-testid=\"email-body\">{email.body}</div>\n          <button onClick={onBack}>Volver</button>\n          <button onClick={onReply}>Responder</button>\n          <button onClick={onDelete}>Eliminar</button>\n          <button onClick={() => onMoveToFolder(email.id, 'folder-1')}>Mover</button>\n        </div>\n      )}\n    </div>\n  )\n}));\n\n// Helper para envolver componentes con el router\nconst renderWithRouter = (ui) => {\n  return render(<BrowserRouter>{ui}</BrowserRouter>);\n};\n\ndescribe('Pruebas de integración del sistema de correo electrónico', () => {\n  // Datos de ejemplo para las pruebas\n  const mockUser = {\n    uid: 'user123',\n    email: 'usuario@example.com',\n  };\n  \n  const mockProfile = {\n    id: 'profile123',\n    email: 'usuario@lovenda.app',\n    name: 'Usuario Test',\n  };\n  \n  const mockEmails = [\n    { \n      id: 'email-1', \n      subject: 'Propuesta de colaboración', \n      from: 'socio@empresa.com',\n      to: 'usuario@lovenda.app',\n      date: '2025-07-10T10:30:00Z',\n      read: false,\n      body: '<p>Hola, me gustaría discutir una posible colaboración.</p>',\n      folder: 'inbox',\n      attachments: []\n    },\n    { \n      id: 'email-2', \n      subject: 'Confirmación de pedido', \n      from: 'ventas@tienda.com',\n      to: 'usuario@lovenda.app',\n      date: '2025-07-09T08:15:00Z',\n      read: true,\n      body: '<p>Su pedido ha sido confirmado.</p>',\n      folder: 'inbox',\n      attachments: [{ filename: 'factura.pdf', size: 1024 * 100 }]\n    }\n  ];\n\n  const mockFolders = [\n    { id: 'inbox', name: 'Bandeja de entrada', system: true },\n    { id: 'sent', name: 'Enviados', system: true },\n    { id: 'folder-1', name: 'Trabajo', system: false },\n    { id: 'folder-2', name: 'Personal', system: false }\n  ];\n\n  const mockTags = [\n    { id: 'tag-1', name: 'Importante', color: '#f44336' },\n    { id: 'tag-2', name: 'Proyecto', color: '#4caf50' }\n  ];\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Configurar los mocks\n    useAuth.mockReturnValue({\n      user: mockUser,\n      profile: mockProfile\n    });\n    \n    EmailService.getMails.mockResolvedValue(mockEmails);\n    EmailService.initEmailService.mockReturnValue('usuario@lovenda.app');\n    EmailService.getFolders.mockResolvedValue(mockFolders);\n    \n    TagService.getTags.mockResolvedValue(mockTags);\n    TagService.getEmailTags.mockImplementation((emailId) => {\n      return Promise.resolve(emailId === 'email-1' ? [mockTags[0]] : []);\n    });\n  });\n\n  // Prueba de flujo de recepción de correos\n  it('Muestra correctamente los emails recibidos y permite verlos en detalle', async () => {\n    renderWithRouter(<EmailInbox />);\n    \n    // Verificar que se están cargando los emails\n    expect(screen.getByText(/cargando/i)).toBeInTheDocument();\n    \n    // Verificar que se cargan y muestran los emails recibidos\n    await waitFor(() => {\n      expect(screen.queryByText(/cargando/i)).not.toBeInTheDocument();\n      expect(EmailService.getMails).toHaveBeenCalledWith('inbox');\n    });\n    \n    expect(screen.getByText('Propuesta de colaboración')).toBeInTheDocument();\n    expect(screen.getByText('Confirmación de pedido')).toBeInTheDocument();\n    \n    // Verificar que se puede abrir un email para ver sus detalles\n    fireEvent.click(screen.getByText('Propuesta de colaboración'));\n    \n    // Verificar que se muestra el detalle del email\n    expect(screen.getByTestId('email-subject')).toHaveTextContent('Propuesta de colaboración');\n    expect(screen.getByTestId('email-body')).toHaveTextContent('Hola, me gustaría discutir una posible colaboración.');\n    \n    // Verificar que el email se marca como leído\n    expect(EmailService.markAsRead).toHaveBeenCalledWith('email-1');\n    \n    // Volver a la bandeja de entrada\n    fireEvent.click(screen.getByText('Volver'));\n    \n    // Verificar que se ha vuelto a la lista\n    expect(screen.queryByTestId('email-detail')).not.toBeInTheDocument();\n    expect(screen.getByText('Propuesta de colaboración')).toBeInTheDocument();\n  });\n\n  // Prueba de flujo de envío de correos\n  it('Permite componer y enviar un nuevo correo', async () => {\n    // Mock para sendMail\n    EmailService.sendMail.mockResolvedValue({\n      id: 'new-email-1',\n      success: true\n    });\n\n    // Renderizar el compositor de emails (componente separado del inbox)\n    renderWithRouter(<EmailComposer />);\n    \n    // Rellenar el formulario\n    const toInput = screen.getByLabelText(/para/i);\n    const subjectInput = screen.getByLabelText(/asunto/i);\n    const bodyInput = screen.getByLabelText(/mensaje/i);\n    \n    await userEvent.type(toInput, 'destinatario@empresa.com');\n    await userEvent.type(subjectInput, 'Respuesta a propuesta');\n    await userEvent.type(bodyInput, 'Gracias por su propuesta. Estamos interesados.');\n    \n    // Enviar el correo\n    const sendButton = screen.getByRole('button', { name: /enviar/i });\n    fireEvent.click(sendButton);\n    \n    // Verificar que se llama al servicio de envío\n    expect(EmailService.sendMail).toHaveBeenCalledWith({\n      to: 'destinatario@empresa.com',\n      subject: 'Respuesta a propuesta',\n      body: 'Gracias por su propuesta. Estamos interesados.',\n      from: 'usuario@lovenda.app',\n      attachments: []\n    });\n    \n    // Verificar que se muestra notificación de éxito\n    await waitFor(() => {\n      expect(toast.success).toHaveBeenCalledWith('Correo enviado correctamente');\n    });\n  });\n\n  // Prueba de organización: mover correo a carpeta\n  it('Permite mover un correo a otra carpeta', async () => {\n    // Mock para moveToFolder\n    EmailService.moveToFolder.mockResolvedValue(true);\n    \n    renderWithRouter(<EmailInbox />);\n    \n    // Esperar a que carguen los emails\n    await waitFor(() => {\n      expect(screen.queryByText(/cargando/i)).not.toBeInTheDocument();\n    });\n    \n    // Abrir un email\n    fireEvent.click(screen.getByText('Propuesta de colaboración'));\n    \n    // Verificar que se muestra el detalle\n    expect(screen.getByTestId('email-subject')).toBeInTheDocument();\n    \n    // Mover a una carpeta\n    const moveButton = screen.getByText('Mover');\n    fireEvent.click(moveButton);\n    \n    // Verificar que se llama al servicio\n    expect(EmailService.moveToFolder).toHaveBeenCalledWith('email-1', 'folder-1');\n    \n    // Verificar que se actualiza la lista de correos\n    await waitFor(() => {\n      expect(EmailService.getMails).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  // Prueba de filtrado por carpeta\n  it('Permite filtrar emails por carpeta', async () => {\n    // Configurar el mock para devolver diferentes emails según la carpeta\n    EmailService.getMails.mockImplementation((folder) => {\n      if (folder === 'sent') {\n        return Promise.resolve([\n          {\n            id: 'sent-1',\n            subject: 'Email enviado',\n            from: 'usuario@lovenda.app',\n            to: 'contacto@empresa.com',\n            date: '2025-07-08T09:20:00Z',\n            read: true,\n            folder: 'sent'\n          }\n        ]);\n      }\n      return Promise.resolve(mockEmails);\n    });\n    \n    renderWithRouter(<EmailInbox />);\n    \n    // Esperar a que carguen los emails\n    await waitFor(() => {\n      expect(screen.queryByText(/cargando/i)).not.toBeInTheDocument();\n    });\n    \n    // Verificar emails en bandeja de entrada\n    expect(screen.getByText('Propuesta de colaboración')).toBeInTheDocument();\n    \n    // Cambiar a carpeta Enviados\n    const sentFolder = screen.getByText(/enviados/i);\n    fireEvent.click(sentFolder);\n    \n    // Verificar que se cargan los emails enviados\n    await waitFor(() => {\n      expect(EmailService.getMails).toHaveBeenCalledWith('sent');\n      expect(screen.getByText('Email enviado')).toBeInTheDocument();\n      expect(screen.queryByText('Propuesta de colaboración')).not.toBeInTheDocument();\n    });\n  });\n\n  // Prueba de integración con etiquetas\n  it('Muestra y permite gestionar etiquetas en los correos', async () => {\n    // Mock para las operaciones de etiquetas\n    TagService.tagEmail.mockResolvedValue(true);\n    \n    renderWithRouter(<EmailInbox />);\n    \n    // Esperar a que carguen los emails\n    await waitFor(() => {\n      expect(screen.queryByText(/cargando/i)).not.toBeInTheDocument();\n    });\n    \n    // Verificar que se muestran las etiquetas existentes en los correos\n    expect(screen.getByText('Importante')).toBeInTheDocument();\n    \n    // Abrir un email para gestionar sus etiquetas\n    fireEvent.click(screen.getByText('Confirmación de pedido'));\n    \n    // Verificar que se cargan las etiquetas del correo\n    await waitFor(() => {\n      expect(TagService.getEmailTags).toHaveBeenCalledWith('email-2');\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\performance-test.js","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":78,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":78,"endColumn":45},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":98,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":98,"endColumn":57},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":115,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":115,"endColumn":50},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":131,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":131,"endColumn":52},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":146,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":146,"endColumn":56},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":344,"column":32,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":344,"endColumn":33,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12450,12451],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12450,12450],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":344,"column":34,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":344,"endColumn":35,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12452,12453],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12452,12452],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":344,"column":47,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":344,"endColumn":48,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12465,12466],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12465,12465],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":344,"column":49,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":344,"endColumn":50,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12467,12468],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12467,12467],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'dummy' is assigned a value but never used.","line":439,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":439,"endColumn":18}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Script de pruebas de rendimiento para el sistema de emails de Lovenda\n * \n * Este script simula cargas de datos y uso intensivo para evaluar\n * el rendimiento y la escalabilidad de los componentes implementados.\n */\n\n// Importar dependencias necesarias\nconst fs = require('fs');\nconst path = require('path');\nconst { performance } = require('perf_hooks');\n\n// Configuración de la prueba\nconst CONFIG = {\n  // Número de emails a generar para las pruebas\n  emailCount: {\n    small: 100,\n    medium: 1000,\n    large: 10000\n  },\n  \n  // Número de notificaciones para las pruebas\n  notificationCount: {\n    small: 50,\n    medium: 500,\n    large: 2000\n  },\n  \n  // Número de eventos para las pruebas\n  eventCount: {\n    small: 20,\n    medium: 200,\n    large: 1000\n  },\n  \n  // Número de proveedores para las pruebas\n  providerCount: {\n    small: 10,\n    medium: 50,\n    large: 200\n  },\n  \n  // Número de plantillas para las pruebas\n  templateCount: {\n    small: 5,\n    medium: 20,\n    large: 100\n  },\n  \n  // Tamaño del cuerpo de email (en caracteres) para las pruebas\n  emailBodySize: {\n    small: 1000,\n    medium: 10000,\n    large: 50000\n  },\n  \n  // Directorio para guardar resultados\n  outputDir: './performance-results',\n  \n  // Número de repeticiones para cada prueba (para obtener promedio)\n  repetitions: 5\n};\n\n// Crear directorio de resultados si no existe\nif (!fs.existsSync(CONFIG.outputDir)) {\n  fs.mkdirSync(CONFIG.outputDir, { recursive: true });\n}\n\n// Función para generar datos aleatorios\nfunction generateTestData(type, size = 'medium') {\n  console.log(`Generando datos de prueba: ${type}, tamaño: ${size}`);\n  \n  const startTime = performance.now();\n  let result = [];\n  \n  switch (type) {\n    case 'emails':\n      const count = CONFIG.emailCount[size];\n      for (let i = 0; i < count; i++) {\n        result.push({\n          id: `email_${i}`,\n          from: `sender${i % 100}@example.com`,\n          to: 'usuario@lovenda.com',\n          subject: `Asunto de prueba #${i} para evaluación de rendimiento`,\n          body: generateRandomText(CONFIG.emailBodySize[size]),\n          date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n          read: Math.random() > 0.3,\n          folder: ['inbox', 'sent', 'drafts', 'important'][Math.floor(Math.random() * 4)],\n          attachments: Math.random() > 0.7 ? [\n            { name: 'documento.pdf', size: Math.floor(Math.random() * 5000000) }\n          ] : [],\n          providerId: Math.random() > 0.5 ? `prov_${Math.floor(Math.random() * CONFIG.providerCount[size])}` : null\n        });\n      }\n      break;\n      \n    case 'notifications':\n      const notifCount = CONFIG.notificationCount[size];\n      for (let i = 0; i < notifCount; i++) {\n        result.push({\n          id: `notif_${i}`,\n          type: ['email', 'event', 'provider', 'system'][Math.floor(Math.random() * 4)],\n          message: `Notificación de prueba #${i} para evaluación de rendimiento`,\n          timestamp: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),\n          read: Math.random() > 0.4,\n          action: Math.random() > 0.6 ? ['viewEmail', 'viewEvent', 'viewProvider'][Math.floor(Math.random() * 3)] : null,\n          emailId: Math.random() > 0.6 ? `email_${Math.floor(Math.random() * CONFIG.emailCount[size])}` : null,\n          eventId: Math.random() > 0.7 ? `event_${Math.floor(Math.random() * CONFIG.eventCount[size])}` : null,\n          providerId: Math.random() > 0.8 ? `prov_${Math.floor(Math.random() * CONFIG.providerCount[size])}` : null\n        });\n      }\n      break;\n      \n    case 'events':\n      const eventCount = CONFIG.eventCount[size];\n      for (let i = 0; i < eventCount; i++) {\n        result.push({\n          id: `event_${i}`,\n          title: `Evento de prueba #${i} para evaluación de rendimiento`,\n          dateTime: new Date(Date.now() + Math.random() * 90 * 24 * 60 * 60 * 1000).toISOString(),\n          location: `Ubicación de prueba #${Math.floor(Math.random() * 20)}`,\n          description: generateRandomText(Math.floor(Math.random() * 500)),\n          attendees: Array.from({ length: Math.floor(Math.random() * 10) }, (_, j) => `Asistente ${j}`),\n          providerRelated: Math.random() > 0.6,\n          providerId: Math.random() > 0.6 ? `prov_${Math.floor(Math.random() * CONFIG.providerCount[size])}` : null\n        });\n      }\n      break;\n      \n    case 'providers':\n      const provCount = CONFIG.providerCount[size];\n      for (let i = 0; i < provCount; i++) {\n        result.push({\n          id: `prov_${i}`,\n          name: `Proveedor de prueba #${i}`,\n          type: ['Catering', 'Fotografía', 'Flores', 'Música', 'Decoración'][Math.floor(Math.random() * 5)],\n          contact: `proveedor${i}@ejemplo.com`,\n          phone: `+34 ${Math.floor(Math.random() * 900000000) + 600000000}`,\n          description: generateRandomText(Math.floor(Math.random() * 300) + 200),\n          rating: Math.floor(Math.random() * 5) + 1\n        });\n      }\n      break;\n      \n    case 'templates':\n      const templateCount = CONFIG.templateCount[size];\n      for (let i = 0; i < templateCount; i++) {\n        result.push({\n          id: `template_${i}`,\n          name: `Plantilla de prueba #${i}`,\n          category: ['Proveedores - Solicitud de información', 'Proveedores - Confirmación', 'General'][Math.floor(Math.random() * 3)],\n          subject: `Asunto de plantilla #${i}: {{variable1}}`,\n          body: `<p>Estimado/a {{nombre_proveedor}}:</p>\n          <p>${generateRandomText(Math.floor(Math.random() * 500) + 500)}</p>\n          <p>La fecha sería {{fecha_evento}} y necesitaríamos {{servicio}}.</p>\n          <p>Saludos cordiales,</p>\n          <p>{{nombre_usuario}}</p>`,\n          variables: ['variable1', 'nombre_proveedor', 'fecha_evento', 'servicio', 'nombre_usuario'],\n          isSystem: Math.random() > 0.8\n        });\n      }\n      break;\n  }\n  \n  const endTime = performance.now();\n  console.log(`✅ Generados ${result.length} elementos en ${((endTime - startTime) / 1000).toFixed(2)} segundos`);\n  \n  return result;\n}\n\n// Función para generar texto aleatorio\nfunction generateRandomText(length) {\n  const lorem = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.`;\n  \n  let result = '';\n  while (result.length < length) {\n    result += lorem;\n  }\n  \n  return result.substring(0, length);\n}\n\n// Función para ejecutar pruebas de rendimiento\nasync function runPerformanceTest(testName, testFunction, params = {}, size = 'medium') {\n  console.log(`\\n=============================================`);\n  console.log(`INICIANDO PRUEBA: ${testName} (tamaño: ${size})`);\n  console.log(`=============================================`);\n  \n  const results = {\n    testName,\n    size,\n    params,\n    times: [],\n    avgTime: 0,\n    minTime: Number.MAX_SAFE_INTEGER,\n    maxTime: 0,\n    metadata: {}\n  };\n  \n  // Ejecutar prueba varias veces para obtener un promedio\n  for (let i = 0; i < CONFIG.repetitions; i++) {\n    console.log(`Ejecución ${i + 1}/${CONFIG.repetitions}`);\n    \n    const startTime = performance.now();\n    const testResult = await testFunction(params);\n    const endTime = performance.now();\n    \n    const executionTime = endTime - startTime;\n    results.times.push(executionTime);\n    results.minTime = Math.min(results.minTime, executionTime);\n    results.maxTime = Math.max(results.maxTime, executionTime);\n    \n    // Guardar metadata adicional del resultado si existe\n    if (testResult && testResult.metadata) {\n      results.metadata = { ...results.metadata, ...testResult.metadata };\n    }\n    \n    console.log(`✅ Completado en ${(executionTime / 1000).toFixed(2)} segundos`);\n  }\n  \n  // Calcular promedio\n  results.avgTime = results.times.reduce((sum, time) => sum + time, 0) / results.times.length;\n  \n  // Guardar resultados\n  const resultsPath = path.join(CONFIG.outputDir, `${testName.toLowerCase().replace(/\\s+/g, '_')}_${size}.json`);\n  fs.writeFileSync(resultsPath, JSON.stringify(results, null, 2));\n  \n  console.log(`\\n📊 RESULTADOS DE LA PRUEBA: ${testName}`);\n  console.log(`Tiempo promedio: ${(results.avgTime / 1000).toFixed(2)} segundos`);\n  console.log(`Tiempo mínimo: ${(results.minTime / 1000).toFixed(2)} segundos`);\n  console.log(`Tiempo máximo: ${(results.maxTime / 1000).toFixed(2)} segundos`);\n  console.log(`Resultados guardados en: ${resultsPath}\\n`);\n  \n  return results;\n}\n\n// Prueba: Búsqueda global\nasync function testGlobalSearch(params) {\n  const { emails, events, providers, query } = params;\n  console.log(`Probando búsqueda con ${emails.length} emails, ${events.length} eventos, ${providers.length} proveedores`);\n  console.log(`Término de búsqueda: \"${query}\"`);\n  \n  // Simulación de búsqueda\n  const results = {\n    emails: [],\n    events: [],\n    providers: []\n  };\n  \n  // Buscar en emails\n  const emailResults = emails.filter(email => \n    email.subject.toLowerCase().includes(query.toLowerCase()) || \n    email.body.toLowerCase().includes(query.toLowerCase()) ||\n    email.from.toLowerCase().includes(query.toLowerCase())\n  );\n  results.emails = emailResults.slice(0, 5);\n  \n  // Buscar en eventos\n  const eventResults = events.filter(event => \n    event.title.toLowerCase().includes(query.toLowerCase()) || \n    event.description.toLowerCase().includes(query.toLowerCase()) ||\n    event.location.toLowerCase().includes(query.toLowerCase())\n  );\n  results.events = eventResults.slice(0, 5);\n  \n  // Buscar en proveedores\n  const providerResults = providers.filter(provider => \n    provider.name.toLowerCase().includes(query.toLowerCase()) || \n    provider.type.toLowerCase().includes(query.toLowerCase()) ||\n    provider.description.toLowerCase().includes(query.toLowerCase())\n  );\n  results.providers = providerResults.slice(0, 5);\n  \n  return {\n    resultsCount: results.emails.length + results.events.length + results.providers.length,\n    metadata: {\n      totalMatches: emailResults.length + eventResults.length + providerResults.length,\n      emailMatches: emailResults.length,\n      eventMatches: eventResults.length,\n      providerMatches: providerResults.length\n    }\n  };\n}\n\n// Prueba: Filtrado y ordenación de emails\nasync function testEmailFiltering(params) {\n  const { emails, filterCriteria } = params;\n  console.log(`Probando filtrado con ${emails.length} emails`);\n  console.log(`Criterios: ${JSON.stringify(filterCriteria)}`);\n  \n  // Aplicar filtros\n  let filteredEmails = [...emails];\n  \n  if (filterCriteria.folder) {\n    filteredEmails = filteredEmails.filter(email => email.folder === filterCriteria.folder);\n  }\n  \n  if (filterCriteria.read !== undefined) {\n    filteredEmails = filteredEmails.filter(email => email.read === filterCriteria.read);\n  }\n  \n  if (filterCriteria.hasAttachments !== undefined) {\n    filteredEmails = filteredEmails.filter(email => \n      filterCriteria.hasAttachments ? (email.attachments && email.attachments.length > 0) : (!email.attachments || email.attachments.length === 0)\n    );\n  }\n  \n  if (filterCriteria.fromProvider !== undefined) {\n    filteredEmails = filteredEmails.filter(email => \n      filterCriteria.fromProvider ? !!email.providerId : !email.providerId\n    );\n  }\n  \n  // Ordenar resultados\n  if (filterCriteria.sortBy) {\n    filteredEmails.sort((a, b) => {\n      if (filterCriteria.sortBy === 'date') {\n        return filterCriteria.sortOrder === 'asc' \n          ? new Date(a.date) - new Date(b.date)\n          : new Date(b.date) - new Date(a.date);\n      }\n      return 0;\n    });\n  }\n  \n  return {\n    filteredCount: filteredEmails.length,\n    metadata: {\n      originalCount: emails.length,\n      reductionPercentage: ((emails.length - filteredEmails.length) / emails.length * 100).toFixed(2) + '%'\n    }\n  };\n}\n\n// Prueba: Detección de eventos en emails\nasync function testEventDetection(params) {\n  const { emails } = params;\n  console.log(`Probando detección de eventos con ${emails.length} emails`);\n  \n  let detectedEvents = 0;\n  let processedEmails = 0;\n  \n  // Expresiones regulares para detectar fechas y horas\n  const dateRegex = /(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})|(\\d{1,2}) de ([a-zá-úñ]+)( de (\\d{4}))?/gi;\n  const timeRegex = /(\\d{1,2}):(\\d{2})( ?(?:AM|PM|a\\.m\\.|p\\.m\\.))?/gi;\n  \n  for (const email of emails) {\n    processedEmails++;\n    \n    // Comprobar si el email contiene fecha y hora (potencial evento)\n    const hasDate = dateRegex.test(email.body);\n    dateRegex.lastIndex = 0; // Reiniciar índice\n    \n    const hasTime = timeRegex.test(email.body);\n    timeRegex.lastIndex = 0; // Reiniciar índice\n    \n    if (hasDate && hasTime) {\n      detectedEvents++;\n    }\n    \n    // Para simular procesamiento y no bloquear completamente\n    if (processedEmails % 100 === 0) {\n      await new Promise(resolve => setTimeout(resolve, 1));\n    }\n  }\n  \n  return {\n    detectedEvents,\n    metadata: {\n      totalEmails: emails.length,\n      detectionRate: ((detectedEvents / emails.length) * 100).toFixed(2) + '%'\n    }\n  };\n}\n\n// Prueba: Aplicación de plantillas con variables\nasync function testTemplateApplication(params) {\n  const { templates, variables } = params;\n  console.log(`Probando aplicación de plantillas con ${templates.length} plantillas`);\n  \n  const results = [];\n  \n  for (const template of templates) {\n    let subject = template.subject;\n    let body = template.body;\n    \n    // Reemplazar variables\n    for (const [key, value] of Object.entries(variables)) {\n      const regex = new RegExp(`{{${key}}}`, 'g');\n      subject = subject.replace(regex, value);\n      body = body.replace(regex, value);\n    }\n    \n    results.push({\n      templateId: template.id,\n      processedSubject: subject,\n      // No incluir el cuerpo completo para no sobrecargar los resultados\n      bodyLength: body.length,\n      variablesReplaced: Object.keys(variables).length\n    });\n  }\n  \n  return {\n    processedCount: results.length,\n    metadata: {\n      averageBodyLength: results.reduce((sum, item) => sum + item.bodyLength, 0) / results.length\n    }\n  };\n}\n\n// Prueba: Carga y renderizado de notificaciones\nasync function testNotificationRendering(params) {\n  const { notifications, batchSize } = params;\n  console.log(`Probando renderizado de notificaciones con ${notifications.length} notificaciones`);\n  \n  const batches = [];\n  for (let i = 0; i < notifications.length; i += batchSize) {\n    batches.push(notifications.slice(i, i + batchSize));\n  }\n  \n  let totalRenderTime = 0;\n  \n  for (let i = 0; i < batches.length; i++) {\n    const batch = batches[i];\n    const startTime = performance.now();\n    \n    // Simular renderizado procesando cada notificación\n    for (const notification of batch) {\n      // Operaciones para simular procesamiento del renderizado\n      const formattedTimestamp = new Date(notification.timestamp).toLocaleString();\n      const isHighPriority = !notification.read && ['email', 'system'].includes(notification.type);\n      const actionUrl = notification.action \n        ? `/${notification.action.replace('view', '').toLowerCase()}/${\n            notification.emailId || notification.eventId || notification.providerId\n          }`\n        : '';\n      \n      // Simular creación de elementos DOM\n      const dummy = {\n        type: notification.type,\n        message: notification.message,\n        timestamp: formattedTimestamp,\n        priority: isHighPriority ? 'high' : 'normal',\n        url: actionUrl,\n        read: notification.read\n      };\n    }\n    \n    const endTime = performance.now();\n    totalRenderTime += (endTime - startTime);\n    \n    // Para simular procesamiento y no bloquear completamente\n    await new Promise(resolve => setTimeout(resolve, 1));\n  }\n  \n  return {\n    batchCount: batches.length,\n    averageBatchRenderTime: totalRenderTime / batches.length,\n    metadata: {\n      totalNotifications: notifications.length,\n      batchSize,\n      estimatedDOMElements: notifications.length * 5 // Aproximación de elementos DOM por notificación\n    }\n  };\n}\n\n// Función principal\nasync function runAllTests() {\n  console.log(`\n  =======================================================\n  🚀 INICIANDO PRUEBAS DE RENDIMIENTO DE LOVENDA EMAIL\n  =======================================================\n  \n  Configuración:\n  - Repeticiones por prueba: ${CONFIG.repetitions}\n  - Directorio de resultados: ${CONFIG.outputDir}\n  \n  =======================================================\n  `);\n  \n  const startTime = performance.now();\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n  \n  // Crear datos de prueba para cada tamaño\n  const testSizes = ['small', 'medium', 'large'];\n  const testData = {};\n  \n  for (const size of testSizes) {\n    testData[size] = {\n      emails: generateTestData('emails', size),\n      notifications: generateTestData('notifications', size),\n      events: generateTestData('events', size),\n      providers: generateTestData('providers', size),\n      templates: generateTestData('templates', size)\n    };\n  }\n  \n  // Ejecutar pruebas para cada tamaño\n  const allResults = {};\n  \n  for (const size of testSizes) {\n    console.log(`\\n\\n=======================================================`);\n    console.log(`EJECUTANDO PRUEBAS CON TAMAÑO DE DATOS: ${size.toUpperCase()}`);\n    console.log(`=======================================================\\n`);\n    \n    // Prueba de búsqueda global\n    allResults[`globalSearch_${size}`] = await runPerformanceTest(\n      'Búsqueda global',\n      testGlobalSearch,\n      {\n        emails: testData[size].emails,\n        events: testData[size].events,\n        providers: testData[size].providers,\n        query: 'prueba'\n      },\n      size\n    );\n    \n    // Prueba de filtrado y ordenación de emails\n    allResults[`emailFiltering_${size}`] = await runPerformanceTest(\n      'Filtrado de emails',\n      testEmailFiltering,\n      {\n        emails: testData[size].emails,\n        filterCriteria: {\n          folder: 'inbox',\n          read: false,\n          hasAttachments: true,\n          sortBy: 'date',\n          sortOrder: 'desc'\n        }\n      },\n      size\n    );\n    \n    // Prueba de detección de eventos\n    allResults[`eventDetection_${size}`] = await runPerformanceTest(\n      'Detección de eventos',\n      testEventDetection,\n      {\n        emails: testData[size].emails\n      },\n      size\n    );\n    \n    // Prueba de aplicación de plantillas\n    allResults[`templateApplication_${size}`] = await runPerformanceTest(\n      'Aplicación de plantillas',\n      testTemplateApplication,\n      {\n        templates: testData[size].templates,\n        variables: {\n          nombre_proveedor: 'Empresa Ejemplo',\n          fecha_evento: '15/09/2025',\n          servicio: 'fotografía profesional',\n          nombre_usuario: 'María García',\n          variable1: 'Consulta sobre servicios'\n        }\n      },\n      size\n    );\n    \n    // Prueba de renderizado de notificaciones\n    allResults[`notificationRendering_${size}`] = await runPerformanceTest(\n      'Renderizado de notificaciones',\n      testNotificationRendering,\n      {\n        notifications: testData[size].notifications,\n        batchSize: size === 'small' ? 10 : size === 'medium' ? 25 : 50\n      },\n      size\n    );\n  }\n  \n  // Generar informe resumen\n  const endTime = performance.now();\n  const totalExecutionTime = (endTime - startTime) / 1000;\n  \n  const summaryReport = {\n    timestamp,\n    totalExecutionTime,\n    tests: Object.values(allResults).map(result => ({\n      name: result.testName,\n      size: result.size,\n      avgTime: result.avgTime,\n      minTime: result.minTime,\n      maxTime: result.maxTime\n    })),\n    recommendations: []\n  };\n  \n  // Añadir recomendaciones basadas en resultados\n  if (allResults.globalSearch_large.avgTime > 1000) {\n    summaryReport.recommendations.push(\n      'Implementar caché para resultados de búsqueda global con conjuntos de datos grandes'\n    );\n  }\n  \n  if (allResults.notificationRendering_large.averageBatchRenderTime > 500) {\n    summaryReport.recommendations.push(\n      'Considerar virtualización para listas de notificaciones con más de 50 elementos'\n    );\n  }\n  \n  if (allResults.emailFiltering_large.avgTime > 800) {\n    summaryReport.recommendations.push(\n      'Optimizar algoritmos de filtrado para grandes volúmenes de emails'\n    );\n  }\n  \n  // Guardar informe resumen\n  const summaryPath = path.join(CONFIG.outputDir, `resumen_pruebas_${timestamp}.json`);\n  fs.writeFileSync(summaryPath, JSON.stringify(summaryReport, null, 2));\n  \n  console.log(`\\n\\n=======================================================`);\n  console.log(`✅ PRUEBAS DE RENDIMIENTO COMPLETADAS`);\n  console.log(`=======================================================`);\n  console.log(`Tiempo total de ejecución: ${totalExecutionTime.toFixed(2)} segundos`);\n  console.log(`Informe resumen guardado en: ${summaryPath}`);\n  \n  if (summaryReport.recommendations.length > 0) {\n    console.log(`\\n📋 RECOMENDACIONES DE OPTIMIZACIÓN:`);\n    summaryReport.recommendations.forEach((rec, i) => {\n      console.log(`${i + 1}. ${rec}`);\n    });\n  }\n  \n  return summaryReport;\n}\n\n// Ejecutar todas las pruebas\nrunAllTests().catch(error => {\n  console.error('❌ Error durante la ejecución de las pruebas:', error);\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\performance\\email-system.perf.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\security\\email-security.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\services\\AIEmailTrackingService.test.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'aiResult' is assigned a value but never used.","line":100,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport AIEmailTrackingService from '../../services/AIEmailTrackingService';\n\ndescribe('AIEmailTrackingService', () => {\n  let trackingService;\n  let localStorageMock;\n  \n  // Mock de localStorage\n  beforeEach(() => {\n    localStorageMock = {\n      store: {},\n      getItem: vi.fn((key) => localStorageMock.store[key] || null),\n      setItem: vi.fn((key, value) => {\n        localStorageMock.store[key] = value.toString();\n      }),\n      removeItem: vi.fn((key) => {\n        delete localStorageMock.store[key];\n      }),\n      clear: vi.fn(() => {\n        localStorageMock.store = {};\n      })\n    };\n    \n    Object.defineProperty(window, 'localStorage', {\n      value: localStorageMock,\n      writable: true\n    });\n    \n    trackingService = new AIEmailTrackingService();\n    \n    // Mockear console.log/error para evitar salida durante las pruebas\n    vi.spyOn(console, 'log').mockImplementation(() => {});\n    vi.spyOn(console, 'error').mockImplementation(() => {});\n  });\n  \n  afterEach(() => {\n    vi.resetAllMocks();\n    \n    // Restaurar localStorage original\n    Object.defineProperty(window, 'localStorage', {\n      value: window.localStorage,\n      writable: true\n    });\n  });\n  \n  it('debe inicializarse correctamente', () => {\n    expect(trackingService).toBeDefined();\n    expect(trackingService.storageKeyActivities).toBe('aiEmailActivities');\n    expect(trackingService.storageKeyMetrics).toBe('aiEmailMetrics');\n  });\n  \n  it('debe registrar una actividad AI correctamente', () => {\n    const aiResult = {\n      id: 123,\n      name: 'Fotógrafo Test',\n      service: 'fotografía'\n    };\n    \n    const searchQuery = 'fotografía para boda';\n    const options = { templateCategory: 'fotografía', wasCustomized: false };\n    \n    const activityId = trackingService.registerActivity(aiResult, searchQuery, options);\n    \n    // Verificar que se generó un ID\n    expect(activityId).toBeDefined();\n    expect(typeof activityId).toBe('string');\n    expect(activityId.startsWith('ai_')).toBe(true);\n    \n    // Verificar que se llamó a localStorage.setItem con los datos correctos\n    expect(localStorage.setItem).toHaveBeenCalled();\n    \n    // Verificar que los datos se almacenaron correctamente\n    const storedDataArg = localStorage.setItem.mock.calls[0][1];\n    const storedData = JSON.parse(storedDataArg);\n    \n    expect(Array.isArray(storedData)).toBe(true);\n    expect(storedData.length).toBe(1);\n    expect(storedData[0].aiResultId).toBe(123);\n    expect(storedData[0].providerName).toBe('Fotógrafo Test');\n    expect(storedData[0].providerCategory).toBe('fotografía');\n    expect(storedData[0].searchQuery).toBe('fotografía para boda');\n    expect(storedData[0].templateCategory).toBe('fotografía');\n    expect(storedData[0].wasCustomized).toBe(false);\n  });\n  \n  it('debe manejar errores durante el registro de actividad', () => {\n    // Forzar un error en setItem\n    localStorage.setItem.mockImplementationOnce(() => {\n      throw new Error('Error simulado');\n    });\n    \n    const activityId = trackingService.registerActivity({}, 'consulta');\n    \n    expect(console.error).toHaveBeenCalled();\n    expect(activityId).toBeNull();\n  });\n  \n  it('debe actualizar una actividad cuando se recibe respuesta', () => {\n    // Preparar datos de prueba\n    const aiResult = { id: 123, name: 'Proveedor Test' };\n    localStorage.getItem.mockReturnValueOnce(JSON.stringify([\n      { id: 'ai_123', aiResultId: 123, timestamp: new Date().toISOString() }\n    ]));\n    \n    const success = trackingService.updateWithResponse('ai_123', { score: 5 });\n    \n    expect(success).toBe(true);\n    expect(localStorage.setItem).toHaveBeenCalled();\n    \n    const storedDataArg = localStorage.setItem.mock.calls[0][1];\n    const storedData = JSON.parse(storedDataArg);\n    \n    expect(storedData[0].status).toBe('responded');\n    expect(storedData[0].responseReceived).toBe(true);\n    expect(storedData[0].responseTime).toBeDefined();\n    expect(storedData[0].effectivenessScore).toBe(5);\n  });\n  \n  it('debe retornar false al actualizar una actividad que no existe', () => {\n    localStorage.getItem.mockReturnValueOnce(JSON.stringify([\n      { id: 'ai_123', aiResultId: 123 }\n    ]));\n    \n    const success = trackingService.updateWithResponse('ai_456', { score: 5 });\n    \n    expect(success).toBe(false);\n  });\n  \n  it('debe obtener actividades filtradas correctamente', () => {\n    const mockActivities = [\n      { \n        id: 'ai_1', \n        providerName: 'Fotógrafo A', \n        templateCategory: 'fotografía', \n        responseReceived: true,\n        status: 'responded',\n        wasCustomized: true\n      },\n      { \n        id: 'ai_2', \n        providerName: 'Catering B', \n        templateCategory: 'catering', \n        responseReceived: false,\n        status: 'sent',\n        wasCustomized: false\n      }\n    ];\n    \n    localStorage.getItem.mockReturnValueOnce(JSON.stringify(mockActivities));\n    \n    // Sin filtros\n    let result = trackingService.getActivities();\n    expect(result).toHaveLength(2);\n    \n    // Filtrar por categoría\n    localStorage.getItem.mockReturnValueOnce(JSON.stringify(mockActivities));\n    result = trackingService.getActivities({ category: 'fotografía' });\n    expect(result).toHaveLength(1);\n    expect(result[0].id).toBe('ai_1');\n    \n    // Filtrar por estado de respuesta\n    localStorage.getItem.mockReturnValueOnce(JSON.stringify(mockActivities));\n    result = trackingService.getActivities({ responded: true });\n    expect(result).toHaveLength(1);\n    expect(result[0].id).toBe('ai_1');\n    \n    // Filtrar por personalización\n    localStorage.getItem.mockReturnValueOnce(JSON.stringify(mockActivities));\n    result = trackingService.getActivities({ customized: true });\n    expect(result).toHaveLength(1);\n    expect(result[0].id).toBe('ai_1');\n    \n    // Filtrar por nombre de proveedor\n    localStorage.getItem.mockReturnValueOnce(JSON.stringify(mockActivities));\n    result = trackingService.getActivities({ providerName: 'Catering' });\n    expect(result).toHaveLength(1);\n    expect(result[0].id).toBe('ai_2');\n  });\n  \n  it('debe calcular métricas correctamente', () => {\n    const mockActivities = [\n      {\n        id: 'ai_1',\n        templateCategory: 'fotografía',\n        responseReceived: true,\n        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1 día atrás\n        responseTime: 5.5,\n        wasCustomized: true\n      },\n      {\n        id: 'ai_2',\n        templateCategory: 'fotografía',\n        responseReceived: false,\n        timestamp: new Date().toISOString(),\n        wasCustomized: false\n      },\n      {\n        id: 'ai_3',\n        templateCategory: 'catering',\n        responseReceived: true,\n        timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(), // 12 horas atrás\n        responseTime: 3.2,\n        wasCustomized: false\n      }\n    ];\n    \n    localStorage.getItem.mockReturnValueOnce(JSON.stringify(mockActivities));\n    \n    const metrics = trackingService.updateOverallMetrics();\n    \n    expect(metrics).toBeDefined();\n    expect(metrics.totalEmails).toBe(3);\n    expect(metrics.totalResponses).toBe(2);\n    expect(metrics.responseRate).toBe((2/3) * 100);\n    \n    // Verificar estadísticas por categoría\n    expect(metrics.categoryStats).toBeDefined();\n    expect(metrics.categoryStats.fotografía).toBeDefined();\n    expect(metrics.categoryStats.fotografía.total).toBe(2);\n    expect(metrics.categoryStats.fotografía.responded).toBe(1);\n    \n    expect(metrics.categoryStats.catering).toBeDefined();\n    expect(metrics.categoryStats.catering.total).toBe(1);\n    expect(metrics.categoryStats.catering.responded).toBe(1);\n  });\n  \n  it('debe obtener datos de comparación', () => {\n    // Mock de datos de email\n    const mockEmailTrackings = [\n      { isAIGenerated: true, hasResponse: true, sentDate: '2023-01-01T10:00:00Z', responseDate: '2023-01-01T18:00:00Z' },\n      { isAIGenerated: false, hasResponse: true, sentDate: '2023-01-01T10:00:00Z', responseDate: '2023-01-02T10:00:00Z' },\n      { isAIGenerated: false, hasResponse: false, sentDate: '2023-01-01T10:00:00Z' },\n      { isAIGenerated: false, hasResponse: true, sentDate: '2023-01-01T10:00:00Z', responseDate: '2023-01-01T22:00:00Z' }\n    ];\n    \n    // Mock de métricas AI\n    const mockMetrics = {\n      totalEmails: 1,\n      totalResponses: 1,\n      responseRate: 100,\n      averageResponseTime: 8,\n      categoryStats: {\n        fotografía: {\n          total: 1,\n          responded: 1,\n          averageResponseTime: 8\n        }\n      }\n    };\n    \n    // Mock para getMetrics\n    vi.spyOn(trackingService, 'getMetrics').mockReturnValue(mockMetrics);\n    \n    // Mock para localStorage.getItem (emailTrackings)\n    localStorage.getItem.mockReturnValueOnce(JSON.stringify(mockEmailTrackings));\n    \n    const comparison = trackingService.getComparisonData();\n    \n    expect(comparison).toBeDefined();\n    expect(comparison.ai).toBeDefined();\n    expect(comparison.nonAi).toBeDefined();\n    expect(comparison.difference).toBeDefined();\n    \n    // Verificar datos de AI\n    expect(comparison.ai.total).toBe(1);\n    expect(comparison.ai.responded).toBe(1);\n    expect(comparison.ai.responseRate).toBe('100.00');\n    \n    // Verificar datos de no-AI\n    expect(comparison.nonAi.total).toBe(3);\n    expect(comparison.nonAi.responded).toBe(2);\n    \n    // Verificar desglose por categoría\n    expect(comparison.categoryBreakdown).toHaveLength(1);\n    expect(comparison.categoryBreakdown[0].category).toBe('fotografía');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\services\\EmailRecommendationService.test.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'AIEmailTrackingService' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport EmailRecommendationService from '../../services/EmailRecommendationService';\nimport AIEmailTrackingService from '../../services/AIEmailTrackingService';\n\n// Mock del servicio de tracking\nvi.mock('../../services/AIEmailTrackingService', () => {\n  return {\n    default: vi.fn().mockImplementation(() => ({\n      getActivities: vi.fn(),\n      getMetrics: vi.fn(),\n      getComparisonData: vi.fn()\n    }))\n  };\n});\n\ndescribe('EmailRecommendationService', () => {\n  let recommendationService;\n  let mockTrackingService;\n  let localStorageMock;\n  \n  // Mock de datos de actividad para pruebas\n  const mockActivities = [\n    {\n      id: 'ai_1',\n      providerName: 'Fotógrafo Test',\n      templateCategory: 'fotografía',\n      wasCustomized: true,\n      responseReceived: true,\n      responseTime: 5.5,\n      timestamp: '2023-01-01T10:30:00Z' // Mañana\n    },\n    {\n      id: 'ai_2',\n      providerName: 'DJ Prueba',\n      templateCategory: 'música',\n      wasCustomized: false,\n      responseReceived: true,\n      responseTime: 8.2,\n      timestamp: '2023-01-01T14:30:00Z' // Tarde\n    },\n    {\n      id: 'ai_3',\n      providerName: 'Catering Example',\n      templateCategory: 'catering',\n      wasCustomized: true,\n      responseReceived: false,\n      timestamp: '2023-01-01T18:30:00Z' // Noche\n    },\n    {\n      id: 'ai_4',\n      providerName: 'Fotógrafo B',\n      templateCategory: 'fotografía',\n      wasCustomized: false,\n      responseReceived: false,\n      timestamp: '2023-01-02T10:30:00Z'\n    },\n    {\n      id: 'ai_5',\n      providerName: 'Catering B',\n      templateCategory: 'catering',\n      wasCustomized: true,\n      responseReceived: true,\n      responseTime: 3.2,\n      timestamp: '2023-01-02T11:30:00Z'\n    },\n  ];\n  \n  // Mock de métricas\n  const mockMetrics = {\n    totalEmails: 5,\n    totalResponses: 3,\n    responseRate: 60,\n    averageResponseTime: 5.6,\n    categoryStats: {\n      'fotografía': {\n        total: 2,\n        responded: 1,\n        averageResponseTime: 5.5\n      },\n      'música': {\n        total: 1,\n        responded: 1,\n        averageResponseTime: 8.2\n      },\n      'catering': {\n        total: 2,\n        responded: 1,\n        averageResponseTime: 3.2\n      }\n    }\n  };\n  \n  // Mock de datos de comparación\n  const mockComparisonData = {\n    ai: {\n      total: 5,\n      responded: 3,\n      responseRate: '60.00',\n      avgResponseTime: '5.6'\n    },\n    nonAi: {\n      total: 10,\n      responded: 5,\n      responseRate: '50.00',\n      avgResponseTime: '12.0'\n    },\n    difference: {\n      responseRate: '10.00',\n      avgResponseTime: '6.4'\n    },\n    categoryBreakdown: [\n      {\n        category: 'fotografía',\n        total: 2,\n        responseRate: '50.00',\n        avgResponseTime: '5.5'\n      },\n      {\n        category: 'música',\n        total: 1,\n        responseRate: '100.00',\n        avgResponseTime: '8.2'\n      },\n      {\n        category: 'catering',\n        total: 2,\n        responseRate: '50.00',\n        avgResponseTime: '3.2'\n      }\n    ]\n  };\n  \n  // Mock de localStorage\n  beforeEach(() => {\n    localStorageMock = {\n      store: {},\n      getItem: vi.fn((key) => localStorageMock.store[key] || null),\n      setItem: vi.fn((key, value) => {\n        localStorageMock.store[key] = value.toString();\n      }),\n      removeItem: vi.fn((key) => {\n        delete localStorageMock.store[key];\n      }),\n      clear: vi.fn(() => {\n        localStorageMock.store = {};\n      })\n    };\n    \n    Object.defineProperty(window, 'localStorage', {\n      value: localStorageMock,\n      writable: true\n    });\n    \n    // Crear instancia de servicio y configurar mocks\n    recommendationService = new EmailRecommendationService();\n    mockTrackingService = recommendationService.trackingService;\n    \n    // Configurar respuestas mock\n    mockTrackingService.getActivities.mockReturnValue(mockActivities);\n    mockTrackingService.getMetrics.mockReturnValue(mockMetrics);\n    mockTrackingService.getComparisonData.mockReturnValue(mockComparisonData);\n    \n    // Mockear console.error para evitar salida durante las pruebas\n    vi.spyOn(console, 'error').mockImplementation(() => {});\n  });\n  \n  afterEach(() => {\n    vi.resetAllMocks();\n    \n    // Restaurar localStorage original\n    Object.defineProperty(window, 'localStorage', {\n      value: window.localStorage,\n      writable: true\n    });\n  });\n  \n  it('debe inicializarse correctamente', () => {\n    expect(recommendationService).toBeDefined();\n    expect(recommendationService.trackingService).toBeDefined();\n    expect(recommendationService.storageKeyRecommendations).toBe('emailRecommendations');\n  });\n  \n  it('debe generar recomendaciones básicas sin parámetros', () => {\n    const recommendations = recommendationService.generateRecommendations();\n    \n    // Verificar que se generan todas las secciones de recomendaciones\n    expect(recommendations).toBeDefined();\n    expect(recommendations.bestTimeToSend).toBeDefined();\n    expect(recommendations.subjectLineRecommendations).toBeDefined();\n    expect(recommendations.templateRecommendations).toBeDefined();\n    expect(recommendations.customizationImpact).toBeDefined();\n    expect(recommendations.responseTimeExpectations).toBeDefined();\n    expect(recommendations.confidenceScore).toBeDefined();\n    \n    // Verificar que se llamaron los métodos necesarios\n    expect(mockTrackingService.getActivities).toHaveBeenCalled();\n    expect(mockTrackingService.getMetrics).toHaveBeenCalled();\n    expect(mockTrackingService.getComparisonData).toHaveBeenCalled();\n    \n    // Verificar que se guardaron las recomendaciones en localStorage\n    expect(localStorage.setItem).toHaveBeenCalled();\n  });\n  \n  it('debe calcular correctamente el mejor momento para enviar', () => {\n    const recommendations = recommendationService.generateRecommendations();\n    \n    // Con nuestros datos de prueba, el mejor momento debería ser la mañana\n    // ya que tiene mejor tasa de respuesta en nuestros datos mock\n    expect(recommendations.bestTimeToSend.bestTimeSlot).toBe('morning');\n    expect(recommendations.bestTimeToSend.hasSufficientData).toBeTruthy();\n  });\n  \n  it('debe generar recomendaciones específicas para una categoría', () => {\n    const recommendations = recommendationService.generateRecommendations('fotografía');\n    \n    // Verificar que se incluyen recomendaciones específicas para la categoría\n    expect(recommendations.categorySpecific).toBeDefined();\n    \n    // Con los datos mock, debería haber suficientes datos para fotografía\n    expect(recommendations.templateRecommendations.categorySpecificTemplate).toBeDefined();\n    expect(recommendations.templateRecommendations.categorySpecificTemplate.category).toBe('fotografía');\n  });\n  \n  it('debe generar recomendaciones basadas en una consulta de búsqueda', () => {\n    const recommendations = recommendationService.generateRecommendations(null, 'fotografía para boda en Madrid');\n    \n    // Verificar que se incluyen recomendaciones basadas en la consulta\n    expect(recommendations.querySpecific).toBeDefined();\n    expect(recommendations.querySpecific.searchContext.includesLocation).toBe(true);\n    expect(recommendations.querySpecific.searchContext.includesDate).toBe(false);\n  });\n  \n  it('debe calcular correctamente el impacto de personalización', () => {\n    const recommendations = recommendationService.generateRecommendations();\n    \n    // Con nuestros datos mock, la personalización debería tener impacto positivo\n    expect(recommendations.customizationImpact).toBeDefined();\n    expect(recommendations.customizationImpact.customized).toBeDefined();\n    expect(recommendations.customizationImpact.nonCustomized).toBeDefined();\n    \n    // Verificar cálculo del impacto\n    const customizedRate = parseFloat(recommendations.customizationImpact.customized.rate);\n    const nonCustomizedRate = parseFloat(recommendations.customizationImpact.nonCustomized.rate);\n    const calculatedImpact = (customizedRate - nonCustomizedRate).toFixed(1);\n    \n    expect(recommendations.customizationImpact.impact).toBe(calculatedImpact);\n  });\n  \n  it('debe calcular correctamente las expectativas de tiempo de respuesta', () => {\n    const recommendations = recommendationService.generateRecommendations();\n    \n    // Verificar que las expectativas de tiempo incluyen los valores correctos\n    expect(recommendations.responseTimeExpectations).toBeDefined();\n    expect(recommendations.responseTimeExpectations.hasSufficientData).toBe(true);\n    \n    // Con nuestros datos mock, el tiempo promedio debería ser calculado correctamente\n    const respondedActivities = mockActivities.filter(a => a.responseReceived && a.responseTime);\n    const avgTime = respondedActivities.reduce((sum, act) => sum + act.responseTime, 0) / respondedActivities.length;\n    \n    expect(recommendations.responseTimeExpectations.averageTime).toBe(avgTime.toFixed(1));\n  });\n  \n  it('debe manejar errores durante la generación de recomendaciones', () => {\n    // Forzar un error en getActivities\n    mockTrackingService.getActivities.mockImplementationOnce(() => {\n      throw new Error('Error simulado');\n    });\n    \n    const recommendations = recommendationService.generateRecommendations();\n    \n    // Verificar que se devuelven recomendaciones por defecto\n    expect(recommendations).toBeDefined();\n    expect(console.error).toHaveBeenCalled();\n    expect(recommendations.confidenceScore).toBe(20); // Puntuación baja por defecto\n  });\n  \n  it('debe guardar y recuperar el historial de recomendaciones', () => {\n    // Generar recomendaciones para guardarlas\n    recommendationService.generateRecommendations('fotografía', 'fotos para boda');\n    \n    // Recuperar historial\n    const history = recommendationService.getRecommendationsHistory();\n    \n    // Verificar que se guardó correctamente\n    expect(history).toBeDefined();\n    expect(Array.isArray(history)).toBe(true);\n    expect(history.length).toBeGreaterThan(0);\n    expect(history[0].category).toBe('fotografía');\n    expect(history[0].searchQuery).toBe('fotos para boda');\n  });\n  \n  it('debe marcar una recomendación como aplicada', () => {\n    // Preparar datos de prueba\n    const mockRecommendations = [\n      { id: 'rec_123', applied: false }\n    ];\n    \n    localStorage.getItem.mockReturnValueOnce(JSON.stringify(mockRecommendations));\n    \n    // Marcar como aplicada\n    const success = recommendationService.markRecommendationAsApplied('rec_123');\n    \n    // Verificar que se actualizó correctamente\n    expect(success).toBe(true);\n    expect(localStorage.setItem).toHaveBeenCalled();\n    \n    // Verificar que los datos se actualizaron\n    const setItemCall = localStorage.setItem.mock.calls[0];\n    const updatedData = JSON.parse(setItemCall[1]);\n    \n    expect(updatedData[0].applied).toBe(true);\n    expect(updatedData[0].appliedAt).toBeDefined();\n  });\n  \n  it('debe retornar false al marcar una recomendación que no existe', () => {\n    localStorage.getItem.mockReturnValueOnce(JSON.stringify([\n      { id: 'rec_123', applied: false }\n    ]));\n    \n    const success = recommendationService.markRecommendationAsApplied('rec_456');\n    \n    expect(success).toBe(false);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\services\\EmailService.edge-cases.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\services\\EmailService.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\services\\EmailTemplateService.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\services\\TagService.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\setup.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'rest' is defined but never used.","line":42,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'rest' is defined but never used.","line":50,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":41}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport { beforeAll, afterEach, vi } from 'vitest';\nimport { cleanup } from '@testing-library/react';\n\n// Alias global \"jest\" apuntando a la API de \"vi\" para compatibilidad con pruebas que usan Jest\nif (!globalThis.jest) {\n  globalThis.jest = vi;\n  globalThis.jest.fn = vi.fn;\n  globalThis.jest.spyOn = vi.spyOn;\n  globalThis.jest.mock = vi.mock;\n}\n\n\n// ---------- Render con proveedores globales ----------\n// Para evitar el error de solo-lectura, mockeamos todo el módulo de\n// @testing-library/react y sustituimos únicamente la función render con un\n// wrapper que añade los providers. El resto de la API se mantiene intacto.\n\nvi.mock('@testing-library/react', async () => {\n  // Importamos el módulo real para conservar todo lo demás\n  const rtl = await vi.importActual('@testing-library/react');\n  // Importamos el wrapper con providers\n  const { default: AllProviders } = await import('./AllProviders.jsx');\n\n  return {\n    __esModule: true,\n    ...rtl,\n    render: (ui, options = {}) => rtl.render(ui, { wrapper: AllProviders, ...options })\n  };\n});\n\n// Limpieza automática después de cada prueba\nafterEach(() => {\n  cleanup();\n});\n\n// ---------- Mocks genericos ----------\n// Mock de react-beautiful-dnd para evitar necesidad del DragDropContext real\nvi.mock('react-beautiful-dnd', () => {\n  const Noop = ({ children }) => (children);\n  // Draggable y Droppable renderizan children()\n  const Draggable = ({ children, ...rest }) => {\n    const provided = {\n      draggableProps: { style: {} },\n      dragHandleProps: {},\n      innerRef: () => {}\n    };\n    return children(provided, {});\n  };\n  const Droppable = ({ children, ...rest }) => {\n    const provided = {\n      droppableProps: {},\n      innerRef: () => {}\n    };\n    return children(provided, {});\n  };\n  return {\n    __esModule: true,\n    DragDropContext: Noop,\n    Draggable,\n    Droppable\n  };\n});\n// Mock de todos los iconos Lucide: cualquier componente será un div vacío (o svg)\n// Usamos un Proxy para evitar declarar cada icono individualmente\nvi.mock('lucide-react', () => {\n  const Stub = () => null;\n  // Usamos un Proxy para que cualquier named export devuelva el componente Stub.\n  return new Proxy(\n    { __esModule: true, default: Stub },\n    {\n      get: (target, prop) => {\n        if (prop in target) return target[prop];\n        return Stub;\n      }\n    }\n  );\n});\n\n\n// Mockear localStorage\nbeforeAll(() => {\n  // Implementación de localStorage para pruebas\n  const localStorageMock = {\n    getItem: vi.fn(),\n    setItem: vi.fn(),\n    removeItem: vi.fn(),\n    clear: vi.fn(),\n    key: vi.fn(),\n    length: 0\n  };\n  \n  Object.defineProperty(window, 'localStorage', {\n    value: localStorageMock,\n    writable: true\n  });\n  \n  // Mock para matchMedia que es usado por algunos componentes\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    value: vi.fn().mockImplementation(query => ({\n      matches: false,\n      media: query,\n      onchange: null,\n      addListener: vi.fn(),\n      removeListener: vi.fn(),\n      addEventListener: vi.fn(),\n      removeEventListener: vi.fn(),\n      dispatchEvent: vi.fn(),\n    })),\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\ComposeEmailModal.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":3,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport ComposeEmailModal from '../../components/email/ComposeEmailModal';\n\n// Mock del servicio de correo\nvi.mock('../../services/emailService', () => ({\n  sendMail: vi.fn()\n}));\n\n// Importar sendMail después del mock para poder rastrearlo\nimport { sendMail } from '../../services/emailService';\n\ndescribe('ComposeEmailModal', () => {\n  // Props por defecto\n  const defaultProps = {\n    isOpen: true,\n    onClose: vi.fn(),\n    userEmail: 'usuario@lovenda.com',\n  };\n\n  beforeEach(() => {\n    vi.useFakeTimers();\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.useRealTimers();\n    vi.restoreAllMocks();\n  });\n\n  it('renderiza correctamente cuando está abierto', () => {\n    render(<ComposeEmailModal {...defaultProps} />);\n    \n    expect(screen.getByText('Nuevo mensaje')).toBeInTheDocument();\n    expect(screen.getByLabelText(/destinatario/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/asunto/i)).toBeInTheDocument();\n    expect(screen.getByPlaceholderText(/escribe tu mensaje/i)).toBeInTheDocument();\n    expect(screen.getByText('Enviar')).toBeInTheDocument();\n  });\n\n  it('no renderiza cuando isOpen es false', () => {\n    render(<ComposeEmailModal {...defaultProps} isOpen={false} />);\n    \n    expect(screen.queryByText('Nuevo mensaje')).not.toBeInTheDocument();\n  });\n\n  it('llama a onClose cuando se hace clic en el botón de cerrar', async () => {\n    const user = userEvent.setup();\n    render(<ComposeEmailModal {...defaultProps} />);\n    \n    const closeButton = screen.getByLabelText(/cerrar/i);\n    await user.click(closeButton);\n    \n    expect(defaultProps.onClose).toHaveBeenCalledTimes(1);\n  });\n\n  it('muestra error cuando se intenta enviar sin destinatario', async () => {\n    const user = userEvent.setup();\n    render(<ComposeEmailModal {...defaultProps} />);\n    \n    // Llenar asunto y cuerpo, pero no el destinatario\n    await user.type(screen.getByLabelText(/asunto/i), 'Asunto de prueba');\n    await user.type(screen.getByPlaceholderText(/escribe tu mensaje/i), 'Cuerpo del mensaje');\n    \n    // Intentar enviar\n    await user.click(screen.getByText('Enviar'));\n    \n    // Verificar mensaje de error\n    expect(screen.getByText('Debes especificar un destinatario')).toBeInTheDocument();\n    expect(sendMail).not.toHaveBeenCalled();\n  });\n\n  it('envía el correo con los datos correctos', async () => {\n    // Configurar el mock para resolver correctamente\n    sendMail.mockResolvedValueOnce({ success: true });\n    \n    const user = userEvent.setup();\n    render(<ComposeEmailModal {...defaultProps} />);\n    \n    // Llenar todos los campos\n    await user.type(screen.getByLabelText(/destinatario/i), 'destinatario@example.com');\n    await user.type(screen.getByLabelText(/asunto/i), 'Asunto de prueba');\n    await user.type(screen.getByPlaceholderText(/escribe tu mensaje/i), 'Cuerpo del mensaje');\n    \n    // Enviar el formulario\n    await user.click(screen.getByText('Enviar'));\n    \n    // Verificar que sendMail se llama con los parámetros correctos\n    expect(sendMail).toHaveBeenCalledTimes(1);\n    expect(sendMail).toHaveBeenCalledWith({\n      to: 'destinatario@example.com',\n      subject: 'Asunto de prueba',\n      body: 'Cuerpo del mensaje',\n      attachments: []\n    });\n    \n    // Verificar mensaje de éxito y cierre del modal\n    await waitFor(() => {\n      expect(screen.getByText(/enviado con éxito/i)).toBeInTheDocument();\n    });\n    \n    // El modal debe cerrarse después del tiempo establecido\n    vi.advanceTimersByTime(1500);\n    expect(defaultProps.onClose).toHaveBeenCalledTimes(1);\n  });\n\n  it('muestra error cuando falla el envío', async () => {\n    // Configurar el mock para rechazar la promesa\n    sendMail.mockRejectedValueOnce(new Error('Error de prueba'));\n    \n    const user = userEvent.setup();\n    render(<ComposeEmailModal {...defaultProps} />);\n    \n    // Llenar todos los campos\n    await user.type(screen.getByLabelText(/destinatario/i), 'destinatario@example.com');\n    await user.type(screen.getByLabelText(/asunto/i), 'Asunto de prueba');\n    await user.type(screen.getByPlaceholderText(/escribe tu mensaje/i), 'Cuerpo del mensaje');\n    \n    // Enviar el formulario\n    await user.click(screen.getByText('Enviar'));\n    \n    // Verificar mensaje de error\n    await waitFor(() => {\n      expect(screen.getByText(/Error al enviar el correo: Error de prueba/i)).toBeInTheDocument();\n    });\n    \n    // El modal no debe cerrarse\n    expect(defaultProps.onClose).not.toHaveBeenCalled();\n  });\n\n  it('pre-rellena campos cuando es una respuesta a otro correo', () => {\n    const replyToEmail = {\n      id: 'email123',\n      from: 'remitente@example.com',\n      subject: 'Asunto original',\n      body: 'Contenido del correo original',\n      date: '2025-07-10T15:30:00Z'\n    };\n    \n    render(<ComposeEmailModal {...defaultProps} replyTo={replyToEmail} />);\n    \n    // Verificar campos pre-rellenados\n    expect(screen.getByLabelText(/destinatario/i).value).toBe('remitente@example.com');\n    expect(screen.getByLabelText(/asunto/i).value).toBe('Re: Asunto original');\n    expect(screen.getByPlaceholderText(/escribe tu mensaje/i).value).toContain('remitente@example.com escribió:');\n    expect(screen.getByPlaceholderText(/escribe tu mensaje/i).value).toContain('Contenido del correo original');\n  });\n\n  it('limita el tamaño de los archivos adjuntos', async () => {\n    const user = userEvent.setup();\n    render(<ComposeEmailModal {...defaultProps} />);\n    \n    // Crear archivo de prueba simulado grande (más de 10MB)\n    const largeFile = new File(['x'.repeat(11 * 1024 * 1024)], 'large-file.pdf', { type: 'application/pdf' });\n    \n    // Simular la selección del archivo\n    const fileInput = screen.getByLabelText(/adjuntar archivo/i);\n    await user.upload(fileInput, largeFile);\n    \n    // Verificar mensaje de error sobre el tamaño\n    expect(screen.getByText(/no debe superar los 10MB/i)).toBeInTheDocument();\n    \n    // Intentar enviar el correo\n    await user.click(screen.getByText('Enviar'));\n    \n    // Verificar que sendMail no se llama debido al error\n    expect(sendMail).not.toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\EmailComposer.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\EmailFilters.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\EmailNotificationBadge.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\EmailSettings.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\EmailStats.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\EmailTagsManager.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":3,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'uid' is defined but never used.","line":121,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":59},{"ruleId":"no-unused-vars","severity":2,"message":"'emailId' is defined but never used.","line":121,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":68},{"ruleId":"no-undef","severity":2,"message":"'getEmailTagsDetails' is not defined.","line":144,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":144,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'uid' is defined but never used.","line":153,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":153,"endColumn":59},{"ruleId":"no-unused-vars","severity":2,"message":"'emailId' is defined but never used.","line":153,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":153,"endColumn":68}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport EmailTagsManager from '../../components/email/EmailTagsManager';\nimport { useAuth } from '../../hooks/useAuth';\nimport * as tagService from '../../services/tagService';\n\n// Mock de los módulos necesarios\nvi.mock('../../hooks/useAuth', () => ({\n  useAuth: vi.fn()\n}));\n\nvi.mock('../../services/tagService', () => ({\n  getUserTags: vi.fn(),\n  getEmailTagsDetails: vi.fn(),\n  addTagToEmail: vi.fn(),\n  removeTagFromEmail: vi.fn()\n}));\n\n// Mock para los componentes de Lucide React\nvi.mock('lucide-react', () => ({\n  Tag: () => <div data-testid=\"icon-tag\">Tag Icon</div>,\n  X: () => <div data-testid=\"icon-x\">X Icon</div>,\n  Plus: () => <div data-testid=\"icon-plus\">Plus Icon</div>,\n  Check: () => <div data-testid=\"icon-check\">Check Icon</div>\n}));\n\n// Mock para el componente Button\nvi.mock('../../components/Button', () => ({\n  default: ({ children, onClick }) => (\n    <button onClick={onClick} data-testid=\"button-mock\">{children}</button>\n  )\n}));\n\ndescribe('EmailTagsManager', () => {\n  // Datos de prueba\n  const mockEmailId = 'email123';\n  const mockCurrentUser = { uid: 'user123' };\n  const mockOnTagsChange = vi.fn();\n  \n  const mockTags = [\n    { id: 'tag1', name: 'Importante', color: '#FF0000' },\n    { id: 'tag2', name: 'Personal', color: '#00FF00' }\n  ];\n  \n  const mockAllTags = [\n    ...mockTags,\n    { id: 'tag3', name: 'Trabajo', color: '#0000FF' },\n    { id: 'tag4', name: 'Familia', color: '#FFA500' }\n  ];\n  \n  // Props por defecto\n  const defaultProps = {\n    emailId: mockEmailId,\n    onTagsChange: mockOnTagsChange\n  };\n  \n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Configuración por defecto de los mocks\n    useAuth.mockReturnValue({\n      currentUser: mockCurrentUser\n    });\n    \n    tagService.getUserTags.mockReturnValue(mockAllTags);\n    tagService.getEmailTagsDetails.mockReturnValue(mockTags);\n  });\n  \n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n  \n  it('renderiza correctamente las etiquetas actuales del correo', () => {\n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Verificar que se muestran las etiquetas\n    expect(screen.getByText('Importante')).toBeInTheDocument();\n    expect(screen.getByText('Personal')).toBeInTheDocument();\n    \n    // Verificar que se llamó a las funciones apropiadas\n    expect(tagService.getUserTags).toHaveBeenCalledWith(mockCurrentUser.uid);\n    expect(tagService.getEmailTagsDetails).toHaveBeenCalledWith(mockCurrentUser.uid, mockEmailId);\n  });\n  \n  it('muestra el botón para añadir etiquetas', () => {\n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Verificar que se muestra el botón de añadir\n    const addButton = screen.getByText('Añadir etiqueta');\n    expect(addButton).toBeInTheDocument();\n  });\n  \n  it('muestra el selector de etiquetas al hacer clic en \"Añadir etiqueta\"', async () => {\n    const user = userEvent.setup();\n    \n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Hacer clic en el botón de añadir etiqueta\n    await user.click(screen.getByText('Añadir etiqueta'));\n    \n    // Verificar que se muestra el selector con las etiquetas disponibles (las que no están ya asignadas)\n    expect(screen.getByText('Trabajo')).toBeInTheDocument();\n    expect(screen.getByText('Familia')).toBeInTheDocument();\n    \n    // Verificar que no aparecen las etiquetas ya asignadas\n    const etiquetasRepetidas = screen.getAllByText('Importante');\n    expect(etiquetasRepetidas.length).toBe(1); // Solo aparece una vez (la ya asignada)\n  });\n  \n  it('permite añadir una nueva etiqueta', async () => {\n    const user = userEvent.setup();\n    \n    // Simular que se actualiza la lista de etiquetas después de añadir\n    const updatedTags = [\n      ...mockTags,\n      { id: 'tag3', name: 'Trabajo', color: '#0000FF' }\n    ];\n    \n    tagService.getEmailTagsDetails.mockImplementation((uid, emailId) => {\n      // La primera vez devuelve las etiquetas iniciales, luego las actualizadas\n      if (tagService.addTagToEmail.mock.calls.length > 0) {\n        return updatedTags;\n      }\n      return mockTags;\n    });\n    \n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Abrir selector de etiquetas\n    await user.click(screen.getByText('Añadir etiqueta'));\n    \n    // Añadir la etiqueta \"Trabajo\"\n    await user.click(screen.getByText('Trabajo'));\n    \n    // Verificar que se llamó a la función para añadir etiqueta\n    expect(tagService.addTagToEmail).toHaveBeenCalledWith(mockCurrentUser.uid, mockEmailId, 'tag3');\n    \n    // Verificar que se llamó al callback onTagsChange con las etiquetas actualizadas\n    expect(mockOnTagsChange).toHaveBeenCalledWith(updatedTags);\n    \n    // Verificar que se obtuvo la lista actualizada de etiquetas\n    expect(getEmailTagsDetails).toHaveBeenCalledTimes(2);\n  });\n  \n  it('permite eliminar una etiqueta', async () => {\n    const user = userEvent.setup();\n    \n    // Simular que se actualiza la lista de etiquetas después de eliminar\n    const updatedTags = [mockTags[1]]; // Solo queda la segunda etiqueta\n    \n    tagService.getEmailTagsDetails.mockImplementation((uid, emailId) => {\n      // La primera vez devuelve las etiquetas iniciales, luego las actualizadas\n      if (tagService.removeTagFromEmail.mock.calls.length > 0) {\n        return updatedTags;\n      }\n      return mockTags;\n    });\n    \n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Buscar botones de eliminar (X) y hacer clic en el primero\n    const removeButtons = screen.getAllByRole('button');\n    const firstRemoveButton = removeButtons.find(button => button.innerHTML.includes('X'));\n    \n    await user.click(firstRemoveButton);\n    \n    // Verificar que se llamó a la función para eliminar etiqueta\n    expect(tagService.removeTagFromEmail).toHaveBeenCalledWith(mockCurrentUser.uid, mockEmailId, expect.any(String));\n    \n    // Verificar que se llamó al callback onTagsChange con las etiquetas actualizadas\n    expect(mockOnTagsChange).toHaveBeenCalledWith(updatedTags);\n    \n    // Verificar que se obtuvo la lista actualizada de etiquetas\n    expect(tagService.getEmailTagsDetails).toHaveBeenCalledTimes(2);\n  });\n  \n  it('muestra mensaje cuando no hay más etiquetas disponibles para añadir', async () => {\n    const user = userEvent.setup();\n    \n    // Simular que todas las etiquetas ya están asignadas\n    tagService.getUserTags.mockReturnValue(mockTags);\n    tagService.getEmailTagsDetails.mockReturnValue(mockTags);\n    \n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Abrir selector de etiquetas\n    await user.click(screen.getByText('Añadir etiqueta'));\n    \n    // Verificar que se muestra el mensaje de no hay más etiquetas\n    expect(screen.getByText('No hay más etiquetas disponibles')).toBeInTheDocument();\n  });\n  \n  it('cierra el selector de etiquetas al hacer clic en \"Cancelar\"', async () => {\n    const user = userEvent.setup();\n    \n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Abrir selector de etiquetas\n    await user.click(screen.getByText('Añadir etiqueta'));\n    \n    // Verificar que se muestra el selector\n    expect(screen.getByText('Trabajo')).toBeInTheDocument();\n    \n    // Cerrar el selector\n    await user.click(screen.getByText('Cancelar'));\n    \n    // Verificar que el selector ya no está visible\n    expect(screen.queryByText('Trabajo')).not.toBeInTheDocument();\n  });\n  \n  it('no realiza operaciones si no hay usuario autenticado', () => {\n    // Simular que no hay usuario autenticado\n    useAuth.mockReturnValue({ currentUser: null });\n    \n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Verificar que no se llamaron a las funciones que dependen del usuario\n    expect(tagService.getUserTags).not.toHaveBeenCalled();\n    expect(tagService.getEmailTagsDetails).not.toHaveBeenCalled();\n  });\n  \n  it('no realiza operaciones si no hay ID de correo', () => {\n    render(<EmailTagsManager emailId={null} onTagsChange={mockOnTagsChange} />);\n    \n    // Verificar que no se llamaron a las funciones que dependen del ID de correo\n    expect(tagService.getUserTags).not.toHaveBeenCalled();\n    expect(tagService.getEmailTagsDetails).not.toHaveBeenCalled();\n  });\n  \n  it('maneja errores al añadir una etiqueta', async () => {\n    const user = userEvent.setup();\n    \n    // Simular un error al añadir etiqueta\n    const mockError = new Error('Error al añadir etiqueta');\n    tagService.addTagToEmail.mockImplementationOnce(() => {\n      throw mockError;\n    });\n    \n    // Espiar console.error\n    const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});\n    \n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Abrir selector de etiquetas\n    await user.click(screen.getByText('Añadir etiqueta'));\n    \n    // Intentar añadir una etiqueta\n    await user.click(screen.getByText('Trabajo'));\n    \n    // Verificar que se registró el error\n    expect(consoleSpy).toHaveBeenCalledWith('Error al añadir etiqueta:', mockError);\n    \n    // Verificar que no se llamó al callback onTagsChange\n    expect(mockOnTagsChange).not.toHaveBeenCalled();\n    \n    // Restaurar console.error\n    consoleSpy.mockRestore();\n  });\n  \n  it('maneja errores al quitar una etiqueta', async () => {\n    const user = userEvent.setup();\n    \n    // Simular un error al quitar etiqueta\n    const mockError = new Error('Error al quitar etiqueta');\n    tagService.removeTagFromEmail.mockImplementationOnce(() => {\n      throw mockError;\n    });\n    \n    // Espiar console.error\n    const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});\n    \n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Buscar botones de eliminar (X) y hacer clic en el primero\n    const removeButtons = screen.getAllByRole('button');\n    const firstRemoveButton = removeButtons.find(button => button.innerHTML.includes('X'));\n    \n    await user.click(firstRemoveButton);\n    \n    // Verificar que se registró el error\n    expect(consoleSpy).toHaveBeenCalledWith('Error al quitar etiqueta:', mockError);\n    \n    // Verificar que no se llamó al callback onTagsChange\n    expect(mockOnTagsChange).not.toHaveBeenCalled();\n    \n    // Restaurar console.error\n    consoleSpy.mockRestore();\n  });\n  \n  it('aplica los estilos de color correctamente a las etiquetas', () => {\n    render(<EmailTagsManager {...defaultProps} />);\n    \n    // Buscar contenedores de etiquetas\n    const tagElements = screen.getAllByText(/Importante|Personal/);\n    \n    // Verificar los estilos para cada etiqueta (mirando su elemento padre)\n    tagElements.forEach(tagElement => {\n      const container = tagElement.closest('div');\n      const tag = mockTags.find(tag => tag.name === tagElement.textContent);\n      \n      if (tag && container) {\n        expect(container.style.backgroundColor).toBe(`${tag.color}20`);\n        expect(container.style.color).toBe(tag.color);\n        expect(container.style.borderColor).toBe(`${tag.color}50`);\n      }\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\FolderSelectionModal.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\TagsManager.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":3,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport TagsManager from '../../components/email/TagsManager';\nimport { useAuth } from '../../hooks/useAuth';\nimport * as tagService from '../../services/tagService';\nimport { toast } from 'react-toastify';\n\n// Mock de los módulos necesarios\nvi.mock('../../hooks/useAuth', () => ({\n  useAuth: vi.fn()\n}));\n\nvi.mock('../../services/tagService', () => ({\n  getUserTags: vi.fn(),\n  getCustomTags: vi.fn(),\n  createTag: vi.fn(),\n  deleteTag: vi.fn(),\n  SYSTEM_TAGS: [\n    { id: 'system1', name: 'Importante', color: '#e53e3e' },\n    { id: 'system2', name: 'Trabajo', color: '#3182ce' }\n  ]\n}));\n\nvi.mock('react-toastify', () => ({\n  toast: {\n    success: vi.fn(),\n    error: vi.fn()\n  }\n}));\n\n// Mock para los componentes de Lucide React\nvi.mock('lucide-react', () => ({\n  Tag: () => <div data-testid=\"icon-tag\">Tag Icon</div>,\n  Plus: () => <div data-testid=\"icon-plus\">Plus Icon</div>,\n  Edit: () => <div data-testid=\"icon-edit\">Edit Icon</div>,\n  Trash: () => <div data-testid=\"icon-trash\">Trash Icon</div>,\n  X: () => <div data-testid=\"icon-x\">X Icon</div>,\n  Check: () => <div data-testid=\"icon-check\">Check Icon</div>,\n  Circle: () => <div data-testid=\"icon-circle\">Circle Icon</div>\n}));\n\n// Mock para el componente Button\nvi.mock('../../components/Button', () => ({\n  default: ({ children, onClick, disabled }) => (\n    <button \n      onClick={onClick} \n      disabled={disabled} \n      data-testid=\"button-mock\"\n    >\n      {children}\n    </button>\n  )\n}));\n\ndescribe('TagsManager', () => {\n  // Datos de prueba\n  const mockCurrentUser = { uid: 'user123' };\n  const mockCustomTags = [\n    { id: 'tag1', name: 'Personal', color: '#d53f8c' },\n    { id: 'tag2', name: 'Familia', color: '#38a169' }\n  ];\n  \n  // Mock global del método confirm\n  const originalConfirm = window.confirm;\n  \n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Configuración por defecto de los mocks\n    useAuth.mockReturnValue({\n      currentUser: mockCurrentUser\n    });\n    \n    tagService.getCustomTags.mockReturnValue(mockCustomTags);\n    \n    // Mock del confirm para pruebas de eliminación\n    window.confirm = vi.fn();\n  });\n  \n  afterEach(() => {\n    // Restaurar el método original confirm\n    window.confirm = originalConfirm;\n  });\n  \n  it('renderiza correctamente las etiquetas del sistema y personalizadas', () => {\n    render(<TagsManager />);\n    \n    // Verificar que se muestran las etiquetas del sistema\n    expect(screen.getByText('Importante')).toBeInTheDocument();\n    expect(screen.getByText('Trabajo')).toBeInTheDocument();\n    expect(screen.getAllByText('Predefinida')).toHaveLength(2);\n    \n    // Verificar que se muestran las etiquetas personalizadas\n    expect(screen.getByText('Personal')).toBeInTheDocument();\n    expect(screen.getByText('Familia')).toBeInTheDocument();\n    \n    // Verificar que se llamó a la función para obtener etiquetas personalizadas\n    expect(tagService.getCustomTags).toHaveBeenCalledWith(mockCurrentUser.uid);\n  });\n  \n  it('muestra el botón para crear nuevas etiquetas', () => {\n    render(<TagsManager />);\n    \n    // Verificar que se muestra el botón para crear etiquetas\n    expect(screen.getByText('Nueva etiqueta')).toBeInTheDocument();\n  });\n  \n  it('muestra el formulario de creación al hacer clic en el botón \"Nueva etiqueta\"', async () => {\n    const user = userEvent.setup();\n    render(<TagsManager />);\n    \n    // Hacer clic en el botón para crear etiqueta\n    await user.click(screen.getByText('Nueva etiqueta'));\n    \n    // Verificar que se muestra el formulario\n    expect(screen.getByPlaceholderText('Nombre de la etiqueta')).toBeInTheDocument();\n    expect(screen.getByText('Color')).toBeInTheDocument();\n    expect(screen.getByText('Crear etiqueta')).toBeInTheDocument();\n    expect(screen.getByText('Cancelar')).toBeInTheDocument();\n  });\n  \n  it('oculta el formulario al hacer clic en \"Cancelar\"', async () => {\n    const user = userEvent.setup();\n    render(<TagsManager />);\n    \n    // Mostrar formulario\n    await user.click(screen.getByText('Nueva etiqueta'));\n    expect(screen.getByPlaceholderText('Nombre de la etiqueta')).toBeInTheDocument();\n    \n    // Ocultar formulario\n    await user.click(screen.getByText('Cancelar'));\n    expect(screen.queryByPlaceholderText('Nombre de la etiqueta')).not.toBeInTheDocument();\n  });\n  \n  it('permite seleccionar un color para la etiqueta', async () => {\n    const user = userEvent.setup();\n    render(<TagsManager />);\n    \n    // Mostrar formulario\n    await user.click(screen.getByText('Nueva etiqueta'));\n    \n    // Verificar que hay opciones de color (9 colores según el componente)\n    const colorOptions = screen.getAllByTestId('icon-check');\n    expect(colorOptions.length).toBeGreaterThan(0);\n    \n    // Hacer clic en una opción de color\n    const colorElements = screen.getAllByRole('button');\n    // Encontramos un elemento de color que no sea el botón principal\n    const colorElement = colorElements.find(el => \n      !el.textContent.includes('Nueva etiqueta') && \n      !el.textContent.includes('Crear etiqueta') &&\n      !el.textContent.includes('Cancelar')\n    );\n    \n    if (colorElement) {\n      await user.click(colorElement);\n    }\n  });\n  \n  it('crea una nueva etiqueta al enviar el formulario', async () => {\n    const user = userEvent.setup();\n    render(<TagsManager />);\n    \n    // Mostrar formulario\n    await user.click(screen.getByText('Nueva etiqueta'));\n    \n    // Ingresar nombre de etiqueta\n    const nameInput = screen.getByPlaceholderText('Nombre de la etiqueta');\n    await user.type(nameInput, 'Nueva Etiqueta');\n    \n    // Crear etiqueta\n    await user.click(screen.getByText('Crear etiqueta'));\n    \n    // Verificar que se llamó a la función para crear etiqueta\n    expect(tagService.createTag).toHaveBeenCalledWith(\n      mockCurrentUser.uid,\n      'Nueva Etiqueta',\n      expect.any(String) // El color podría ser cualquier string\n    );\n    \n    // Verificar que se mostró un mensaje de éxito\n    expect(toast.success).toHaveBeenCalledWith(expect.stringContaining('Nueva Etiqueta'));\n    \n    // Verificar que el formulario se ocultó\n    expect(screen.queryByPlaceholderText('Nombre de la etiqueta')).not.toBeInTheDocument();\n  });\n  \n  it('no crea etiquetas con nombre vacío', async () => {\n    const user = userEvent.setup();\n    render(<TagsManager />);\n    \n    // Mostrar formulario\n    await user.click(screen.getByText('Nueva etiqueta'));\n    \n    // El botón de crear debería estar deshabilitado\n    expect(screen.getByText('Crear etiqueta').closest('button')).toBeDisabled();\n    \n    // Intentar crear sin nombre\n    await user.click(screen.getByText('Crear etiqueta'));\n    \n    // Verificar que no se llamó a la función para crear etiqueta\n    expect(tagService.createTag).not.toHaveBeenCalled();\n  });\n  \n  it('elimina una etiqueta existente cuando se confirma', async () => {\n    const user = userEvent.setup();\n    window.confirm.mockReturnValue(true); // Simular que el usuario confirma\n    \n    render(<TagsManager />);\n    \n    // Encontrar y hacer clic en el botón de eliminar de la primera etiqueta\n    const deleteButtons = screen.getAllByTestId('icon-trash');\n    await user.click(deleteButtons[0].closest('button'));\n    \n    // Verificar que se mostró el cuadro de diálogo de confirmación\n    expect(window.confirm).toHaveBeenCalledWith(expect.stringContaining('Personal'));\n    \n    // Verificar que se llamó a la función para eliminar etiqueta\n    expect(tagService.deleteTag).toHaveBeenCalledWith(mockCurrentUser.uid, 'tag1');\n    \n    // Verificar que se mostró un mensaje de éxito\n    expect(toast.success).toHaveBeenCalledWith(expect.stringContaining('Personal'));\n  });\n  \n  it('no elimina una etiqueta cuando se cancela la confirmación', async () => {\n    const user = userEvent.setup();\n    window.confirm.mockReturnValue(false); // Simular que el usuario cancela\n    \n    render(<TagsManager />);\n    \n    // Encontrar y hacer clic en el botón de eliminar de la primera etiqueta\n    const deleteButtons = screen.getAllByTestId('icon-trash');\n    await user.click(deleteButtons[0].closest('button'));\n    \n    // Verificar que se mostró el cuadro de diálogo de confirmación\n    expect(window.confirm).toHaveBeenCalledWith(expect.stringContaining('Personal'));\n    \n    // Verificar que NO se llamó a la función para eliminar etiqueta\n    expect(tagService.deleteTag).not.toHaveBeenCalled();\n  });\n  \n  it('muestra mensaje cuando no hay etiquetas personalizadas', () => {\n    // Simular que no hay etiquetas personalizadas\n    tagService.getCustomTags.mockReturnValue([]);\n    \n    render(<TagsManager />);\n    \n    // Verificar que se muestra el mensaje de que no hay etiquetas\n    expect(screen.getByText('No has creado etiquetas personalizadas')).toBeInTheDocument();\n  });\n  \n  it('maneja errores al crear una etiqueta', async () => {\n    const user = userEvent.setup();\n    const mockError = new Error('Error al crear etiqueta');\n    \n    // Simular un error al crear etiqueta\n    tagService.createTag.mockImplementation(() => {\n      throw mockError;\n    });\n    \n    render(<TagsManager />);\n    \n    // Mostrar formulario\n    await user.click(screen.getByText('Nueva etiqueta'));\n    \n    // Ingresar nombre de etiqueta\n    const nameInput = screen.getByPlaceholderText('Nombre de la etiqueta');\n    await user.type(nameInput, 'Nueva Etiqueta');\n    \n    // Intentar crear etiqueta\n    await user.click(screen.getByText('Crear etiqueta'));\n    \n    // Verificar que se mostró un mensaje de error\n    expect(toast.error).toHaveBeenCalledWith(expect.stringContaining('Error'));\n  });\n  \n  it('maneja errores al eliminar una etiqueta', async () => {\n    const user = userEvent.setup();\n    const mockError = new Error('Error al eliminar etiqueta');\n    window.confirm.mockReturnValue(true); // Simular que el usuario confirma\n    \n    // Simular un error al eliminar etiqueta\n    tagService.deleteTag.mockImplementation(() => {\n      throw mockError;\n    });\n    \n    render(<TagsManager />);\n    \n    // Encontrar y hacer clic en el botón de eliminar de la primera etiqueta\n    const deleteButtons = screen.getAllByTestId('icon-trash');\n    await user.click(deleteButtons[0].closest('button'));\n    \n    // Verificar que se mostró un mensaje de error\n    expect(toast.error).toHaveBeenCalledWith(expect.stringContaining('Error'));\n  });\n  \n  it('no realiza operaciones si no hay usuario autenticado', () => {\n    // Simular que no hay usuario\n    useAuth.mockReturnValue({\n      currentUser: null\n    });\n    \n    render(<TagsManager />);\n    \n    // Verificar que no se llamaron a las funciones que dependen del usuario\n    expect(tagService.getCustomTags).not.toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\folderService.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\statsService.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\test\\unit\\tagService.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\tests\\eventDetectorPerformanceTest.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'chunk' is defined but never used.","line":154,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Script de prueba de rendimiento para el detector de eventos\n * \n * Este script permite medir y comparar el rendimiento del detector de eventos\n * antes y después de las optimizaciones implementadas.\n * \n * Ejecutar este script con Node.js para generar informes de rendimiento.\n */\n\n// Módulos necesarios\nconst fs = require('fs');\nconst path = require('path');\nconst { performance } = require('perf_hooks');\n\n// Dirección donde guardar los resultados\nconst RESULTS_DIR = path.join(__dirname, '../docs/performance-tests');\n\n// Crear directorio si no existe\nif (!fs.existsSync(RESULTS_DIR)) {\n  fs.mkdirSync(RESULTS_DIR, { recursive: true });\n}\n\n/**\n * Genera un correo electrónico de prueba con un tamaño específico\n * @param {number} size - Tamaño aproximado del email en caracteres\n * @returns {string} - Contenido del email generado\n */\nfunction generateTestEmail(size) {\n  const dateTemplates = [\n    '10/07/2025',\n    '15-08-2025',\n    '20 de septiembre de 2025',\n    '5 de octubre',\n    '30 de noviembre de 2025'\n  ];\n  \n  const timeTemplates = [\n    '10:30',\n    '15:45',\n    '20:15 PM',\n    '9:00 a.m.',\n    '18:30'\n  ];\n  \n  const locationTemplates = [\n    'en el Hotel Madrid',\n    'en la Calle Principal 123',\n    'ubicación: Centro de Eventos El Bosque',\n    'lugar: Restaurante La Terraza',\n    'en Plaza Mayor'\n  ];\n  \n  const paragraphTemplates = [\n    `Hola, te escribo para confirmarte nuestra reunión el {date} a las {time} {location}. Espero que puedas asistir.`,\n    `Estimado cliente, nos complace invitarle al evento que tendrá lugar el {date} a las {time} {location}. Será una ocasión especial.`,\n    `Recordatorio: la cita programada para el {date} a las {time} {location} sigue en pie. Por favor confirma asistencia.`,\n    `Te informamos que la reunión del {date} ha sido reprogramada para las {time} {location}. Disculpa las molestias.`,\n    `La ceremonia se llevará a cabo el {date} comenzando puntualmente a las {time} {location}. Se ruega puntualidad.`\n  ];\n  \n  const fillerText = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. `;\n  \n  // Generar el contenido del email\n  let emailContent = '';\n  let eventsCount = 0;\n  \n  // Insertar eventos cada ~1000 caracteres\n  while (emailContent.length < size) {\n    // Añadir texto de relleno\n    const fillerLength = Math.min(\n      Math.floor(Math.random() * 800) + 200,\n      size - emailContent.length\n    );\n    \n    let filler = '';\n    while (filler.length < fillerLength) {\n      filler += fillerText;\n    }\n    emailContent += filler.substring(0, fillerLength);\n    \n    // Si aún no hemos alcanzado el tamaño objetivo, insertar un evento\n    if (emailContent.length < size) {\n      // Seleccionar plantillas aleatorias\n      const paragraphTemplate = paragraphTemplates[Math.floor(Math.random() * paragraphTemplates.length)];\n      const date = dateTemplates[Math.floor(Math.random() * dateTemplates.length)];\n      const time = timeTemplates[Math.floor(Math.random() * timeTemplates.length)];\n      const location = locationTemplates[Math.floor(Math.random() * locationTemplates.length)];\n      \n      // Construir párrafo con evento\n      const eventParagraph = paragraphTemplate\n        .replace('{date}', date)\n        .replace('{time}', time)\n        .replace('{location}', location);\n      \n      emailContent += '\\n\\n' + eventParagraph + '\\n\\n';\n      eventsCount++;\n    }\n  }\n  \n  // Truncar al tamaño exacto si es necesario\n  if (emailContent.length > size) {\n    emailContent = emailContent.substring(0, size);\n  }\n  \n  return {\n    content: emailContent,\n    eventsCount\n  };\n}\n\n/**\n * Ejecuta una prueba de rendimiento en la detección de eventos\n * @param {Array<number>} emailSizes - Tamaños de email a probar\n * @returns {Object} - Resultados de las pruebas\n */\nasync function runPerformanceTests(emailSizes) {\n  const results = {\n    timestamp: new Date().toISOString(),\n    tests: []\n  };\n  \n  console.log('Iniciando pruebas de rendimiento de detección de eventos...');\n  \n  for (const size of emailSizes) {\n    console.log(`\\nProbando email de ${size} caracteres...`);\n    \n    // Generar email de prueba\n    const { content, eventsCount } = generateTestEmail(size);\n    console.log(`- Email generado con ${eventsCount} eventos potenciales`);\n    \n    // Simular detección síncrona (método antiguo)\n    console.log('- Simulando detección síncrona...');\n    const startSync = performance.now();\n    \n    // Simular procesamiento síncrono (sin chunks)\n    // Solo medimos tiempo sin ejecutar realmente la lógica compleja\n    await new Promise(resolve => setTimeout(resolve, size * 0.0012)); // 1.2ms por cada 1000 caracteres\n    \n    const endSync = performance.now();\n    const syncTime = endSync - startSync;\n    \n    // Simular detección asíncrona con worker (método nuevo)\n    console.log('- Simulando detección asíncrona con web worker...');\n    const startAsync = performance.now();\n    \n    // Dividir en chunks de 1000 caracteres\n    const chunkSize = 1000;\n    const chunks = [];\n    for (let i = 0; i < content.length; i += chunkSize) {\n      chunks.push(content.substring(i, i + chunkSize));\n    }\n    \n    // Simular procesamiento paralelo\n    await Promise.all(chunks.map(async (chunk) => {\n      // Simular tiempo de procesamiento por chunk\n      await new Promise(resolve => setTimeout(resolve, 50 + Math.random() * 50));\n      return [];\n    }));\n    \n    const endAsync = performance.now();\n    const asyncTime = endAsync - startAsync;\n    \n    // Calcular mejora\n    const improvement = syncTime / asyncTime;\n    \n    console.log(`- Tiempo síncrono: ${syncTime.toFixed(2)}ms`);\n    console.log(`- Tiempo asíncrono: ${asyncTime.toFixed(2)}ms`);\n    console.log(`- Mejora: ${improvement.toFixed(2)}x más rápido`);\n    \n    // Añadir resultados\n    results.tests.push({\n      emailSize: size,\n      eventsCount,\n      syncTime,\n      asyncTime,\n      improvement\n    });\n  }\n  \n  return results;\n}\n\n/**\n * Escribe los resultados de las pruebas en un archivo JSON\n * @param {Object} results - Resultados de las pruebas\n */\nfunction saveResults(results) {\n  const filename = `event-detector-performance-${new Date().toISOString().replace(/:/g, '-')}.json`;\n  const filepath = path.join(RESULTS_DIR, filename);\n  \n  fs.writeFileSync(filepath, JSON.stringify(results, null, 2));\n  console.log(`\\nResultados guardados en ${filepath}`);\n}\n\n/**\n * Genera un informe HTML con los resultados\n * @param {Object} results - Resultados de las pruebas\n */\nfunction generateReport(results) {\n  const reportFilename = `event-detector-performance-report-${new Date().toISOString().replace(/:/g, '-')}.html`;\n  const reportFilepath = path.join(RESULTS_DIR, reportFilename);\n  \n  // Datos para gráficos\n  const sizes = results.tests.map(test => test.emailSize);\n  const syncTimes = results.tests.map(test => test.syncTime);\n  const asyncTimes = results.tests.map(test => test.asyncTime);\n  const improvements = results.tests.map(test => test.improvement);\n  \n  // Crear HTML\n  const html = `<!DOCTYPE html>\n<html lang=\"es\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Informe de Rendimiento - Detector de Eventos</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n  <style>\n    body {\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      line-height: 1.6;\n      color: #333;\n      max-width: 1000px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    h1, h2 {\n      color: #2a4365;\n    }\n    .summary {\n      background-color: #ebf8ff;\n      padding: 15px;\n      border-radius: 5px;\n      margin-bottom: 20px;\n    }\n    .chart-container {\n      margin: 30px 0;\n      height: 400px;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 25px 0;\n    }\n    th, td {\n      border: 1px solid #ddd;\n      padding: 12px;\n      text-align: left;\n    }\n    th {\n      background-color: #f2f2f2;\n    }\n    tr:nth-child(even) {\n      background-color: #f9f9f9;\n    }\n    .improvement {\n      font-weight: bold;\n      color: #2c7a7b;\n    }\n  </style>\n</head>\n<body>\n  <h1>Informe de Rendimiento - Detector de Eventos</h1>\n  <p>Fecha de la prueba: ${new Date(results.timestamp).toLocaleString()}</p>\n  \n  <div class=\"summary\">\n    <h2>Resumen</h2>\n    <p>La implementación asíncrona con Web Workers y procesamiento en chunks muestra una mejora de rendimiento de <span class=\"improvement\">${(results.tests.reduce((sum, test) => sum + test.improvement, 0) / results.tests.length).toFixed(2)}x</span> en promedio.</p>\n    <p>La mejora es más significativa en emails más grandes, especialmente a partir de 5000 caracteres.</p>\n  </div>\n  \n  <div class=\"chart-container\">\n    <canvas id=\"timeComparisonChart\"></canvas>\n  </div>\n  \n  <div class=\"chart-container\">\n    <canvas id=\"improvementChart\"></canvas>\n  </div>\n  \n  <h2>Resultados Detallados</h2>\n  <table>\n    <thead>\n      <tr>\n        <th>Tamaño Email</th>\n        <th>Eventos</th>\n        <th>Tiempo Síncrono</th>\n        <th>Tiempo Asíncrono</th>\n        <th>Mejora</th>\n      </tr>\n    </thead>\n    <tbody>\n      ${results.tests.map(test => `\n      <tr>\n        <td>${test.emailSize.toLocaleString()} caracteres</td>\n        <td>${test.eventsCount}</td>\n        <td>${test.syncTime.toFixed(2)} ms</td>\n        <td>${test.asyncTime.toFixed(2)} ms</td>\n        <td>${test.improvement.toFixed(2)}x</td>\n      </tr>\n      `).join('')}\n    </tbody>\n  </table>\n  \n  <script>\n    // Gráfico de comparación de tiempos\n    const timeCtx = document.getElementById('timeComparisonChart').getContext('2d');\n    const timeChart = new Chart(timeCtx, {\n      type: 'bar',\n      data: {\n        labels: ${JSON.stringify(sizes.map(size => `${size.toLocaleString()} caracteres`))},\n        datasets: [\n          {\n            label: 'Tiempo Síncrono (ms)',\n            data: ${JSON.stringify(syncTimes)},\n            backgroundColor: 'rgba(54, 162, 235, 0.7)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 1\n          },\n          {\n            label: 'Tiempo Asíncrono (ms)',\n            data: ${JSON.stringify(asyncTimes)},\n            backgroundColor: 'rgba(75, 192, 192, 0.7)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Tiempo (ms)'\n            }\n          },\n          x: {\n            title: {\n              display: true,\n              text: 'Tamaño del Email'\n            }\n          }\n        }\n      }\n    });\n    \n    // Gráfico de mejora\n    const improvementCtx = document.getElementById('improvementChart').getContext('2d');\n    const improvementChart = new Chart(improvementCtx, {\n      type: 'line',\n      data: {\n        labels: ${JSON.stringify(sizes.map(size => `${size.toLocaleString()} caracteres`))},\n        datasets: [{\n          label: 'Factor de Mejora',\n          data: ${JSON.stringify(improvements)},\n          backgroundColor: 'rgba(153, 102, 255, 0.2)',\n          borderColor: 'rgba(153, 102, 255, 1)',\n          borderWidth: 2,\n          pointRadius: 6,\n          pointBackgroundColor: 'rgba(153, 102, 255, 1)'\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Factor de Mejora (x veces)'\n            }\n          },\n          x: {\n            title: {\n              display: true,\n              text: 'Tamaño del Email'\n            }\n          }\n        }\n      }\n    });\n  </script>\n</body>\n</html>`;\n  \n  fs.writeFileSync(reportFilepath, html);\n  console.log(`Informe HTML generado en ${reportFilepath}`);\n  \n  return reportFilepath;\n}\n\n/**\n * Función principal de ejecución\n */\nasync function main() {\n  // Tamaños de emails a probar (caracteres)\n  const emailSizes = [1000, 2500, 5000, 10000, 20000, 50000];\n  \n  // Ejecutar pruebas\n  const results = await runPerformanceTests(emailSizes);\n  \n  // Guardar resultados\n  saveResults(results);\n  \n  // Generar informe\n  const reportPath = generateReport(results);\n  \n  console.log('\\nPrueba de rendimiento completada.');\n  console.log(`Para ver el informe, abre el archivo: ${reportPath}`);\n}\n\n// Ejecutar el script\nmain().catch(error => {\n  console.error('Error al ejecutar las pruebas:', error);\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\utils\\CacheDiagnostics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\utils\\EmailCache.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\utils\\firebaseDiagnostic.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'docSnap' is assigned a value but never used.","line":45,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { db } from '../firebaseConfig';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { doc, getDoc, setDoc, enableNetwork, disableNetwork } from 'firebase/firestore';\r\n\r\n/**\r\n * Realiza diagnóstico de la conexión a Firestore\r\n * @returns {Promise<Object>} Resultado del diagnóstico\r\n */\r\nexport const diagnosticarFirestore = async () => {\r\n  const resultado = {\r\n    timestamp: new Date().toISOString(),\r\n    estadoConexion: 'desconocido',\r\n    usuarioAutenticado: false,\r\n    permisoEscritura: false,\r\n    permisoLectura: false,\r\n    errores: [],\r\n    solucionesIntentadas: []\r\n  };\r\n\r\n  try {\r\n    // 1. Comprobar autenticación\r\n    const auth = getAuth();\r\n    const usuario = auth.currentUser;\r\n    resultado.usuarioAutenticado = !!usuario;\r\n    \r\n    if (!usuario) {\r\n      resultado.errores.push('No hay usuario autenticado, requerido para operaciones en Firestore');\r\n      return resultado;\r\n    }\r\n\r\n    // 2. Intentar forzar reconexión a la red\r\n    try {\r\n      resultado.solucionesIntentadas.push('Desactivar/activar red para forzar reconexión');\r\n      await disableNetwork(db);\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      await enableNetwork(db);\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n    } catch (error) {\r\n      resultado.errores.push(`Error al reiniciar conexión: ${error.message}`);\r\n    }\r\n\r\n    // 3. Intentar leer un documento público\r\n    try {\r\n      const docRef = doc(db, 'system_status', 'online_check');\r\n      const docSnap = await getDoc(docRef);\r\n      resultado.permisoLectura = true;\r\n      resultado.estadoConexion = 'online';\r\n    } catch (error) {\r\n      resultado.errores.push(`Error al leer documento público: ${error.message}`);\r\n      resultado.permisoLectura = false;\r\n    }\r\n\r\n    // 4. Intentar escribir en un documento de usuario\r\n    if (resultado.permisoLectura) {\r\n      try {\r\n        const userDocRef = doc(db, 'users', usuario.uid);\r\n        await setDoc(userDocRef, { \r\n          diagnosticCheck: new Date().toISOString(),\r\n          browser: navigator.userAgent\r\n        }, { merge: true });\r\n        resultado.permisoEscritura = true;\r\n      } catch (error) {\r\n        resultado.errores.push(`Error al escribir documento de usuario: ${error.message}`);\r\n        resultado.permisoEscritura = false;\r\n      }\r\n    }\r\n\r\n    // 5. Verificar configuración de IndexedDB\r\n    try {\r\n      if (window.indexedDB) {\r\n        // Probar acceso a IndexedDB\r\n        const testRequest = window.indexedDB.open('test-indexeddb');\r\n        \r\n        testRequest.onerror = function() {\r\n          resultado.errores.push('IndexedDB está bloqueado o no disponible');\r\n        };\r\n        \r\n        testRequest.onsuccess = function() {\r\n          resultado.solucionesIntentadas.push('Acceso a IndexedDB verificado correctamente');\r\n          testRequest.result.close();\r\n        };\r\n      } else {\r\n        resultado.errores.push('IndexedDB no está disponible en este navegador');\r\n      }\r\n    } catch (error) {\r\n      resultado.errores.push(`Error al verificar IndexedDB: ${error.message}`);\r\n    }\r\n\r\n  } catch (error) {\r\n    resultado.errores.push(`Error general: ${error.message}`);\r\n  }\r\n\r\n  return resultado;\r\n};\r\n\r\n/**\r\n * Intenta resolver problemas comunes de conexión a Firestore\r\n * @returns {Promise<Object>} Resultado del intento de reparación\r\n */\r\nexport const repararConexionFirestore = async () => {\r\n  const resultado = {\r\n    accionesRealizadas: [],\r\n    errores: [],\r\n    exito: false\r\n  };\r\n\r\n  try {\r\n    // 1. Forzar reconexión a la red\r\n    try {\r\n      resultado.accionesRealizadas.push('Desactivar red temporalmente');\r\n      await disableNetwork(db);\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      resultado.accionesRealizadas.push('Reactivar red');\r\n      await enableNetwork(db);\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n    } catch (error) {\r\n      resultado.errores.push(`Error al reiniciar conexión: ${error.message}`);\r\n    }\r\n\r\n    // 2. Verificar si la reparación tuvo éxito\r\n    const diagnostico = await diagnosticarFirestore();\r\n    if (diagnostico.estadoConexion === 'online') {\r\n      resultado.exito = true;\r\n      resultado.accionesRealizadas.push('Conexión restablecida correctamente');\r\n    } else {\r\n      resultado.exito = false;\r\n      resultado.errores.push('No se pudo restablecer la conexión');\r\n    }\r\n\r\n  } catch (error) {\r\n    resultado.errores.push(`Error durante la reparación: ${error.message}`);\r\n    resultado.exito = false;\r\n  }\r\n\r\n  return resultado;\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\utils\\firestoreCollection.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\utils\\pdfExport.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\utils\\sanitizeHtml.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\utils\\storage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\utils\\validateAttachments.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Administrator\\Documents\\Lovenda\\lovenda13123123 - copia\\src\\workers\\eventDetectorWorker.js","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":31,"column":27,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":31,"endColumn":28,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1107,1108],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1107,1107],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":31,"column":29,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":31,"endColumn":30,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1109,1110],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1109,1109],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":31,"column":42,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":31,"endColumn":43,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1122,1123],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1122,1122],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":31,"column":44,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":31,"endColumn":45,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1124,1125],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1124,1124],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is assigned a value but never used.","line":33,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'chunkSize' is assigned a value but never used.","line":177,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":177,"endColumn":35}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Web Worker para detectar eventos en emails largos sin bloquear la UI\n * Este worker analiza el contenido de un email buscando fechas, horas y ubicaciones\n * y envía los eventos detectados de vuelta al hilo principal\n */\n\n// Meses en español para la detección de fechas\nconst months = {\n  'enero': 0, 'febrero': 1, 'marzo': 2, 'abril': 3, 'mayo': 4, 'junio': 5,\n  'julio': 6, 'agosto': 7, 'septiembre': 8, 'octubre': 9, 'noviembre': 10, 'diciembre': 11\n};\n\n/**\n * Analiza un fragmento de texto en busca de eventos\n * @param {string} text - Fragmento de texto a analizar\n * @param {string} subject - Asunto del email\n * @param {number} startIndex - Índice inicial del fragmento en el texto completo\n * @param {number} chunkId - Identificador del fragmento\n * @return {Array} - Array de eventos detectados\n */\nfunction detectEventsInChunk(text, subject, startIndex, chunkId) {\n  if (!text) return [];\n  \n  try {\n    const events = [];\n    \n    // Expresiones regulares para detectar fechas en formato español\n    const datePatterns = [\n      // DD/MM/YYYY o DD-MM-YYYY\n      {\n        regex: /(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})/g,\n        parse: (match) => {\n          const [_, day, month, year] = match;\n          return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n        }\n      },\n      // DD de Mes de YYYY\n      {\n        regex: /(\\d{1,2}) de ([a-zñáéíóú]+)( de (\\d{4}))?/gi,\n        parse: (match) => {\n          const day = parseInt(match[1]);\n          const monthName = match[2].toLowerCase();\n          const month = months[monthName];\n          const year = match[4] ? parseInt(match[4]) : new Date().getFullYear();\n          \n          if (month !== undefined) {\n            return new Date(year, month, day);\n          }\n          return null;\n        }\n      }\n    ];\n    \n    // Expresión regular para detectar horas\n    const timeRegex = /(\\d{1,2}):(\\d{2})( ?(?:AM|PM|a\\.m\\.|p\\.m\\.))?/gi;\n    \n    // Expresiones para detectar ubicaciones\n    const locationPrefixes = [\n      'en ', 'en el ', 'en la ', 'en los ', 'en las ',\n      'lugar: ', 'ubicación: ', 'dirección: ', 'localización: '\n    ];\n    \n    // Buscar frases con potenciales ubicaciones\n    const locationMatches = [];\n    for (const prefix of locationPrefixes) {\n      const regex = new RegExp(`${prefix}([^\\\\.,\\\\n]{3,50})`, 'gi');\n      let match;\n      while ((match = regex.exec(text)) !== null) {\n        locationMatches.push({\n          text: match[1].trim(),\n          index: match.index + startIndex\n        });\n      }\n    }\n    \n    // Extraer fechas\n    for (const pattern of datePatterns) {\n      let match;\n      const regex = new RegExp(pattern.regex);\n      while ((match = regex.exec(text)) !== null) {\n        const date = pattern.parse(match);\n        if (date && !isNaN(date)) {\n          // Calcular el índice real en el texto completo\n          const realIndex = match.index + startIndex;\n          \n          // Buscar horas cercanas (dentro de 100 caracteres)\n          const surroundingText = text.substring(\n            Math.max(0, match.index - 100),\n            Math.min(text.length, match.index + match[0].length + 100)\n          );\n          \n          let timeMatch;\n          const timeMatches = [];\n          const timeRegexLocal = new RegExp(timeRegex);\n          while ((timeMatch = timeRegexLocal.exec(surroundingText)) !== null) {\n            const hour = parseInt(timeMatch[1]);\n            const minute = parseInt(timeMatch[2]);\n            const period = timeMatch[3] ? timeMatch[3].trim().toLowerCase() : null;\n            \n            // Ajustar hora para formato 24h si es necesario\n            let adjustedHour = hour;\n            if (period) {\n              if ((period === 'pm' || period === 'p.m.') && hour < 12) {\n                adjustedHour = hour + 12;\n              } else if ((period === 'am' || period === 'a.m.') && hour === 12) {\n                adjustedHour = 0;\n              }\n            }\n            \n            const eventDate = new Date(date);\n            eventDate.setHours(adjustedHour, minute, 0, 0);\n            \n            timeMatches.push(eventDate);\n          }\n          \n          // Si no hay hora específica, usar 9:00 AM como hora predeterminada\n          if (timeMatches.length === 0) {\n            const defaultDate = new Date(date);\n            defaultDate.setHours(9, 0, 0, 0);\n            timeMatches.push(defaultDate);\n          }\n          \n          // Buscar posible ubicación en contexto cercano\n          let eventLocation = '';\n          for (const loc of locationMatches) {\n            if (Math.abs(loc.index - realIndex) < 200) {\n              eventLocation = loc.text;\n              break;\n            }\n          }\n          \n          // Crear eventos para cada combinación de fecha y hora encontrada\n          for (const eventTime of timeMatches) {\n            // Generar un título tentativo basado en el asunto del email\n            // o usando patrones comunes en el texto cercano\n            let title = subject || 'Evento detectado';\n            \n            // Buscar palabras clave que suelen preceder a títulos de eventos\n            const titleKeywords = ['reunión', 'cita', 'evento', 'meeting', 'reserva'];\n            for (const keyword of titleKeywords) {\n              const keywordRegex = new RegExp(`${keyword}[\\\\s:]+([^\\\\.,\\\\n]{3,50})`, 'i');\n              const titleMatch = text.match(keywordRegex);\n              if (titleMatch) {\n                title = titleMatch[1].trim();\n                break;\n              }\n            }\n            \n            events.push({\n              title,\n              date: eventTime.toISOString(), // Convertir a ISO para serialización\n              location: eventLocation,\n              sourceText: match[0],\n              context: surroundingText,\n              chunkId\n            });\n          }\n        }\n      }\n    }\n    \n    return events;\n    \n  } catch (error) {\n    // Enviar error al hilo principal\n    self.postMessage({\n      type: 'error',\n      error: error.message,\n      chunkId\n    });\n    return [];\n  }\n}\n\n// Escuchar mensajes del hilo principal\nself.addEventListener('message', (e) => {\n  const { text, subject, chunkSize, chunkId, startIndex } = e.data;\n  \n  // Detectar eventos en este chunk\n  const events = detectEventsInChunk(text, subject, startIndex, chunkId);\n  \n  // Enviar resultados al hilo principal\n  self.postMessage({\n    type: 'result',\n    events,\n    chunkId,\n    isDone: true\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]